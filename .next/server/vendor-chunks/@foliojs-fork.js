/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@foliojs-fork";
exports.ids = ["vendor-chunks/@foliojs-fork"];
exports.modules = {

/***/ "(rsc)/./node_modules/@foliojs-fork/fontkit/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@foliojs-fork/fontkit/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar r = _interopDefault(__webpack_require__(/*! @foliojs-fork/restructure */ \"(rsc)/./node_modules/@foliojs-fork/restructure/index.js\"));\nvar utils = __webpack_require__(/*! @foliojs-fork/restructure/src/utils */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/utils.js\");\nvar isEqual = _interopDefault(__webpack_require__(/*! deep-equal */ \"(rsc)/./node_modules/deep-equal/index.js\"));\nvar unicode = _interopDefault(__webpack_require__(/*! unicode-properties */ \"(rsc)/./node_modules/unicode-properties/dist/main.cjs\"));\nvar UnicodeTrie = _interopDefault(__webpack_require__(/*! unicode-trie */ \"(rsc)/./node_modules/unicode-trie/index.js\"));\nvar StateMachine = _interopDefault(__webpack_require__(/*! dfa */ \"(rsc)/./node_modules/dfa/index.js\"));\nvar cloneDeep = _interopDefault(__webpack_require__(/*! clone */ \"(rsc)/./node_modules/clone/clone.js\"));\nvar inflate = _interopDefault(__webpack_require__(/*! tiny-inflate */ \"(rsc)/./node_modules/tiny-inflate/index.js\"));\nvar brotli = _interopDefault(__webpack_require__(/*! brotli/decompress */ \"(rsc)/./node_modules/brotli/decompress.js\"));\n\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\nvar fontkit = {};\nfontkit.logErrors = false;\nvar formats = [];\n\nfontkit.registerFormat = function (format) {\n  formats.push(format);\n};\n\nfontkit.openSync = function (filename, postscriptName) {\n  var buffer = fs.readFileSync(filename);\n  return fontkit.create(buffer, postscriptName);\n};\n\nfontkit.open = function (filename, postscriptName, callback) {\n  if (typeof postscriptName === 'function') {\n    callback = postscriptName;\n    postscriptName = null;\n  }\n\n  fs.readFile(filename, function (err, buffer) {\n    if (err) {\n      return callback(err);\n    }\n\n    try {\n      var font = fontkit.create(buffer, postscriptName);\n    } catch (e) {\n      return callback(e);\n    }\n\n    return callback(null, font);\n  });\n  return;\n};\n\nfontkit.create = function (buffer, postscriptName) {\n  for (var i = 0; i < formats.length; i++) {\n    var format = formats[i];\n\n    if (format.probe(buffer)) {\n      var font = new format(new r.DecodeStream(buffer));\n\n      if (postscriptName) {\n        return font.getFont(postscriptName);\n      }\n\n      return font;\n    }\n  }\n\n  throw new Error('Unknown font format');\n};\n\nfontkit.defaultLanguage = 'en';\n\nfontkit.setDefaultLanguage = function (lang = 'en') {\n  fontkit.defaultLanguage = lang;\n};\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object.keys(descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object.defineProperty(target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\n/**\r\n * This decorator caches the results of a getter or method such that\r\n * the results are lazily computed once, and then cached.\r\n * @private\r\n */\nfunction cache(target, key, descriptor) {\n  if (descriptor.get) {\n    var get = descriptor.get;\n\n    descriptor.get = function () {\n      var value = get.call(this);\n      Object.defineProperty(this, key, {\n        value\n      });\n      return value;\n    };\n  } else if (typeof descriptor.value === 'function') {\n    var fn = descriptor.value;\n    return {\n      get() {\n        var cache = new Map();\n\n        function memoized(...args) {\n          var key = args.length > 0 ? args[0] : 'value';\n\n          if (cache.has(key)) {\n            return cache.get(key);\n          }\n\n          var result = fn.apply(this, args);\n          cache.set(key, result);\n          return result;\n        }\n        Object.defineProperty(this, key, {\n          value: memoized\n        });\n        return memoized;\n      }\n\n    };\n  }\n}\n\nvar SubHeader = new r.Struct({\n  firstCode: r.uint16,\n  entryCount: r.uint16,\n  idDelta: r.int16,\n  idRangeOffset: r.uint16\n});\nvar CmapGroup = new r.Struct({\n  startCharCode: r.uint32,\n  endCharCode: r.uint32,\n  glyphID: r.uint32\n});\nvar UnicodeValueRange = new r.Struct({\n  startUnicodeValue: r.uint24,\n  additionalCount: r.uint8\n});\nvar UVSMapping = new r.Struct({\n  unicodeValue: r.uint24,\n  glyphID: r.uint16\n});\nvar DefaultUVS = new r.Array(UnicodeValueRange, r.uint32);\nvar NonDefaultUVS = new r.Array(UVSMapping, r.uint32);\nvar VarSelectorRecord = new r.Struct({\n  varSelector: r.uint24,\n  defaultUVS: new r.Pointer(r.uint32, DefaultUVS, {\n    type: 'parent'\n  }),\n  nonDefaultUVS: new r.Pointer(r.uint32, NonDefaultUVS, {\n    type: 'parent'\n  })\n});\nvar CmapSubtable = new r.VersionedStruct(r.uint16, {\n  0: {\n    // Byte encoding\n    length: r.uint16,\n    // Total table length in bytes (set to 262 for format 0)\n    language: r.uint16,\n    // Language code for this encoding subtable, or zero if language-independent\n    codeMap: new r.LazyArray(r.uint8, 256)\n  },\n  2: {\n    // High-byte mapping (CJK)\n    length: r.uint16,\n    language: r.uint16,\n    subHeaderKeys: new r.Array(r.uint16, 256),\n    subHeaderCount: t => Math.max.apply(Math, t.subHeaderKeys),\n    subHeaders: new r.LazyArray(SubHeader, 'subHeaderCount'),\n    glyphIndexArray: new r.LazyArray(r.uint16, 'subHeaderCount')\n  },\n  4: {\n    // Segment mapping to delta values\n    length: r.uint16,\n    // Total table length in bytes\n    language: r.uint16,\n    // Language code\n    segCountX2: r.uint16,\n    segCount: t => t.segCountX2 >> 1,\n    searchRange: r.uint16,\n    entrySelector: r.uint16,\n    rangeShift: r.uint16,\n    endCode: new r.LazyArray(r.uint16, 'segCount'),\n    reservedPad: new r.Reserved(r.uint16),\n    // This value should be zero\n    startCode: new r.LazyArray(r.uint16, 'segCount'),\n    idDelta: new r.LazyArray(r.int16, 'segCount'),\n    idRangeOffset: new r.LazyArray(r.uint16, 'segCount'),\n    glyphIndexArray: new r.LazyArray(r.uint16, t => (t.length - t._currentOffset) / 2)\n  },\n  6: {\n    // Trimmed table\n    length: r.uint16,\n    language: r.uint16,\n    firstCode: r.uint16,\n    entryCount: r.uint16,\n    glyphIndices: new r.LazyArray(r.uint16, 'entryCount')\n  },\n  8: {\n    // mixed 16-bit and 32-bit coverage\n    reserved: new r.Reserved(r.uint16),\n    length: r.uint32,\n    language: r.uint16,\n    is32: new r.LazyArray(r.uint8, 8192),\n    nGroups: r.uint32,\n    groups: new r.LazyArray(CmapGroup, 'nGroups')\n  },\n  10: {\n    // Trimmed Array\n    reserved: new r.Reserved(r.uint16),\n    length: r.uint32,\n    language: r.uint32,\n    firstCode: r.uint32,\n    entryCount: r.uint32,\n    glyphIndices: new r.LazyArray(r.uint16, 'numChars')\n  },\n  12: {\n    // Segmented coverage\n    reserved: new r.Reserved(r.uint16),\n    length: r.uint32,\n    language: r.uint32,\n    nGroups: r.uint32,\n    groups: new r.LazyArray(CmapGroup, 'nGroups')\n  },\n  13: {\n    // Many-to-one range mappings (same as 12 except for group.startGlyphID)\n    reserved: new r.Reserved(r.uint16),\n    length: r.uint32,\n    language: r.uint32,\n    nGroups: r.uint32,\n    groups: new r.LazyArray(CmapGroup, 'nGroups')\n  },\n  14: {\n    // Unicode Variation Sequences\n    length: r.uint32,\n    numRecords: r.uint32,\n    varSelectors: new r.LazyArray(VarSelectorRecord, 'numRecords')\n  }\n});\nvar CmapEntry = new r.Struct({\n  platformID: r.uint16,\n  // Platform identifier\n  encodingID: r.uint16,\n  // Platform-specific encoding identifier\n  table: new r.Pointer(r.uint32, CmapSubtable, {\n    type: 'parent',\n    lazy: true\n  })\n}); // character to glyph mapping\n\nvar cmap = new r.Struct({\n  version: r.uint16,\n  numSubtables: r.uint16,\n  tables: new r.Array(CmapEntry, 'numSubtables')\n});\n\nvar head = new r.Struct({\n  version: r.int32,\n  // 0x00010000 (version 1.0)\n  revision: r.int32,\n  // set by font manufacturer\n  checkSumAdjustment: r.uint32,\n  magicNumber: r.uint32,\n  // set to 0x5F0F3CF5\n  flags: r.uint16,\n  unitsPerEm: r.uint16,\n  // range from 64 to 16384\n  created: new r.Array(r.int32, 2),\n  modified: new r.Array(r.int32, 2),\n  xMin: r.int16,\n  // for all glyph bounding boxes\n  yMin: r.int16,\n  // for all glyph bounding boxes\n  xMax: r.int16,\n  // for all glyph bounding boxes\n  yMax: r.int16,\n  // for all glyph bounding boxes\n  macStyle: new r.Bitfield(r.uint16, ['bold', 'italic', 'underline', 'outline', 'shadow', 'condensed', 'extended']),\n  lowestRecPPEM: r.uint16,\n  // smallest readable size in pixels\n  fontDirectionHint: r.int16,\n  indexToLocFormat: r.int16,\n  // 0 for short offsets, 1 for long\n  glyphDataFormat: r.int16 // 0 for current format\n\n});\n\nvar hhea = new r.Struct({\n  version: r.int32,\n  ascent: r.int16,\n  // Distance from baseline of highest ascender\n  descent: r.int16,\n  // Distance from baseline of lowest descender\n  lineGap: r.int16,\n  // Typographic line gap\n  advanceWidthMax: r.uint16,\n  // Maximum advance width value in 'hmtx' table\n  minLeftSideBearing: r.int16,\n  // Maximum advance width value in 'hmtx' table\n  minRightSideBearing: r.int16,\n  // Minimum right sidebearing value\n  xMaxExtent: r.int16,\n  caretSlopeRise: r.int16,\n  // Used to calculate the slope of the cursor (rise/run); 1 for vertical\n  caretSlopeRun: r.int16,\n  // 0 for vertical\n  caretOffset: r.int16,\n  // Set to 0 for non-slanted fonts\n  reserved: new r.Reserved(r.int16, 4),\n  metricDataFormat: r.int16,\n  // 0 for current format\n  numberOfMetrics: r.uint16 // Number of advance widths in 'hmtx' table\n\n});\n\nvar HmtxEntry = new r.Struct({\n  advance: r.uint16,\n  bearing: r.int16\n});\nvar hmtx = new r.Struct({\n  metrics: new r.LazyArray(HmtxEntry, t => t.parent.hhea.numberOfMetrics),\n  bearings: new r.LazyArray(r.int16, t => t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics)\n});\n\nvar maxp = new r.Struct({\n  version: r.int32,\n  numGlyphs: r.uint16,\n  // The number of glyphs in the font\n  maxPoints: r.uint16,\n  // Maximum points in a non-composite glyph\n  maxContours: r.uint16,\n  // Maximum contours in a non-composite glyph\n  maxComponentPoints: r.uint16,\n  // Maximum points in a composite glyph\n  maxComponentContours: r.uint16,\n  // Maximum contours in a composite glyph\n  maxZones: r.uint16,\n  // 1 if instructions do not use the twilight zone, 2 otherwise\n  maxTwilightPoints: r.uint16,\n  // Maximum points used in Z0\n  maxStorage: r.uint16,\n  // Number of Storage Area locations\n  maxFunctionDefs: r.uint16,\n  // Number of FDEFs\n  maxInstructionDefs: r.uint16,\n  // Number of IDEFs\n  maxStackElements: r.uint16,\n  // Maximum stack depth\n  maxSizeOfInstructions: r.uint16,\n  // Maximum byte count for glyph instructions\n  maxComponentElements: r.uint16,\n  // Maximum number of components referenced at “top level” for any composite glyph\n  maxComponentDepth: r.uint16 // Maximum levels of recursion; 1 for simple components\n\n});\n\n/**\r\n * Gets an encoding name from platform, encoding, and language ids.\r\n * Returned encoding names can be used in iconv-lite to decode text.\r\n */\nfunction getEncoding(platformID, encodingID, languageID = 0) {\n  if (platformID === 1 && MAC_LANGUAGE_ENCODINGS[languageID]) {\n    return MAC_LANGUAGE_ENCODINGS[languageID];\n  }\n\n  return ENCODINGS[platformID][encodingID];\n} // Map of platform ids to encoding ids.\n\nvar ENCODINGS = [// unicode\n['utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be'], // macintosh\n// Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/\n// 0\tRoman                 17\tMalayalam\n// 1\tJapanese\t            18\tSinhalese\n// 2\tTraditional Chinese\t  19\tBurmese\n// 3\tKorean\t              20\tKhmer\n// 4\tArabic\t              21\tThai\n// 5\tHebrew\t              22\tLaotian\n// 6\tGreek\t                23\tGeorgian\n// 7\tRussian\t              24\tArmenian\n// 8\tRSymbol\t              25\tSimplified Chinese\n// 9\tDevanagari\t          26\tTibetan\n// 10\tGurmukhi\t            27\tMongolian\n// 11\tGujarati\t            28\tGeez\n// 12\tOriya\t                29\tSlavic\n// 13\tBengali\t              30\tVietnamese\n// 14\tTamil\t                31\tSindhi\n// 15\tTelugu\t              32\t(Uninterpreted)\n// 16\tKannada\n['macroman', 'shift-jis', 'big5', 'euc-kr', 'iso-8859-6', 'iso-8859-8', 'macgreek', 'maccyrillic', 'symbol', 'Devanagari', 'Gurmukhi', 'Gujarati', 'Oriya', 'Bengali', 'Tamil', 'Telugu', 'Kannada', 'Malayalam', 'Sinhalese', 'Burmese', 'Khmer', 'macthai', 'Laotian', 'Georgian', 'Armenian', 'gb-2312-80', 'Tibetan', 'Mongolian', 'Geez', 'maccenteuro', 'Vietnamese', 'Sindhi'], // ISO (deprecated)\n['ascii'], // windows\n// Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx\n['symbol', 'utf16be', 'shift-jis', 'gb18030', 'big5', 'wansung', 'johab', null, null, null, 'utf16be']]; // Overrides for Mac scripts by language id.\n// See http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\n\nvar MAC_LANGUAGE_ENCODINGS = {\n  15: 'maciceland',\n  17: 'macturkish',\n  18: 'maccroatian',\n  24: 'maccenteuro',\n  25: 'maccenteuro',\n  26: 'maccenteuro',\n  27: 'maccenteuro',\n  28: 'maccenteuro',\n  30: 'maciceland',\n  37: 'macromania',\n  38: 'maccenteuro',\n  39: 'maccenteuro',\n  40: 'maccenteuro',\n  143: 'macinuit',\n  // Unsupported by iconv-lite\n  146: 'macgaelic' // Unsupported by iconv-lite\n\n}; // Map of platform ids to BCP-47 language codes.\n\nvar LANGUAGES = [// unicode\n[], {\n  // macintosh\n  0: 'en',\n  30: 'fo',\n  60: 'ks',\n  90: 'rw',\n  1: 'fr',\n  31: 'fa',\n  61: 'ku',\n  91: 'rn',\n  2: 'de',\n  32: 'ru',\n  62: 'sd',\n  92: 'ny',\n  3: 'it',\n  33: 'zh',\n  63: 'bo',\n  93: 'mg',\n  4: 'nl',\n  34: 'nl-BE',\n  64: 'ne',\n  94: 'eo',\n  5: 'sv',\n  35: 'ga',\n  65: 'sa',\n  128: 'cy',\n  6: 'es',\n  36: 'sq',\n  66: 'mr',\n  129: 'eu',\n  7: 'da',\n  37: 'ro',\n  67: 'bn',\n  130: 'ca',\n  8: 'pt',\n  38: 'cz',\n  68: 'as',\n  131: 'la',\n  9: 'no',\n  39: 'sk',\n  69: 'gu',\n  132: 'qu',\n  10: 'he',\n  40: 'si',\n  70: 'pa',\n  133: 'gn',\n  11: 'ja',\n  41: 'yi',\n  71: 'or',\n  134: 'ay',\n  12: 'ar',\n  42: 'sr',\n  72: 'ml',\n  135: 'tt',\n  13: 'fi',\n  43: 'mk',\n  73: 'kn',\n  136: 'ug',\n  14: 'el',\n  44: 'bg',\n  74: 'ta',\n  137: 'dz',\n  15: 'is',\n  45: 'uk',\n  75: 'te',\n  138: 'jv',\n  16: 'mt',\n  46: 'be',\n  76: 'si',\n  139: 'su',\n  17: 'tr',\n  47: 'uz',\n  77: 'my',\n  140: 'gl',\n  18: 'hr',\n  48: 'kk',\n  78: 'km',\n  141: 'af',\n  19: 'zh-Hant',\n  49: 'az-Cyrl',\n  79: 'lo',\n  142: 'br',\n  20: 'ur',\n  50: 'az-Arab',\n  80: 'vi',\n  143: 'iu',\n  21: 'hi',\n  51: 'hy',\n  81: 'id',\n  144: 'gd',\n  22: 'th',\n  52: 'ka',\n  82: 'tl',\n  145: 'gv',\n  23: 'ko',\n  53: 'mo',\n  83: 'ms',\n  146: 'ga',\n  24: 'lt',\n  54: 'ky',\n  84: 'ms-Arab',\n  147: 'to',\n  25: 'pl',\n  55: 'tg',\n  85: 'am',\n  148: 'el-polyton',\n  26: 'hu',\n  56: 'tk',\n  86: 'ti',\n  149: 'kl',\n  27: 'es',\n  57: 'mn-CN',\n  87: 'om',\n  150: 'az',\n  28: 'lv',\n  58: 'mn',\n  88: 'so',\n  151: 'nn',\n  29: 'se',\n  59: 'ps',\n  89: 'sw'\n}, // ISO (deprecated)\n[], {\n  // windows                                        \n  0x0436: 'af',\n  0x4009: 'en-IN',\n  0x0487: 'rw',\n  0x0432: 'tn',\n  0x041C: 'sq',\n  0x1809: 'en-IE',\n  0x0441: 'sw',\n  0x045B: 'si',\n  0x0484: 'gsw',\n  0x2009: 'en-JM',\n  0x0457: 'kok',\n  0x041B: 'sk',\n  0x045E: 'am',\n  0x4409: 'en-MY',\n  0x0412: 'ko',\n  0x0424: 'sl',\n  0x1401: 'ar-DZ',\n  0x1409: 'en-NZ',\n  0x0440: 'ky',\n  0x2C0A: 'es-AR',\n  0x3C01: 'ar-BH',\n  0x3409: 'en-PH',\n  0x0454: 'lo',\n  0x400A: 'es-BO',\n  0x0C01: 'ar',\n  0x4809: 'en-SG',\n  0x0426: 'lv',\n  0x340A: 'es-CL',\n  0x0801: 'ar-IQ',\n  0x1C09: 'en-ZA',\n  0x0427: 'lt',\n  0x240A: 'es-CO',\n  0x2C01: 'ar-JO',\n  0x2C09: 'en-TT',\n  0x082E: 'dsb',\n  0x140A: 'es-CR',\n  0x3401: 'ar-KW',\n  0x0809: 'en-GB',\n  0x046E: 'lb',\n  0x1C0A: 'es-DO',\n  0x3001: 'ar-LB',\n  0x0409: 'en',\n  0x042F: 'mk',\n  0x300A: 'es-EC',\n  0x1001: 'ar-LY',\n  0x3009: 'en-ZW',\n  0x083E: 'ms-BN',\n  0x440A: 'es-SV',\n  0x1801: 'ary',\n  0x0425: 'et',\n  0x043E: 'ms',\n  0x100A: 'es-GT',\n  0x2001: 'ar-OM',\n  0x0438: 'fo',\n  0x044C: 'ml',\n  0x480A: 'es-HN',\n  0x4001: 'ar-QA',\n  0x0464: 'fil',\n  0x043A: 'mt',\n  0x080A: 'es-MX',\n  0x0401: 'ar-SA',\n  0x040B: 'fi',\n  0x0481: 'mi',\n  0x4C0A: 'es-NI',\n  0x2801: 'ar-SY',\n  0x080C: 'fr-BE',\n  0x047A: 'arn',\n  0x180A: 'es-PA',\n  0x1C01: 'aeb',\n  0x0C0C: 'fr-CA',\n  0x044E: 'mr',\n  0x3C0A: 'es-PY',\n  0x3801: 'ar-AE',\n  0x040C: 'fr',\n  0x047C: 'moh',\n  0x280A: 'es-PE',\n  0x2401: 'ar-YE',\n  0x140C: 'fr-LU',\n  0x0450: 'mn',\n  0x500A: 'es-PR',\n  0x042B: 'hy',\n  0x180C: 'fr-MC',\n  0x0850: 'mn-CN',\n  0x0C0A: 'es',\n  0x044D: 'as',\n  0x100C: 'fr-CH',\n  0x0461: 'ne',\n  0x040A: 'es',\n  0x082C: 'az-Cyrl',\n  0x0462: 'fy',\n  0x0414: 'nb',\n  0x540A: 'es-US',\n  0x042C: 'az',\n  0x0456: 'gl',\n  0x0814: 'nn',\n  0x380A: 'es-UY',\n  0x046D: 'ba',\n  0x0437: 'ka',\n  0x0482: 'oc',\n  0x200A: 'es-VE',\n  0x042D: 'eu',\n  0x0C07: 'de-AT',\n  0x0448: 'or',\n  0x081D: 'sv-FI',\n  0x0423: 'be',\n  0x0407: 'de',\n  0x0463: 'ps',\n  0x041D: 'sv',\n  0x0845: 'bn',\n  0x1407: 'de-LI',\n  0x0415: 'pl',\n  0x045A: 'syr',\n  0x0445: 'bn-IN',\n  0x1007: 'de-LU',\n  0x0416: 'pt',\n  0x0428: 'tg',\n  0x201A: 'bs-Cyrl',\n  0x0807: 'de-CH',\n  0x0816: 'pt-PT',\n  0x085F: 'tzm',\n  0x141A: 'bs',\n  0x0408: 'el',\n  0x0446: 'pa',\n  0x0449: 'ta',\n  0x047E: 'br',\n  0x046F: 'kl',\n  0x046B: 'qu-BO',\n  0x0444: 'tt',\n  0x0402: 'bg',\n  0x0447: 'gu',\n  0x086B: 'qu-EC',\n  0x044A: 'te',\n  0x0403: 'ca',\n  0x0468: 'ha',\n  0x0C6B: 'qu',\n  0x041E: 'th',\n  0x0C04: 'zh-HK',\n  0x040D: 'he',\n  0x0418: 'ro',\n  0x0451: 'bo',\n  0x1404: 'zh-MO',\n  0x0439: 'hi',\n  0x0417: 'rm',\n  0x041F: 'tr',\n  0x0804: 'zh',\n  0x040E: 'hu',\n  0x0419: 'ru',\n  0x0442: 'tk',\n  0x1004: 'zh-SG',\n  0x040F: 'is',\n  0x243B: 'smn',\n  0x0480: 'ug',\n  0x0404: 'zh-TW',\n  0x0470: 'ig',\n  0x103B: 'smj-NO',\n  0x0422: 'uk',\n  0x0483: 'co',\n  0x0421: 'id',\n  0x143B: 'smj',\n  0x042E: 'hsb',\n  0x041A: 'hr',\n  0x045D: 'iu',\n  0x0C3B: 'se-FI',\n  0x0420: 'ur',\n  0x101A: 'hr-BA',\n  0x085D: 'iu-Latn',\n  0x043B: 'se',\n  0x0843: 'uz-Cyrl',\n  0x0405: 'cs',\n  0x083C: 'ga',\n  0x083B: 'se-SE',\n  0x0443: 'uz',\n  0x0406: 'da',\n  0x0434: 'xh',\n  0x203B: 'sms',\n  0x042A: 'vi',\n  0x048C: 'prs',\n  0x0435: 'zu',\n  0x183B: 'sma-NO',\n  0x0452: 'cy',\n  0x0465: 'dv',\n  0x0410: 'it',\n  0x1C3B: 'sms',\n  0x0488: 'wo',\n  0x0813: 'nl-BE',\n  0x0810: 'it-CH',\n  0x044F: 'sa',\n  0x0485: 'sah',\n  0x0413: 'nl',\n  0x0411: 'ja',\n  0x1C1A: 'sr-Cyrl-BA',\n  0x0478: 'ii',\n  0x0C09: 'en-AU',\n  0x044B: 'kn',\n  0x0C1A: 'sr',\n  0x046A: 'yo',\n  0x2809: 'en-BZ',\n  0x043F: 'kk',\n  0x181A: 'sr-Latn-BA',\n  0x1009: 'en-CA',\n  0x0453: 'km',\n  0x081A: 'sr-Latn',\n  0x2409: 'en-029',\n  0x0486: 'quc',\n  0x046C: 'nso'\n}];\n\nvar NameRecord = new r.Struct({\n  platformID: r.uint16,\n  encodingID: r.uint16,\n  languageID: r.uint16,\n  nameID: r.uint16,\n  length: r.uint16,\n  string: new r.Pointer(r.uint16, new r.String('length', t => getEncoding(t.platformID, t.encodingID, t.languageID)), {\n    type: 'parent',\n    relativeTo: ctx => ctx.parent.stringOffset,\n    allowNull: false\n  })\n});\nvar LangTagRecord = new r.Struct({\n  length: r.uint16,\n  tag: new r.Pointer(r.uint16, new r.String('length', 'utf16be'), {\n    type: 'parent',\n    relativeTo: ctx => ctx.stringOffset\n  })\n});\nvar NameTable = new r.VersionedStruct(r.uint16, {\n  0: {\n    count: r.uint16,\n    stringOffset: r.uint16,\n    records: new r.Array(NameRecord, 'count')\n  },\n  1: {\n    count: r.uint16,\n    stringOffset: r.uint16,\n    records: new r.Array(NameRecord, 'count'),\n    langTagCount: r.uint16,\n    langTags: new r.Array(LangTagRecord, 'langTagCount')\n  }\n});\nvar NAMES = ['copyright', 'fontFamily', 'fontSubfamily', 'uniqueSubfamily', 'fullName', 'version', 'postscriptName', // Note: A font may have only one PostScript name and that name must be ASCII.\n'trademark', 'manufacturer', 'designer', 'description', 'vendorURL', 'designerURL', 'license', 'licenseURL', null, // reserved\n'preferredFamily', 'preferredSubfamily', 'compatibleFull', 'sampleText', 'postscriptCIDFontName', 'wwsFamilyName', 'wwsSubfamilyName'];\n\nNameTable.process = function (stream) {\n  var records = {};\n\n  for (var record of this.records) {\n    // find out what language this is for\n    var language = LANGUAGES[record.platformID][record.languageID];\n\n    if (language == null && this.langTags != null && record.languageID >= 0x8000) {\n      language = this.langTags[record.languageID - 0x8000].tag;\n    }\n\n    if (language == null) {\n      language = record.platformID + '-' + record.languageID;\n    } // if the nameID is >= 256, it is a font feature record (AAT)\n\n\n    var key = record.nameID >= 256 ? 'fontFeatures' : NAMES[record.nameID] || record.nameID;\n\n    if (records[key] == null) {\n      records[key] = {};\n    }\n\n    var obj = records[key];\n\n    if (record.nameID >= 256) {\n      obj = obj[record.nameID] || (obj[record.nameID] = {});\n    }\n\n    if (typeof record.string === 'string' || typeof obj[language] !== 'string') {\n      obj[language] = record.string;\n    }\n  }\n\n  this.records = records;\n};\n\nNameTable.preEncode = function () {\n  if (Array.isArray(this.records)) return;\n  this.version = 0;\n  var records = [];\n\n  for (var key in this.records) {\n    var val = this.records[key];\n    if (key === 'fontFeatures') continue;\n    records.push({\n      platformID: 3,\n      encodingID: 1,\n      languageID: 0x409,\n      nameID: NAMES.indexOf(key),\n      length: Buffer.byteLength(val.en, 'utf16le'),\n      string: val.en\n    });\n\n    if (key === 'postscriptName') {\n      records.push({\n        platformID: 1,\n        encodingID: 0,\n        languageID: 0,\n        nameID: NAMES.indexOf(key),\n        length: val.en.length,\n        string: val.en\n      });\n    }\n  }\n\n  this.records = records;\n  this.count = records.length;\n  this.stringOffset = NameTable.size(this, null, false);\n};\n\nvar OS2 = new r.VersionedStruct(r.uint16, {\n  header: {\n    xAvgCharWidth: r.int16,\n    // average weighted advance width of lower case letters and space\n    usWeightClass: r.uint16,\n    // visual weight of stroke in glyphs\n    usWidthClass: r.uint16,\n    // relative change from the normal aspect ratio (width to height ratio)\n    fsType: new r.Bitfield(r.uint16, [// Indicates font embedding licensing rights\n    null, 'noEmbedding', 'viewOnly', 'editable', null, null, null, null, 'noSubsetting', 'bitmapOnly']),\n    ySubscriptXSize: r.int16,\n    // recommended horizontal size in pixels for subscripts\n    ySubscriptYSize: r.int16,\n    // recommended vertical size in pixels for subscripts\n    ySubscriptXOffset: r.int16,\n    // recommended horizontal offset for subscripts\n    ySubscriptYOffset: r.int16,\n    // recommended vertical offset form the baseline for subscripts\n    ySuperscriptXSize: r.int16,\n    // recommended horizontal size in pixels for superscripts\n    ySuperscriptYSize: r.int16,\n    // recommended vertical size in pixels for superscripts\n    ySuperscriptXOffset: r.int16,\n    // recommended horizontal offset for superscripts\n    ySuperscriptYOffset: r.int16,\n    // recommended vertical offset from the baseline for superscripts\n    yStrikeoutSize: r.int16,\n    // width of the strikeout stroke\n    yStrikeoutPosition: r.int16,\n    // position of the strikeout stroke relative to the baseline\n    sFamilyClass: r.int16,\n    // classification of font-family design\n    panose: new r.Array(r.uint8, 10),\n    // describe the visual characteristics of a given typeface\n    ulCharRange: new r.Array(r.uint32, 4),\n    vendorID: new r.String(4),\n    // four character identifier for the font vendor\n    fsSelection: new r.Bitfield(r.uint16, [// bit field containing information about the font\n    'italic', 'underscore', 'negative', 'outlined', 'strikeout', 'bold', 'regular', 'useTypoMetrics', 'wws', 'oblique']),\n    usFirstCharIndex: r.uint16,\n    // The minimum Unicode index in this font\n    usLastCharIndex: r.uint16 // The maximum Unicode index in this font\n\n  },\n  // The Apple version of this table ends here, but the Microsoft one continues on...\n  0: {},\n  1: {\n    typoAscender: r.int16,\n    typoDescender: r.int16,\n    typoLineGap: r.int16,\n    winAscent: r.uint16,\n    winDescent: r.uint16,\n    codePageRange: new r.Array(r.uint32, 2)\n  },\n  2: {\n    // these should be common with version 1 somehow\n    typoAscender: r.int16,\n    typoDescender: r.int16,\n    typoLineGap: r.int16,\n    winAscent: r.uint16,\n    winDescent: r.uint16,\n    codePageRange: new r.Array(r.uint32, 2),\n    xHeight: r.int16,\n    capHeight: r.int16,\n    defaultChar: r.uint16,\n    breakChar: r.uint16,\n    maxContent: r.uint16\n  },\n  5: {\n    typoAscender: r.int16,\n    typoDescender: r.int16,\n    typoLineGap: r.int16,\n    winAscent: r.uint16,\n    winDescent: r.uint16,\n    codePageRange: new r.Array(r.uint32, 2),\n    xHeight: r.int16,\n    capHeight: r.int16,\n    defaultChar: r.uint16,\n    breakChar: r.uint16,\n    maxContent: r.uint16,\n    usLowerOpticalPointSize: r.uint16,\n    usUpperOpticalPointSize: r.uint16\n  }\n});\nvar versions = OS2.versions;\nversions[3] = versions[4] = versions[2];\n\nvar post = new r.VersionedStruct(r.fixed32, {\n  header: {\n    // these fields exist at the top of all versions\n    italicAngle: r.fixed32,\n    // Italic angle in counter-clockwise degrees from the vertical.\n    underlinePosition: r.int16,\n    // Suggested distance of the top of the underline from the baseline\n    underlineThickness: r.int16,\n    // Suggested values for the underline thickness\n    isFixedPitch: r.uint32,\n    // Whether the font is monospaced\n    minMemType42: r.uint32,\n    // Minimum memory usage when a TrueType font is downloaded as a Type 42 font\n    maxMemType42: r.uint32,\n    // Maximum memory usage when a TrueType font is downloaded as a Type 42 font\n    minMemType1: r.uint32,\n    // Minimum memory usage when a TrueType font is downloaded as a Type 1 font\n    maxMemType1: r.uint32 // Maximum memory usage when a TrueType font is downloaded as a Type 1 font\n\n  },\n  1: {},\n  // version 1 has no additional fields\n  2: {\n    numberOfGlyphs: r.uint16,\n    glyphNameIndex: new r.Array(r.uint16, 'numberOfGlyphs'),\n    names: new r.Array(new r.String(r.uint8))\n  },\n  2.5: {\n    numberOfGlyphs: r.uint16,\n    offsets: new r.Array(r.uint8, 'numberOfGlyphs')\n  },\n  3: {},\n  // version 3 has no additional fields\n  4: {\n    map: new r.Array(r.uint32, t => t.parent.maxp.numGlyphs)\n  }\n});\n\nvar cvt = new r.Struct({\n  controlValues: new r.Array(r.int16)\n});\n\n// These instructions are known as the font program. The main use of this table\n// is for the definition of functions that are used in many different glyph programs.\n\nvar fpgm = new r.Struct({\n  instructions: new r.Array(r.uint8)\n});\n\nvar loca = new r.VersionedStruct('head.indexToLocFormat', {\n  0: {\n    offsets: new r.Array(r.uint16)\n  },\n  1: {\n    offsets: new r.Array(r.uint32)\n  }\n});\n\nloca.process = function () {\n  if (this.version === 0) {\n    for (var i = 0; i < this.offsets.length; i++) {\n      this.offsets[i] <<= 1;\n    }\n  }\n};\n\nloca.preEncode = function () {\n  if (this.version === 0) {\n    for (var i = 0; i < this.offsets.length; i++) {\n      this.offsets[i] >>>= 1;\n    }\n  }\n};\n\nvar prep = new r.Struct({\n  controlValueProgram: new r.Array(r.uint8)\n});\n\nvar glyf = new r.Array(new r.Buffer());\n\nclass CFFIndex {\n  constructor(type) {\n    this.type = type;\n  }\n\n  getCFFVersion(ctx) {\n    while (ctx && !ctx.hdrSize) {\n      ctx = ctx.parent;\n    }\n\n    return ctx ? ctx.version : -1;\n  }\n\n  decode(stream, parent) {\n    var version = this.getCFFVersion(parent);\n    var count = version >= 2 ? stream.readUInt32BE() : stream.readUInt16BE();\n\n    if (count === 0) {\n      return [];\n    }\n\n    var offSize = stream.readUInt8();\n    var offsetType;\n\n    if (offSize === 1) {\n      offsetType = r.uint8;\n    } else if (offSize === 2) {\n      offsetType = r.uint16;\n    } else if (offSize === 3) {\n      offsetType = r.uint24;\n    } else if (offSize === 4) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(\"Bad offset size in CFFIndex: \".concat(offSize, \" \").concat(stream.pos));\n    }\n\n    var ret = [];\n    var startPos = stream.pos + (count + 1) * offSize - 1;\n    var start = offsetType.decode(stream);\n\n    for (var i = 0; i < count; i++) {\n      var end = offsetType.decode(stream);\n\n      if (this.type != null) {\n        var pos = stream.pos;\n        stream.pos = startPos + start;\n        parent.length = end - start;\n        ret.push(this.type.decode(stream, parent));\n        stream.pos = pos;\n      } else {\n        ret.push({\n          offset: startPos + start,\n          length: end - start\n        });\n      }\n\n      start = end;\n    }\n\n    stream.pos = startPos + start;\n    return ret;\n  }\n\n  size(arr, parent) {\n    var size = 2;\n\n    if (arr.length === 0) {\n      return size;\n    }\n\n    var type = this.type || new r.Buffer(); // find maximum offset to detminine offset type\n\n    var offset = 1;\n\n    for (var i = 0; i < arr.length; i++) {\n      var item = arr[i];\n      offset += type.size(item, parent);\n    }\n\n    var offsetType;\n\n    if (offset <= 0xff) {\n      offsetType = r.uint8;\n    } else if (offset <= 0xffff) {\n      offsetType = r.uint16;\n    } else if (offset <= 0xffffff) {\n      offsetType = r.uint24;\n    } else if (offset <= 0xffffffff) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(\"Bad offset in CFFIndex\");\n    }\n\n    size += 1 + offsetType.size() * (arr.length + 1);\n    size += offset - 1;\n    return size;\n  }\n\n  encode(stream, arr, parent) {\n    stream.writeUInt16BE(arr.length);\n\n    if (arr.length === 0) {\n      return;\n    }\n\n    var type = this.type || new r.Buffer(); // find maximum offset to detminine offset type\n\n    var sizes = [];\n    var offset = 1;\n\n    for (var item of arr) {\n      var s = type.size(item, parent);\n      sizes.push(s);\n      offset += s;\n    }\n\n    var offsetType;\n\n    if (offset <= 0xff) {\n      offsetType = r.uint8;\n    } else if (offset <= 0xffff) {\n      offsetType = r.uint16;\n    } else if (offset <= 0xffffff) {\n      offsetType = r.uint24;\n    } else if (offset <= 0xffffffff) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(\"Bad offset in CFFIndex\");\n    } // write offset size\n\n\n    stream.writeUInt8(offsetType.size()); // write elements\n\n    offset = 1;\n    offsetType.encode(stream, offset);\n\n    for (var size of sizes) {\n      offset += size;\n      offsetType.encode(stream, offset);\n    }\n\n    for (var _item of arr) {\n      type.encode(stream, _item, parent);\n    }\n\n    return;\n  }\n\n}\n\nvar FLOAT_EOF = 0xf;\nvar FLOAT_LOOKUP = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];\nvar FLOAT_ENCODE_LOOKUP = {\n  '.': 10,\n  'E': 11,\n  'E-': 12,\n  '-': 14\n};\nclass CFFOperand {\n  static decode(stream, value) {\n    if (32 <= value && value <= 246) {\n      return value - 139;\n    }\n\n    if (247 <= value && value <= 250) {\n      return (value - 247) * 256 + stream.readUInt8() + 108;\n    }\n\n    if (251 <= value && value <= 254) {\n      return -(value - 251) * 256 - stream.readUInt8() - 108;\n    }\n\n    if (value === 28) {\n      return stream.readInt16BE();\n    }\n\n    if (value === 29) {\n      return stream.readInt32BE();\n    }\n\n    if (value === 30) {\n      var str = '';\n\n      while (true) {\n        var b = stream.readUInt8();\n        var n1 = b >> 4;\n\n        if (n1 === FLOAT_EOF) {\n          break;\n        }\n\n        str += FLOAT_LOOKUP[n1];\n        var n2 = b & 15;\n\n        if (n2 === FLOAT_EOF) {\n          break;\n        }\n\n        str += FLOAT_LOOKUP[n2];\n      }\n\n      return parseFloat(str);\n    }\n\n    return null;\n  }\n\n  static size(value) {\n    // if the value needs to be forced to the largest size (32 bit)\n    // e.g. for unknown pointers, set to 32768\n    if (value.forceLarge) {\n      value = 32768;\n    }\n\n    if ((value | 0) !== value) {\n      // floating point\n      var str = '' + value;\n      return 1 + Math.ceil((str.length + 1) / 2);\n    } else if (-107 <= value && value <= 107) {\n      return 1;\n    } else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) {\n      return 2;\n    } else if (-32768 <= value && value <= 32767) {\n      return 3;\n    } else {\n      return 5;\n    }\n  }\n\n  static encode(stream, value) {\n    // if the value needs to be forced to the largest size (32 bit)\n    // e.g. for unknown pointers, save the old value and set to 32768\n    var val = Number(value);\n\n    if (value.forceLarge) {\n      stream.writeUInt8(29);\n      return stream.writeInt32BE(val);\n    } else if ((val | 0) !== val) {\n      // floating point\n      stream.writeUInt8(30);\n      var str = '' + val;\n\n      for (var i = 0; i < str.length; i += 2) {\n        var c1 = str[i];\n        var n1 = FLOAT_ENCODE_LOOKUP[c1] || +c1;\n\n        if (i === str.length - 1) {\n          var n2 = FLOAT_EOF;\n        } else {\n          var c2 = str[i + 1];\n          var n2 = FLOAT_ENCODE_LOOKUP[c2] || +c2;\n        }\n\n        stream.writeUInt8(n1 << 4 | n2 & 15);\n      }\n\n      if (n2 !== FLOAT_EOF) {\n        return stream.writeUInt8(FLOAT_EOF << 4);\n      }\n    } else if (-107 <= val && val <= 107) {\n      return stream.writeUInt8(val + 139);\n    } else if (108 <= val && val <= 1131) {\n      val -= 108;\n      stream.writeUInt8((val >> 8) + 247);\n      return stream.writeUInt8(val & 0xff);\n    } else if (-1131 <= val && val <= -108) {\n      val = -val - 108;\n      stream.writeUInt8((val >> 8) + 251);\n      return stream.writeUInt8(val & 0xff);\n    } else if (-32768 <= val && val <= 32767) {\n      stream.writeUInt8(28);\n      return stream.writeInt16BE(val);\n    } else {\n      stream.writeUInt8(29);\n      return stream.writeInt32BE(val);\n    }\n  }\n\n}\n\nclass CFFDict {\n  constructor(ops = []) {\n    this.ops = ops;\n    this.fields = {};\n\n    for (var field of ops) {\n      var key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];\n      this.fields[key] = field;\n    }\n  }\n\n  decodeOperands(type, stream, ret, operands) {\n    if (Array.isArray(type)) {\n      return operands.map((op, i) => this.decodeOperands(type[i], stream, ret, [op]));\n    } else if (type.decode != null) {\n      return type.decode(stream, ret, operands);\n    } else {\n      switch (type) {\n        case 'number':\n        case 'offset':\n        case 'sid':\n          return operands[0];\n\n        case 'boolean':\n          return !!operands[0];\n\n        default:\n          return operands;\n      }\n    }\n  }\n\n  encodeOperands(type, stream, ctx, operands) {\n    if (Array.isArray(type)) {\n      return operands.map((op, i) => this.encodeOperands(type[i], stream, ctx, op)[0]);\n    } else if (type.encode != null) {\n      return type.encode(stream, operands, ctx);\n    } else if (typeof operands === 'number') {\n      return [operands];\n    } else if (typeof operands === 'boolean') {\n      return [+operands];\n    } else if (Array.isArray(operands)) {\n      return operands;\n    } else {\n      return [operands];\n    }\n  }\n\n  decode(stream, parent) {\n    var end = stream.pos + parent.length;\n    var ret = {};\n    var operands = []; // define hidden properties\n\n    Object.defineProperties(ret, {\n      parent: {\n        value: parent\n      },\n      _startOffset: {\n        value: stream.pos\n      }\n    }); // fill in defaults\n\n    for (var key in this.fields) {\n      var field = this.fields[key];\n      ret[field[1]] = field[3];\n    }\n\n    while (stream.pos < end) {\n      var b = stream.readUInt8();\n\n      if (b < 28) {\n        if (b === 12) {\n          b = b << 8 | stream.readUInt8();\n        }\n\n        var _field = this.fields[b];\n\n        if (!_field) {\n          throw new Error(\"Unknown operator \".concat(b));\n        }\n\n        var val = this.decodeOperands(_field[2], stream, ret, operands);\n\n        if (val != null) {\n          if (val instanceof utils.PropertyDescriptor) {\n            Object.defineProperty(ret, _field[1], val);\n          } else {\n            ret[_field[1]] = val;\n          }\n        }\n\n        operands = [];\n      } else {\n        operands.push(CFFOperand.decode(stream, b));\n      }\n    }\n\n    return ret;\n  }\n\n  size(dict, parent, includePointers = true) {\n    var ctx = {\n      parent,\n      val: dict,\n      pointerSize: 0,\n      startOffset: parent.startOffset || 0\n    };\n    var len = 0;\n\n    for (var k in this.fields) {\n      var field = this.fields[k];\n      var val = dict[field[1]];\n\n      if (val == null || isEqual(val, field[3])) {\n        continue;\n      }\n\n      var operands = this.encodeOperands(field[2], null, ctx, val);\n\n      for (var op of operands) {\n        len += CFFOperand.size(op);\n      }\n\n      var key = Array.isArray(field[0]) ? field[0] : [field[0]];\n      len += key.length;\n    }\n\n    if (includePointers) {\n      len += ctx.pointerSize;\n    }\n\n    return len;\n  }\n\n  encode(stream, dict, parent) {\n    var ctx = {\n      pointers: [],\n      startOffset: stream.pos,\n      parent,\n      val: dict,\n      pointerSize: 0\n    };\n    ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);\n\n    for (var field of this.ops) {\n      var val = dict[field[1]];\n\n      if (val == null || isEqual(val, field[3])) {\n        continue;\n      }\n\n      var operands = this.encodeOperands(field[2], stream, ctx, val);\n\n      for (var op of operands) {\n        CFFOperand.encode(stream, op);\n      }\n\n      var key = Array.isArray(field[0]) ? field[0] : [field[0]];\n\n      for (var _op of key) {\n        stream.writeUInt8(_op);\n      }\n    }\n\n    var i = 0;\n\n    while (i < ctx.pointers.length) {\n      var ptr = ctx.pointers[i++];\n      ptr.type.encode(stream, ptr.val, ptr.parent);\n    }\n\n    return;\n  }\n\n}\n\nclass CFFPointer extends r.Pointer {\n  constructor(type, options = {}) {\n    if (options.type == null) {\n      options.type = 'global';\n    }\n\n    super(null, type, options);\n  }\n\n  decode(stream, parent, operands) {\n    this.offsetType = {\n      decode: () => operands[0]\n    };\n    return super.decode(stream, parent, operands);\n  }\n\n  encode(stream, value, ctx) {\n    if (!stream) {\n      // compute the size (so ctx.pointerSize is correct)\n      this.offsetType = {\n        size: () => 0\n      };\n      this.size(value, ctx);\n      return [new Ptr(0)];\n    }\n\n    var ptr = null;\n    this.offsetType = {\n      encode: (stream, val) => ptr = val\n    };\n    super.encode(stream, value, ctx);\n    return [new Ptr(ptr)];\n  }\n\n}\n\nclass Ptr {\n  constructor(val) {\n    this.val = val;\n    this.forceLarge = true;\n  }\n\n  valueOf() {\n    return this.val;\n  }\n\n}\n\nclass CFFBlendOp {\n  static decode(stream, parent, operands) {\n    var numBlends = operands.pop(); // TODO: actually blend. For now just consume the deltas\n    // since we don't use any of the values anyway.\n\n    while (operands.length > numBlends) {\n      operands.pop();\n    }\n  }\n\n}\n\nvar CFFPrivateDict = new CFFDict([// key       name                    type                                          default\n[6, 'BlueValues', 'delta', null], [7, 'OtherBlues', 'delta', null], [8, 'FamilyBlues', 'delta', null], [9, 'FamilyOtherBlues', 'delta', null], [[12, 9], 'BlueScale', 'number', 0.039625], [[12, 10], 'BlueShift', 'number', 7], [[12, 11], 'BlueFuzz', 'number', 1], [10, 'StdHW', 'number', null], [11, 'StdVW', 'number', null], [[12, 12], 'StemSnapH', 'delta', null], [[12, 13], 'StemSnapV', 'delta', null], [[12, 14], 'ForceBold', 'boolean', false], [[12, 17], 'LanguageGroup', 'number', 0], [[12, 18], 'ExpansionFactor', 'number', 0.06], [[12, 19], 'initialRandomSeed', 'number', 0], [20, 'defaultWidthX', 'number', 0], [21, 'nominalWidthX', 'number', 0], [22, 'vsindex', 'number', 0], [23, 'blend', CFFBlendOp, null], [19, 'Subrs', new CFFPointer(new CFFIndex(), {\n  type: 'local'\n}), null]]);\n\n// Automatically generated from Appendix A of the CFF specification; do\n// not edit. Length should be 391.\nvar standardStrings = [\".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\", \"trademark\", \"Eth\", \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\", \"divide\", \"brokenbar\", \"degree\", \"thorn\", \"threequarters\", \"twosuperior\", \"registered\", \"minus\", \"eth\", \"multiply\", \"threesuperior\", \"copyright\", \"Aacute\", \"Acircumflex\", \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\", \"Ccedilla\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\", \"Odieresis\", \"Ograve\", \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Ugrave\", \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\", \"acircumflex\", \"adieresis\", \"agrave\", \"aring\", \"atilde\", \"ccedilla\", \"eacute\", \"ecircumflex\", \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"igrave\", \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\", \"ograve\", \"otilde\", \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\", \"ugrave\", \"yacute\", \"ydieresis\", \"zcaron\", \"exclamsmall\", \"Hungarumlautsmall\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\", \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\", \"001.000\", \"001.001\", \"001.002\", \"001.003\", \"Black\", \"Bold\", \"Book\", \"Light\", \"Medium\", \"Regular\", \"Roman\", \"Semibold\"];\n\nvar StandardEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger', 'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron', 'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '', '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '', 'lslash', 'oslash', 'oe', 'germandbls'];\nvar ExpertEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior', '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '', '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];\n\nvar ISOAdobeCharset = ['.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', 'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE', 'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu', 'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn', 'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright', 'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex', 'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute', 'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute', 'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute', 'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave', 'yacute', 'ydieresis', 'zcaron'];\nvar ExpertCharset = ['.notdef', 'space', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', 'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];\nvar ExpertSubsetCharset = ['.notdef', 'space', 'dollaroldstyle', 'dollarsuperior', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'hyphensuperior', 'colonmonetary', 'onefitted', 'rupiah', 'centoldstyle', 'figuredash', 'hypheninferior', 'onequarter', 'onehalf', 'threequarters', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior'];\n\n// Scripts and Languages #\n//########################\n\nvar LangSysTable = new r.Struct({\n  reserved: new r.Reserved(r.uint16),\n  reqFeatureIndex: r.uint16,\n  featureCount: r.uint16,\n  featureIndexes: new r.Array(r.uint16, 'featureCount')\n});\nvar LangSysRecord = new r.Struct({\n  tag: new r.String(4),\n  langSys: new r.Pointer(r.uint16, LangSysTable, {\n    type: 'parent'\n  })\n});\nvar Script = new r.Struct({\n  defaultLangSys: new r.Pointer(r.uint16, LangSysTable),\n  count: r.uint16,\n  langSysRecords: new r.Array(LangSysRecord, 'count')\n});\nvar ScriptRecord = new r.Struct({\n  tag: new r.String(4),\n  script: new r.Pointer(r.uint16, Script, {\n    type: 'parent'\n  })\n});\nvar ScriptList = new r.Array(ScriptRecord, r.uint16); //#######################\n// Features and Lookups #\n//#######################\n\nvar Feature = new r.Struct({\n  featureParams: r.uint16,\n  // pointer\n  lookupCount: r.uint16,\n  lookupListIndexes: new r.Array(r.uint16, 'lookupCount')\n});\nvar FeatureRecord = new r.Struct({\n  tag: new r.String(4),\n  feature: new r.Pointer(r.uint16, Feature, {\n    type: 'parent'\n  })\n});\nvar FeatureList = new r.Array(FeatureRecord, r.uint16);\nvar LookupFlags = new r.Struct({\n  markAttachmentType: r.uint8,\n  flags: new r.Bitfield(r.uint8, ['rightToLeft', 'ignoreBaseGlyphs', 'ignoreLigatures', 'ignoreMarks', 'useMarkFilteringSet'])\n});\nfunction LookupList(SubTable) {\n  var Lookup = new r.Struct({\n    lookupType: r.uint16,\n    flags: LookupFlags,\n    subTableCount: r.uint16,\n    subTables: new r.Array(new r.Pointer(r.uint16, SubTable), 'subTableCount'),\n    markFilteringSet: new r.Optional(r.uint16, t => t.flags.flags.useMarkFilteringSet)\n  });\n  return new r.LazyArray(new r.Pointer(r.uint16, Lookup), r.uint16);\n} //#################\n// Coverage Table #\n//#################\n\nvar RangeRecord = new r.Struct({\n  start: r.uint16,\n  end: r.uint16,\n  startCoverageIndex: r.uint16\n});\nvar Coverage = new r.VersionedStruct(r.uint16, {\n  1: {\n    glyphCount: r.uint16,\n    glyphs: new r.Array(r.uint16, 'glyphCount')\n  },\n  2: {\n    rangeCount: r.uint16,\n    rangeRecords: new r.Array(RangeRecord, 'rangeCount')\n  }\n}); //#########################\n// Class Definition Table #\n//#########################\n\nvar ClassRangeRecord = new r.Struct({\n  start: r.uint16,\n  end: r.uint16,\n  class: r.uint16\n});\nvar ClassDef = new r.VersionedStruct(r.uint16, {\n  1: {\n    // Class array\n    startGlyph: r.uint16,\n    glyphCount: r.uint16,\n    classValueArray: new r.Array(r.uint16, 'glyphCount')\n  },\n  2: {\n    // Class ranges\n    classRangeCount: r.uint16,\n    classRangeRecord: new r.Array(ClassRangeRecord, 'classRangeCount')\n  }\n}); //###############\n// Device Table #\n//###############\n\nvar Device = new r.Struct({\n  a: r.uint16,\n  // startSize for hinting Device, outerIndex for VariationIndex\n  b: r.uint16,\n  // endSize for Device, innerIndex for VariationIndex\n  deltaFormat: r.uint16\n}); //#############################################\n// Contextual Substitution/Positioning Tables #\n//#############################################\n\nvar LookupRecord = new r.Struct({\n  sequenceIndex: r.uint16,\n  lookupListIndex: r.uint16\n});\nvar Rule = new r.Struct({\n  glyphCount: r.uint16,\n  lookupCount: r.uint16,\n  input: new r.Array(r.uint16, t => t.glyphCount - 1),\n  lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n});\nvar RuleSet = new r.Array(new r.Pointer(r.uint16, Rule), r.uint16);\nvar ClassRule = new r.Struct({\n  glyphCount: r.uint16,\n  lookupCount: r.uint16,\n  classes: new r.Array(r.uint16, t => t.glyphCount - 1),\n  lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n});\nvar ClassSet = new r.Array(new r.Pointer(r.uint16, ClassRule), r.uint16);\nvar Context = new r.VersionedStruct(r.uint16, {\n  1: {\n    // Simple context\n    coverage: new r.Pointer(r.uint16, Coverage),\n    ruleSetCount: r.uint16,\n    ruleSets: new r.Array(new r.Pointer(r.uint16, RuleSet), 'ruleSetCount')\n  },\n  2: {\n    // Class-based context\n    coverage: new r.Pointer(r.uint16, Coverage),\n    classDef: new r.Pointer(r.uint16, ClassDef),\n    classSetCnt: r.uint16,\n    classSet: new r.Array(new r.Pointer(r.uint16, ClassSet), 'classSetCnt')\n  },\n  3: {\n    glyphCount: r.uint16,\n    lookupCount: r.uint16,\n    coverages: new r.Array(new r.Pointer(r.uint16, Coverage), 'glyphCount'),\n    lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n  }\n}); //######################################################\n// Chaining Contextual Substitution/Positioning Tables #\n//######################################################\n\nvar ChainRule = new r.Struct({\n  backtrackGlyphCount: r.uint16,\n  backtrack: new r.Array(r.uint16, 'backtrackGlyphCount'),\n  inputGlyphCount: r.uint16,\n  input: new r.Array(r.uint16, t => t.inputGlyphCount - 1),\n  lookaheadGlyphCount: r.uint16,\n  lookahead: new r.Array(r.uint16, 'lookaheadGlyphCount'),\n  lookupCount: r.uint16,\n  lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n});\nvar ChainRuleSet = new r.Array(new r.Pointer(r.uint16, ChainRule), r.uint16);\nvar ChainingContext = new r.VersionedStruct(r.uint16, {\n  1: {\n    // Simple context glyph substitution\n    coverage: new r.Pointer(r.uint16, Coverage),\n    chainCount: r.uint16,\n    chainRuleSets: new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')\n  },\n  2: {\n    // Class-based chaining context\n    coverage: new r.Pointer(r.uint16, Coverage),\n    backtrackClassDef: new r.Pointer(r.uint16, ClassDef),\n    inputClassDef: new r.Pointer(r.uint16, ClassDef),\n    lookaheadClassDef: new r.Pointer(r.uint16, ClassDef),\n    chainCount: r.uint16,\n    chainClassSet: new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')\n  },\n  3: {\n    // Coverage-based chaining context\n    backtrackGlyphCount: r.uint16,\n    backtrackCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),\n    inputGlyphCount: r.uint16,\n    inputCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'inputGlyphCount'),\n    lookaheadGlyphCount: r.uint16,\n    lookaheadCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),\n    lookupCount: r.uint16,\n    lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n  }\n});\n\n/*******************\r\n * Variation Store *\r\n *******************/\n\nvar F2DOT14 = new r.Fixed(16, 'BE', 14);\nvar RegionAxisCoordinates = new r.Struct({\n  startCoord: F2DOT14,\n  peakCoord: F2DOT14,\n  endCoord: F2DOT14\n});\nvar VariationRegionList = new r.Struct({\n  axisCount: r.uint16,\n  regionCount: r.uint16,\n  variationRegions: new r.Array(new r.Array(RegionAxisCoordinates, 'axisCount'), 'regionCount')\n});\nvar DeltaSet = new r.Struct({\n  shortDeltas: new r.Array(r.int16, t => t.parent.shortDeltaCount),\n  regionDeltas: new r.Array(r.int8, t => t.parent.regionIndexCount - t.parent.shortDeltaCount),\n  deltas: t => t.shortDeltas.concat(t.regionDeltas)\n});\nvar ItemVariationData = new r.Struct({\n  itemCount: r.uint16,\n  shortDeltaCount: r.uint16,\n  regionIndexCount: r.uint16,\n  regionIndexes: new r.Array(r.uint16, 'regionIndexCount'),\n  deltaSets: new r.Array(DeltaSet, 'itemCount')\n});\nvar ItemVariationStore = new r.Struct({\n  format: r.uint16,\n  variationRegionList: new r.Pointer(r.uint32, VariationRegionList),\n  variationDataCount: r.uint16,\n  itemVariationData: new r.Array(new r.Pointer(r.uint32, ItemVariationData), 'variationDataCount')\n});\n/**********************\r\n * Feature Variations *\r\n **********************/\n\nvar ConditionTable = new r.VersionedStruct(r.uint16, {\n  1: {\n    axisIndex: r.uint16,\n    axisIndex: r.uint16,\n    filterRangeMinValue: F2DOT14,\n    filterRangeMaxValue: F2DOT14\n  }\n});\nvar ConditionSet = new r.Struct({\n  conditionCount: r.uint16,\n  conditionTable: new r.Array(new r.Pointer(r.uint32, ConditionTable), 'conditionCount')\n});\nvar FeatureTableSubstitutionRecord = new r.Struct({\n  featureIndex: r.uint16,\n  alternateFeatureTable: new r.Pointer(r.uint32, Feature, {\n    type: 'parent'\n  })\n});\nvar FeatureTableSubstitution = new r.Struct({\n  version: r.fixed32,\n  substitutionCount: r.uint16,\n  substitutions: new r.Array(FeatureTableSubstitutionRecord, 'substitutionCount')\n});\nvar FeatureVariationRecord = new r.Struct({\n  conditionSet: new r.Pointer(r.uint32, ConditionSet, {\n    type: 'parent'\n  }),\n  featureTableSubstitution: new r.Pointer(r.uint32, FeatureTableSubstitution, {\n    type: 'parent'\n  })\n});\nvar FeatureVariations = new r.Struct({\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  featureVariationRecordCount: r.uint32,\n  featureVariationRecords: new r.Array(FeatureVariationRecord, 'featureVariationRecordCount')\n});\n\n// otherwise delegates to the provided type.\n\nclass PredefinedOp {\n  constructor(predefinedOps, type) {\n    this.predefinedOps = predefinedOps;\n    this.type = type;\n  }\n\n  decode(stream, parent, operands) {\n    if (this.predefinedOps[operands[0]]) {\n      return this.predefinedOps[operands[0]];\n    }\n\n    return this.type.decode(stream, parent, operands);\n  }\n\n  size(value, ctx) {\n    return this.type.size(value, ctx);\n  }\n\n  encode(stream, value, ctx) {\n    var index = this.predefinedOps.indexOf(value);\n\n    if (index !== -1) {\n      return index;\n    }\n\n    return this.type.encode(stream, value, ctx);\n  }\n\n}\n\nclass CFFEncodingVersion extends r.Number {\n  constructor() {\n    super('UInt8');\n  }\n\n  decode(stream) {\n    return r.uint8.decode(stream) & 0x7f;\n  }\n\n}\n\nvar Range1 = new r.Struct({\n  first: r.uint16,\n  nLeft: r.uint8\n});\nvar Range2 = new r.Struct({\n  first: r.uint16,\n  nLeft: r.uint16\n});\nvar CFFCustomEncoding = new r.VersionedStruct(new CFFEncodingVersion(), {\n  0: {\n    nCodes: r.uint8,\n    codes: new r.Array(r.uint8, 'nCodes')\n  },\n  1: {\n    nRanges: r.uint8,\n    ranges: new r.Array(Range1, 'nRanges')\n  } // TODO: supplement?\n\n});\nvar CFFEncoding = new PredefinedOp([StandardEncoding, ExpertEncoding], new CFFPointer(CFFCustomEncoding, {\n  lazy: true\n})); // Decodes an array of ranges until the total\n// length is equal to the provided length.\n\nclass RangeArray extends r.Array {\n  decode(stream, parent) {\n    var length = utils.resolveLength(this.length, stream, parent);\n    var count = 0;\n    var res = [];\n\n    while (count < length) {\n      var range = this.type.decode(stream, parent);\n      range.offset = count;\n      count += range.nLeft + 1;\n      res.push(range);\n    }\n\n    return res;\n  }\n\n}\n\nvar CFFCustomCharset = new r.VersionedStruct(r.uint8, {\n  0: {\n    glyphs: new r.Array(r.uint16, t => t.parent.CharStrings.length - 1)\n  },\n  1: {\n    ranges: new RangeArray(Range1, t => t.parent.CharStrings.length - 1)\n  },\n  2: {\n    ranges: new RangeArray(Range2, t => t.parent.CharStrings.length - 1)\n  }\n});\nvar CFFCharset = new PredefinedOp([ISOAdobeCharset, ExpertCharset, ExpertSubsetCharset], new CFFPointer(CFFCustomCharset, {\n  lazy: true\n}));\nvar FDRange3 = new r.Struct({\n  first: r.uint16,\n  fd: r.uint8\n});\nvar FDRange4 = new r.Struct({\n  first: r.uint32,\n  fd: r.uint16\n});\nvar FDSelect = new r.VersionedStruct(r.uint8, {\n  0: {\n    fds: new r.Array(r.uint8, t => t.parent.CharStrings.length)\n  },\n  3: {\n    nRanges: r.uint16,\n    ranges: new r.Array(FDRange3, 'nRanges'),\n    sentinel: r.uint16\n  },\n  4: {\n    nRanges: r.uint32,\n    ranges: new r.Array(FDRange4, 'nRanges'),\n    sentinel: r.uint32\n  }\n});\nvar ptr = new CFFPointer(CFFPrivateDict);\n\nclass CFFPrivateOp {\n  decode(stream, parent, operands) {\n    parent.length = operands[0];\n    return ptr.decode(stream, parent, [operands[1]]);\n  }\n\n  size(dict, ctx) {\n    return [CFFPrivateDict.size(dict, ctx, false), ptr.size(dict, ctx)[0]];\n  }\n\n  encode(stream, dict, ctx) {\n    return [CFFPrivateDict.size(dict, ctx, false), ptr.encode(stream, dict, ctx)[0]];\n  }\n\n}\n\nvar FontDict = new CFFDict([// key       name                   type(s)                                 default\n[18, 'Private', new CFFPrivateOp(), null], [[12, 38], 'FontName', 'sid', null], [[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [[12, 5], 'PaintType', 'number', 0]]);\nvar CFFTopDict = new CFFDict([// key       name                   type(s)                                 default\n[[12, 30], 'ROS', ['sid', 'sid', 'number'], null], [0, 'version', 'sid', null], [1, 'Notice', 'sid', null], [[12, 0], 'Copyright', 'sid', null], [2, 'FullName', 'sid', null], [3, 'FamilyName', 'sid', null], [4, 'Weight', 'sid', null], [[12, 1], 'isFixedPitch', 'boolean', false], [[12, 2], 'ItalicAngle', 'number', 0], [[12, 3], 'UnderlinePosition', 'number', -100], [[12, 4], 'UnderlineThickness', 'number', 50], [[12, 5], 'PaintType', 'number', 0], [[12, 6], 'CharstringType', 'number', 2], [[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [13, 'UniqueID', 'number', null], [5, 'FontBBox', 'array', [0, 0, 0, 0]], [[12, 8], 'StrokeWidth', 'number', 0], [14, 'XUID', 'array', null], [15, 'charset', CFFCharset, ISOAdobeCharset], [16, 'Encoding', CFFEncoding, StandardEncoding], [17, 'CharStrings', new CFFPointer(new CFFIndex()), null], [18, 'Private', new CFFPrivateOp(), null], [[12, 20], 'SyntheticBase', 'number', null], [[12, 21], 'PostScript', 'sid', null], [[12, 22], 'BaseFontName', 'sid', null], [[12, 23], 'BaseFontBlend', 'delta', null], // CID font specific\n[[12, 31], 'CIDFontVersion', 'number', 0], [[12, 32], 'CIDFontRevision', 'number', 0], [[12, 33], 'CIDFontType', 'number', 0], [[12, 34], 'CIDCount', 'number', 8720], [[12, 35], 'UIDBase', 'number', null], [[12, 37], 'FDSelect', new CFFPointer(FDSelect), null], [[12, 36], 'FDArray', new CFFPointer(new CFFIndex(FontDict)), null], [[12, 38], 'FontName', 'sid', null]]);\nvar VariationStore = new r.Struct({\n  length: r.uint16,\n  itemVariationStore: ItemVariationStore\n});\nvar CFF2TopDict = new CFFDict([[[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [17, 'CharStrings', new CFFPointer(new CFFIndex()), null], [[12, 37], 'FDSelect', new CFFPointer(FDSelect), null], [[12, 36], 'FDArray', new CFFPointer(new CFFIndex(FontDict)), null], [24, 'vstore', new CFFPointer(VariationStore), null], [25, 'maxstack', 'number', 193]]);\nvar CFFTop = new r.VersionedStruct(r.fixed16, {\n  1: {\n    hdrSize: r.uint8,\n    offSize: r.uint8,\n    nameIndex: new CFFIndex(new r.String('length')),\n    topDictIndex: new CFFIndex(CFFTopDict),\n    stringIndex: new CFFIndex(new r.String('length')),\n    globalSubrIndex: new CFFIndex()\n  },\n  2: {\n    hdrSize: r.uint8,\n    length: r.uint16,\n    topDict: CFF2TopDict,\n    globalSubrIndex: new CFFIndex()\n  }\n});\n\nclass CFFFont {\n  constructor(stream) {\n    this.stream = stream;\n    this.decode();\n  }\n\n  static decode(stream) {\n    return new CFFFont(stream);\n  }\n\n  decode() {\n    var start = this.stream.pos;\n    var top = CFFTop.decode(this.stream);\n\n    for (var key in top) {\n      var val = top[key];\n      this[key] = val;\n    }\n\n    if (this.version < 2) {\n      if (this.topDictIndex.length !== 1) {\n        throw new Error(\"Only a single font is allowed in CFF\");\n      }\n\n      this.topDict = this.topDictIndex[0];\n    }\n\n    this.isCIDFont = this.topDict.ROS != null;\n    return this;\n  }\n\n  string(sid) {\n    if (this.version >= 2) {\n      return null;\n    }\n\n    if (sid < standardStrings.length) {\n      return standardStrings[sid];\n    }\n\n    return this.stringIndex[sid - standardStrings.length];\n  }\n\n  get postscriptName() {\n    if (this.version < 2) {\n      return this.nameIndex[0];\n    }\n\n    return null;\n  }\n\n  get fullName() {\n    return this.string(this.topDict.FullName);\n  }\n\n  get familyName() {\n    return this.string(this.topDict.FamilyName);\n  }\n\n  getCharString(glyph) {\n    this.stream.pos = this.topDict.CharStrings[glyph].offset;\n    return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);\n  }\n\n  getGlyphName(gid) {\n    // CFF2 glyph names are in the post table.\n    if (this.version >= 2) {\n      return null;\n    } // CID-keyed fonts don't have glyph names\n\n\n    if (this.isCIDFont) {\n      return null;\n    }\n\n    var {\n      charset\n    } = this.topDict;\n\n    if (Array.isArray(charset)) {\n      return charset[gid];\n    }\n\n    if (gid === 0) {\n      return '.notdef';\n    }\n\n    gid -= 1;\n\n    switch (charset.version) {\n      case 0:\n        return this.string(charset.glyphs[gid]);\n\n      case 1:\n      case 2:\n        for (var i = 0; i < charset.ranges.length; i++) {\n          var range = charset.ranges[i];\n\n          if (range.offset <= gid && gid <= range.offset + range.nLeft) {\n            return this.string(range.first + (gid - range.offset));\n          }\n        }\n\n        break;\n    }\n\n    return null;\n  }\n\n  fdForGlyph(gid) {\n    if (!this.topDict.FDSelect) {\n      return null;\n    }\n\n    switch (this.topDict.FDSelect.version) {\n      case 0:\n        return this.topDict.FDSelect.fds[gid];\n\n      case 3:\n      case 4:\n        var {\n          ranges\n        } = this.topDict.FDSelect;\n        var low = 0;\n        var high = ranges.length - 1;\n\n        while (low <= high) {\n          var mid = low + high >> 1;\n\n          if (gid < ranges[mid].first) {\n            high = mid - 1;\n          } else if (mid < high && gid >= ranges[mid + 1].first) {\n            low = mid + 1;\n          } else {\n            return ranges[mid].fd;\n          }\n        }\n\n      default:\n        throw new Error(\"Unknown FDSelect version: \".concat(this.topDict.FDSelect.version));\n    }\n  }\n\n  privateDictForGlyph(gid) {\n    if (this.topDict.FDSelect) {\n      var fd = this.fdForGlyph(gid);\n\n      if (this.topDict.FDArray[fd]) {\n        return this.topDict.FDArray[fd].Private;\n      }\n\n      return null;\n    }\n\n    if (this.version < 2) {\n      return this.topDict.Private;\n    }\n\n    return this.topDict.FDArray[0].Private;\n  }\n\n}\n\nvar VerticalOrigin = new r.Struct({\n  glyphIndex: r.uint16,\n  vertOriginY: r.int16\n});\nvar VORG = new r.Struct({\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  defaultVertOriginY: r.int16,\n  numVertOriginYMetrics: r.uint16,\n  metrics: new r.Array(VerticalOrigin, 'numVertOriginYMetrics')\n});\n\nvar BigMetrics = new r.Struct({\n  height: r.uint8,\n  width: r.uint8,\n  horiBearingX: r.int8,\n  horiBearingY: r.int8,\n  horiAdvance: r.uint8,\n  vertBearingX: r.int8,\n  vertBearingY: r.int8,\n  vertAdvance: r.uint8\n});\nvar SmallMetrics = new r.Struct({\n  height: r.uint8,\n  width: r.uint8,\n  bearingX: r.int8,\n  bearingY: r.int8,\n  advance: r.uint8\n});\nvar EBDTComponent = new r.Struct({\n  glyph: r.uint16,\n  xOffset: r.int8,\n  yOffset: r.int8\n});\n\nclass ByteAligned {}\n\nclass BitAligned {}\n\nvar glyph = new r.VersionedStruct('version', {\n  1: {\n    metrics: SmallMetrics,\n    data: ByteAligned\n  },\n  2: {\n    metrics: SmallMetrics,\n    data: BitAligned\n  },\n  // format 3 is deprecated\n  // format 4 is not supported by Microsoft\n  5: {\n    data: BitAligned\n  },\n  6: {\n    metrics: BigMetrics,\n    data: ByteAligned\n  },\n  7: {\n    metrics: BigMetrics,\n    data: BitAligned\n  },\n  8: {\n    metrics: SmallMetrics,\n    pad: new r.Reserved(r.uint8),\n    numComponents: r.uint16,\n    components: new r.Array(EBDTComponent, 'numComponents')\n  },\n  9: {\n    metrics: BigMetrics,\n    pad: new r.Reserved(r.uint8),\n    numComponents: r.uint16,\n    components: new r.Array(EBDTComponent, 'numComponents')\n  },\n  17: {\n    metrics: SmallMetrics,\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  },\n  18: {\n    metrics: BigMetrics,\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  },\n  19: {\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  }\n});\n\nvar SBitLineMetrics = new r.Struct({\n  ascender: r.int8,\n  descender: r.int8,\n  widthMax: r.uint8,\n  caretSlopeNumerator: r.int8,\n  caretSlopeDenominator: r.int8,\n  caretOffset: r.int8,\n  minOriginSB: r.int8,\n  minAdvanceSB: r.int8,\n  maxBeforeBL: r.int8,\n  minAfterBL: r.int8,\n  pad: new r.Reserved(r.int8, 2)\n});\nvar CodeOffsetPair = new r.Struct({\n  glyphCode: r.uint16,\n  offset: r.uint16\n});\nvar IndexSubtable = new r.VersionedStruct(r.uint16, {\n  header: {\n    imageFormat: r.uint16,\n    imageDataOffset: r.uint32\n  },\n  1: {\n    offsetArray: new r.Array(r.uint32, t => t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)\n  },\n  2: {\n    imageSize: r.uint32,\n    bigMetrics: BigMetrics\n  },\n  3: {\n    offsetArray: new r.Array(r.uint16, t => t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)\n  },\n  4: {\n    numGlyphs: r.uint32,\n    glyphArray: new r.Array(CodeOffsetPair, t => t.numGlyphs + 1)\n  },\n  5: {\n    imageSize: r.uint32,\n    bigMetrics: BigMetrics,\n    numGlyphs: r.uint32,\n    glyphCodeArray: new r.Array(r.uint16, 'numGlyphs')\n  }\n});\nvar IndexSubtableArray = new r.Struct({\n  firstGlyphIndex: r.uint16,\n  lastGlyphIndex: r.uint16,\n  subtable: new r.Pointer(r.uint32, IndexSubtable)\n});\nvar BitmapSizeTable = new r.Struct({\n  indexSubTableArray: new r.Pointer(r.uint32, new r.Array(IndexSubtableArray, 1), {\n    type: 'parent'\n  }),\n  indexTablesSize: r.uint32,\n  numberOfIndexSubTables: r.uint32,\n  colorRef: r.uint32,\n  hori: SBitLineMetrics,\n  vert: SBitLineMetrics,\n  startGlyphIndex: r.uint16,\n  endGlyphIndex: r.uint16,\n  ppemX: r.uint8,\n  ppemY: r.uint8,\n  bitDepth: r.uint8,\n  flags: new r.Bitfield(r.uint8, ['horizontal', 'vertical'])\n});\nvar EBLC = new r.Struct({\n  version: r.uint32,\n  // 0x00020000\n  numSizes: r.uint32,\n  sizes: new r.Array(BitmapSizeTable, 'numSizes')\n});\n\nvar ImageTable = new r.Struct({\n  ppem: r.uint16,\n  resolution: r.uint16,\n  imageOffsets: new r.Array(new r.Pointer(r.uint32, 'void'), t => t.parent.parent.maxp.numGlyphs + 1)\n}); // This is the Apple sbix table, used by the \"Apple Color Emoji\" font.\n// It includes several image tables with images for each bitmap glyph\n// of several different sizes.\n\nvar sbix = new r.Struct({\n  version: r.uint16,\n  flags: new r.Bitfield(r.uint16, ['renderOutlines']),\n  numImgTables: r.uint32,\n  imageTables: new r.Array(new r.Pointer(r.uint32, ImageTable), 'numImgTables')\n});\n\nvar LayerRecord = new r.Struct({\n  gid: r.uint16,\n  // Glyph ID of layer glyph (must be in z-order from bottom to top).\n  paletteIndex: r.uint16 // Index value to use in the appropriate palette. This value must\n\n}); // be less than numPaletteEntries in the CPAL table, except for\n// the special case noted below. Each palette entry is 16 bits.\n// A palette index of 0xFFFF is a special case indicating that\n// the text foreground color should be used.\n\nvar BaseGlyphRecord = new r.Struct({\n  gid: r.uint16,\n  // Glyph ID of reference glyph. This glyph is for reference only\n  // and is not rendered for color.\n  firstLayerIndex: r.uint16,\n  // Index (from beginning of the Layer Records) to the layer record.\n  // There will be numLayers consecutive entries for this base glyph.\n  numLayers: r.uint16\n});\nvar COLR = new r.Struct({\n  version: r.uint16,\n  numBaseGlyphRecords: r.uint16,\n  baseGlyphRecord: new r.Pointer(r.uint32, new r.Array(BaseGlyphRecord, 'numBaseGlyphRecords')),\n  layerRecords: new r.Pointer(r.uint32, new r.Array(LayerRecord, 'numLayerRecords'), {\n    lazy: true\n  }),\n  numLayerRecords: r.uint16\n});\n\nvar ColorRecord = new r.Struct({\n  blue: r.uint8,\n  green: r.uint8,\n  red: r.uint8,\n  alpha: r.uint8\n});\nvar CPAL = new r.VersionedStruct(r.uint16, {\n  header: {\n    numPaletteEntries: r.uint16,\n    numPalettes: r.uint16,\n    numColorRecords: r.uint16,\n    colorRecords: new r.Pointer(r.uint32, new r.Array(ColorRecord, 'numColorRecords')),\n    colorRecordIndices: new r.Array(r.uint16, 'numPalettes')\n  },\n  0: {},\n  1: {\n    offsetPaletteTypeArray: new r.Pointer(r.uint32, new r.Array(r.uint32, 'numPalettes')),\n    offsetPaletteLabelArray: new r.Pointer(r.uint32, new r.Array(r.uint16, 'numPalettes')),\n    offsetPaletteEntryLabelArray: new r.Pointer(r.uint32, new r.Array(r.uint16, 'numPaletteEntries'))\n  }\n});\n\nvar BaseCoord = new r.VersionedStruct(r.uint16, {\n  1: {\n    // Design units only\n    coordinate: r.int16 // X or Y value, in design units\n\n  },\n  2: {\n    // Design units plus contour point\n    coordinate: r.int16,\n    // X or Y value, in design units\n    referenceGlyph: r.uint16,\n    // GlyphID of control glyph\n    baseCoordPoint: r.uint16 // Index of contour point on the referenceGlyph\n\n  },\n  3: {\n    // Design units plus Device table\n    coordinate: r.int16,\n    // X or Y value, in design units\n    deviceTable: new r.Pointer(r.uint16, Device) // Device table for X or Y value\n\n  }\n});\nvar BaseValues = new r.Struct({\n  defaultIndex: r.uint16,\n  // Index of default baseline for this script-same index in the BaseTagList\n  baseCoordCount: r.uint16,\n  baseCoords: new r.Array(new r.Pointer(r.uint16, BaseCoord), 'baseCoordCount')\n});\nvar FeatMinMaxRecord = new r.Struct({\n  tag: new r.String(4),\n  // 4-byte feature identification tag-must match FeatureTag in FeatureList\n  minCoord: new r.Pointer(r.uint16, BaseCoord, {\n    type: 'parent'\n  }),\n  // May be NULL\n  maxCoord: new r.Pointer(r.uint16, BaseCoord, {\n    type: 'parent'\n  }) // May be NULL\n\n});\nvar MinMax = new r.Struct({\n  minCoord: new r.Pointer(r.uint16, BaseCoord),\n  // May be NULL\n  maxCoord: new r.Pointer(r.uint16, BaseCoord),\n  // May be NULL\n  featMinMaxCount: r.uint16,\n  // May be 0\n  featMinMaxRecords: new r.Array(FeatMinMaxRecord, 'featMinMaxCount') // In alphabetical order\n\n});\nvar BaseLangSysRecord = new r.Struct({\n  tag: new r.String(4),\n  // 4-byte language system identification tag\n  minMax: new r.Pointer(r.uint16, MinMax, {\n    type: 'parent'\n  })\n});\nvar BaseScript = new r.Struct({\n  baseValues: new r.Pointer(r.uint16, BaseValues),\n  // May be NULL\n  defaultMinMax: new r.Pointer(r.uint16, MinMax),\n  // May be NULL\n  baseLangSysCount: r.uint16,\n  // May be 0\n  baseLangSysRecords: new r.Array(BaseLangSysRecord, 'baseLangSysCount') // in alphabetical order by BaseLangSysTag\n\n});\nvar BaseScriptRecord = new r.Struct({\n  tag: new r.String(4),\n  // 4-byte script identification tag\n  script: new r.Pointer(r.uint16, BaseScript, {\n    type: 'parent'\n  })\n});\nvar BaseScriptList = new r.Array(BaseScriptRecord, r.uint16); // Array of 4-byte baseline identification tags-must be in alphabetical order\n\nvar BaseTagList = new r.Array(new r.String(4), r.uint16);\nvar Axis = new r.Struct({\n  baseTagList: new r.Pointer(r.uint16, BaseTagList),\n  // May be NULL\n  baseScriptList: new r.Pointer(r.uint16, BaseScriptList)\n});\nvar BASE = new r.VersionedStruct(r.uint32, {\n  header: {\n    horizAxis: new r.Pointer(r.uint16, Axis),\n    // May be NULL\n    vertAxis: new r.Pointer(r.uint16, Axis) // May be NULL\n\n  },\n  0x00010000: {},\n  0x00010001: {\n    itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore)\n  }\n});\n\nvar AttachPoint = new r.Array(r.uint16, r.uint16);\nvar AttachList = new r.Struct({\n  coverage: new r.Pointer(r.uint16, Coverage),\n  glyphCount: r.uint16,\n  attachPoints: new r.Array(new r.Pointer(r.uint16, AttachPoint), 'glyphCount')\n});\nvar CaretValue = new r.VersionedStruct(r.uint16, {\n  1: {\n    // Design units only\n    coordinate: r.int16\n  },\n  2: {\n    // Contour point\n    caretValuePoint: r.uint16\n  },\n  3: {\n    // Design units plus Device table\n    coordinate: r.int16,\n    deviceTable: new r.Pointer(r.uint16, Device)\n  }\n});\nvar LigGlyph = new r.Array(new r.Pointer(r.uint16, CaretValue), r.uint16);\nvar LigCaretList = new r.Struct({\n  coverage: new r.Pointer(r.uint16, Coverage),\n  ligGlyphCount: r.uint16,\n  ligGlyphs: new r.Array(new r.Pointer(r.uint16, LigGlyph), 'ligGlyphCount')\n});\nvar MarkGlyphSetsDef = new r.Struct({\n  markSetTableFormat: r.uint16,\n  markSetCount: r.uint16,\n  coverage: new r.Array(new r.Pointer(r.uint32, Coverage), 'markSetCount')\n});\nvar GDEF = new r.VersionedStruct(r.uint32, {\n  header: {\n    glyphClassDef: new r.Pointer(r.uint16, ClassDef),\n    attachList: new r.Pointer(r.uint16, AttachList),\n    ligCaretList: new r.Pointer(r.uint16, LigCaretList),\n    markAttachClassDef: new r.Pointer(r.uint16, ClassDef)\n  },\n  0x00010000: {},\n  0x00010002: {\n    markGlyphSetsDef: new r.Pointer(r.uint16, MarkGlyphSetsDef)\n  },\n  0x00010003: {\n    markGlyphSetsDef: new r.Pointer(r.uint16, MarkGlyphSetsDef),\n    itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore)\n  }\n});\n\nvar ValueFormat = new r.Bitfield(r.uint16, ['xPlacement', 'yPlacement', 'xAdvance', 'yAdvance', 'xPlaDevice', 'yPlaDevice', 'xAdvDevice', 'yAdvDevice']);\nvar types = {\n  xPlacement: r.int16,\n  yPlacement: r.int16,\n  xAdvance: r.int16,\n  yAdvance: r.int16,\n  xPlaDevice: new r.Pointer(r.uint16, Device, {\n    type: 'global',\n    relativeTo: ctx => ctx.rel\n  }),\n  yPlaDevice: new r.Pointer(r.uint16, Device, {\n    type: 'global',\n    relativeTo: ctx => ctx.rel\n  }),\n  xAdvDevice: new r.Pointer(r.uint16, Device, {\n    type: 'global',\n    relativeTo: ctx => ctx.rel\n  }),\n  yAdvDevice: new r.Pointer(r.uint16, Device, {\n    type: 'global',\n    relativeTo: ctx => ctx.rel\n  })\n};\n\nclass ValueRecord {\n  constructor(key = 'valueFormat') {\n    this.key = key;\n  }\n\n  buildStruct(parent) {\n    var struct = parent;\n\n    while (!struct[this.key] && struct.parent) {\n      struct = struct.parent;\n    }\n\n    if (!struct[this.key]) return;\n    var fields = {};\n\n    fields.rel = () => struct._startOffset;\n\n    var format = struct[this.key];\n\n    for (var key in format) {\n      if (format[key]) {\n        fields[key] = types[key];\n      }\n    }\n\n    return new r.Struct(fields);\n  }\n\n  size(val, ctx) {\n    return this.buildStruct(ctx).size(val, ctx);\n  }\n\n  decode(stream, parent) {\n    var res = this.buildStruct(parent).decode(stream, parent);\n    delete res.rel;\n    return res;\n  }\n\n}\n\nvar PairValueRecord = new r.Struct({\n  secondGlyph: r.uint16,\n  value1: new ValueRecord('valueFormat1'),\n  value2: new ValueRecord('valueFormat2')\n});\nvar PairSet = new r.Array(PairValueRecord, r.uint16);\nvar Class2Record = new r.Struct({\n  value1: new ValueRecord('valueFormat1'),\n  value2: new ValueRecord('valueFormat2')\n});\nvar Anchor = new r.VersionedStruct(r.uint16, {\n  1: {\n    // Design units only\n    xCoordinate: r.int16,\n    yCoordinate: r.int16\n  },\n  2: {\n    // Design units plus contour point\n    xCoordinate: r.int16,\n    yCoordinate: r.int16,\n    anchorPoint: r.uint16\n  },\n  3: {\n    // Design units plus Device tables\n    xCoordinate: r.int16,\n    yCoordinate: r.int16,\n    xDeviceTable: new r.Pointer(r.uint16, Device),\n    yDeviceTable: new r.Pointer(r.uint16, Device)\n  }\n});\nvar EntryExitRecord = new r.Struct({\n  entryAnchor: new r.Pointer(r.uint16, Anchor, {\n    type: 'parent'\n  }),\n  exitAnchor: new r.Pointer(r.uint16, Anchor, {\n    type: 'parent'\n  })\n});\nvar MarkRecord = new r.Struct({\n  class: r.uint16,\n  markAnchor: new r.Pointer(r.uint16, Anchor, {\n    type: 'parent'\n  })\n});\nvar MarkArray = new r.Array(MarkRecord, r.uint16);\nvar BaseRecord = new r.Array(new r.Pointer(r.uint16, Anchor), t => t.parent.classCount);\nvar BaseArray = new r.Array(BaseRecord, r.uint16);\nvar ComponentRecord = new r.Array(new r.Pointer(r.uint16, Anchor), t => t.parent.parent.classCount);\nvar LigatureAttach = new r.Array(ComponentRecord, r.uint16);\nvar LigatureArray = new r.Array(new r.Pointer(r.uint16, LigatureAttach), r.uint16);\nvar GPOSLookup = new r.VersionedStruct('lookupType', {\n  1: new r.VersionedStruct(r.uint16, {\n    // Single Adjustment\n    1: {\n      // Single positioning value\n      coverage: new r.Pointer(r.uint16, Coverage),\n      valueFormat: ValueFormat,\n      value: new ValueRecord()\n    },\n    2: {\n      coverage: new r.Pointer(r.uint16, Coverage),\n      valueFormat: ValueFormat,\n      valueCount: r.uint16,\n      values: new r.LazyArray(new ValueRecord(), 'valueCount')\n    }\n  }),\n  2: new r.VersionedStruct(r.uint16, {\n    // Pair Adjustment Positioning\n    1: {\n      // Adjustments for glyph pairs\n      coverage: new r.Pointer(r.uint16, Coverage),\n      valueFormat1: ValueFormat,\n      valueFormat2: ValueFormat,\n      pairSetCount: r.uint16,\n      pairSets: new r.LazyArray(new r.Pointer(r.uint16, PairSet), 'pairSetCount')\n    },\n    2: {\n      // Class pair adjustment\n      coverage: new r.Pointer(r.uint16, Coverage),\n      valueFormat1: ValueFormat,\n      valueFormat2: ValueFormat,\n      classDef1: new r.Pointer(r.uint16, ClassDef),\n      classDef2: new r.Pointer(r.uint16, ClassDef),\n      class1Count: r.uint16,\n      class2Count: r.uint16,\n      classRecords: new r.LazyArray(new r.LazyArray(Class2Record, 'class2Count'), 'class1Count')\n    }\n  }),\n  3: {\n    // Cursive Attachment Positioning\n    format: r.uint16,\n    coverage: new r.Pointer(r.uint16, Coverage),\n    entryExitCount: r.uint16,\n    entryExitRecords: new r.Array(EntryExitRecord, 'entryExitCount')\n  },\n  4: {\n    // MarkToBase Attachment Positioning\n    format: r.uint16,\n    markCoverage: new r.Pointer(r.uint16, Coverage),\n    baseCoverage: new r.Pointer(r.uint16, Coverage),\n    classCount: r.uint16,\n    markArray: new r.Pointer(r.uint16, MarkArray),\n    baseArray: new r.Pointer(r.uint16, BaseArray)\n  },\n  5: {\n    // MarkToLigature Attachment Positioning\n    format: r.uint16,\n    markCoverage: new r.Pointer(r.uint16, Coverage),\n    ligatureCoverage: new r.Pointer(r.uint16, Coverage),\n    classCount: r.uint16,\n    markArray: new r.Pointer(r.uint16, MarkArray),\n    ligatureArray: new r.Pointer(r.uint16, LigatureArray)\n  },\n  6: {\n    // MarkToMark Attachment Positioning\n    format: r.uint16,\n    mark1Coverage: new r.Pointer(r.uint16, Coverage),\n    mark2Coverage: new r.Pointer(r.uint16, Coverage),\n    classCount: r.uint16,\n    mark1Array: new r.Pointer(r.uint16, MarkArray),\n    mark2Array: new r.Pointer(r.uint16, BaseArray)\n  },\n  7: Context,\n  // Contextual positioning\n  8: ChainingContext,\n  // Chaining contextual positioning\n  9: {\n    // Extension Positioning\n    posFormat: r.uint16,\n    lookupType: r.uint16,\n    // cannot also be 9\n    extension: new r.Pointer(r.uint32, GPOSLookup)\n  }\n}); // Fix circular reference\n\nGPOSLookup.versions[9].extension.type = GPOSLookup;\nvar GPOS = new r.VersionedStruct(r.uint32, {\n  header: {\n    scriptList: new r.Pointer(r.uint16, ScriptList),\n    featureList: new r.Pointer(r.uint16, FeatureList),\n    lookupList: new r.Pointer(r.uint16, new LookupList(GPOSLookup))\n  },\n  0x00010000: {},\n  0x00010001: {\n    featureVariations: new r.Pointer(r.uint32, FeatureVariations)\n  }\n}); // export GPOSLookup for JSTF table\n\nvar Sequence = new r.Array(r.uint16, r.uint16);\nvar AlternateSet = Sequence;\nvar Ligature = new r.Struct({\n  glyph: r.uint16,\n  compCount: r.uint16,\n  components: new r.Array(r.uint16, t => t.compCount - 1)\n});\nvar LigatureSet = new r.Array(new r.Pointer(r.uint16, Ligature), r.uint16);\nvar GSUBLookup = new r.VersionedStruct('lookupType', {\n  1: new r.VersionedStruct(r.uint16, {\n    // Single Substitution\n    1: {\n      coverage: new r.Pointer(r.uint16, Coverage),\n      deltaGlyphID: r.int16\n    },\n    2: {\n      coverage: new r.Pointer(r.uint16, Coverage),\n      glyphCount: r.uint16,\n      substitute: new r.LazyArray(r.uint16, 'glyphCount')\n    }\n  }),\n  2: {\n    // Multiple Substitution\n    substFormat: r.uint16,\n    coverage: new r.Pointer(r.uint16, Coverage),\n    count: r.uint16,\n    sequences: new r.LazyArray(new r.Pointer(r.uint16, Sequence), 'count')\n  },\n  3: {\n    // Alternate Substitution\n    substFormat: r.uint16,\n    coverage: new r.Pointer(r.uint16, Coverage),\n    count: r.uint16,\n    alternateSet: new r.LazyArray(new r.Pointer(r.uint16, AlternateSet), 'count')\n  },\n  4: {\n    // Ligature Substitution\n    substFormat: r.uint16,\n    coverage: new r.Pointer(r.uint16, Coverage),\n    count: r.uint16,\n    ligatureSets: new r.LazyArray(new r.Pointer(r.uint16, LigatureSet), 'count')\n  },\n  5: Context,\n  // Contextual Substitution\n  6: ChainingContext,\n  // Chaining Contextual Substitution\n  7: {\n    // Extension Substitution\n    substFormat: r.uint16,\n    lookupType: r.uint16,\n    // cannot also be 7\n    extension: new r.Pointer(r.uint32, GSUBLookup)\n  },\n  8: {\n    // Reverse Chaining Contextual Single Substitution\n    substFormat: r.uint16,\n    coverage: new r.Pointer(r.uint16, Coverage),\n    backtrackCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),\n    lookaheadGlyphCount: r.uint16,\n    lookaheadCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),\n    glyphCount: r.uint16,\n    substitutes: new r.Array(r.uint16, 'glyphCount')\n  }\n}); // Fix circular reference\n\nGSUBLookup.versions[7].extension.type = GSUBLookup;\nvar GSUB = new r.VersionedStruct(r.uint32, {\n  header: {\n    scriptList: new r.Pointer(r.uint16, ScriptList),\n    featureList: new r.Pointer(r.uint16, FeatureList),\n    lookupList: new r.Pointer(r.uint16, new LookupList(GSUBLookup))\n  },\n  0x00010000: {},\n  0x00010001: {\n    featureVariations: new r.Pointer(r.uint32, FeatureVariations)\n  }\n});\n\nvar JstfGSUBModList = new r.Array(r.uint16, r.uint16);\nvar JstfPriority = new r.Struct({\n  shrinkageEnableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageDisableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageEnableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageDisableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageJstfMax: new r.Pointer(r.uint16, new LookupList(GPOSLookup)),\n  extensionEnableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionDisableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionEnableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionDisableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionJstfMax: new r.Pointer(r.uint16, new LookupList(GPOSLookup))\n});\nvar JstfLangSys = new r.Array(new r.Pointer(r.uint16, JstfPriority), r.uint16);\nvar JstfLangSysRecord = new r.Struct({\n  tag: new r.String(4),\n  jstfLangSys: new r.Pointer(r.uint16, JstfLangSys)\n});\nvar JstfScript = new r.Struct({\n  extenderGlyphs: new r.Pointer(r.uint16, new r.Array(r.uint16, r.uint16)),\n  // array of glyphs to extend line length\n  defaultLangSys: new r.Pointer(r.uint16, JstfLangSys),\n  langSysCount: r.uint16,\n  langSysRecords: new r.Array(JstfLangSysRecord, 'langSysCount')\n});\nvar JstfScriptRecord = new r.Struct({\n  tag: new r.String(4),\n  script: new r.Pointer(r.uint16, JstfScript, {\n    type: 'parent'\n  })\n});\nvar JSTF = new r.Struct({\n  version: r.uint32,\n  // should be 0x00010000\n  scriptCount: r.uint16,\n  scriptList: new r.Array(JstfScriptRecord, 'scriptCount')\n});\n\nclass VariableSizeNumber {\n  constructor(size) {\n    this._size = size;\n  }\n\n  decode(stream, parent) {\n    switch (this.size(0, parent)) {\n      case 1:\n        return stream.readUInt8();\n\n      case 2:\n        return stream.readUInt16BE();\n\n      case 3:\n        return stream.readUInt24BE();\n\n      case 4:\n        return stream.readUInt32BE();\n    }\n  }\n\n  size(val, parent) {\n    return utils.resolveLength(this._size, null, parent);\n  }\n\n}\n\nvar MapDataEntry = new r.Struct({\n  entry: new VariableSizeNumber(t => ((t.parent.entryFormat & 0x0030) >> 4) + 1),\n  outerIndex: t => t.entry >> (t.parent.entryFormat & 0x000F) + 1,\n  innerIndex: t => t.entry & (1 << (t.parent.entryFormat & 0x000F) + 1) - 1\n});\nvar DeltaSetIndexMap = new r.Struct({\n  entryFormat: r.uint16,\n  mapCount: r.uint16,\n  mapData: new r.Array(MapDataEntry, 'mapCount')\n});\nvar HVAR = new r.Struct({\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore),\n  advanceWidthMapping: new r.Pointer(r.uint32, DeltaSetIndexMap),\n  LSBMapping: new r.Pointer(r.uint32, DeltaSetIndexMap),\n  RSBMapping: new r.Pointer(r.uint32, DeltaSetIndexMap)\n});\n\nvar Signature = new r.Struct({\n  format: r.uint32,\n  length: r.uint32,\n  offset: r.uint32\n});\nvar SignatureBlock = new r.Struct({\n  reserved: new r.Reserved(r.uint16, 2),\n  cbSignature: r.uint32,\n  // Length (in bytes) of the PKCS#7 packet in pbSignature\n  signature: new r.Buffer('cbSignature')\n});\nvar DSIG = new r.Struct({\n  ulVersion: r.uint32,\n  // Version number of the DSIG table (0x00000001)\n  usNumSigs: r.uint16,\n  // Number of signatures in the table\n  usFlag: r.uint16,\n  // Permission flags\n  signatures: new r.Array(Signature, 'usNumSigs'),\n  signatureBlocks: new r.Array(SignatureBlock, 'usNumSigs')\n});\n\nvar GaspRange = new r.Struct({\n  rangeMaxPPEM: r.uint16,\n  // Upper limit of range, in ppem\n  rangeGaspBehavior: new r.Bitfield(r.uint16, [// Flags describing desired rasterizer behavior\n  'grayscale', 'gridfit', 'symmetricSmoothing', 'symmetricGridfit' // only in version 1, for ClearType\n  ])\n});\nvar gasp = new r.Struct({\n  version: r.uint16,\n  // set to 0\n  numRanges: r.uint16,\n  gaspRanges: new r.Array(GaspRange, 'numRanges') // Sorted by ppem\n\n});\n\nvar DeviceRecord = new r.Struct({\n  pixelSize: r.uint8,\n  maximumWidth: r.uint8,\n  widths: new r.Array(r.uint8, t => t.parent.parent.maxp.numGlyphs)\n}); // The Horizontal Device Metrics table stores integer advance widths scaled to particular pixel sizes\n\nvar hdmx = new r.Struct({\n  version: r.uint16,\n  numRecords: r.int16,\n  sizeDeviceRecord: r.int32,\n  records: new r.Array(DeviceRecord, 'numRecords')\n});\n\nvar KernPair = new r.Struct({\n  left: r.uint16,\n  right: r.uint16,\n  value: r.int16\n});\nvar ClassTable = new r.Struct({\n  firstGlyph: r.uint16,\n  nGlyphs: r.uint16,\n  offsets: new r.Array(r.uint16, 'nGlyphs'),\n  max: t => t.offsets.length && Math.max.apply(Math, t.offsets)\n});\nvar Kern2Array = new r.Struct({\n  off: t => t._startOffset - t.parent.parent._startOffset,\n  len: t => ((t.parent.leftTable.max - t.off) / t.parent.rowWidth + 1) * (t.parent.rowWidth / 2),\n  values: new r.LazyArray(r.int16, 'len')\n});\nvar KernSubtable = new r.VersionedStruct('format', {\n  0: {\n    nPairs: r.uint16,\n    searchRange: r.uint16,\n    entrySelector: r.uint16,\n    rangeShift: r.uint16,\n    pairs: new r.Array(KernPair, 'nPairs')\n  },\n  2: {\n    rowWidth: r.uint16,\n    leftTable: new r.Pointer(r.uint16, ClassTable, {\n      type: 'parent'\n    }),\n    rightTable: new r.Pointer(r.uint16, ClassTable, {\n      type: 'parent'\n    }),\n    array: new r.Pointer(r.uint16, Kern2Array, {\n      type: 'parent'\n    })\n  },\n  3: {\n    glyphCount: r.uint16,\n    kernValueCount: r.uint8,\n    leftClassCount: r.uint8,\n    rightClassCount: r.uint8,\n    flags: r.uint8,\n    kernValue: new r.Array(r.int16, 'kernValueCount'),\n    leftClass: new r.Array(r.uint8, 'glyphCount'),\n    rightClass: new r.Array(r.uint8, 'glyphCount'),\n    kernIndex: new r.Array(r.uint8, t => t.leftClassCount * t.rightClassCount)\n  }\n});\nvar KernTable = new r.VersionedStruct('version', {\n  0: {\n    // Microsoft uses this format\n    subVersion: r.uint16,\n    // Microsoft has an extra sub-table version number\n    length: r.uint16,\n    // Length of the subtable, in bytes\n    format: r.uint8,\n    // Format of subtable\n    coverage: new r.Bitfield(r.uint8, ['horizontal', // 1 if table has horizontal data, 0 if vertical\n    'minimum', // If set to 1, the table has minimum values. If set to 0, the table has kerning values.\n    'crossStream', // If set to 1, kerning is perpendicular to the flow of the text\n    'override' // If set to 1 the value in this table replaces the accumulated value\n    ]),\n    subtable: KernSubtable,\n    padding: new r.Reserved(r.uint8, t => t.length - t._currentOffset)\n  },\n  1: {\n    // Apple uses this format\n    length: r.uint32,\n    coverage: new r.Bitfield(r.uint8, [null, null, null, null, null, 'variation', // Set if table has variation kerning values\n    'crossStream', // Set if table has cross-stream kerning values\n    'vertical' // Set if table has vertical kerning values\n    ]),\n    format: r.uint8,\n    tupleIndex: r.uint16,\n    subtable: KernSubtable,\n    padding: new r.Reserved(r.uint8, t => t.length - t._currentOffset)\n  }\n});\nvar kern = new r.VersionedStruct(r.uint16, {\n  0: {\n    // Microsoft Version\n    nTables: r.uint16,\n    tables: new r.Array(KernTable, 'nTables')\n  },\n  1: {\n    // Apple Version\n    reserved: new r.Reserved(r.uint16),\n    // the other half of the version number\n    nTables: r.uint32,\n    tables: new r.Array(KernTable, 'nTables')\n  }\n});\n\n// Records the ppem for each glyph at which the scaling becomes linear again,\n// despite instructions effecting the advance width\n\nvar LTSH = new r.Struct({\n  version: r.uint16,\n  numGlyphs: r.uint16,\n  yPels: new r.Array(r.uint8, 'numGlyphs')\n});\n\n// NOTE: The PCLT table is strongly discouraged for OpenType fonts with TrueType outlines\n\nvar PCLT = new r.Struct({\n  version: r.uint16,\n  fontNumber: r.uint32,\n  pitch: r.uint16,\n  xHeight: r.uint16,\n  style: r.uint16,\n  typeFamily: r.uint16,\n  capHeight: r.uint16,\n  symbolSet: r.uint16,\n  typeface: new r.String(16),\n  characterComplement: new r.String(8),\n  fileName: new r.String(6),\n  strokeWeight: new r.String(1),\n  widthType: new r.String(1),\n  serifStyle: r.uint8,\n  reserved: new r.Reserved(r.uint8)\n});\n\n// sizes. This is needed in order to match font metrics on Windows.\n\nvar Ratio = new r.Struct({\n  bCharSet: r.uint8,\n  // Character set\n  xRatio: r.uint8,\n  // Value to use for x-Ratio\n  yStartRatio: r.uint8,\n  // Starting y-Ratio value\n  yEndRatio: r.uint8 // Ending y-Ratio value\n\n});\nvar vTable = new r.Struct({\n  yPelHeight: r.uint16,\n  // yPelHeight to which values apply\n  yMax: r.int16,\n  // Maximum value (in pels) for this yPelHeight\n  yMin: r.int16 // Minimum value (in pels) for this yPelHeight\n\n});\nvar VdmxGroup = new r.Struct({\n  recs: r.uint16,\n  // Number of height records in this group\n  startsz: r.uint8,\n  // Starting yPelHeight\n  endsz: r.uint8,\n  // Ending yPelHeight\n  entries: new r.Array(vTable, 'recs') // The VDMX records\n\n});\nvar VDMX = new r.Struct({\n  version: r.uint16,\n  // Version number (0 or 1)\n  numRecs: r.uint16,\n  // Number of VDMX groups present\n  numRatios: r.uint16,\n  // Number of aspect ratio groupings\n  ratioRanges: new r.Array(Ratio, 'numRatios'),\n  // Ratio ranges\n  offsets: new r.Array(r.uint16, 'numRatios'),\n  // Offset to the VDMX group for this ratio range\n  groups: new r.Array(VdmxGroup, 'numRecs') // The actual VDMX groupings\n\n});\n\nvar vhea = new r.Struct({\n  version: r.uint16,\n  // Version number of the Vertical Header Table\n  ascent: r.int16,\n  // The vertical typographic ascender for this font\n  descent: r.int16,\n  // The vertical typographic descender for this font\n  lineGap: r.int16,\n  // The vertical typographic line gap for this font\n  advanceHeightMax: r.int16,\n  // The maximum advance height measurement found in the font\n  minTopSideBearing: r.int16,\n  // The minimum top side bearing measurement found in the font\n  minBottomSideBearing: r.int16,\n  // The minimum bottom side bearing measurement found in the font\n  yMaxExtent: r.int16,\n  caretSlopeRise: r.int16,\n  // Caret slope (rise/run)\n  caretSlopeRun: r.int16,\n  caretOffset: r.int16,\n  // Set value equal to 0 for nonslanted fonts\n  reserved: new r.Reserved(r.int16, 4),\n  metricDataFormat: r.int16,\n  // Set to 0\n  numberOfMetrics: r.uint16 // Number of advance heights in the Vertical Metrics table\n\n});\n\nvar VmtxEntry = new r.Struct({\n  advance: r.uint16,\n  // The advance height of the glyph\n  bearing: r.int16 // The top sidebearing of the glyph\n\n}); // Vertical Metrics Table\n\nvar vmtx = new r.Struct({\n  metrics: new r.LazyArray(VmtxEntry, t => t.parent.vhea.numberOfMetrics),\n  bearings: new r.LazyArray(r.int16, t => t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics)\n});\n\nvar shortFrac = new r.Fixed(16, 'BE', 14);\nvar Correspondence = new r.Struct({\n  fromCoord: shortFrac,\n  toCoord: shortFrac\n});\nvar Segment = new r.Struct({\n  pairCount: r.uint16,\n  correspondence: new r.Array(Correspondence, 'pairCount')\n});\nvar avar = new r.Struct({\n  version: r.fixed32,\n  axisCount: r.uint32,\n  segment: new r.Array(Segment, 'axisCount')\n});\n\nclass UnboundedArrayAccessor {\n  constructor(type, stream, parent) {\n    this.type = type;\n    this.stream = stream;\n    this.parent = parent;\n    this.base = this.stream.pos;\n    this._items = [];\n  }\n\n  getItem(index) {\n    if (this._items[index] == null) {\n      var pos = this.stream.pos;\n      this.stream.pos = this.base + this.type.size(null, this.parent) * index;\n      this._items[index] = this.type.decode(this.stream, this.parent);\n      this.stream.pos = pos;\n    }\n\n    return this._items[index];\n  }\n\n  inspect() {\n    return \"[UnboundedArray \".concat(this.type.constructor.name, \"]\");\n  }\n\n}\n\nclass UnboundedArray extends r.Array {\n  constructor(type) {\n    super(type, 0);\n  }\n\n  decode(stream, parent) {\n    return new UnboundedArrayAccessor(this.type, stream, parent);\n  }\n\n}\nvar LookupTable = function (ValueType = r.uint16) {\n  // Helper class that makes internal structures invisible to pointers\n  class Shadow {\n    constructor(type) {\n      this.type = type;\n    }\n\n    decode(stream, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.decode(stream, ctx);\n    }\n\n    size(val, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.size(val, ctx);\n    }\n\n    encode(stream, val, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.encode(stream, val, ctx);\n    }\n\n  }\n\n  ValueType = new Shadow(ValueType);\n  var BinarySearchHeader = new r.Struct({\n    unitSize: r.uint16,\n    nUnits: r.uint16,\n    searchRange: r.uint16,\n    entrySelector: r.uint16,\n    rangeShift: r.uint16\n  });\n  var LookupSegmentSingle = new r.Struct({\n    lastGlyph: r.uint16,\n    firstGlyph: r.uint16,\n    value: ValueType\n  });\n  var LookupSegmentArray = new r.Struct({\n    lastGlyph: r.uint16,\n    firstGlyph: r.uint16,\n    values: new r.Pointer(r.uint16, new r.Array(ValueType, t => t.lastGlyph - t.firstGlyph + 1), {\n      type: 'parent'\n    })\n  });\n  var LookupSingle = new r.Struct({\n    glyph: r.uint16,\n    value: ValueType\n  });\n  return new r.VersionedStruct(r.uint16, {\n    0: {\n      values: new UnboundedArray(ValueType) // length == number of glyphs maybe?\n\n    },\n    2: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSegmentSingle, t => t.binarySearchHeader.nUnits)\n    },\n    4: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSegmentArray, t => t.binarySearchHeader.nUnits)\n    },\n    6: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSingle, t => t.binarySearchHeader.nUnits)\n    },\n    8: {\n      firstGlyph: r.uint16,\n      count: r.uint16,\n      values: new r.Array(ValueType, 'count')\n    }\n  });\n};\nfunction StateTable(entryData = {}, lookupType = r.uint16) {\n  var entry = Object.assign({\n    newState: r.uint16,\n    flags: r.uint16\n  }, entryData);\n  var Entry = new r.Struct(entry);\n  var StateArray = new UnboundedArray(new r.Array(r.uint16, t => t.nClasses));\n  var StateHeader = new r.Struct({\n    nClasses: r.uint32,\n    classTable: new r.Pointer(r.uint32, new LookupTable(lookupType)),\n    stateArray: new r.Pointer(r.uint32, StateArray),\n    entryTable: new r.Pointer(r.uint32, new UnboundedArray(Entry))\n  });\n  return StateHeader;\n} // This is the old version of the StateTable structure\n\nfunction StateTable1(entryData = {}, lookupType = r.uint16) {\n  var ClassLookupTable = new r.Struct({\n    version() {\n      return 8;\n    },\n\n    // simulate LookupTable\n    firstGlyph: r.uint16,\n    values: new r.Array(r.uint8, r.uint16)\n  });\n  var entry = Object.assign({\n    newStateOffset: r.uint16,\n    // convert offset to stateArray index\n    newState: t => (t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses,\n    flags: r.uint16\n  }, entryData);\n  var Entry = new r.Struct(entry);\n  var StateArray = new UnboundedArray(new r.Array(r.uint8, t => t.nClasses));\n  var StateHeader1 = new r.Struct({\n    nClasses: r.uint16,\n    classTable: new r.Pointer(r.uint16, ClassLookupTable),\n    stateArray: new r.Pointer(r.uint16, StateArray),\n    entryTable: new r.Pointer(r.uint16, new UnboundedArray(Entry))\n  });\n  return StateHeader1;\n}\n\nvar BslnSubtable = new r.VersionedStruct('format', {\n  0: {\n    // Distance-based, no mapping\n    deltas: new r.Array(r.int16, 32)\n  },\n  1: {\n    // Distance-based, with mapping\n    deltas: new r.Array(r.int16, 32),\n    mappingData: new LookupTable(r.uint16)\n  },\n  2: {\n    // Control point-based, no mapping\n    standardGlyph: r.uint16,\n    controlPoints: new r.Array(r.uint16, 32)\n  },\n  3: {\n    // Control point-based, with mapping\n    standardGlyph: r.uint16,\n    controlPoints: new r.Array(r.uint16, 32),\n    mappingData: new LookupTable(r.uint16)\n  }\n});\nvar bsln = new r.Struct({\n  version: r.fixed32,\n  format: r.uint16,\n  defaultBaseline: r.uint16,\n  subtable: BslnSubtable\n});\n\nvar Setting = new r.Struct({\n  setting: r.uint16,\n  nameIndex: r.int16,\n  name: t => t.parent.parent.parent.name.records.fontFeatures[t.nameIndex]\n});\nvar FeatureName = new r.Struct({\n  feature: r.uint16,\n  nSettings: r.uint16,\n  settingTable: new r.Pointer(r.uint32, new r.Array(Setting, 'nSettings'), {\n    type: 'parent'\n  }),\n  featureFlags: new r.Bitfield(r.uint8, [null, null, null, null, null, null, 'hasDefault', 'exclusive']),\n  defaultSetting: r.uint8,\n  nameIndex: r.int16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameIndex]\n});\nvar feat = new r.Struct({\n  version: r.fixed32,\n  featureNameCount: r.uint16,\n  reserved1: new r.Reserved(r.uint16),\n  reserved2: new r.Reserved(r.uint32),\n  featureNames: new r.Array(FeatureName, 'featureNameCount')\n});\n\nvar Axis$1 = new r.Struct({\n  axisTag: new r.String(4),\n  minValue: r.fixed32,\n  defaultValue: r.fixed32,\n  maxValue: r.fixed32,\n  flags: r.uint16,\n  nameID: r.uint16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameID]\n});\nvar Instance = new r.Struct({\n  nameID: r.uint16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameID],\n  flags: r.uint16,\n  coord: new r.Array(r.fixed32, t => t.parent.axisCount),\n  postscriptNameID: new r.Optional(r.uint16, t => t.parent.instanceSize - t._currentOffset > 0)\n});\nvar fvar = new r.Struct({\n  version: r.fixed32,\n  offsetToData: r.uint16,\n  countSizePairs: r.uint16,\n  axisCount: r.uint16,\n  axisSize: r.uint16,\n  instanceCount: r.uint16,\n  instanceSize: r.uint16,\n  axis: new r.Array(Axis$1, 'axisCount'),\n  instance: new r.Array(Instance, 'instanceCount')\n});\n\nvar shortFrac$1 = new r.Fixed(16, 'BE', 14);\n\nclass Offset {\n  static decode(stream, parent) {\n    // In short format, offsets are multiplied by 2.\n    // This doesn't seem to be documented by Apple, but it\n    // is implemented this way in Freetype.\n    return parent.flags ? stream.readUInt32BE() : stream.readUInt16BE() * 2;\n  }\n\n}\n\nvar gvar = new r.Struct({\n  version: r.uint16,\n  reserved: new r.Reserved(r.uint16),\n  axisCount: r.uint16,\n  globalCoordCount: r.uint16,\n  globalCoords: new r.Pointer(r.uint32, new r.Array(new r.Array(shortFrac$1, 'axisCount'), 'globalCoordCount')),\n  glyphCount: r.uint16,\n  flags: r.uint16,\n  offsetToData: r.uint32,\n  offsets: new r.Array(new r.Pointer(Offset, 'void', {\n    relativeTo: ctx => ctx.offsetToData,\n    allowNull: false\n  }), t => t.glyphCount + 1)\n});\n\nvar ClassTable$1 = new r.Struct({\n  length: r.uint16,\n  coverage: r.uint16,\n  subFeatureFlags: r.uint32,\n  stateTable: new StateTable1()\n});\nvar WidthDeltaRecord = new r.Struct({\n  justClass: r.uint32,\n  beforeGrowLimit: r.fixed32,\n  beforeShrinkLimit: r.fixed32,\n  afterGrowLimit: r.fixed32,\n  afterShrinkLimit: r.fixed32,\n  growFlags: r.uint16,\n  shrinkFlags: r.uint16\n});\nvar WidthDeltaCluster = new r.Array(WidthDeltaRecord, r.uint32);\nvar ActionData = new r.VersionedStruct('actionType', {\n  0: {\n    // Decomposition action\n    lowerLimit: r.fixed32,\n    upperLimit: r.fixed32,\n    order: r.uint16,\n    glyphs: new r.Array(r.uint16, r.uint16)\n  },\n  1: {\n    // Unconditional add glyph action\n    addGlyph: r.uint16\n  },\n  2: {\n    // Conditional add glyph action\n    substThreshold: r.fixed32,\n    addGlyph: r.uint16,\n    substGlyph: r.uint16\n  },\n  3: {},\n  // Stretch glyph action (no data, not supported by CoreText)\n  4: {\n    // Ductile glyph action (not supported by CoreText)\n    variationAxis: r.uint32,\n    minimumLimit: r.fixed32,\n    noStretchValue: r.fixed32,\n    maximumLimit: r.fixed32\n  },\n  5: {\n    // Repeated add glyph action\n    flags: r.uint16,\n    glyph: r.uint16\n  }\n});\nvar Action = new r.Struct({\n  actionClass: r.uint16,\n  actionType: r.uint16,\n  actionLength: r.uint32,\n  actionData: ActionData,\n  padding: new r.Reserved(r.uint8, t => t.actionLength - t._currentOffset)\n});\nvar PostcompensationAction = new r.Array(Action, r.uint32);\nvar PostCompensationTable = new r.Struct({\n  lookupTable: new LookupTable(new r.Pointer(r.uint16, PostcompensationAction))\n});\nvar JustificationTable = new r.Struct({\n  classTable: new r.Pointer(r.uint16, ClassTable$1, {\n    type: 'parent'\n  }),\n  wdcOffset: r.uint16,\n  postCompensationTable: new r.Pointer(r.uint16, PostCompensationTable, {\n    type: 'parent'\n  }),\n  widthDeltaClusters: new LookupTable(new r.Pointer(r.uint16, WidthDeltaCluster, {\n    type: 'parent',\n    relativeTo: ctx => ctx.wdcOffset\n  }))\n});\nvar just = new r.Struct({\n  version: r.uint32,\n  format: r.uint16,\n  horizontal: new r.Pointer(r.uint16, JustificationTable),\n  vertical: new r.Pointer(r.uint16, JustificationTable)\n});\n\nvar LigatureData = {\n  action: r.uint16\n};\nvar ContextualData = {\n  markIndex: r.uint16,\n  currentIndex: r.uint16\n};\nvar InsertionData = {\n  currentInsertIndex: r.uint16,\n  markedInsertIndex: r.uint16\n};\nvar SubstitutionTable = new r.Struct({\n  items: new UnboundedArray(new r.Pointer(r.uint32, new LookupTable()))\n});\nvar SubtableData = new r.VersionedStruct('type', {\n  0: {\n    // Indic Rearrangement Subtable\n    stateTable: new StateTable()\n  },\n  1: {\n    // Contextual Glyph Substitution Subtable\n    stateTable: new StateTable(ContextualData),\n    substitutionTable: new r.Pointer(r.uint32, SubstitutionTable)\n  },\n  2: {\n    // Ligature subtable\n    stateTable: new StateTable(LigatureData),\n    ligatureActions: new r.Pointer(r.uint32, new UnboundedArray(r.uint32)),\n    components: new r.Pointer(r.uint32, new UnboundedArray(r.uint16)),\n    ligatureList: new r.Pointer(r.uint32, new UnboundedArray(r.uint16))\n  },\n  4: {\n    // Non-contextual Glyph Substitution Subtable\n    lookupTable: new LookupTable()\n  },\n  5: {\n    // Glyph Insertion Subtable\n    stateTable: new StateTable(InsertionData),\n    insertionActions: new r.Pointer(r.uint32, new UnboundedArray(r.uint16))\n  }\n});\nvar Subtable = new r.Struct({\n  length: r.uint32,\n  coverage: r.uint24,\n  type: r.uint8,\n  subFeatureFlags: r.uint32,\n  table: SubtableData,\n  padding: new r.Reserved(r.uint8, t => t.length - t._currentOffset)\n});\nvar FeatureEntry = new r.Struct({\n  featureType: r.uint16,\n  featureSetting: r.uint16,\n  enableFlags: r.uint32,\n  disableFlags: r.uint32\n});\nvar MorxChain = new r.Struct({\n  defaultFlags: r.uint32,\n  chainLength: r.uint32,\n  nFeatureEntries: r.uint32,\n  nSubtables: r.uint32,\n  features: new r.Array(FeatureEntry, 'nFeatureEntries'),\n  subtables: new r.Array(Subtable, 'nSubtables')\n});\nvar morx = new r.Struct({\n  version: r.uint16,\n  unused: new r.Reserved(r.uint16),\n  nChains: r.uint32,\n  chains: new r.Array(MorxChain, 'nChains')\n});\n\nvar OpticalBounds = new r.Struct({\n  left: r.int16,\n  top: r.int16,\n  right: r.int16,\n  bottom: r.int16\n});\nvar opbd = new r.Struct({\n  version: r.fixed32,\n  format: r.uint16,\n  lookupTable: new LookupTable(OpticalBounds)\n});\n\nvar tables = {};\ntables.cmap = cmap;\ntables.head = head;\ntables.hhea = hhea;\ntables.hmtx = hmtx;\ntables.maxp = maxp;\ntables.name = NameTable;\ntables['OS/2'] = OS2;\ntables.post = post; // TrueType Outlines\ntables.fpgm = fpgm;\ntables.loca = loca;\ntables.prep = prep;\ntables['cvt '] = cvt;\ntables.glyf = glyf; // PostScript Outlines\ntables['CFF '] = CFFFont;\ntables['CFF2'] = CFFFont;\ntables.VORG = VORG; // Bitmap Glyphs\ntables.EBLC = EBLC;\ntables.CBLC = tables.EBLC;\ntables.sbix = sbix;\ntables.COLR = COLR;\ntables.CPAL = CPAL; // Advanced OpenType Tables\ntables.BASE = BASE;\ntables.GDEF = GDEF;\ntables.GPOS = GPOS;\ntables.GSUB = GSUB;\ntables.JSTF = JSTF; // OpenType variations tables\ntables.HVAR = HVAR; // Other OpenType Tables\ntables.DSIG = DSIG;\ntables.gasp = gasp;\ntables.hdmx = hdmx;\ntables.kern = kern;\ntables.LTSH = LTSH;\ntables.PCLT = PCLT;\ntables.VDMX = VDMX;\ntables.vhea = vhea;\ntables.vmtx = vmtx; // Apple Advanced Typography Tables\ntables.avar = avar;\ntables.bsln = bsln;\ntables.feat = feat;\ntables.fvar = fvar;\ntables.gvar = gvar;\ntables.just = just;\ntables.morx = morx;\ntables.opbd = opbd;\n\nvar TableEntry = new r.Struct({\n  tag: new r.String(4),\n  checkSum: r.uint32,\n  offset: new r.Pointer(r.uint32, 'void', {\n    type: 'global'\n  }),\n  length: r.uint32\n});\nvar Directory = new r.Struct({\n  tag: new r.String(4),\n  numTables: r.uint16,\n  searchRange: r.uint16,\n  entrySelector: r.uint16,\n  rangeShift: r.uint16,\n  tables: new r.Array(TableEntry, 'numTables')\n});\n\nDirectory.process = function () {\n  var tables = {};\n\n  for (var table of this.tables) {\n    tables[table.tag] = table;\n  }\n\n  this.tables = tables;\n};\n\nDirectory.preEncode = function (stream) {\n  var tables$1 = [];\n\n  for (var tag in this.tables) {\n    var table = this.tables[tag];\n\n    if (table) {\n      tables$1.push({\n        tag: tag,\n        checkSum: 0,\n        offset: new r.VoidPointer(tables[tag], table),\n        length: tables[tag].size(table)\n      });\n    }\n  }\n\n  this.tag = 'true';\n  this.numTables = tables$1.length;\n  this.tables = tables$1;\n  var maxExponentFor2 = Math.floor(Math.log(this.numTables) / Math.LN2);\n  var maxPowerOf2 = Math.pow(2, maxExponentFor2);\n  this.searchRange = maxPowerOf2 * 16;\n  this.entrySelector = Math.log(maxPowerOf2) / Math.LN2;\n  this.rangeShift = this.numTables * 16 - this.searchRange;\n};\n\nfunction binarySearch(arr, cmp) {\n  var min = 0;\n  var max = arr.length - 1;\n\n  while (min <= max) {\n    var mid = min + max >> 1;\n    var res = cmp(arr[mid]);\n\n    if (res < 0) {\n      max = mid - 1;\n    } else if (res > 0) {\n      min = mid + 1;\n    } else {\n      return mid;\n    }\n  }\n\n  return -1;\n}\nfunction range(index, end) {\n  var range = [];\n\n  while (index < end) {\n    range.push(index++);\n  }\n\n  return range;\n}\n\nvar _class;\n\ntry {\n  var iconv = __webpack_require__(/*! iconv-lite */ \"(rsc)/./node_modules/iconv-lite/lib/index.js\");\n} catch (err) {}\n\nvar CmapProcessor = (_class = class CmapProcessor {\n  constructor(cmapTable) {\n    // Attempt to find a Unicode cmap first\n    this.encoding = null;\n    this.cmap = this.findSubtable(cmapTable, [// 32-bit subtables\n    [3, 10], [0, 6], [0, 4], // 16-bit subtables\n    [3, 1], [0, 3], [0, 2], [0, 1], [0, 0]]); // If not unicode cmap was found, and iconv-lite is installed,\n    // take the first table with a supported encoding.\n\n    if (!this.cmap && iconv) {\n      for (var cmap of cmapTable.tables) {\n        var encoding = getEncoding(cmap.platformID, cmap.encodingID, cmap.table.language - 1);\n\n        if (iconv.encodingExists(encoding)) {\n          this.cmap = cmap.table;\n          this.encoding = encoding;\n        }\n      }\n    }\n\n    if (!this.cmap) {\n      throw new Error(\"Could not find a supported cmap table\");\n    }\n\n    this.uvs = this.findSubtable(cmapTable, [[0, 5]]);\n\n    if (this.uvs && this.uvs.version !== 14) {\n      this.uvs = null;\n    }\n  }\n\n  findSubtable(cmapTable, pairs) {\n    for (var [platformID, encodingID] of pairs) {\n      for (var cmap of cmapTable.tables) {\n        if (cmap.platformID === platformID && cmap.encodingID === encodingID) {\n          return cmap.table;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  lookup(codepoint, variationSelector) {\n    // If there is no Unicode cmap in this font, we need to re-encode\n    // the codepoint in the encoding that the cmap supports.\n    if (this.encoding) {\n      var buf = iconv.encode(String.fromCodePoint(codepoint), this.encoding);\n      codepoint = 0;\n\n      for (var i = 0; i < buf.length; i++) {\n        codepoint = codepoint << 8 | buf[i];\n      } // Otherwise, try to get a Unicode variation selector for this codepoint if one is provided.\n\n    } else if (variationSelector) {\n      var gid = this.getVariationSelector(codepoint, variationSelector);\n\n      if (gid) {\n        return gid;\n      }\n    }\n\n    var cmap = this.cmap;\n\n    switch (cmap.version) {\n      case 0:\n        return cmap.codeMap.get(codepoint) || 0;\n\n      case 4:\n        {\n          var min = 0;\n          var max = cmap.segCount - 1;\n\n          while (min <= max) {\n            var mid = min + max >> 1;\n\n            if (codepoint < cmap.startCode.get(mid)) {\n              max = mid - 1;\n            } else if (codepoint > cmap.endCode.get(mid)) {\n              min = mid + 1;\n            } else {\n              var rangeOffset = cmap.idRangeOffset.get(mid);\n\n              var _gid = void 0;\n\n              if (rangeOffset === 0) {\n                _gid = codepoint + cmap.idDelta.get(mid);\n              } else {\n                var index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);\n                _gid = cmap.glyphIndexArray.get(index) || 0;\n\n                if (_gid !== 0) {\n                  _gid += cmap.idDelta.get(mid);\n                }\n              }\n\n              return _gid & 0xffff;\n            }\n          }\n\n          return 0;\n        }\n\n      case 8:\n        throw new Error('TODO: cmap format 8');\n\n      case 6:\n      case 10:\n        return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;\n\n      case 12:\n      case 13:\n        {\n          var _min = 0;\n\n          var _max = cmap.nGroups - 1;\n\n          while (_min <= _max) {\n            var _mid = _min + _max >> 1;\n\n            var group = cmap.groups.get(_mid);\n\n            if (codepoint < group.startCharCode) {\n              _max = _mid - 1;\n            } else if (codepoint > group.endCharCode) {\n              _min = _mid + 1;\n            } else {\n              if (cmap.version === 12) {\n                return group.glyphID + (codepoint - group.startCharCode);\n              } else {\n                return group.glyphID;\n              }\n            }\n          }\n\n          return 0;\n        }\n\n      case 14:\n        throw new Error('TODO: cmap format 14');\n\n      default:\n        throw new Error(\"Unknown cmap format \".concat(cmap.version));\n    }\n  }\n\n  getVariationSelector(codepoint, variationSelector) {\n    if (!this.uvs) {\n      return 0;\n    }\n\n    var selectors = this.uvs.varSelectors.toArray();\n    var i = binarySearch(selectors, x => variationSelector - x.varSelector);\n    var sel = selectors[i];\n\n    if (i !== -1 && sel.defaultUVS) {\n      i = binarySearch(sel.defaultUVS, x => codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? +1 : 0);\n    }\n\n    if (i !== -1 && sel.nonDefaultUVS) {\n      i = binarySearch(sel.nonDefaultUVS, x => codepoint - x.unicodeValue);\n\n      if (i !== -1) {\n        return sel.nonDefaultUVS[i].glyphID;\n      }\n    }\n\n    return 0;\n  }\n\n  getCharacterSet() {\n    var cmap = this.cmap;\n\n    switch (cmap.version) {\n      case 0:\n        return range(0, cmap.codeMap.length);\n\n      case 4:\n        {\n          var res = [];\n          var endCodes = cmap.endCode.toArray();\n\n          for (var i = 0; i < endCodes.length; i++) {\n            var tail = endCodes[i] + 1;\n            var start = cmap.startCode.get(i);\n            res.push(...range(start, tail));\n          }\n\n          return res;\n        }\n\n      case 8:\n        throw new Error('TODO: cmap format 8');\n\n      case 6:\n      case 10:\n        return range(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);\n\n      case 12:\n      case 13:\n        {\n          var _res = [];\n\n          for (var group of cmap.groups.toArray()) {\n            _res.push(...range(group.startCharCode, group.endCharCode + 1));\n          }\n\n          return _res;\n        }\n\n      case 14:\n        throw new Error('TODO: cmap format 14');\n\n      default:\n        throw new Error(\"Unknown cmap format \".concat(cmap.version));\n    }\n  }\n\n  codePointsForGlyph(gid) {\n    var cmap = this.cmap;\n\n    switch (cmap.version) {\n      case 0:\n        {\n          var res = [];\n\n          for (var i = 0; i < 256; i++) {\n            if (cmap.codeMap.get(i) === gid) {\n              res.push(i);\n            }\n          }\n\n          return res;\n        }\n\n      case 4:\n        {\n          var _res2 = [];\n\n          for (var _i = 0; _i < cmap.segCount; _i++) {\n            var end = cmap.endCode.get(_i);\n            var start = cmap.startCode.get(_i);\n            var rangeOffset = cmap.idRangeOffset.get(_i);\n            var delta = cmap.idDelta.get(_i);\n\n            for (var c = start; c <= end; c++) {\n              var g = 0;\n\n              if (rangeOffset === 0) {\n                g = c + delta;\n              } else {\n                var index = rangeOffset / 2 + (c - start) - (cmap.segCount - _i);\n                g = cmap.glyphIndexArray.get(index) || 0;\n\n                if (g !== 0) {\n                  g += delta;\n                }\n              }\n\n              if (g === gid) {\n                _res2.push(c);\n              }\n            }\n          }\n\n          return _res2;\n        }\n\n      case 12:\n        {\n          var _res3 = [];\n\n          for (var group of cmap.groups.toArray()) {\n            if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) {\n              _res3.push(group.startCharCode + (gid - group.glyphID));\n            }\n          }\n\n          return _res3;\n        }\n\n      case 13:\n        {\n          var _res4 = [];\n\n          for (var _group of cmap.groups.toArray()) {\n            if (gid === _group.glyphID) {\n              _res4.push(...range(_group.startCharCode, _group.endCharCode + 1));\n            }\n          }\n\n          return _res4;\n        }\n\n      default:\n        throw new Error(\"Unknown cmap format \".concat(cmap.version));\n    }\n  }\n\n}, (_applyDecoratedDescriptor(_class.prototype, \"getCharacterSet\", [cache], Object.getOwnPropertyDescriptor(_class.prototype, \"getCharacterSet\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"codePointsForGlyph\", [cache], Object.getOwnPropertyDescriptor(_class.prototype, \"codePointsForGlyph\"), _class.prototype)), _class);\n\nclass KernProcessor {\n  constructor(font) {\n    this.kern = font.kern;\n  }\n\n  process(glyphs, positions) {\n    for (var glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++) {\n      var left = glyphs[glyphIndex].id;\n      var right = glyphs[glyphIndex + 1].id;\n      positions[glyphIndex].xAdvance += this.getKerning(left, right);\n    }\n  }\n\n  getKerning(left, right) {\n    var res = 0;\n\n    for (var table of this.kern.tables) {\n      if (table.coverage.crossStream) {\n        continue;\n      }\n\n      switch (table.version) {\n        case 0:\n          if (!table.coverage.horizontal) {\n            continue;\n          }\n\n          break;\n\n        case 1:\n          if (table.coverage.vertical || table.coverage.variation) {\n            continue;\n          }\n\n          break;\n\n        default:\n          throw new Error(\"Unsupported kerning table version \".concat(table.version));\n      }\n\n      var val = 0;\n      var s = table.subtable;\n\n      switch (table.format) {\n        case 0:\n          var pairIdx = binarySearch(s.pairs, function (pair) {\n            return left - pair.left || right - pair.right;\n          });\n\n          if (pairIdx >= 0) {\n            val = s.pairs[pairIdx].value;\n          }\n\n          break;\n\n        case 2:\n          var leftOffset = 0,\n              rightOffset = 0;\n\n          if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs) {\n            leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];\n          } else {\n            leftOffset = s.array.off;\n          }\n\n          if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs) {\n            rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];\n          }\n\n          var index = (leftOffset + rightOffset - s.array.off) / 2;\n          val = s.array.values.get(index);\n          break;\n\n        case 3:\n          if (left >= s.glyphCount || right >= s.glyphCount) {\n            return 0;\n          }\n\n          val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];\n          break;\n\n        default:\n          throw new Error(\"Unsupported kerning sub-table format \".concat(table.format));\n      } // Microsoft supports the override flag, which resets the result\n      // Otherwise, the sum of the results from all subtables is returned\n\n\n      if (table.coverage.override) {\n        res = val;\n      } else {\n        res += val;\n      }\n    }\n\n    return res;\n  }\n\n}\n\n/**\r\n * This class is used when GPOS does not define 'mark' or 'mkmk' features\r\n * for positioning marks relative to base glyphs. It uses the unicode\r\n * combining class property to position marks.\r\n *\r\n * Based on code from Harfbuzz, thanks!\r\n * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-fallback.cc\r\n */\n\nclass UnicodeLayoutEngine {\n  constructor(font) {\n    this.font = font;\n  }\n\n  positionGlyphs(glyphs, positions) {\n    // find each base + mark cluster, and position the marks relative to the base\n    var clusterStart = 0;\n    var clusterEnd = 0;\n\n    for (var index = 0; index < glyphs.length; index++) {\n      var glyph = glyphs[index];\n\n      if (glyph.isMark) {\n        // TODO: handle ligatures\n        clusterEnd = index;\n      } else {\n        if (clusterStart !== clusterEnd) {\n          this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n        }\n\n        clusterStart = clusterEnd = index;\n      }\n    }\n\n    if (clusterStart !== clusterEnd) {\n      this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n    }\n\n    return positions;\n  }\n\n  positionCluster(glyphs, positions, clusterStart, clusterEnd) {\n    var base = glyphs[clusterStart];\n    var baseBox = base.cbox.copy(); // adjust bounding box for ligature glyphs\n\n    if (base.codePoints.length > 1) {\n      // LTR. TODO: RTL support.\n      baseBox.minX += (base.codePoints.length - 1) * baseBox.width / base.codePoints.length;\n    }\n\n    var xOffset = -positions[clusterStart].xAdvance;\n    var yOffset = 0;\n    var yGap = this.font.unitsPerEm / 16; // position each of the mark glyphs relative to the base glyph\n\n    for (var index = clusterStart + 1; index <= clusterEnd; index++) {\n      var mark = glyphs[index];\n      var markBox = mark.cbox;\n      var position = positions[index];\n      var combiningClass = this.getCombiningClass(mark.codePoints[0]);\n\n      if (combiningClass !== 'Not_Reordered') {\n        position.xOffset = position.yOffset = 0; // x positioning\n\n        switch (combiningClass) {\n          case 'Double_Above':\n          case 'Double_Below':\n            // LTR. TODO: RTL support.\n            position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;\n            break;\n\n          case 'Attached_Below_Left':\n          case 'Below_Left':\n          case 'Above_Left':\n            // left align\n            position.xOffset += baseBox.minX - markBox.minX;\n            break;\n\n          case 'Attached_Above_Right':\n          case 'Below_Right':\n          case 'Above_Right':\n            // right align\n            position.xOffset += baseBox.maxX - markBox.width - markBox.minX;\n            break;\n\n          default:\n            // Attached_Below, Attached_Above, Below, Above, other\n            // center align\n            position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;\n        } // y positioning\n\n\n        switch (combiningClass) {\n          case 'Double_Below':\n          case 'Below_Left':\n          case 'Below':\n          case 'Below_Right':\n          case 'Attached_Below_Left':\n          case 'Attached_Below':\n            // add a small gap between the glyphs if they are not attached\n            if (combiningClass === 'Attached_Below_Left' || combiningClass === 'Attached_Below') {\n              baseBox.minY += yGap;\n            }\n\n            position.yOffset = -baseBox.minY - markBox.maxY;\n            baseBox.minY += markBox.height;\n            break;\n\n          case 'Double_Above':\n          case 'Above_Left':\n          case 'Above':\n          case 'Above_Right':\n          case 'Attached_Above':\n          case 'Attached_Above_Right':\n            // add a small gap between the glyphs if they are not attached\n            if (combiningClass === 'Attached_Above' || combiningClass === 'Attached_Above_Right') {\n              baseBox.maxY += yGap;\n            }\n\n            position.yOffset = baseBox.maxY - markBox.minY;\n            baseBox.maxY += markBox.height;\n            break;\n        }\n\n        position.xAdvance = position.yAdvance = 0;\n        position.xOffset += xOffset;\n        position.yOffset += yOffset;\n      } else {\n        xOffset -= position.xAdvance;\n        yOffset -= position.yAdvance;\n      }\n    }\n\n    return;\n  }\n\n  getCombiningClass(codePoint) {\n    var combiningClass = unicode.getCombiningClass(codePoint); // Thai / Lao need some per-character work\n\n    if ((codePoint & ~0xff) === 0x0e00) {\n      if (combiningClass === 'Not_Reordered') {\n        switch (codePoint) {\n          case 0x0e31:\n          case 0x0e34:\n          case 0x0e35:\n          case 0x0e36:\n          case 0x0e37:\n          case 0x0e47:\n          case 0x0e4c:\n          case 0x0e3d:\n          case 0x0e4e:\n            return 'Above_Right';\n\n          case 0x0eb1:\n          case 0x0eb4:\n          case 0x0eb5:\n          case 0x0eb6:\n          case 0x0eb7:\n          case 0x0ebb:\n          case 0x0ecc:\n          case 0x0ecd:\n            return 'Above';\n\n          case 0x0ebc:\n            return 'Below';\n        }\n      } else if (codePoint === 0x0e3a) {\n        // virama\n        return 'Below_Right';\n      }\n    }\n\n    switch (combiningClass) {\n      // Hebrew\n      case 'CCC10': // sheva\n\n      case 'CCC11': // hataf segol\n\n      case 'CCC12': // hataf patah\n\n      case 'CCC13': // hataf qamats\n\n      case 'CCC14': // hiriq\n\n      case 'CCC15': // tsere\n\n      case 'CCC16': // segol\n\n      case 'CCC17': // patah\n\n      case 'CCC18': // qamats\n\n      case 'CCC20': // qubuts\n\n      case 'CCC22':\n        // meteg\n        return 'Below';\n\n      case 'CCC23':\n        // rafe\n        return 'Attached_Above';\n\n      case 'CCC24':\n        // shin dot\n        return 'Above_Right';\n\n      case 'CCC25': // sin dot\n\n      case 'CCC19':\n        // holam\n        return 'Above_Left';\n\n      case 'CCC26':\n        // point varika\n        return 'Above';\n\n      case 'CCC21':\n        // dagesh\n        break;\n      // Arabic and Syriac\n\n      case 'CCC27': // fathatan\n\n      case 'CCC28': // dammatan\n\n      case 'CCC30': // fatha\n\n      case 'CCC31': // damma\n\n      case 'CCC33': // shadda\n\n      case 'CCC34': // sukun\n\n      case 'CCC35': // superscript alef\n\n      case 'CCC36':\n        // superscript alaph\n        return 'Above';\n\n      case 'CCC29': // kasratan\n\n      case 'CCC32':\n        // kasra\n        return 'Below';\n      // Thai\n\n      case 'CCC103':\n        // sara u / sara uu\n        return 'Below_Right';\n\n      case 'CCC107':\n        // mai\n        return 'Above_Right';\n      // Lao\n\n      case 'CCC118':\n        // sign u / sign uu\n        return 'Below';\n\n      case 'CCC122':\n        // mai\n        return 'Above';\n      // Tibetan\n\n      case 'CCC129': // sign aa\n\n      case 'CCC132':\n        // sign u\n        return 'Below';\n\n      case 'CCC130':\n        // sign i\n        return 'Above';\n    }\n\n    return combiningClass;\n  }\n\n}\n\n/**\r\n * Represents a glyph bounding box\r\n */\nclass BBox {\n  constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity) {\n    /**\r\n     * The minimum X position in the bounding box\r\n     * @type {number}\r\n     */\n    this.minX = minX;\n    /**\r\n     * The minimum Y position in the bounding box\r\n     * @type {number}\r\n     */\n\n    this.minY = minY;\n    /**\r\n     * The maxmimum X position in the bounding box\r\n     * @type {number}\r\n     */\n\n    this.maxX = maxX;\n    /**\r\n     * The maxmimum Y position in the bounding box\r\n     * @type {number}\r\n     */\n\n    this.maxY = maxY;\n  }\n  /**\r\n   * The width of the bounding box\r\n   * @type {number}\r\n   */\n\n\n  get width() {\n    return this.maxX - this.minX;\n  }\n  /**\r\n   * The height of the bounding box\r\n   * @type {number}\r\n   */\n\n\n  get height() {\n    return this.maxY - this.minY;\n  }\n\n  addPoint(x, y) {\n    if (Math.abs(x) !== Infinity) {\n      if (x < this.minX) {\n        this.minX = x;\n      }\n\n      if (x > this.maxX) {\n        this.maxX = x;\n      }\n    }\n\n    if (Math.abs(y) !== Infinity) {\n      if (y < this.minY) {\n        this.minY = y;\n      }\n\n      if (y > this.maxY) {\n        this.maxY = y;\n      }\n    }\n  }\n\n  copy() {\n    return new BBox(this.minX, this.minY, this.maxX, this.maxY);\n  }\n\n}\n\n// Data from http://www.microsoft.com/typography/otspec/scripttags.htm\n// and http://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt.\n\nvar UNICODE_SCRIPTS = {\n  Caucasian_Albanian: 'aghb',\n  Arabic: 'arab',\n  Imperial_Aramaic: 'armi',\n  Armenian: 'armn',\n  Avestan: 'avst',\n  Balinese: 'bali',\n  Bamum: 'bamu',\n  Bassa_Vah: 'bass',\n  Batak: 'batk',\n  Bengali: ['bng2', 'beng'],\n  Bopomofo: 'bopo',\n  Brahmi: 'brah',\n  Braille: 'brai',\n  Buginese: 'bugi',\n  Buhid: 'buhd',\n  Chakma: 'cakm',\n  Canadian_Aboriginal: 'cans',\n  Carian: 'cari',\n  Cham: 'cham',\n  Cherokee: 'cher',\n  Coptic: 'copt',\n  Cypriot: 'cprt',\n  Cyrillic: 'cyrl',\n  Devanagari: ['dev2', 'deva'],\n  Deseret: 'dsrt',\n  Duployan: 'dupl',\n  Egyptian_Hieroglyphs: 'egyp',\n  Elbasan: 'elba',\n  Ethiopic: 'ethi',\n  Georgian: 'geor',\n  Glagolitic: 'glag',\n  Gothic: 'goth',\n  Grantha: 'gran',\n  Greek: 'grek',\n  Gujarati: ['gjr2', 'gujr'],\n  Gurmukhi: ['gur2', 'guru'],\n  Hangul: 'hang',\n  Han: 'hani',\n  Hanunoo: 'hano',\n  Hebrew: 'hebr',\n  Hiragana: 'hira',\n  Pahawh_Hmong: 'hmng',\n  Katakana_Or_Hiragana: 'hrkt',\n  Old_Italic: 'ital',\n  Javanese: 'java',\n  Kayah_Li: 'kali',\n  Katakana: 'kana',\n  Kharoshthi: 'khar',\n  Khmer: 'khmr',\n  Khojki: 'khoj',\n  Kannada: ['knd2', 'knda'],\n  Kaithi: 'kthi',\n  Tai_Tham: 'lana',\n  Lao: 'lao ',\n  Latin: 'latn',\n  Lepcha: 'lepc',\n  Limbu: 'limb',\n  Linear_A: 'lina',\n  Linear_B: 'linb',\n  Lisu: 'lisu',\n  Lycian: 'lyci',\n  Lydian: 'lydi',\n  Mahajani: 'mahj',\n  Mandaic: 'mand',\n  Manichaean: 'mani',\n  Mende_Kikakui: 'mend',\n  Meroitic_Cursive: 'merc',\n  Meroitic_Hieroglyphs: 'mero',\n  Malayalam: ['mlm2', 'mlym'],\n  Modi: 'modi',\n  Mongolian: 'mong',\n  Mro: 'mroo',\n  Meetei_Mayek: 'mtei',\n  Myanmar: ['mym2', 'mymr'],\n  Old_North_Arabian: 'narb',\n  Nabataean: 'nbat',\n  Nko: 'nko ',\n  Ogham: 'ogam',\n  Ol_Chiki: 'olck',\n  Old_Turkic: 'orkh',\n  Oriya: ['ory2', 'orya'],\n  Osmanya: 'osma',\n  Palmyrene: 'palm',\n  Pau_Cin_Hau: 'pauc',\n  Old_Permic: 'perm',\n  Phags_Pa: 'phag',\n  Inscriptional_Pahlavi: 'phli',\n  Psalter_Pahlavi: 'phlp',\n  Phoenician: 'phnx',\n  Miao: 'plrd',\n  Inscriptional_Parthian: 'prti',\n  Rejang: 'rjng',\n  Runic: 'runr',\n  Samaritan: 'samr',\n  Old_South_Arabian: 'sarb',\n  Saurashtra: 'saur',\n  Shavian: 'shaw',\n  Sharada: 'shrd',\n  Siddham: 'sidd',\n  Khudawadi: 'sind',\n  Sinhala: 'sinh',\n  Sora_Sompeng: 'sora',\n  Sundanese: 'sund',\n  Syloti_Nagri: 'sylo',\n  Syriac: 'syrc',\n  Tagbanwa: 'tagb',\n  Takri: 'takr',\n  Tai_Le: 'tale',\n  New_Tai_Lue: 'talu',\n  Tamil: ['tml2', 'taml'],\n  Tai_Viet: 'tavt',\n  Telugu: ['tel2', 'telu'],\n  Tifinagh: 'tfng',\n  Tagalog: 'tglg',\n  Thaana: 'thaa',\n  Thai: 'thai',\n  Tibetan: 'tibt',\n  Tirhuta: 'tirh',\n  Ugaritic: 'ugar',\n  Vai: 'vai ',\n  Warang_Citi: 'wara',\n  Old_Persian: 'xpeo',\n  Cuneiform: 'xsux',\n  Yi: 'yi  ',\n  Inherited: 'zinh',\n  Common: 'zyyy',\n  Unknown: 'zzzz'\n};\nvar OPENTYPE_SCRIPTS = {};\n\nfor (var script in UNICODE_SCRIPTS) {\n  var tag = UNICODE_SCRIPTS[script];\n\n  if (Array.isArray(tag)) {\n    for (var t of tag) {\n      OPENTYPE_SCRIPTS[t] = script;\n    }\n  } else {\n    OPENTYPE_SCRIPTS[tag] = script;\n  }\n}\nfunction fromOpenType(tag) {\n  return OPENTYPE_SCRIPTS[tag];\n}\nfunction forString(string) {\n  var len = string.length;\n  var idx = 0;\n\n  while (idx < len) {\n    var code = string.charCodeAt(idx++); // Check if this is a high surrogate\n\n    if (0xd800 <= code && code <= 0xdbff && idx < len) {\n      var next = string.charCodeAt(idx); // Check if this is a low surrogate\n\n      if (0xdc00 <= next && next <= 0xdfff) {\n        idx++;\n        code = ((code & 0x3FF) << 10) + (next & 0x3FF) + 0x10000;\n      }\n    }\n\n    var _script = unicode.getScript(code);\n\n    if (_script !== 'Common' && _script !== 'Inherited' && _script !== 'Unknown') {\n      return UNICODE_SCRIPTS[_script];\n    }\n  }\n\n  return UNICODE_SCRIPTS.Unknown;\n}\nfunction forCodePoints(codePoints) {\n  for (var i = 0; i < codePoints.length; i++) {\n    var codePoint = codePoints[i];\n\n    var _script2 = unicode.getScript(codePoint);\n\n    if (_script2 !== 'Common' && _script2 !== 'Inherited' && _script2 !== 'Unknown') {\n      return UNICODE_SCRIPTS[_script2];\n    }\n  }\n\n  return UNICODE_SCRIPTS.Unknown;\n} // The scripts in this map are written from right to left\n\nvar RTL = {\n  arab: true,\n  // Arabic\n  hebr: true,\n  // Hebrew\n  syrc: true,\n  // Syriac\n  thaa: true,\n  // Thaana\n  cprt: true,\n  // Cypriot Syllabary\n  khar: true,\n  // Kharosthi\n  phnx: true,\n  // Phoenician\n  'nko ': true,\n  // N'Ko\n  lydi: true,\n  // Lydian\n  avst: true,\n  // Avestan\n  armi: true,\n  // Imperial Aramaic\n  phli: true,\n  // Inscriptional Pahlavi\n  prti: true,\n  // Inscriptional Parthian\n  sarb: true,\n  // Old South Arabian\n  orkh: true,\n  // Old Turkic, Orkhon Runic\n  samr: true,\n  // Samaritan\n  mand: true,\n  // Mandaic, Mandaean\n  merc: true,\n  // Meroitic Cursive\n  mero: true,\n  // Meroitic Hieroglyphs\n  // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)\n  mani: true,\n  // Manichaean\n  mend: true,\n  // Mende Kikakui\n  nbat: true,\n  // Nabataean\n  narb: true,\n  // Old North Arabian\n  palm: true,\n  // Palmyrene\n  phlp: true // Psalter Pahlavi\n\n};\nfunction direction(script) {\n  if (RTL[script]) {\n    return 'rtl';\n  }\n\n  return 'ltr';\n}\n\n/**\r\n * Represents a run of Glyph and GlyphPosition objects.\r\n * Returned by the font layout method.\r\n */\n\nclass GlyphRun {\n  constructor(glyphs, features, script, language, direction$1) {\n    /**\r\n     * An array of Glyph objects in the run\r\n     * @type {Glyph[]}\r\n     */\n    this.glyphs = glyphs;\n    /**\r\n     * An array of GlyphPosition objects for each glyph in the run\r\n     * @type {GlyphPosition[]}\r\n     */\n\n    this.positions = null;\n    /**\r\n     * The script that was requested for shaping. This was either passed in or detected automatically.\r\n     * @type {string}\r\n     */\n\n    this.script = script;\n    /**\r\n     * The language requested for shaping, as passed in. If `null`, the default language for the\r\n     * script was used.\r\n     * @type {string}\r\n     */\n\n    this.language = language || null;\n    /**\r\n     * The direction requested for shaping, as passed in (either ltr or rtl).\r\n     * If `null`, the default direction of the script is used.\r\n     * @type {string}\r\n     */\n\n    this.direction = direction$1 || direction(script);\n    /**\r\n     * The features requested during shaping. This is a combination of user\r\n     * specified features and features chosen by the shaper.\r\n     * @type {object}\r\n     */\n\n    this.features = {}; // Convert features to an object\n\n    if (Array.isArray(features)) {\n      for (var tag of features) {\n        this.features[tag] = true;\n      }\n    } else if (typeof features === 'object') {\n      this.features = features;\n    }\n  }\n  /**\r\n   * The total advance width of the run.\r\n   * @type {number}\r\n   */\n\n\n  get advanceWidth() {\n    var width = 0;\n\n    for (var position of this.positions) {\n      width += position.xAdvance;\n    }\n\n    return width;\n  }\n  /**\r\n   * The total advance height of the run.\r\n   * @type {number}\r\n   */\n\n\n  get advanceHeight() {\n    var height = 0;\n\n    for (var position of this.positions) {\n      height += position.yAdvance;\n    }\n\n    return height;\n  }\n  /**\r\n   * The bounding box containing all glyphs in the run.\r\n   * @type {BBox}\r\n   */\n\n\n  get bbox() {\n    var bbox = new BBox();\n    var x = 0;\n    var y = 0;\n\n    for (var index = 0; index < this.glyphs.length; index++) {\n      var glyph = this.glyphs[index];\n      var p = this.positions[index];\n      var b = glyph.bbox;\n      bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);\n      bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);\n      x += p.xAdvance;\n      y += p.yAdvance;\n    }\n\n    return bbox;\n  }\n\n}\n\n/**\r\n * Represents positioning information for a glyph in a GlyphRun.\r\n */\nclass GlyphPosition {\n  constructor(xAdvance = 0, yAdvance = 0, xOffset = 0, yOffset = 0) {\n    /**\r\n     * The amount to move the virtual pen in the X direction after rendering this glyph.\r\n     * @type {number}\r\n     */\n    this.xAdvance = xAdvance;\n    /**\r\n     * The amount to move the virtual pen in the Y direction after rendering this glyph.\r\n     * @type {number}\r\n     */\n\n    this.yAdvance = yAdvance;\n    /**\r\n     * The offset from the pen position in the X direction at which to render this glyph.\r\n     * @type {number}\r\n     */\n\n    this.xOffset = xOffset;\n    /**\r\n     * The offset from the pen position in the Y direction at which to render this glyph.\r\n     * @type {number}\r\n     */\n\n    this.yOffset = yOffset;\n  }\n\n}\n\n// see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html\n// and /System/Library/Frameworks/CoreText.framework/Versions/A/Headers/SFNTLayoutTypes.h on a Mac\nvar features = {\n  allTypographicFeatures: {\n    code: 0,\n    exclusive: false,\n    allTypeFeatures: 0\n  },\n  ligatures: {\n    code: 1,\n    exclusive: false,\n    requiredLigatures: 0,\n    commonLigatures: 2,\n    rareLigatures: 4,\n    // logos: 6\n    rebusPictures: 8,\n    diphthongLigatures: 10,\n    squaredLigatures: 12,\n    abbrevSquaredLigatures: 14,\n    symbolLigatures: 16,\n    contextualLigatures: 18,\n    historicalLigatures: 20\n  },\n  cursiveConnection: {\n    code: 2,\n    exclusive: true,\n    unconnected: 0,\n    partiallyConnected: 1,\n    cursive: 2\n  },\n  letterCase: {\n    code: 3,\n    exclusive: true\n  },\n  // upperAndLowerCase: 0          # deprecated\n  // allCaps: 1                    # deprecated\n  // allLowerCase: 2               # deprecated\n  // smallCaps: 3                  # deprecated\n  // initialCaps: 4                # deprecated\n  // initialCapsAndSmallCaps: 5    # deprecated\n  verticalSubstitution: {\n    code: 4,\n    exclusive: false,\n    substituteVerticalForms: 0\n  },\n  linguisticRearrangement: {\n    code: 5,\n    exclusive: false,\n    linguisticRearrangement: 0\n  },\n  numberSpacing: {\n    code: 6,\n    exclusive: true,\n    monospacedNumbers: 0,\n    proportionalNumbers: 1,\n    thirdWidthNumbers: 2,\n    quarterWidthNumbers: 3\n  },\n  smartSwash: {\n    code: 8,\n    exclusive: false,\n    wordInitialSwashes: 0,\n    wordFinalSwashes: 2,\n    // lineInitialSwashes: 4\n    // lineFinalSwashes: 6\n    nonFinalSwashes: 8\n  },\n  diacritics: {\n    code: 9,\n    exclusive: true,\n    showDiacritics: 0,\n    hideDiacritics: 1,\n    decomposeDiacritics: 2\n  },\n  verticalPosition: {\n    code: 10,\n    exclusive: true,\n    normalPosition: 0,\n    superiors: 1,\n    inferiors: 2,\n    ordinals: 3,\n    scientificInferiors: 4\n  },\n  fractions: {\n    code: 11,\n    exclusive: true,\n    noFractions: 0,\n    verticalFractions: 1,\n    diagonalFractions: 2\n  },\n  overlappingCharacters: {\n    code: 13,\n    exclusive: false,\n    preventOverlap: 0\n  },\n  typographicExtras: {\n    code: 14,\n    exclusive: false,\n    // hyphensToEmDash: 0\n    // hyphenToEnDash: 2\n    slashedZero: 4\n  },\n  // formInterrobang: 6\n  // smartQuotes: 8\n  // periodsToEllipsis: 10\n  mathematicalExtras: {\n    code: 15,\n    exclusive: false,\n    // hyphenToMinus: 0\n    // asteristoMultiply: 2\n    // slashToDivide: 4\n    // inequalityLigatures: 6\n    // exponents: 8\n    mathematicalGreek: 10\n  },\n  ornamentSets: {\n    code: 16,\n    exclusive: true,\n    noOrnaments: 0,\n    dingbats: 1,\n    piCharacters: 2,\n    fleurons: 3,\n    decorativeBorders: 4,\n    internationalSymbols: 5,\n    mathSymbols: 6\n  },\n  characterAlternatives: {\n    code: 17,\n    exclusive: true,\n    noAlternates: 0\n  },\n  // user defined options\n  designComplexity: {\n    code: 18,\n    exclusive: true,\n    designLevel1: 0,\n    designLevel2: 1,\n    designLevel3: 2,\n    designLevel4: 3,\n    designLevel5: 4\n  },\n  styleOptions: {\n    code: 19,\n    exclusive: true,\n    noStyleOptions: 0,\n    displayText: 1,\n    engravedText: 2,\n    illuminatedCaps: 3,\n    titlingCaps: 4,\n    tallCaps: 5\n  },\n  characterShape: {\n    code: 20,\n    exclusive: true,\n    traditionalCharacters: 0,\n    simplifiedCharacters: 1,\n    JIS1978Characters: 2,\n    JIS1983Characters: 3,\n    JIS1990Characters: 4,\n    traditionalAltOne: 5,\n    traditionalAltTwo: 6,\n    traditionalAltThree: 7,\n    traditionalAltFour: 8,\n    traditionalAltFive: 9,\n    expertCharacters: 10,\n    JIS2004Characters: 11,\n    hojoCharacters: 12,\n    NLCCharacters: 13,\n    traditionalNamesCharacters: 14\n  },\n  numberCase: {\n    code: 21,\n    exclusive: true,\n    lowerCaseNumbers: 0,\n    upperCaseNumbers: 1\n  },\n  textSpacing: {\n    code: 22,\n    exclusive: true,\n    proportionalText: 0,\n    monospacedText: 1,\n    halfWidthText: 2,\n    thirdWidthText: 3,\n    quarterWidthText: 4,\n    altProportionalText: 5,\n    altHalfWidthText: 6\n  },\n  transliteration: {\n    code: 23,\n    exclusive: true,\n    noTransliteration: 0\n  },\n  // hanjaToHangul: 1\n  // hiraganaToKatakana: 2\n  // katakanaToHiragana: 3\n  // kanaToRomanization: 4\n  // romanizationToHiragana: 5\n  // romanizationToKatakana: 6\n  // hanjaToHangulAltOne: 7\n  // hanjaToHangulAltTwo: 8\n  // hanjaToHangulAltThree: 9\n  annotation: {\n    code: 24,\n    exclusive: true,\n    noAnnotation: 0,\n    boxAnnotation: 1,\n    roundedBoxAnnotation: 2,\n    circleAnnotation: 3,\n    invertedCircleAnnotation: 4,\n    parenthesisAnnotation: 5,\n    periodAnnotation: 6,\n    romanNumeralAnnotation: 7,\n    diamondAnnotation: 8,\n    invertedBoxAnnotation: 9,\n    invertedRoundedBoxAnnotation: 10\n  },\n  kanaSpacing: {\n    code: 25,\n    exclusive: true,\n    fullWidthKana: 0,\n    proportionalKana: 1\n  },\n  ideographicSpacing: {\n    code: 26,\n    exclusive: true,\n    fullWidthIdeographs: 0,\n    proportionalIdeographs: 1,\n    halfWidthIdeographs: 2\n  },\n  unicodeDecomposition: {\n    code: 27,\n    exclusive: false,\n    canonicalComposition: 0,\n    compatibilityComposition: 2,\n    transcodingComposition: 4\n  },\n  rubyKana: {\n    code: 28,\n    exclusive: false,\n    // noRubyKana: 0     # deprecated - use rubyKanaOff instead\n    // rubyKana: 1     # deprecated - use rubyKanaOn instead\n    rubyKana: 2\n  },\n  CJKSymbolAlternatives: {\n    code: 29,\n    exclusive: true,\n    noCJKSymbolAlternatives: 0,\n    CJKSymbolAltOne: 1,\n    CJKSymbolAltTwo: 2,\n    CJKSymbolAltThree: 3,\n    CJKSymbolAltFour: 4,\n    CJKSymbolAltFive: 5\n  },\n  ideographicAlternatives: {\n    code: 30,\n    exclusive: true,\n    noIdeographicAlternatives: 0,\n    ideographicAltOne: 1,\n    ideographicAltTwo: 2,\n    ideographicAltThree: 3,\n    ideographicAltFour: 4,\n    ideographicAltFive: 5\n  },\n  CJKVerticalRomanPlacement: {\n    code: 31,\n    exclusive: true,\n    CJKVerticalRomanCentered: 0,\n    CJKVerticalRomanHBaseline: 1\n  },\n  italicCJKRoman: {\n    code: 32,\n    exclusive: false,\n    // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead\n    // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead\n    CJKItalicRoman: 2\n  },\n  caseSensitiveLayout: {\n    code: 33,\n    exclusive: false,\n    caseSensitiveLayout: 0,\n    caseSensitiveSpacing: 2\n  },\n  alternateKana: {\n    code: 34,\n    exclusive: false,\n    alternateHorizKana: 0,\n    alternateVertKana: 2\n  },\n  stylisticAlternatives: {\n    code: 35,\n    exclusive: false,\n    noStylisticAlternates: 0,\n    stylisticAltOne: 2,\n    stylisticAltTwo: 4,\n    stylisticAltThree: 6,\n    stylisticAltFour: 8,\n    stylisticAltFive: 10,\n    stylisticAltSix: 12,\n    stylisticAltSeven: 14,\n    stylisticAltEight: 16,\n    stylisticAltNine: 18,\n    stylisticAltTen: 20,\n    stylisticAltEleven: 22,\n    stylisticAltTwelve: 24,\n    stylisticAltThirteen: 26,\n    stylisticAltFourteen: 28,\n    stylisticAltFifteen: 30,\n    stylisticAltSixteen: 32,\n    stylisticAltSeventeen: 34,\n    stylisticAltEighteen: 36,\n    stylisticAltNineteen: 38,\n    stylisticAltTwenty: 40\n  },\n  contextualAlternates: {\n    code: 36,\n    exclusive: false,\n    contextualAlternates: 0,\n    swashAlternates: 2,\n    contextualSwashAlternates: 4\n  },\n  lowerCase: {\n    code: 37,\n    exclusive: true,\n    defaultLowerCase: 0,\n    lowerCaseSmallCaps: 1,\n    lowerCasePetiteCaps: 2\n  },\n  upperCase: {\n    code: 38,\n    exclusive: true,\n    defaultUpperCase: 0,\n    upperCaseSmallCaps: 1,\n    upperCasePetiteCaps: 2\n  },\n  languageTag: {\n    // indices into ltag table\n    code: 39,\n    exclusive: true\n  },\n  CJKRomanSpacing: {\n    code: 103,\n    exclusive: true,\n    halfWidthCJKRoman: 0,\n    proportionalCJKRoman: 1,\n    defaultCJKRoman: 2,\n    fullWidthCJKRoman: 3\n  }\n};\n\nvar feature = (name, selector) => [features[name].code, features[name][selector]];\n\nvar OTMapping = {\n  rlig: feature('ligatures', 'requiredLigatures'),\n  clig: feature('ligatures', 'contextualLigatures'),\n  dlig: feature('ligatures', 'rareLigatures'),\n  hlig: feature('ligatures', 'historicalLigatures'),\n  liga: feature('ligatures', 'commonLigatures'),\n  hist: feature('ligatures', 'historicalLigatures'),\n  // ??\n  smcp: feature('lowerCase', 'lowerCaseSmallCaps'),\n  pcap: feature('lowerCase', 'lowerCasePetiteCaps'),\n  frac: feature('fractions', 'diagonalFractions'),\n  dnom: feature('fractions', 'diagonalFractions'),\n  // ??\n  numr: feature('fractions', 'diagonalFractions'),\n  // ??\n  afrc: feature('fractions', 'verticalFractions'),\n  // aalt\n  // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?\n  // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?\n  // unic, vatu, vhal, vjmo, vpal, vrt2\n  // dist -> trak table?\n  // kern, vkrn -> kern table\n  // lfbd + opbd + rtbd -> opbd table?\n  // mark, mkmk -> acnt table?\n  // locl -> languageTag + ltag table\n  case: feature('caseSensitiveLayout', 'caseSensitiveLayout'),\n  // also caseSensitiveSpacing\n  ccmp: feature('unicodeDecomposition', 'canonicalComposition'),\n  // compatibilityComposition?\n  cpct: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),\n  // guess..., probably not given below\n  valt: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),\n  swsh: feature('contextualAlternates', 'swashAlternates'),\n  cswh: feature('contextualAlternates', 'contextualSwashAlternates'),\n  curs: feature('cursiveConnection', 'cursive'),\n  // ??\n  c2pc: feature('upperCase', 'upperCasePetiteCaps'),\n  c2sc: feature('upperCase', 'upperCaseSmallCaps'),\n  init: feature('smartSwash', 'wordInitialSwashes'),\n  // ??\n  fin2: feature('smartSwash', 'wordFinalSwashes'),\n  // ??\n  medi: feature('smartSwash', 'nonFinalSwashes'),\n  // ??\n  med2: feature('smartSwash', 'nonFinalSwashes'),\n  // ??\n  fin3: feature('smartSwash', 'wordFinalSwashes'),\n  // ??\n  fina: feature('smartSwash', 'wordFinalSwashes'),\n  // ??\n  pkna: feature('kanaSpacing', 'proportionalKana'),\n  half: feature('textSpacing', 'halfWidthText'),\n  // also HalfWidthCJKRoman, HalfWidthIdeographs?\n  halt: feature('textSpacing', 'altHalfWidthText'),\n  hkna: feature('alternateKana', 'alternateHorizKana'),\n  vkna: feature('alternateKana', 'alternateVertKana'),\n  // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated\n  ital: feature('italicCJKRoman', 'CJKItalicRoman'),\n  lnum: feature('numberCase', 'upperCaseNumbers'),\n  onum: feature('numberCase', 'lowerCaseNumbers'),\n  mgrk: feature('mathematicalExtras', 'mathematicalGreek'),\n  // nalt: not enough info. what type of annotation?\n  // ornm: ditto, which ornament style?\n  calt: feature('contextualAlternates', 'contextualAlternates'),\n  // or more?\n  vrt2: feature('verticalSubstitution', 'substituteVerticalForms'),\n  // oh... below?\n  vert: feature('verticalSubstitution', 'substituteVerticalForms'),\n  tnum: feature('numberSpacing', 'monospacedNumbers'),\n  pnum: feature('numberSpacing', 'proportionalNumbers'),\n  sups: feature('verticalPosition', 'superiors'),\n  subs: feature('verticalPosition', 'inferiors'),\n  ordn: feature('verticalPosition', 'ordinals'),\n  pwid: feature('textSpacing', 'proportionalText'),\n  hwid: feature('textSpacing', 'halfWidthText'),\n  qwid: feature('textSpacing', 'quarterWidthText'),\n  // also QuarterWidthNumbers?\n  twid: feature('textSpacing', 'thirdWidthText'),\n  // also ThirdWidthNumbers?\n  fwid: feature('textSpacing', 'proportionalText'),\n  //??\n  palt: feature('textSpacing', 'altProportionalText'),\n  trad: feature('characterShape', 'traditionalCharacters'),\n  smpl: feature('characterShape', 'simplifiedCharacters'),\n  jp78: feature('characterShape', 'JIS1978Characters'),\n  jp83: feature('characterShape', 'JIS1983Characters'),\n  jp90: feature('characterShape', 'JIS1990Characters'),\n  jp04: feature('characterShape', 'JIS2004Characters'),\n  expt: feature('characterShape', 'expertCharacters'),\n  hojo: feature('characterShape', 'hojoCharacters'),\n  nlck: feature('characterShape', 'NLCCharacters'),\n  tnam: feature('characterShape', 'traditionalNamesCharacters'),\n  ruby: feature('rubyKana', 'rubyKana'),\n  titl: feature('styleOptions', 'titlingCaps'),\n  zero: feature('typographicExtras', 'slashedZero'),\n  ss01: feature('stylisticAlternatives', 'stylisticAltOne'),\n  ss02: feature('stylisticAlternatives', 'stylisticAltTwo'),\n  ss03: feature('stylisticAlternatives', 'stylisticAltThree'),\n  ss04: feature('stylisticAlternatives', 'stylisticAltFour'),\n  ss05: feature('stylisticAlternatives', 'stylisticAltFive'),\n  ss06: feature('stylisticAlternatives', 'stylisticAltSix'),\n  ss07: feature('stylisticAlternatives', 'stylisticAltSeven'),\n  ss08: feature('stylisticAlternatives', 'stylisticAltEight'),\n  ss09: feature('stylisticAlternatives', 'stylisticAltNine'),\n  ss10: feature('stylisticAlternatives', 'stylisticAltTen'),\n  ss11: feature('stylisticAlternatives', 'stylisticAltEleven'),\n  ss12: feature('stylisticAlternatives', 'stylisticAltTwelve'),\n  ss13: feature('stylisticAlternatives', 'stylisticAltThirteen'),\n  ss14: feature('stylisticAlternatives', 'stylisticAltFourteen'),\n  ss15: feature('stylisticAlternatives', 'stylisticAltFifteen'),\n  ss16: feature('stylisticAlternatives', 'stylisticAltSixteen'),\n  ss17: feature('stylisticAlternatives', 'stylisticAltSeventeen'),\n  ss18: feature('stylisticAlternatives', 'stylisticAltEighteen'),\n  ss19: feature('stylisticAlternatives', 'stylisticAltNineteen'),\n  ss20: feature('stylisticAlternatives', 'stylisticAltTwenty')\n}; // salt: feature 'stylisticAlternatives', 'stylisticAltOne' # hmm, which one to choose\n// Add cv01-cv99 features\n\nfor (var i = 1; i <= 99; i++) {\n  OTMapping[\"cv\".concat(\"00\".concat(i).slice(-2))] = [features.characterAlternatives.code, i];\n} // create inverse mapping\n\n\nvar AATMapping = {};\n\nfor (var ot in OTMapping) {\n  var aat = OTMapping[ot];\n\n  if (AATMapping[aat[0]] == null) {\n    AATMapping[aat[0]] = {};\n  }\n\n  AATMapping[aat[0]][aat[1]] = ot;\n} // Maps an array of OpenType features to AAT features\n// in the form of {featureType:{featureSetting:true}}\n\n\nfunction mapOTToAAT(features) {\n  var res = {};\n\n  for (var k in features) {\n    var r = void 0;\n\n    if (r = OTMapping[k]) {\n      if (res[r[0]] == null) {\n        res[r[0]] = {};\n      }\n\n      res[r[0]][r[1]] = features[k];\n    }\n  }\n\n  return res;\n} // Maps strings in a [featureType, featureSetting]\n// to their equivalent number codes\n\nfunction mapFeatureStrings(f) {\n  var [type, setting] = f;\n\n  if (isNaN(type)) {\n    var typeCode = features[type] && features[type].code;\n  } else {\n    var typeCode = type;\n  }\n\n  if (isNaN(setting)) {\n    var settingCode = features[type] && features[type][setting];\n  } else {\n    var settingCode = setting;\n  }\n\n  return [typeCode, settingCode];\n} // Maps AAT features to an array of OpenType features\n// Supports both arrays in the form of [[featureType, featureSetting]]\n// and objects in the form of {featureType:{featureSetting:true}}\n// featureTypes and featureSettings can be either strings or number codes\n\n\nfunction mapAATToOT(features) {\n  var res = {};\n\n  if (Array.isArray(features)) {\n    for (var k = 0; k < features.length; k++) {\n      var r = void 0;\n      var f = mapFeatureStrings(features[k]);\n\n      if (r = AATMapping[f[0]] && AATMapping[f[0]][f[1]]) {\n        res[r] = true;\n      }\n    }\n  } else if (typeof features === 'object') {\n    for (var type in features) {\n      var _feature = features[type];\n\n      for (var setting in _feature) {\n        var _r = void 0;\n\n        var _f = mapFeatureStrings([type, setting]);\n\n        if (_feature[setting] && (_r = AATMapping[_f[0]] && AATMapping[_f[0]][_f[1]])) {\n          res[_r] = true;\n        }\n      }\n    }\n  }\n\n  return Object.keys(res);\n}\n\nvar _class$1;\nvar AATLookupTable = (_class$1 = class AATLookupTable {\n  constructor(table) {\n    this.table = table;\n  }\n\n  lookup(glyph) {\n    switch (this.table.version) {\n      case 0:\n        // simple array format\n        return this.table.values.getItem(glyph);\n\n      case 2: // segment format\n\n      case 4:\n        {\n          var min = 0;\n          var max = this.table.binarySearchHeader.nUnits - 1;\n\n          while (min <= max) {\n            var mid = min + max >> 1;\n            var seg = this.table.segments[mid]; // special end of search value\n\n            if (seg.firstGlyph === 0xffff) {\n              return null;\n            }\n\n            if (glyph < seg.firstGlyph) {\n              max = mid - 1;\n            } else if (glyph > seg.lastGlyph) {\n              min = mid + 1;\n            } else {\n              if (this.table.version === 2) {\n                return seg.value;\n              } else {\n                return seg.values[glyph - seg.firstGlyph];\n              }\n            }\n          }\n\n          return null;\n        }\n\n      case 6:\n        {\n          // lookup single\n          var _min = 0;\n\n          var _max = this.table.binarySearchHeader.nUnits - 1;\n\n          while (_min <= _max) {\n            var mid = _min + _max >> 1;\n            var seg = this.table.segments[mid]; // special end of search value\n\n            if (seg.glyph === 0xffff) {\n              return null;\n            }\n\n            if (glyph < seg.glyph) {\n              _max = mid - 1;\n            } else if (glyph > seg.glyph) {\n              _min = mid + 1;\n            } else {\n              return seg.value;\n            }\n          }\n\n          return null;\n        }\n\n      case 8:\n        // lookup trimmed\n        return this.table.values[glyph - this.table.firstGlyph];\n\n      default:\n        throw new Error(\"Unknown lookup table format: \".concat(this.table.version));\n    }\n  }\n\n  glyphsForValue(classValue) {\n    var res = [];\n\n    switch (this.table.version) {\n      case 2: // segment format\n\n      case 4:\n        {\n          for (var segment of this.table.segments) {\n            if (this.table.version === 2 && segment.value === classValue) {\n              res.push(...range(segment.firstGlyph, segment.lastGlyph + 1));\n            } else {\n              for (var index = 0; index < segment.values.length; index++) {\n                if (segment.values[index] === classValue) {\n                  res.push(segment.firstGlyph + index);\n                }\n              }\n            }\n          }\n\n          break;\n        }\n\n      case 6:\n        {\n          // lookup single\n          for (var _segment of this.table.segments) {\n            if (_segment.value === classValue) {\n              res.push(_segment.glyph);\n            }\n          }\n\n          break;\n        }\n\n      case 8:\n        {\n          // lookup trimmed\n          for (var i = 0; i < this.table.values.length; i++) {\n            if (this.table.values[i] === classValue) {\n              res.push(this.table.firstGlyph + i);\n            }\n          }\n\n          break;\n        }\n\n      default:\n        throw new Error(\"Unknown lookup table format: \".concat(this.table.version));\n    }\n\n    return res;\n  }\n\n}, (_applyDecoratedDescriptor(_class$1.prototype, \"glyphsForValue\", [cache], Object.getOwnPropertyDescriptor(_class$1.prototype, \"glyphsForValue\"), _class$1.prototype)), _class$1);\n\nvar START_OF_TEXT_STATE = 0;\nvar END_OF_TEXT_CLASS = 0;\nvar OUT_OF_BOUNDS_CLASS = 1;\nvar DELETED_GLYPH_CLASS = 2;\nvar DONT_ADVANCE = 0x4000;\nclass AATStateMachine {\n  constructor(stateTable) {\n    this.stateTable = stateTable;\n    this.lookupTable = new AATLookupTable(stateTable.classTable);\n  }\n\n  process(glyphs, reverse, processEntry) {\n    var currentState = START_OF_TEXT_STATE; // START_OF_LINE_STATE is used for kashida glyph insertions sometimes I think?\n\n    var index = reverse ? glyphs.length - 1 : 0;\n    var dir = reverse ? -1 : 1;\n\n    while (dir === 1 && index <= glyphs.length || dir === -1 && index >= -1) {\n      var glyph = null;\n      var classCode = OUT_OF_BOUNDS_CLASS;\n      var shouldAdvance = true;\n\n      if (index === glyphs.length || index === -1) {\n        classCode = END_OF_TEXT_CLASS;\n      } else {\n        glyph = glyphs[index];\n\n        if (glyph.id === 0xffff) {\n          // deleted glyph\n          classCode = DELETED_GLYPH_CLASS;\n        } else {\n          classCode = this.lookupTable.lookup(glyph.id);\n\n          if (classCode == null) {\n            classCode = OUT_OF_BOUNDS_CLASS;\n          }\n        }\n      }\n\n      var row = this.stateTable.stateArray.getItem(currentState);\n      var entryIndex = row[classCode];\n      var entry = this.stateTable.entryTable.getItem(entryIndex);\n\n      if (classCode !== END_OF_TEXT_CLASS && classCode !== DELETED_GLYPH_CLASS) {\n        processEntry(glyph, entry, index);\n        shouldAdvance = !(entry.flags & DONT_ADVANCE);\n      }\n\n      currentState = entry.newState;\n\n      if (shouldAdvance) {\n        index += dir;\n      }\n    }\n\n    return glyphs;\n  }\n  /**\r\n   * Performs a depth-first traversal of the glyph strings\r\n   * represented by the state machine.\r\n   */\n\n\n  traverse(opts, state = 0, visited = new Set()) {\n    if (visited.has(state)) {\n      return;\n    }\n\n    visited.add(state);\n    var {\n      nClasses,\n      stateArray,\n      entryTable\n    } = this.stateTable;\n    var row = stateArray.getItem(state); // Skip predefined classes\n\n    for (var classCode = 4; classCode < nClasses; classCode++) {\n      var entryIndex = row[classCode];\n      var entry = entryTable.getItem(entryIndex); // Try all glyphs in the class\n\n      for (var glyph of this.lookupTable.glyphsForValue(classCode)) {\n        if (opts.enter) {\n          opts.enter(glyph, entry);\n        }\n\n        if (entry.newState !== 0) {\n          this.traverse(opts, entry.newState, visited);\n        }\n\n        if (opts.exit) {\n          opts.exit(glyph, entry);\n        }\n      }\n    }\n  }\n\n}\n\nvar _class$2;\n\nvar MARK_FIRST = 0x8000;\nvar MARK_LAST = 0x2000;\nvar VERB = 0x000F; // contextual substitution and glyph insertion flag\n\nvar SET_MARK = 0x8000; // ligature entry flags\n\nvar SET_COMPONENT = 0x8000;\nvar PERFORM_ACTION = 0x2000; // ligature action masks\n\nvar LAST_MASK = 0x80000000;\nvar STORE_MASK = 0x40000000;\nvar OFFSET_MASK = 0x3FFFFFFF;\nvar REVERSE_DIRECTION = 0x400000;\nvar CURRENT_INSERT_BEFORE = 0x0800;\nvar MARKED_INSERT_BEFORE = 0x0400;\nvar CURRENT_INSERT_COUNT = 0x03E0;\nvar MARKED_INSERT_COUNT = 0x001F;\nvar AATMorxProcessor = (_class$2 = class AATMorxProcessor {\n  constructor(font) {\n    this.processIndicRearragement = this.processIndicRearragement.bind(this);\n    this.processContextualSubstitution = this.processContextualSubstitution.bind(this);\n    this.processLigature = this.processLigature.bind(this);\n    this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);\n    this.processGlyphInsertion = this.processGlyphInsertion.bind(this);\n    this.font = font;\n    this.morx = font.morx;\n    this.inputCache = null;\n  } // Processes an array of glyphs and applies the specified features\n  // Features should be in the form of {featureType:{featureSetting:boolean}}\n\n\n  process(glyphs, features = {}) {\n    for (var chain of this.morx.chains) {\n      var flags = chain.defaultFlags; // enable/disable the requested features\n\n      for (var feature of chain.features) {\n        var f = void 0;\n\n        if (f = features[feature.featureType]) {\n          if (f[feature.featureSetting]) {\n            flags &= feature.disableFlags;\n            flags |= feature.enableFlags;\n          } else if (f[feature.featureSetting] === false) {\n            flags |= ~feature.disableFlags;\n            flags &= ~feature.enableFlags;\n          }\n        }\n      }\n\n      for (var subtable of chain.subtables) {\n        if (subtable.subFeatureFlags & flags) {\n          this.processSubtable(subtable, glyphs);\n        }\n      }\n    } // remove deleted glyphs\n\n\n    var index = glyphs.length - 1;\n\n    while (index >= 0) {\n      if (glyphs[index].id === 0xffff) {\n        glyphs.splice(index, 1);\n      }\n\n      index--;\n    }\n\n    return glyphs;\n  }\n\n  processSubtable(subtable, glyphs) {\n    this.subtable = subtable;\n    this.glyphs = glyphs;\n\n    if (this.subtable.type === 4) {\n      this.processNoncontextualSubstitutions(this.subtable, this.glyphs);\n      return;\n    }\n\n    this.ligatureStack = [];\n    this.markedGlyph = null;\n    this.firstGlyph = null;\n    this.lastGlyph = null;\n    this.markedIndex = null;\n    var stateMachine = this.getStateMachine(subtable);\n    var process = this.getProcessor();\n    var reverse = !!(this.subtable.coverage & REVERSE_DIRECTION);\n    return stateMachine.process(this.glyphs, reverse, process);\n  }\n\n  getStateMachine(subtable) {\n    return new AATStateMachine(subtable.table.stateTable);\n  }\n\n  getProcessor() {\n    switch (this.subtable.type) {\n      case 0:\n        return this.processIndicRearragement;\n\n      case 1:\n        return this.processContextualSubstitution;\n\n      case 2:\n        return this.processLigature;\n\n      case 4:\n        return this.processNoncontextualSubstitutions;\n\n      case 5:\n        return this.processGlyphInsertion;\n\n      default:\n        throw new Error(\"Invalid morx subtable type: \".concat(this.subtable.type));\n    }\n  }\n\n  processIndicRearragement(glyph, entry, index) {\n    if (entry.flags & MARK_FIRST) {\n      this.firstGlyph = index;\n    }\n\n    if (entry.flags & MARK_LAST) {\n      this.lastGlyph = index;\n    }\n\n    reorderGlyphs(this.glyphs, entry.flags & VERB, this.firstGlyph, this.lastGlyph);\n  }\n\n  processContextualSubstitution(glyph, entry, index) {\n    var subsitutions = this.subtable.table.substitutionTable.items;\n\n    if (entry.markIndex !== 0xffff) {\n      var lookup = subsitutions.getItem(entry.markIndex);\n      var lookupTable = new AATLookupTable(lookup);\n      glyph = this.glyphs[this.markedGlyph];\n      var gid = lookupTable.lookup(glyph.id);\n\n      if (gid) {\n        this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);\n      }\n    }\n\n    if (entry.currentIndex !== 0xffff) {\n      var _lookup = subsitutions.getItem(entry.currentIndex);\n\n      var _lookupTable = new AATLookupTable(_lookup);\n\n      glyph = this.glyphs[index];\n\n      var gid = _lookupTable.lookup(glyph.id);\n\n      if (gid) {\n        this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n      }\n    }\n\n    if (entry.flags & SET_MARK) {\n      this.markedGlyph = index;\n    }\n  }\n\n  processLigature(glyph, entry, index) {\n    if (entry.flags & SET_COMPONENT) {\n      this.ligatureStack.push(index);\n    }\n\n    if (entry.flags & PERFORM_ACTION) {\n      var actions = this.subtable.table.ligatureActions;\n      var components = this.subtable.table.components;\n      var ligatureList = this.subtable.table.ligatureList;\n      var actionIndex = entry.action;\n      var last = false;\n      var ligatureIndex = 0;\n      var codePoints = [];\n      var ligatureGlyphs = [];\n\n      while (!last) {\n        var componentGlyph = this.ligatureStack.pop();\n        codePoints.unshift(...this.glyphs[componentGlyph].codePoints);\n        var action = actions.getItem(actionIndex++);\n        last = !!(action & LAST_MASK);\n        var store = !!(action & STORE_MASK);\n        var offset = (action & OFFSET_MASK) << 2 >> 2; // sign extend 30 to 32 bits\n\n        offset += this.glyphs[componentGlyph].id;\n        var component = components.getItem(offset);\n        ligatureIndex += component;\n\n        if (last || store) {\n          var ligatureEntry = ligatureList.getItem(ligatureIndex);\n          this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);\n          ligatureGlyphs.push(componentGlyph);\n          ligatureIndex = 0;\n          codePoints = [];\n        } else {\n          this.glyphs[componentGlyph] = this.font.getGlyph(0xffff);\n        }\n      } // Put ligature glyph indexes back on the stack\n\n\n      this.ligatureStack.push(...ligatureGlyphs);\n    }\n  }\n\n  processNoncontextualSubstitutions(subtable, glyphs, index) {\n    var lookupTable = new AATLookupTable(subtable.table.lookupTable);\n\n    for (index = 0; index < glyphs.length; index++) {\n      var glyph = glyphs[index];\n\n      if (glyph.id !== 0xffff) {\n        var gid = lookupTable.lookup(glyph.id);\n\n        if (gid) {\n          // 0 means do nothing\n          glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n        }\n      }\n    }\n  }\n\n  _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {\n    var insertions = [];\n\n    while (count--) {\n      var gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);\n      insertions.push(this.font.getGlyph(gid));\n    }\n\n    if (!isBefore) {\n      glyphIndex++;\n    }\n\n    this.glyphs.splice(glyphIndex, 0, ...insertions);\n  }\n\n  processGlyphInsertion(glyph, entry, index) {\n    if (entry.flags & SET_MARK) {\n      this.markedIndex = index;\n    }\n\n    if (entry.markedInsertIndex !== 0xffff) {\n      var count = (entry.flags & MARKED_INSERT_COUNT) >>> 5;\n      var isBefore = !!(entry.flags & MARKED_INSERT_BEFORE);\n\n      this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);\n    }\n\n    if (entry.currentInsertIndex !== 0xffff) {\n      var _count = (entry.flags & CURRENT_INSERT_COUNT) >>> 5;\n\n      var _isBefore = !!(entry.flags & CURRENT_INSERT_BEFORE);\n\n      this._insertGlyphs(index, entry.currentInsertIndex, _count, _isBefore);\n    }\n  }\n\n  getSupportedFeatures() {\n    var features = [];\n\n    for (var chain of this.morx.chains) {\n      for (var feature of chain.features) {\n        features.push([feature.featureType, feature.featureSetting]);\n      }\n    }\n\n    return features;\n  }\n\n  generateInputs(gid) {\n    if (!this.inputCache) {\n      this.generateInputCache();\n    }\n\n    return this.inputCache[gid] || [];\n  }\n\n  generateInputCache() {\n    this.inputCache = {};\n\n    for (var chain of this.morx.chains) {\n      var flags = chain.defaultFlags;\n\n      for (var subtable of chain.subtables) {\n        if (subtable.subFeatureFlags & flags) {\n          this.generateInputsForSubtable(subtable);\n        }\n      }\n    }\n  }\n\n  generateInputsForSubtable(subtable) {\n    // Currently, only supporting ligature subtables.\n    if (subtable.type !== 2) {\n      return;\n    }\n\n    var reverse = !!(subtable.coverage & REVERSE_DIRECTION);\n\n    if (reverse) {\n      throw new Error('Reverse subtable, not supported.');\n    }\n\n    this.subtable = subtable;\n    this.ligatureStack = [];\n    var stateMachine = this.getStateMachine(subtable);\n    var process = this.getProcessor();\n    var input = [];\n    var stack = [];\n    this.glyphs = [];\n    stateMachine.traverse({\n      enter: (glyph, entry) => {\n        var glyphs = this.glyphs;\n        stack.push({\n          glyphs: glyphs.slice(),\n          ligatureStack: this.ligatureStack.slice()\n        }); // Add glyph to input and glyphs to process.\n\n        var g = this.font.getGlyph(glyph);\n        input.push(g);\n        glyphs.push(input[input.length - 1]); // Process ligature substitution\n\n        process(glyphs[glyphs.length - 1], entry, glyphs.length - 1); // Add input to result if only one matching (non-deleted) glyph remains.\n\n        var count = 0;\n        var found = 0;\n\n        for (var i = 0; i < glyphs.length && count <= 1; i++) {\n          if (glyphs[i].id !== 0xffff) {\n            count++;\n            found = glyphs[i].id;\n          }\n        }\n\n        if (count === 1) {\n          var result = input.map(g => g.id);\n          var _cache = this.inputCache[found];\n\n          if (_cache) {\n            _cache.push(result);\n          } else {\n            this.inputCache[found] = [result];\n          }\n        }\n      },\n      exit: () => {\n        ({\n          glyphs: this.glyphs,\n          ligatureStack: this.ligatureStack\n        } = stack.pop());\n        input.pop();\n      }\n    });\n  }\n\n}, (_applyDecoratedDescriptor(_class$2.prototype, \"getStateMachine\", [cache], Object.getOwnPropertyDescriptor(_class$2.prototype, \"getStateMachine\"), _class$2.prototype)), _class$2);\n// reverse the glyphs inside those ranges if specified\n// ranges are in [offset, length] format\n\nfunction swap(glyphs, rangeA, rangeB, reverseA = false, reverseB = false) {\n  var end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);\n\n  if (reverseB) {\n    end.reverse();\n  }\n\n  var start = glyphs.splice(rangeA[0], rangeA[1], ...end);\n\n  if (reverseA) {\n    start.reverse();\n  }\n\n  glyphs.splice(rangeB[0] - (rangeA[1] - 1), 0, ...start);\n  return glyphs;\n}\n\nfunction reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {\n\n  switch (verb) {\n    case 0:\n      // no change\n      return glyphs;\n\n    case 1:\n      // Ax => xA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 0]);\n\n    case 2:\n      // xD => Dx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 1]);\n\n    case 3:\n      // AxD => DxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 1]);\n\n    case 4:\n      // ABx => xAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0]);\n\n    case 5:\n      // ABx => xBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0], true, false);\n\n    case 6:\n      // xCD => CDx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2]);\n\n    case 7:\n      // xCD => DCx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2], false, true);\n\n    case 8:\n      // AxCD => CDxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2]);\n\n    case 9:\n      // AxCD => DCxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2], false, true);\n\n    case 10:\n      // ABxD => DxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1]);\n\n    case 11:\n      // ABxD => DxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1], true, false);\n\n    case 12:\n      // ABxCD => CDxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2]);\n\n    case 13:\n      // ABxCD => CDxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, false);\n\n    case 14:\n      // ABxCD => DCxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], false, true);\n\n    case 15:\n      // ABxCD => DCxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, true);\n\n    default:\n      throw new Error(\"Unknown verb: \".concat(verb));\n  }\n}\n\nclass AATLayoutEngine {\n  constructor(font) {\n    this.font = font;\n    this.morxProcessor = new AATMorxProcessor(font);\n    this.fallbackPosition = false;\n  }\n\n  substitute(glyphRun) {\n    // AAT expects the glyphs to be in visual order prior to morx processing,\n    // so reverse the glyphs if the script is right-to-left.\n    if (glyphRun.direction === 'rtl') {\n      glyphRun.glyphs.reverse();\n    }\n\n    this.morxProcessor.process(glyphRun.glyphs, mapOTToAAT(glyphRun.features));\n  }\n\n  getAvailableFeatures(script, language) {\n    return mapAATToOT(this.morxProcessor.getSupportedFeatures());\n  }\n\n  stringsForGlyph(gid) {\n    var glyphStrings = this.morxProcessor.generateInputs(gid);\n    var result = new Set();\n\n    for (var glyphs of glyphStrings) {\n      this._addStrings(glyphs, 0, result, '');\n    }\n\n    return result;\n  }\n\n  _addStrings(glyphs, index, strings, string) {\n    var codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);\n\n    for (var codePoint of codePoints) {\n      var s = string + String.fromCodePoint(codePoint);\n\n      if (index < glyphs.length - 1) {\n        this._addStrings(glyphs, index + 1, strings, s);\n      } else {\n        strings.add(s);\n      }\n    }\n  }\n\n}\n\n/**\r\n * ShapingPlans are used by the OpenType shapers to store which\r\n * features should by applied, and in what order to apply them.\r\n * The features are applied in groups called stages. A feature\r\n * can be applied globally to all glyphs, or locally to only\r\n * specific glyphs.\r\n *\r\n * @private\r\n */\n\nclass ShapingPlan {\n  constructor(font, script, direction) {\n    this.font = font;\n    this.script = script;\n    this.direction = direction;\n    this.stages = [];\n    this.globalFeatures = {};\n    this.allFeatures = {};\n  }\n  /**\r\n   * Adds the given features to the last stage.\r\n   * Ignores features that have already been applied.\r\n   */\n\n\n  _addFeatures(features, global) {\n    var stageIndex = this.stages.length - 1;\n    var stage = this.stages[stageIndex];\n\n    for (var feature of features) {\n      if (this.allFeatures[feature] == null) {\n        stage.push(feature);\n        this.allFeatures[feature] = stageIndex;\n\n        if (global) {\n          this.globalFeatures[feature] = true;\n        }\n      }\n    }\n  }\n  /**\r\n   * Add features to the last stage\r\n   */\n\n\n  add(arg, global = true) {\n    if (this.stages.length === 0) {\n      this.stages.push([]);\n    }\n\n    if (typeof arg === 'string') {\n      arg = [arg];\n    }\n\n    if (Array.isArray(arg)) {\n      this._addFeatures(arg, global);\n    } else if (typeof arg === 'object') {\n      this._addFeatures(arg.global || [], true);\n\n      this._addFeatures(arg.local || [], false);\n    } else {\n      throw new Error(\"Unsupported argument to ShapingPlan#add\");\n    }\n  }\n  /**\r\n   * Add a new stage\r\n   */\n\n\n  addStage(arg, global) {\n    if (typeof arg === 'function') {\n      this.stages.push(arg, []);\n    } else {\n      this.stages.push([]);\n      this.add(arg, global);\n    }\n  }\n\n  setFeatureOverrides(features) {\n    if (Array.isArray(features)) {\n      this.add(features);\n    } else if (typeof features === 'object') {\n      for (var tag in features) {\n        if (features[tag]) {\n          this.add(tag);\n        } else if (this.allFeatures[tag] != null) {\n          var stage = this.stages[this.allFeatures[tag]];\n          stage.splice(stage.indexOf(tag), 1);\n          delete this.allFeatures[tag];\n          delete this.globalFeatures[tag];\n        }\n      }\n    }\n  }\n  /**\r\n   * Assigns the global features to the given glyphs\r\n   */\n\n\n  assignGlobalFeatures(glyphs) {\n    for (var glyph of glyphs) {\n      for (var feature in this.globalFeatures) {\n        glyph.features[feature] = true;\n      }\n    }\n  }\n  /**\r\n   * Executes the planned stages using the given OTProcessor\r\n   */\n\n\n  process(processor, glyphs, positions) {\n    for (var stage of this.stages) {\n      if (typeof stage === 'function') {\n        if (!positions) {\n          stage(this.font, glyphs, this);\n        }\n      } else if (stage.length > 0) {\n        processor.applyFeatures(stage, glyphs, positions);\n      }\n    }\n  }\n\n}\n\nvar VARIATION_FEATURES = ['rvrn'];\nvar COMMON_FEATURES = ['ccmp', 'locl', 'rlig', 'mark', 'mkmk'];\nvar FRACTIONAL_FEATURES = ['frac', 'numr', 'dnom'];\nvar HORIZONTAL_FEATURES = ['calt', 'clig', 'liga', 'rclt', 'curs', 'kern'];\nvar DIRECTIONAL_FEATURES = {\n  ltr: ['ltra', 'ltrm'],\n  rtl: ['rtla', 'rtlm']\n};\nclass DefaultShaper {\n  static plan(plan, glyphs, features) {\n    // Plan the features we want to apply\n    this.planPreprocessing(plan);\n    this.planFeatures(plan);\n    this.planPostprocessing(plan, features); // Assign the global features to all the glyphs\n\n    plan.assignGlobalFeatures(glyphs); // Assign local features to glyphs\n\n    this.assignFeatures(plan, glyphs);\n  }\n\n  static planPreprocessing(plan) {\n    plan.add({\n      global: [...VARIATION_FEATURES, ...DIRECTIONAL_FEATURES[plan.direction]],\n      local: FRACTIONAL_FEATURES\n    });\n  }\n\n  static planFeatures(plan) {// Do nothing by default. Let subclasses override this.\n  }\n\n  static planPostprocessing(plan, userFeatures) {\n    plan.add([...COMMON_FEATURES, ...HORIZONTAL_FEATURES]);\n    plan.setFeatureOverrides(userFeatures);\n  }\n\n  static assignFeatures(plan, glyphs) {\n    // Enable contextual fractions\n    for (var i = 0; i < glyphs.length; i++) {\n      var glyph = glyphs[i];\n\n      if (glyph.codePoints[0] === 0x2044) {\n        // fraction slash\n        var start = i;\n        var end = i + 1; // Apply numerator\n\n        while (start > 0 && unicode.isDigit(glyphs[start - 1].codePoints[0])) {\n          glyphs[start - 1].features.numr = true;\n          glyphs[start - 1].features.frac = true;\n          start--;\n        } // Apply denominator\n\n\n        while (end < glyphs.length && unicode.isDigit(glyphs[end].codePoints[0])) {\n          glyphs[end].features.dnom = true;\n          glyphs[end].features.frac = true;\n          end++;\n        } // Apply fraction slash\n\n\n        glyph.features.frac = true;\n        i = end - 1;\n      }\n    }\n  }\n\n}\n\n_defineProperty(DefaultShaper, \"zeroMarkWidths\", 'AFTER_GPOS');\n\nvar trie = new UnicodeTrie((__webpack_require__(/*! fs */ \"fs\").readFileSync)(__dirname + '/data.trie'));\nvar FEATURES = ['isol', 'fina', 'fin2', 'fin3', 'medi', 'med2', 'init'];\nvar ShapingClasses = {\n  Non_Joining: 0,\n  Left_Joining: 1,\n  Right_Joining: 2,\n  Dual_Joining: 3,\n  Join_Causing: 3,\n  ALAPH: 4,\n  'DALATH RISH': 5,\n  Transparent: 6\n};\nvar ISOL = 'isol';\nvar FINA = 'fina';\nvar FIN2 = 'fin2';\nvar FIN3 = 'fin3';\nvar MEDI = 'medi';\nvar MED2 = 'med2';\nvar INIT = 'init';\nvar NONE = null; // Each entry is [prevAction, curAction, nextState]\n\nvar STATE_TABLE = [//   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH\n// State 0: prev was U,  not willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 6]], // State 1: prev was R or ISOL/ALAPH,  not willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, FIN2, 5], [NONE, ISOL, 6]], // State 2: prev was D/L in ISOL form,  willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [INIT, FINA, 1], [INIT, FINA, 3], [INIT, FINA, 4], [INIT, FINA, 6]], // State 3: prev was D in FINA form,  willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [MEDI, FINA, 1], [MEDI, FINA, 3], [MEDI, FINA, 4], [MEDI, FINA, 6]], // State 4: prev was FINA ALAPH,  not willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [MED2, ISOL, 1], [MED2, ISOL, 2], [MED2, FIN2, 5], [MED2, ISOL, 6]], // State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [ISOL, ISOL, 1], [ISOL, ISOL, 2], [ISOL, FIN2, 5], [ISOL, ISOL, 6]], // State 6: prev was DALATH/RISH,  not willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, FIN3, 5], [NONE, ISOL, 6]]];\n/**\r\n * This is a shaper for Arabic, and other cursive scripts.\r\n * It uses data from ArabicShaping.txt in the Unicode database,\r\n * compiled to a UnicodeTrie by generate-data.coffee.\r\n *\r\n * The shaping state machine was ported from Harfbuzz.\r\n * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-arabic.cc\r\n */\n\nclass ArabicShaper extends DefaultShaper {\n  static planFeatures(plan) {\n    plan.add(['ccmp', 'locl']);\n\n    for (var i = 0; i < FEATURES.length; i++) {\n      var feature = FEATURES[i];\n      plan.addStage(feature, false);\n    }\n\n    plan.addStage('mset');\n  }\n\n  static assignFeatures(plan, glyphs) {\n    super.assignFeatures(plan, glyphs);\n    var prev = -1;\n    var state = 0;\n    var actions = []; // Apply the state machine to map glyphs to features\n\n    for (var i = 0; i < glyphs.length; i++) {\n      var curAction = void 0,\n          prevAction = void 0;\n      var glyph = glyphs[i];\n      var type = getShapingClass(glyph.codePoints[0]);\n\n      if (type === ShapingClasses.Transparent) {\n        actions[i] = NONE;\n        continue;\n      }\n\n      [prevAction, curAction, state] = STATE_TABLE[state][type];\n\n      if (prevAction !== NONE && prev !== -1) {\n        actions[prev] = prevAction;\n      }\n\n      actions[i] = curAction;\n      prev = i;\n    } // Apply the chosen features to their respective glyphs\n\n\n    for (var index = 0; index < glyphs.length; index++) {\n      var feature = void 0;\n      var glyph = glyphs[index];\n\n      if (feature = actions[index]) {\n        glyph.features[feature] = true;\n      }\n    }\n  }\n\n}\n\nfunction getShapingClass(codePoint) {\n  var res = trie.get(codePoint);\n\n  if (res) {\n    return res - 1;\n  }\n\n  var category = unicode.getCategory(codePoint);\n\n  if (category === 'Mn' || category === 'Me' || category === 'Cf') {\n    return ShapingClasses.Transparent;\n  }\n\n  return ShapingClasses.Non_Joining;\n}\n\nclass GlyphIterator {\n  constructor(glyphs, options) {\n    this.glyphs = glyphs;\n    this.reset(options);\n  }\n\n  reset(options = {}, index = 0) {\n    this.options = options;\n    this.flags = options.flags || {};\n    this.markAttachmentType = options.markAttachmentType || 0;\n    this.index = index;\n  }\n\n  get cur() {\n    return this.glyphs[this.index] || null;\n  }\n\n  shouldIgnore(glyph) {\n    return this.flags.ignoreMarks && glyph.isMark || this.flags.ignoreBaseGlyphs && glyph.isBase || this.flags.ignoreLigatures && glyph.isLigature || this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType;\n  }\n\n  move(dir) {\n    this.index += dir;\n\n    while (0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index])) {\n      this.index += dir;\n    }\n\n    if (0 > this.index || this.index >= this.glyphs.length) {\n      return null;\n    }\n\n    return this.glyphs[this.index];\n  }\n\n  next() {\n    return this.move(+1);\n  }\n\n  prev() {\n    return this.move(-1);\n  }\n\n  peek(count = 1) {\n    var idx = this.index;\n    var res = this.increment(count);\n    this.index = idx;\n    return res;\n  }\n\n  peekIndex(count = 1) {\n    var idx = this.index;\n    this.increment(count);\n    var res = this.index;\n    this.index = idx;\n    return res;\n  }\n\n  increment(count = 1) {\n    var dir = count < 0 ? -1 : 1;\n    count = Math.abs(count);\n\n    while (count--) {\n      this.move(dir);\n    }\n\n    return this.glyphs[this.index];\n  }\n\n}\n\nvar DEFAULT_SCRIPTS = ['DFLT', 'dflt', 'latn'];\nclass OTProcessor {\n  constructor(font, table) {\n    this.font = font;\n    this.table = table;\n    this.script = null;\n    this.scriptTag = null;\n    this.language = null;\n    this.languageTag = null;\n    this.features = {};\n    this.lookups = {}; // Setup variation substitutions\n\n    this.variationsIndex = font._variationProcessor ? this.findVariationsIndex(font._variationProcessor.normalizedCoords) : -1; // initialize to default script + language\n\n    this.selectScript(); // current context (set by applyFeatures)\n\n    this.glyphs = [];\n    this.positions = []; // only used by GPOS\n\n    this.ligatureID = 1;\n    this.currentFeature = null;\n  }\n\n  findScript(script) {\n    if (this.table.scriptList == null) {\n      return null;\n    }\n\n    if (!Array.isArray(script)) {\n      script = [script];\n    }\n\n    for (var s of script) {\n      for (var entry of this.table.scriptList) {\n        if (entry.tag === s) {\n          return entry;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  selectScript(script, language, direction$1) {\n    var changed = false;\n    var entry;\n\n    if (!this.script || script !== this.scriptTag) {\n      entry = this.findScript(script);\n\n      if (!entry) {\n        entry = this.findScript(DEFAULT_SCRIPTS);\n      }\n\n      if (!entry) {\n        return this.scriptTag;\n      }\n\n      this.scriptTag = entry.tag;\n      this.script = entry.script;\n      this.language = null;\n      this.languageTag = null;\n      changed = true;\n    }\n\n    if (!direction$1 || direction$1 !== this.direction) {\n      this.direction = direction$1 || direction(script);\n    }\n\n    if (language && language.length < 4) {\n      language += ' '.repeat(4 - language.length);\n    }\n\n    if (!language || language !== this.languageTag) {\n      this.language = null;\n\n      for (var lang of this.script.langSysRecords) {\n        if (lang.tag === language) {\n          this.language = lang.langSys;\n          this.languageTag = lang.tag;\n          break;\n        }\n      }\n\n      if (!this.language) {\n        this.language = this.script.defaultLangSys;\n        this.languageTag = null;\n      }\n\n      changed = true;\n    } // Build a feature lookup table\n\n\n    if (changed) {\n      this.features = {};\n\n      if (this.language) {\n        for (var featureIndex of this.language.featureIndexes) {\n          var record = this.table.featureList[featureIndex];\n          var substituteFeature = this.substituteFeatureForVariations(featureIndex);\n          this.features[record.tag] = substituteFeature || record.feature;\n        }\n      }\n    }\n\n    return this.scriptTag;\n  }\n\n  lookupsForFeatures(userFeatures = [], exclude) {\n    var lookups = [];\n\n    for (var tag of userFeatures) {\n      var feature = this.features[tag];\n\n      if (!feature) {\n        continue;\n      }\n\n      for (var lookupIndex of feature.lookupListIndexes) {\n        if (exclude && exclude.indexOf(lookupIndex) !== -1) {\n          continue;\n        }\n\n        lookups.push({\n          feature: tag,\n          index: lookupIndex,\n          lookup: this.table.lookupList.get(lookupIndex)\n        });\n      }\n    }\n\n    lookups.sort((a, b) => a.index - b.index);\n    return lookups;\n  }\n\n  substituteFeatureForVariations(featureIndex) {\n    if (this.variationsIndex === -1) {\n      return null;\n    }\n\n    var record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];\n    var substitutions = record.featureTableSubstitution.substitutions;\n\n    for (var substitution of substitutions) {\n      if (substitution.featureIndex === featureIndex) {\n        return substitution.alternateFeatureTable;\n      }\n    }\n\n    return null;\n  }\n\n  findVariationsIndex(coords) {\n    var variations = this.table.featureVariations;\n\n    if (!variations) {\n      return -1;\n    }\n\n    var records = variations.featureVariationRecords;\n\n    for (var i = 0; i < records.length; i++) {\n      var conditions = records[i].conditionSet.conditionTable;\n\n      if (this.variationConditionsMatch(conditions, coords)) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  variationConditionsMatch(conditions, coords) {\n    return conditions.every(condition => {\n      var coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;\n      return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;\n    });\n  }\n\n  applyFeatures(userFeatures, glyphs, advances) {\n    var lookups = this.lookupsForFeatures(userFeatures);\n    this.applyLookups(lookups, glyphs, advances);\n  }\n\n  applyLookups(lookups, glyphs, positions) {\n    this.glyphs = glyphs;\n    this.positions = positions;\n    this.glyphIterator = new GlyphIterator(glyphs);\n\n    for (var {\n      feature,\n      lookup\n    } of lookups) {\n      this.currentFeature = feature;\n      this.glyphIterator.reset(lookup.flags);\n\n      while (this.glyphIterator.index < glyphs.length) {\n        if (!(feature in this.glyphIterator.cur.features)) {\n          this.glyphIterator.next();\n          continue;\n        }\n\n        for (var table of lookup.subTables) {\n          var res = this.applyLookup(lookup.lookupType, table);\n\n          if (res) {\n            break;\n          }\n        }\n\n        this.glyphIterator.next();\n      }\n    }\n  }\n\n  applyLookup(lookup, table) {\n    throw new Error(\"applyLookup must be implemented by subclasses\");\n  }\n\n  applyLookupList(lookupRecords) {\n    var options = this.glyphIterator.options;\n    var glyphIndex = this.glyphIterator.index;\n\n    for (var lookupRecord of lookupRecords) {\n      // Reset flags and find glyph index for this lookup record\n      this.glyphIterator.reset(options, glyphIndex);\n      this.glyphIterator.increment(lookupRecord.sequenceIndex); // Get the lookup and setup flags for subtables\n\n      var lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);\n      this.glyphIterator.reset(lookup.flags, this.glyphIterator.index); // Apply lookup subtables until one matches\n\n      for (var table of lookup.subTables) {\n        if (this.applyLookup(lookup.lookupType, table)) {\n          break;\n        }\n      }\n    }\n\n    this.glyphIterator.reset(options, glyphIndex);\n    return true;\n  }\n\n  coverageIndex(coverage, glyph) {\n    if (glyph == null) {\n      glyph = this.glyphIterator.cur.id;\n    }\n\n    switch (coverage.version) {\n      case 1:\n        return coverage.glyphs.indexOf(glyph);\n\n      case 2:\n        for (var range of coverage.rangeRecords) {\n          if (range.start <= glyph && glyph <= range.end) {\n            return range.startCoverageIndex + glyph - range.start;\n          }\n        }\n\n        break;\n    }\n\n    return -1;\n  }\n\n  match(sequenceIndex, sequence, fn, matched) {\n    var pos = this.glyphIterator.index;\n    var glyph = this.glyphIterator.increment(sequenceIndex);\n    var idx = 0;\n\n    while (idx < sequence.length && glyph && fn(sequence[idx], glyph)) {\n      if (matched) {\n        matched.push(this.glyphIterator.index);\n      }\n\n      idx++;\n      glyph = this.glyphIterator.next();\n    }\n\n    this.glyphIterator.index = pos;\n\n    if (idx < sequence.length) {\n      return false;\n    }\n\n    return matched || true;\n  }\n\n  sequenceMatches(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (component, glyph) => component === glyph.id);\n  }\n\n  sequenceMatchIndices(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (component, glyph) => {\n      // If the current feature doesn't apply to this glyph,\n      if (!(this.currentFeature in glyph.features)) {\n        return false;\n      }\n\n      return component === glyph.id;\n    }, []);\n  }\n\n  coverageSequenceMatches(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (coverage, glyph) => this.coverageIndex(coverage, glyph.id) >= 0);\n  }\n\n  getClassID(glyph, classDef) {\n    switch (classDef.version) {\n      case 1:\n        // Class array\n        var i = glyph - classDef.startGlyph;\n\n        if (i >= 0 && i < classDef.classValueArray.length) {\n          return classDef.classValueArray[i];\n        }\n\n        break;\n\n      case 2:\n        for (var range of classDef.classRangeRecord) {\n          if (range.start <= glyph && glyph <= range.end) {\n            return range.class;\n          }\n        }\n\n        break;\n    }\n\n    return 0;\n  }\n\n  classSequenceMatches(sequenceIndex, sequence, classDef) {\n    return this.match(sequenceIndex, sequence, (classID, glyph) => classID === this.getClassID(glyph.id, classDef));\n  }\n\n  applyContext(table) {\n    switch (table.version) {\n      case 1:\n        var index = this.coverageIndex(table.coverage);\n\n        if (index === -1) {\n          return false;\n        }\n\n        var set = table.ruleSets[index];\n\n        for (var rule of set) {\n          if (this.sequenceMatches(1, rule.input)) {\n            return this.applyLookupList(rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 2:\n        if (this.coverageIndex(table.coverage) === -1) {\n          return false;\n        }\n\n        index = this.getClassID(this.glyphIterator.cur.id, table.classDef);\n\n        if (index === -1) {\n          return false;\n        }\n\n        set = table.classSet[index];\n\n        for (var _rule of set) {\n          if (this.classSequenceMatches(1, _rule.classes, table.classDef)) {\n            return this.applyLookupList(_rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 3:\n        if (this.coverageSequenceMatches(0, table.coverages)) {\n          return this.applyLookupList(table.lookupRecords);\n        }\n\n        break;\n    }\n\n    return false;\n  }\n\n  applyChainingContext(table) {\n    switch (table.version) {\n      case 1:\n        var index = this.coverageIndex(table.coverage);\n\n        if (index === -1) {\n          return false;\n        }\n\n        var set = table.chainRuleSets[index];\n\n        for (var rule of set) {\n          if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack) && this.sequenceMatches(1, rule.input) && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) {\n            return this.applyLookupList(rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 2:\n        if (this.coverageIndex(table.coverage) === -1) {\n          return false;\n        }\n\n        index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);\n        var rules = table.chainClassSet[index];\n\n        if (!rules) {\n          return false;\n        }\n\n        for (var _rule2 of rules) {\n          if (this.classSequenceMatches(-_rule2.backtrack.length, _rule2.backtrack, table.backtrackClassDef) && this.classSequenceMatches(1, _rule2.input, table.inputClassDef) && this.classSequenceMatches(1 + _rule2.input.length, _rule2.lookahead, table.lookaheadClassDef)) {\n            return this.applyLookupList(_rule2.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 3:\n        if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) && this.coverageSequenceMatches(0, table.inputCoverage) && this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) {\n          return this.applyLookupList(table.lookupRecords);\n        }\n\n        break;\n    }\n\n    return false;\n  }\n\n}\n\nclass GlyphInfo {\n  constructor(font, id, codePoints = [], features) {\n    this._font = font;\n    this.codePoints = codePoints;\n    this.id = id;\n    this.features = {};\n\n    if (Array.isArray(features)) {\n      for (var i = 0; i < features.length; i++) {\n        var feature = features[i];\n        this.features[feature] = true;\n      }\n    } else if (typeof features === 'object') {\n      Object.assign(this.features, features);\n    }\n\n    this.ligatureID = null;\n    this.ligatureComponent = null;\n    this.isLigated = false;\n    this.cursiveAttachment = null;\n    this.markAttachment = null;\n    this.shaperInfo = null;\n    this.substituted = false;\n    this.isMultiplied = false;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  set id(id) {\n    this._id = id;\n    this.substituted = true;\n    var GDEF = this._font.GDEF;\n\n    if (GDEF && GDEF.glyphClassDef) {\n      // TODO: clean this up\n      var classID = OTProcessor.prototype.getClassID(id, GDEF.glyphClassDef);\n      this.isBase = classID === 1;\n      this.isLigature = classID === 2;\n      this.isMark = classID === 3;\n      this.markAttachmentType = GDEF.markAttachClassDef ? OTProcessor.prototype.getClassID(id, GDEF.markAttachClassDef) : 0;\n    } else {\n      this.isMark = this.codePoints.length > 0 && this.codePoints.every(unicode.isMark);\n      this.isBase = !this.isMark;\n      this.isLigature = this.codePoints.length > 1;\n      this.markAttachmentType = 0;\n    }\n  }\n\n  copy() {\n    return new GlyphInfo(this._font, this.id, this.codePoints, this.features);\n  }\n\n}\n\n/**\r\n * This is a shaper for the Hangul script, used by the Korean language.\r\n * It does the following:\r\n *   - decompose if unsupported by the font:\r\n *     <LV>   -> <L,V>\r\n *     <LVT>  -> <L,V,T>\r\n *     <LV,T> -> <L,V,T>\r\n *\r\n *   - compose if supported by the font:\r\n *     <L,V>   -> <LV>\r\n *     <L,V,T> -> <LVT>\r\n *     <LV,T>  -> <LVT>\r\n *\r\n *   - reorder tone marks (S is any valid syllable):\r\n *     <S, M> -> <M, S>\r\n *\r\n *   - apply ljmo, vjmo, and tjmo OpenType features to decomposed Jamo sequences.\r\n *\r\n * This logic is based on the following documents:\r\n *   - http://www.microsoft.com/typography/OpenTypeDev/hangul/intro.htm\r\n *   - http://ktug.org/~nomos/harfbuzz-hangul/hangulshaper.pdf\r\n */\n\nclass HangulShaper extends DefaultShaper {\n  static planFeatures(plan) {\n    plan.add(['ljmo', 'vjmo', 'tjmo'], false);\n  }\n\n  static assignFeatures(plan, glyphs) {\n    var state = 0;\n    var i = 0;\n\n    while (i < glyphs.length) {\n      var action = void 0;\n      var glyph = glyphs[i];\n      var code = glyph.codePoints[0];\n      var type = getType(code);\n      [action, state] = STATE_TABLE$1[state][type];\n\n      switch (action) {\n        case DECOMPOSE:\n          // Decompose the composed syllable if it is not supported by the font.\n          if (!plan.font.hasGlyphForCodePoint(code)) {\n            i = decompose(glyphs, i, plan.font);\n          }\n\n          break;\n\n        case COMPOSE:\n          // Found a decomposed syllable. Try to compose if supported by the font.\n          i = compose(glyphs, i, plan.font);\n          break;\n\n        case TONE_MARK:\n          // Got a valid syllable, followed by a tone mark. Move the tone mark to the beginning of the syllable.\n          reorderToneMark(glyphs, i, plan.font);\n          break;\n\n        case INVALID:\n          // Tone mark has no valid syllable to attach to, so insert a dotted circle\n          i = insertDottedCircle(glyphs, i, plan.font);\n          break;\n      }\n\n      i++;\n    }\n  }\n\n}\n\n_defineProperty(HangulShaper, \"zeroMarkWidths\", 'NONE');\n\nvar HANGUL_BASE = 0xac00;\nvar HANGUL_END = 0xd7a4;\nvar HANGUL_COUNT = HANGUL_END - HANGUL_BASE + 1;\nvar L_BASE = 0x1100; // lead\n\nvar V_BASE = 0x1161; // vowel\n\nvar T_BASE = 0x11a7; // trail\n\nvar L_COUNT = 19;\nvar V_COUNT = 21;\nvar T_COUNT = 28;\nvar L_END = L_BASE + L_COUNT - 1;\nvar V_END = V_BASE + V_COUNT - 1;\nvar T_END = T_BASE + T_COUNT - 1;\nvar DOTTED_CIRCLE = 0x25cc;\n\nvar isL = code => 0x1100 <= code && code <= 0x115f || 0xa960 <= code && code <= 0xa97c;\n\nvar isV = code => 0x1160 <= code && code <= 0x11a7 || 0xd7b0 <= code && code <= 0xd7c6;\n\nvar isT = code => 0x11a8 <= code && code <= 0x11ff || 0xd7cb <= code && code <= 0xd7fb;\n\nvar isTone = code => 0x302e <= code && code <= 0x302f;\n\nvar isLVT = code => HANGUL_BASE <= code && code <= HANGUL_END;\n\nvar isLV = code => code - HANGUL_BASE < HANGUL_COUNT && (code - HANGUL_BASE) % T_COUNT === 0;\n\nvar isCombiningL = code => L_BASE <= code && code <= L_END;\n\nvar isCombiningV = code => V_BASE <= code && code <= V_END;\n\nvar isCombiningT = code =>  1 <= code && code <= T_END; // Character categories\n\n\nvar X = 0; // Other character\n\nvar L = 1; // Leading consonant\n\nvar V = 2; // Medial vowel\n\nvar T = 3; // Trailing consonant\n\nvar LV = 4; // Composed <LV> syllable\n\nvar LVT = 5; // Composed <LVT> syllable\n\nvar M = 6; // Tone mark\n// This function classifies a character using the above categories.\n\nfunction getType(code) {\n  if (isL(code)) {\n    return L;\n  }\n\n  if (isV(code)) {\n    return V;\n  }\n\n  if (isT(code)) {\n    return T;\n  }\n\n  if (isLV(code)) {\n    return LV;\n  }\n\n  if (isLVT(code)) {\n    return LVT;\n  }\n\n  if (isTone(code)) {\n    return M;\n  }\n\n  return X;\n} // State machine actions\n\n\nvar NO_ACTION = 0;\nvar DECOMPOSE = 1;\nvar COMPOSE = 2;\nvar TONE_MARK = 4;\nvar INVALID = 5; // Build a state machine that accepts valid syllables, and applies actions along the way.\n// The logic this is implementing is documented at the top of the file.\n\nvar STATE_TABLE$1 = [//       X                 L                 V                T                  LV                LVT               M\n// State 0: start state\n[[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [INVALID, 0]], // State 1: <L>\n[[NO_ACTION, 0], [NO_ACTION, 1], [COMPOSE, 2], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [INVALID, 0]], // State 2: <L,V> or <LV>\n[[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [COMPOSE, 3], [DECOMPOSE, 2], [DECOMPOSE, 3], [TONE_MARK, 0]], // State 3: <L,V,T> or <LVT>\n[[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [TONE_MARK, 0]]];\n\nfunction getGlyph(font, code, features) {\n  return new GlyphInfo(font, font.glyphForCodePoint(code).id, [code], features);\n}\n\nfunction decompose(glyphs, i, font) {\n  var glyph = glyphs[i];\n  var code = glyph.codePoints[0];\n  var s = code - HANGUL_BASE;\n  var t = T_BASE + s % T_COUNT;\n  s = s / T_COUNT | 0;\n  var l = L_BASE + s / V_COUNT | 0;\n  var v = V_BASE + s % V_COUNT; // Don't decompose if all of the components are not available\n\n  if (!font.hasGlyphForCodePoint(l) || !font.hasGlyphForCodePoint(v) || t !== T_BASE && !font.hasGlyphForCodePoint(t)) {\n    return i;\n  } // Replace the current glyph with decomposed L, V, and T glyphs,\n  // and apply the proper OpenType features to each component.\n\n\n  var ljmo = getGlyph(font, l, glyph.features);\n  ljmo.features.ljmo = true;\n  var vjmo = getGlyph(font, v, glyph.features);\n  vjmo.features.vjmo = true;\n  var insert = [ljmo, vjmo];\n\n  if (t > T_BASE) {\n    var tjmo = getGlyph(font, t, glyph.features);\n    tjmo.features.tjmo = true;\n    insert.push(tjmo);\n  }\n\n  glyphs.splice(i, 1, ...insert);\n  return i + insert.length - 1;\n}\n\nfunction compose(glyphs, i, font) {\n  var glyph = glyphs[i];\n  var code = glyphs[i].codePoints[0];\n  var type = getType(code);\n  var prev = glyphs[i - 1].codePoints[0];\n  var prevType = getType(prev); // Figure out what type of syllable we're dealing with\n\n  var lv, ljmo, vjmo, tjmo;\n\n  if (prevType === LV && type === T) {\n    // <LV,T>\n    lv = prev;\n    tjmo = glyph;\n  } else {\n    if (type === V) {\n      // <L,V>\n      ljmo = glyphs[i - 1];\n      vjmo = glyph;\n    } else {\n      // <L,V,T>\n      ljmo = glyphs[i - 2];\n      vjmo = glyphs[i - 1];\n      tjmo = glyph;\n    }\n\n    var l = ljmo.codePoints[0];\n    var v = vjmo.codePoints[0]; // Make sure L and V are combining characters\n\n    if (isCombiningL(l) && isCombiningV(v)) {\n      lv = HANGUL_BASE + ((l - L_BASE) * V_COUNT + (v - V_BASE)) * T_COUNT;\n    }\n  }\n\n  var t = tjmo && tjmo.codePoints[0] || T_BASE;\n\n  if (lv != null && (t === T_BASE || isCombiningT(t))) {\n    var s = lv + (t - T_BASE); // Replace with a composed glyph if supported by the font,\n    // otherwise apply the proper OpenType features to each component.\n\n    if (font.hasGlyphForCodePoint(s)) {\n      var del = prevType === V ? 3 : 2;\n      glyphs.splice(i - del + 1, del, getGlyph(font, s, glyph.features));\n      return i - del + 1;\n    }\n  } // Didn't compose (either a non-combining component or unsupported by font).\n\n\n  if (ljmo) {\n    ljmo.features.ljmo = true;\n  }\n\n  if (vjmo) {\n    vjmo.features.vjmo = true;\n  }\n\n  if (tjmo) {\n    tjmo.features.tjmo = true;\n  }\n\n  if (prevType === LV) {\n    // Sequence was originally <L,V>, which got combined earlier.\n    // Either the T was non-combining, or the LVT glyph wasn't supported.\n    // Decompose the glyph again and apply OT features.\n    decompose(glyphs, i - 1, font);\n    return i + 1;\n  }\n\n  return i;\n}\n\nfunction getLength(code) {\n  switch (getType(code)) {\n    case LV:\n    case LVT:\n      return 1;\n\n    case V:\n      return 2;\n\n    case T:\n      return 3;\n  }\n}\n\nfunction reorderToneMark(glyphs, i, font) {\n  var glyph = glyphs[i];\n  var code = glyphs[i].codePoints[0]; // Move tone mark to the beginning of the previous syllable, unless it is zero width\n\n  if (font.glyphForCodePoint(code).advanceWidth === 0) {\n    return;\n  }\n\n  var prev = glyphs[i - 1].codePoints[0];\n  var len = getLength(prev);\n  glyphs.splice(i, 1);\n  return glyphs.splice(i - len, 0, glyph);\n}\n\nfunction insertDottedCircle(glyphs, i, font) {\n  var glyph = glyphs[i];\n  var code = glyphs[i].codePoints[0];\n\n  if (font.hasGlyphForCodePoint(DOTTED_CIRCLE)) {\n    var dottedCircle = getGlyph(font, DOTTED_CIRCLE, glyph.features); // If the tone mark is zero width, insert the dotted circle before, otherwise after\n\n    var idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i : i + 1;\n    glyphs.splice(idx, 0, dottedCircle);\n    i++;\n  }\n\n  return i;\n}\n\nvar stateTable = [\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t2,\n\t\t3,\n\t\t4,\n\t\t5,\n\t\t6,\n\t\t7,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t11,\n\t\t11,\n\t\t12,\n\t\t13,\n\t\t14,\n\t\t15,\n\t\t16,\n\t\t17\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t18,\n\t\t19,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t25,\n\t\t26,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t28,\n\t\t29,\n\t\t30,\n\t\t31,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t35,\n\t\t36,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t38,\n\t\t5,\n\t\t7,\n\t\t7,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t13,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t39,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t40,\n\t\t41,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t39,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t43,\n\t\t44,\n\t\t44,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t12,\n\t\t43,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t43,\n\t\t44,\n\t\t44,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t43,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t45,\n\t\t46,\n\t\t47,\n\t\t48,\n\t\t49,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t50,\n\t\t0,\n\t\t0,\n\t\t51,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t52,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t53,\n\t\t54,\n\t\t55,\n\t\t56,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t60,\n\t\t61,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t4,\n\t\t5,\n\t\t7,\n\t\t7,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t13,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t63,\n\t\t64,\n\t\t0,\n\t\t0,\n\t\t40,\n\t\t41,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t63,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t2,\n\t\t3,\n\t\t4,\n\t\t5,\n\t\t6,\n\t\t7,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t11,\n\t\t11,\n\t\t12,\n\t\t13,\n\t\t0,\n\t\t2,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t18,\n\t\t65,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t25,\n\t\t26,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t66,\n\t\t67,\n\t\t67,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t68,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t69,\n\t\t0,\n\t\t70,\n\t\t70,\n\t\t0,\n\t\t71,\n\t\t0,\n\t\t72,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t73,\n\t\t19,\n\t\t74,\n\t\t74,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t26,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t75,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t76,\n\t\t77,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t75,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t79,\n\t\t80,\n\t\t80,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t25,\n\t\t79,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t18,\n\t\t19,\n\t\t20,\n\t\t74,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t25,\n\t\t26,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t81,\n\t\t82,\n\t\t83,\n\t\t84,\n\t\t85,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t86,\n\t\t0,\n\t\t0,\n\t\t87,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t88,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t18,\n\t\t19,\n\t\t74,\n\t\t74,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t26,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t89,\n\t\t90,\n\t\t0,\n\t\t0,\n\t\t76,\n\t\t77,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t89,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t91,\n\t\t92,\n\t\t92,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t93,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t94,\n\t\t29,\n\t\t95,\n\t\t31,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t36,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t96,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t97,\n\t\t98,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t96,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t100,\n\t\t101,\n\t\t101,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t35,\n\t\t100,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t100,\n\t\t101,\n\t\t101,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t100,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t102,\n\t\t103,\n\t\t104,\n\t\t105,\n\t\t106,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t107,\n\t\t0,\n\t\t0,\n\t\t108,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t109,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t28,\n\t\t29,\n\t\t95,\n\t\t31,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t36,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t110,\n\t\t111,\n\t\t0,\n\t\t0,\n\t\t97,\n\t\t98,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t110,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t112,\n\t\t113,\n\t\t113,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t114,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t5,\n\t\t7,\n\t\t7,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t13,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t115,\n\t\t116,\n\t\t117,\n\t\t118,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t119,\n\t\t120,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t121,\n\t\t121,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t39,\n\t\t0,\n\t\t122,\n\t\t0,\n\t\t123,\n\t\t123,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t39,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t124,\n\t\t64,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t124,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t39,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t121,\n\t\t125,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t39,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t126,\n\t\t126,\n\t\t8,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t46,\n\t\t47,\n\t\t48,\n\t\t49,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t47,\n\t\t47,\n\t\t49,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t127,\n\t\t127,\n\t\t49,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t128,\n\t\t127,\n\t\t127,\n\t\t49,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t129,\n\t\t130,\n\t\t131,\n\t\t132,\n\t\t133,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t50,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t134,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t135,\n\t\t54,\n\t\t56,\n\t\t56,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t61,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t136,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t137,\n\t\t138,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t136,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t140,\n\t\t141,\n\t\t141,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t60,\n\t\t140,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t140,\n\t\t141,\n\t\t141,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t140,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t142,\n\t\t143,\n\t\t144,\n\t\t145,\n\t\t146,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t147,\n\t\t0,\n\t\t0,\n\t\t148,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t149,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t53,\n\t\t54,\n\t\t56,\n\t\t56,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t61,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t150,\n\t\t151,\n\t\t0,\n\t\t0,\n\t\t137,\n\t\t138,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t150,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t152,\n\t\t153,\n\t\t153,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t154,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t155,\n\t\t116,\n\t\t156,\n\t\t157,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t158,\n\t\t120,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t121,\n\t\t121,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t75,\n\t\t3,\n\t\t4,\n\t\t5,\n\t\t159,\n\t\t160,\n\t\t8,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t11,\n\t\t12,\n\t\t163,\n\t\t0,\n\t\t75,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t40,\n\t\t164,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t165,\n\t\t44,\n\t\t44,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t165,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t124,\n\t\t64,\n\t\t0,\n\t\t0,\n\t\t40,\n\t\t164,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t124,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t70,\n\t\t70,\n\t\t0,\n\t\t71,\n\t\t0,\n\t\t72,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t71,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t166,\n\t\t0,\n\t\t0,\n\t\t167,\n\t\t0,\n\t\t72,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t168,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t19,\n\t\t74,\n\t\t74,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t26,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t79,\n\t\t80,\n\t\t80,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t79,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t169,\n\t\t170,\n\t\t171,\n\t\t172,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t173,\n\t\t174,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t175,\n\t\t175,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t75,\n\t\t0,\n\t\t176,\n\t\t0,\n\t\t177,\n\t\t177,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t75,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t178,\n\t\t90,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t178,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t75,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t175,\n\t\t179,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t75,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t180,\n\t\t180,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t82,\n\t\t83,\n\t\t84,\n\t\t85,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t83,\n\t\t83,\n\t\t85,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t181,\n\t\t181,\n\t\t85,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t182,\n\t\t181,\n\t\t181,\n\t\t85,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t183,\n\t\t184,\n\t\t185,\n\t\t186,\n\t\t187,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t86,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t188,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t189,\n\t\t170,\n\t\t190,\n\t\t191,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t192,\n\t\t174,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t175,\n\t\t175,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t76,\n\t\t193,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t194,\n\t\t80,\n\t\t80,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t194,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t178,\n\t\t90,\n\t\t0,\n\t\t0,\n\t\t76,\n\t\t193,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t178,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t95,\n\t\t31,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t36,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t100,\n\t\t101,\n\t\t101,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t100,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t195,\n\t\t196,\n\t\t197,\n\t\t198,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t199,\n\t\t200,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t201,\n\t\t201,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t96,\n\t\t0,\n\t\t202,\n\t\t0,\n\t\t203,\n\t\t203,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t96,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t204,\n\t\t111,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t204,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t96,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t201,\n\t\t205,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t96,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t206,\n\t\t206,\n\t\t32,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t103,\n\t\t104,\n\t\t105,\n\t\t106,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t104,\n\t\t104,\n\t\t106,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t207,\n\t\t207,\n\t\t106,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t208,\n\t\t207,\n\t\t207,\n\t\t106,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t209,\n\t\t210,\n\t\t211,\n\t\t212,\n\t\t213,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t107,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t214,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t215,\n\t\t196,\n\t\t216,\n\t\t217,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t218,\n\t\t200,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t201,\n\t\t201,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t97,\n\t\t219,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t220,\n\t\t101,\n\t\t101,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t220,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t204,\n\t\t111,\n\t\t0,\n\t\t0,\n\t\t97,\n\t\t219,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t204,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t221,\n\t\t116,\n\t\t222,\n\t\t222,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t120,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t223,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t40,\n\t\t224,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t223,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t225,\n\t\t44,\n\t\t44,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t119,\n\t\t225,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t115,\n\t\t116,\n\t\t117,\n\t\t222,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t119,\n\t\t120,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t115,\n\t\t116,\n\t\t222,\n\t\t222,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t120,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t226,\n\t\t64,\n\t\t0,\n\t\t0,\n\t\t40,\n\t\t224,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t226,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t39,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t121,\n\t\t121,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t39,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t44,\n\t\t44,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t227,\n\t\t0,\n\t\t228,\n\t\t229,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t230,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t39,\n\t\t0,\n\t\t122,\n\t\t0,\n\t\t121,\n\t\t121,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t39,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t8,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t231,\n\t\t231,\n\t\t49,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t232,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t130,\n\t\t131,\n\t\t132,\n\t\t133,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t131,\n\t\t131,\n\t\t133,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t233,\n\t\t233,\n\t\t133,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t234,\n\t\t233,\n\t\t233,\n\t\t133,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t235,\n\t\t236,\n\t\t237,\n\t\t238,\n\t\t239,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t54,\n\t\t56,\n\t\t56,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t61,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t240,\n\t\t241,\n\t\t242,\n\t\t243,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t244,\n\t\t245,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t246,\n\t\t246,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t136,\n\t\t0,\n\t\t247,\n\t\t0,\n\t\t248,\n\t\t248,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t136,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t249,\n\t\t151,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t249,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t136,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t246,\n\t\t250,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t136,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t251,\n\t\t251,\n\t\t57,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t143,\n\t\t144,\n\t\t145,\n\t\t146,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t144,\n\t\t144,\n\t\t146,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t252,\n\t\t252,\n\t\t146,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t253,\n\t\t252,\n\t\t252,\n\t\t146,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t254,\n\t\t255,\n\t\t256,\n\t\t257,\n\t\t258,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t147,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t259,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t260,\n\t\t241,\n\t\t261,\n\t\t262,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t263,\n\t\t245,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t246,\n\t\t246,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t137,\n\t\t264,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t265,\n\t\t141,\n\t\t141,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t265,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t249,\n\t\t151,\n\t\t0,\n\t\t0,\n\t\t137,\n\t\t264,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t249,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t221,\n\t\t116,\n\t\t222,\n\t\t222,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t120,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t225,\n\t\t44,\n\t\t44,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t158,\n\t\t225,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t155,\n\t\t116,\n\t\t156,\n\t\t222,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t158,\n\t\t120,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t155,\n\t\t116,\n\t\t222,\n\t\t222,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t120,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t43,\n\t\t266,\n\t\t266,\n\t\t8,\n\t\t161,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t12,\n\t\t267,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t75,\n\t\t0,\n\t\t176,\n\t\t43,\n\t\t268,\n\t\t268,\n\t\t269,\n\t\t161,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t267,\n\t\t0,\n\t\t75,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t270,\n\t\t0,\n\t\t0,\n\t\t271,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t272,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t273,\n\t\t274,\n\t\t0,\n\t\t0,\n\t\t40,\n\t\t41,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t273,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t40,\n\t\t0,\n\t\t123,\n\t\t123,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t121,\n\t\t275,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t72,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t166,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t72,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t276,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t277,\n\t\t170,\n\t\t278,\n\t\t278,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t174,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t279,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t76,\n\t\t280,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t279,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t281,\n\t\t80,\n\t\t80,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t173,\n\t\t281,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t169,\n\t\t170,\n\t\t171,\n\t\t278,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t173,\n\t\t174,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t169,\n\t\t170,\n\t\t278,\n\t\t278,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t174,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t282,\n\t\t90,\n\t\t0,\n\t\t0,\n\t\t76,\n\t\t280,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t282,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t75,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t175,\n\t\t175,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t75,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t80,\n\t\t80,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t283,\n\t\t0,\n\t\t284,\n\t\t285,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t286,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t75,\n\t\t0,\n\t\t176,\n\t\t0,\n\t\t175,\n\t\t175,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t75,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t287,\n\t\t287,\n\t\t85,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t288,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t184,\n\t\t185,\n\t\t186,\n\t\t187,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t185,\n\t\t185,\n\t\t187,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t289,\n\t\t289,\n\t\t187,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t290,\n\t\t289,\n\t\t289,\n\t\t187,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t291,\n\t\t292,\n\t\t293,\n\t\t294,\n\t\t295,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t277,\n\t\t170,\n\t\t278,\n\t\t278,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t174,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t281,\n\t\t80,\n\t\t80,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t192,\n\t\t281,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t189,\n\t\t170,\n\t\t190,\n\t\t278,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t192,\n\t\t174,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t189,\n\t\t170,\n\t\t278,\n\t\t278,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t174,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t76,\n\t\t0,\n\t\t177,\n\t\t177,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t175,\n\t\t296,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t297,\n\t\t196,\n\t\t298,\n\t\t298,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t200,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t299,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t97,\n\t\t300,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t299,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t301,\n\t\t101,\n\t\t101,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t199,\n\t\t301,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t195,\n\t\t196,\n\t\t197,\n\t\t298,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t199,\n\t\t200,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t195,\n\t\t196,\n\t\t298,\n\t\t298,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t200,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t302,\n\t\t111,\n\t\t0,\n\t\t0,\n\t\t97,\n\t\t300,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t302,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t96,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t201,\n\t\t201,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t96,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t101,\n\t\t101,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t303,\n\t\t0,\n\t\t304,\n\t\t305,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t306,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t96,\n\t\t0,\n\t\t202,\n\t\t0,\n\t\t201,\n\t\t201,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t96,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t32,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t307,\n\t\t307,\n\t\t106,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t308,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t210,\n\t\t211,\n\t\t212,\n\t\t213,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t211,\n\t\t211,\n\t\t213,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t309,\n\t\t309,\n\t\t213,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t310,\n\t\t309,\n\t\t309,\n\t\t213,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t311,\n\t\t312,\n\t\t313,\n\t\t314,\n\t\t315,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t297,\n\t\t196,\n\t\t298,\n\t\t298,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t200,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t301,\n\t\t101,\n\t\t101,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t218,\n\t\t301,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t215,\n\t\t196,\n\t\t216,\n\t\t298,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t218,\n\t\t200,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t215,\n\t\t196,\n\t\t298,\n\t\t298,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t200,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t97,\n\t\t0,\n\t\t203,\n\t\t203,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t201,\n\t\t316,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t116,\n\t\t222,\n\t\t222,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t120,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t225,\n\t\t44,\n\t\t44,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t225,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t317,\n\t\t318,\n\t\t319,\n\t\t320,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t321,\n\t\t322,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t223,\n\t\t0,\n\t\t323,\n\t\t0,\n\t\t123,\n\t\t123,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t223,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t223,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t121,\n\t\t324,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t223,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t325,\n\t\t318,\n\t\t326,\n\t\t327,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t328,\n\t\t322,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t64,\n\t\t0,\n\t\t121,\n\t\t121,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t230,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t227,\n\t\t0,\n\t\t228,\n\t\t121,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t230,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t227,\n\t\t0,\n\t\t121,\n\t\t121,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t49,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t46,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t329,\n\t\t329,\n\t\t133,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t330,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t236,\n\t\t237,\n\t\t238,\n\t\t239,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t237,\n\t\t237,\n\t\t239,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t331,\n\t\t331,\n\t\t239,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t332,\n\t\t331,\n\t\t331,\n\t\t239,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t333,\n\t\t40,\n\t\t121,\n\t\t334,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t335,\n\t\t241,\n\t\t336,\n\t\t336,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t245,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t337,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t137,\n\t\t338,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t337,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t339,\n\t\t141,\n\t\t141,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t244,\n\t\t339,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t240,\n\t\t241,\n\t\t242,\n\t\t336,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t244,\n\t\t245,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t240,\n\t\t241,\n\t\t336,\n\t\t336,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t245,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t340,\n\t\t151,\n\t\t0,\n\t\t0,\n\t\t137,\n\t\t338,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t340,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t136,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t246,\n\t\t246,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t136,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t141,\n\t\t141,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t341,\n\t\t0,\n\t\t342,\n\t\t343,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t344,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t136,\n\t\t0,\n\t\t247,\n\t\t0,\n\t\t246,\n\t\t246,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t136,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t57,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t345,\n\t\t345,\n\t\t146,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t346,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t255,\n\t\t256,\n\t\t257,\n\t\t258,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t256,\n\t\t256,\n\t\t258,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t347,\n\t\t347,\n\t\t258,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t348,\n\t\t347,\n\t\t347,\n\t\t258,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t349,\n\t\t350,\n\t\t351,\n\t\t352,\n\t\t353,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t335,\n\t\t241,\n\t\t336,\n\t\t336,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t245,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t339,\n\t\t141,\n\t\t141,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t263,\n\t\t339,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t260,\n\t\t241,\n\t\t261,\n\t\t336,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t263,\n\t\t245,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t260,\n\t\t241,\n\t\t336,\n\t\t336,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t245,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t137,\n\t\t0,\n\t\t248,\n\t\t248,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t246,\n\t\t354,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t126,\n\t\t126,\n\t\t8,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t355,\n\t\t90,\n\t\t0,\n\t\t0,\n\t\t121,\n\t\t125,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t355,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t356,\n\t\t356,\n\t\t269,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t357,\n\t\t358,\n\t\t359,\n\t\t360,\n\t\t361,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t362,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t270,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t363,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t364,\n\t\t116,\n\t\t365,\n\t\t366,\n\t\t8,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t367,\n\t\t120,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t368,\n\t\t368,\n\t\t0,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t40,\n\t\t0,\n\t\t121,\n\t\t121,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t170,\n\t\t278,\n\t\t278,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t174,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t281,\n\t\t80,\n\t\t80,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t281,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t369,\n\t\t370,\n\t\t371,\n\t\t372,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t373,\n\t\t374,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t279,\n\t\t0,\n\t\t375,\n\t\t0,\n\t\t177,\n\t\t177,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t279,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t279,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t175,\n\t\t376,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t279,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t377,\n\t\t370,\n\t\t378,\n\t\t379,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t380,\n\t\t374,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t90,\n\t\t0,\n\t\t175,\n\t\t175,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t286,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t283,\n\t\t0,\n\t\t284,\n\t\t175,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t286,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t283,\n\t\t0,\n\t\t175,\n\t\t175,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t85,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t82,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t381,\n\t\t381,\n\t\t187,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t382,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t292,\n\t\t293,\n\t\t294,\n\t\t295,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t293,\n\t\t293,\n\t\t295,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t383,\n\t\t383,\n\t\t295,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t384,\n\t\t383,\n\t\t383,\n\t\t295,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t385,\n\t\t76,\n\t\t175,\n\t\t386,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t76,\n\t\t0,\n\t\t175,\n\t\t175,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t196,\n\t\t298,\n\t\t298,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t200,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t301,\n\t\t101,\n\t\t101,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t301,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t387,\n\t\t388,\n\t\t389,\n\t\t390,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t391,\n\t\t392,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t299,\n\t\t0,\n\t\t393,\n\t\t0,\n\t\t203,\n\t\t203,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t299,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t299,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t201,\n\t\t394,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t299,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t395,\n\t\t388,\n\t\t396,\n\t\t397,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t398,\n\t\t392,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t111,\n\t\t0,\n\t\t201,\n\t\t201,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t306,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t303,\n\t\t0,\n\t\t304,\n\t\t201,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t306,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t303,\n\t\t0,\n\t\t201,\n\t\t201,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t106,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t103,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t399,\n\t\t399,\n\t\t213,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t400,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t312,\n\t\t313,\n\t\t314,\n\t\t315,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t313,\n\t\t313,\n\t\t315,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t401,\n\t\t401,\n\t\t315,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t402,\n\t\t401,\n\t\t401,\n\t\t315,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t403,\n\t\t97,\n\t\t201,\n\t\t404,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t97,\n\t\t0,\n\t\t201,\n\t\t201,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t405,\n\t\t318,\n\t\t406,\n\t\t406,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t322,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t407,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t40,\n\t\t408,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t407,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t409,\n\t\t44,\n\t\t44,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t321,\n\t\t409,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t317,\n\t\t318,\n\t\t319,\n\t\t406,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t321,\n\t\t322,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t317,\n\t\t318,\n\t\t406,\n\t\t406,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t322,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t410,\n\t\t64,\n\t\t0,\n\t\t0,\n\t\t40,\n\t\t408,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t410,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t223,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t121,\n\t\t121,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t223,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t223,\n\t\t0,\n\t\t323,\n\t\t0,\n\t\t121,\n\t\t121,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t223,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t405,\n\t\t318,\n\t\t406,\n\t\t406,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t322,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t409,\n\t\t44,\n\t\t44,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t328,\n\t\t409,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t325,\n\t\t318,\n\t\t326,\n\t\t406,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t328,\n\t\t322,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t325,\n\t\t318,\n\t\t406,\n\t\t406,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t322,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t133,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t130,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t411,\n\t\t411,\n\t\t239,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t412,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t40,\n\t\t121,\n\t\t334,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t413,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t241,\n\t\t336,\n\t\t336,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t245,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t339,\n\t\t141,\n\t\t141,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t339,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t414,\n\t\t415,\n\t\t416,\n\t\t417,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t418,\n\t\t419,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t337,\n\t\t0,\n\t\t420,\n\t\t0,\n\t\t248,\n\t\t248,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t337,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t337,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t246,\n\t\t421,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t337,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t422,\n\t\t415,\n\t\t423,\n\t\t424,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t425,\n\t\t419,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t151,\n\t\t0,\n\t\t246,\n\t\t246,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t344,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t341,\n\t\t0,\n\t\t342,\n\t\t246,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t344,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t341,\n\t\t0,\n\t\t246,\n\t\t246,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t146,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t143,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t426,\n\t\t426,\n\t\t258,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t427,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t350,\n\t\t351,\n\t\t352,\n\t\t353,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t351,\n\t\t351,\n\t\t353,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t428,\n\t\t428,\n\t\t353,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t429,\n\t\t428,\n\t\t428,\n\t\t353,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t430,\n\t\t137,\n\t\t246,\n\t\t431,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t137,\n\t\t0,\n\t\t246,\n\t\t246,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t432,\n\t\t116,\n\t\t433,\n\t\t434,\n\t\t8,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t435,\n\t\t120,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t180,\n\t\t180,\n\t\t269,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t358,\n\t\t359,\n\t\t360,\n\t\t361,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t362,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t359,\n\t\t359,\n\t\t361,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t362,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t436,\n\t\t436,\n\t\t361,\n\t\t161,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t437,\n\t\t436,\n\t\t436,\n\t\t361,\n\t\t161,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t438,\n\t\t439,\n\t\t440,\n\t\t441,\n\t\t442,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t362,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t443,\n\t\t274,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t443,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t444,\n\t\t116,\n\t\t445,\n\t\t445,\n\t\t8,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t120,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t225,\n\t\t44,\n\t\t44,\n\t\t8,\n\t\t161,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t367,\n\t\t225,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t364,\n\t\t116,\n\t\t365,\n\t\t445,\n\t\t8,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t367,\n\t\t120,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t364,\n\t\t116,\n\t\t445,\n\t\t445,\n\t\t8,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t120,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t161,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t446,\n\t\t370,\n\t\t447,\n\t\t447,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t374,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t448,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t76,\n\t\t449,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t448,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t450,\n\t\t80,\n\t\t80,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t373,\n\t\t450,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t369,\n\t\t370,\n\t\t371,\n\t\t447,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t373,\n\t\t374,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t369,\n\t\t370,\n\t\t447,\n\t\t447,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t374,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t451,\n\t\t90,\n\t\t0,\n\t\t0,\n\t\t76,\n\t\t449,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t451,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t279,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t175,\n\t\t175,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t279,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t279,\n\t\t0,\n\t\t375,\n\t\t0,\n\t\t175,\n\t\t175,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t279,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t446,\n\t\t370,\n\t\t447,\n\t\t447,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t374,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t450,\n\t\t80,\n\t\t80,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t380,\n\t\t450,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t377,\n\t\t370,\n\t\t378,\n\t\t447,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t380,\n\t\t374,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t377,\n\t\t370,\n\t\t447,\n\t\t447,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t374,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t187,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t184,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t452,\n\t\t452,\n\t\t295,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t453,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t76,\n\t\t175,\n\t\t386,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t454,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t455,\n\t\t388,\n\t\t456,\n\t\t456,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t392,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t457,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t97,\n\t\t458,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t457,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t459,\n\t\t101,\n\t\t101,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t391,\n\t\t459,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t387,\n\t\t388,\n\t\t389,\n\t\t456,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t391,\n\t\t392,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t387,\n\t\t388,\n\t\t456,\n\t\t456,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t392,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t460,\n\t\t111,\n\t\t0,\n\t\t0,\n\t\t97,\n\t\t458,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t460,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t299,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t201,\n\t\t201,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t299,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t299,\n\t\t0,\n\t\t393,\n\t\t0,\n\t\t201,\n\t\t201,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t299,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t455,\n\t\t388,\n\t\t456,\n\t\t456,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t392,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t459,\n\t\t101,\n\t\t101,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t398,\n\t\t459,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t395,\n\t\t388,\n\t\t396,\n\t\t456,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t398,\n\t\t392,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t395,\n\t\t388,\n\t\t456,\n\t\t456,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t392,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t213,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t210,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t461,\n\t\t461,\n\t\t315,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t462,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t97,\n\t\t201,\n\t\t404,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t463,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t318,\n\t\t406,\n\t\t406,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t322,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t409,\n\t\t44,\n\t\t44,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t409,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t464,\n\t\t465,\n\t\t466,\n\t\t467,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t468,\n\t\t469,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t407,\n\t\t0,\n\t\t470,\n\t\t0,\n\t\t123,\n\t\t123,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t407,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t407,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t121,\n\t\t471,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t407,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t472,\n\t\t465,\n\t\t473,\n\t\t474,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t475,\n\t\t469,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t239,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t236,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t476,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t477,\n\t\t415,\n\t\t478,\n\t\t478,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t419,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t479,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t137,\n\t\t480,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t479,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t481,\n\t\t141,\n\t\t141,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t418,\n\t\t481,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t414,\n\t\t415,\n\t\t416,\n\t\t478,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t418,\n\t\t419,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t414,\n\t\t415,\n\t\t478,\n\t\t478,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t419,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t482,\n\t\t151,\n\t\t0,\n\t\t0,\n\t\t137,\n\t\t480,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t482,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t337,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t246,\n\t\t246,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t337,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t337,\n\t\t0,\n\t\t420,\n\t\t0,\n\t\t246,\n\t\t246,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t337,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t477,\n\t\t415,\n\t\t478,\n\t\t478,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t419,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t481,\n\t\t141,\n\t\t141,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t425,\n\t\t481,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t422,\n\t\t415,\n\t\t423,\n\t\t478,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t425,\n\t\t419,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t422,\n\t\t415,\n\t\t478,\n\t\t478,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t419,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t258,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t255,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t483,\n\t\t483,\n\t\t353,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t484,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t137,\n\t\t246,\n\t\t431,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t485,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t444,\n\t\t116,\n\t\t445,\n\t\t445,\n\t\t8,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t120,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t225,\n\t\t44,\n\t\t44,\n\t\t8,\n\t\t161,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t435,\n\t\t225,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t432,\n\t\t116,\n\t\t433,\n\t\t445,\n\t\t8,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t435,\n\t\t120,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t432,\n\t\t116,\n\t\t445,\n\t\t445,\n\t\t8,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t120,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t486,\n\t\t486,\n\t\t361,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t487,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t439,\n\t\t440,\n\t\t441,\n\t\t442,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t362,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t440,\n\t\t440,\n\t\t442,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t362,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t488,\n\t\t488,\n\t\t442,\n\t\t161,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t489,\n\t\t488,\n\t\t488,\n\t\t442,\n\t\t161,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t490,\n\t\t491,\n\t\t492,\n\t\t493,\n\t\t494,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t362,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t495,\n\t\t0,\n\t\t496,\n\t\t497,\n\t\t0,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t498,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t116,\n\t\t445,\n\t\t445,\n\t\t8,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t120,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t225,\n\t\t44,\n\t\t44,\n\t\t8,\n\t\t161,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t225,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t370,\n\t\t447,\n\t\t447,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t374,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t450,\n\t\t80,\n\t\t80,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t450,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t499,\n\t\t500,\n\t\t501,\n\t\t502,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t503,\n\t\t504,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t448,\n\t\t0,\n\t\t505,\n\t\t0,\n\t\t177,\n\t\t177,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t448,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t448,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t175,\n\t\t506,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t448,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t507,\n\t\t500,\n\t\t508,\n\t\t509,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t510,\n\t\t504,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t295,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t292,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t511,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t388,\n\t\t456,\n\t\t456,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t392,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t459,\n\t\t101,\n\t\t101,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t459,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t512,\n\t\t513,\n\t\t514,\n\t\t515,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t516,\n\t\t517,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t457,\n\t\t0,\n\t\t518,\n\t\t0,\n\t\t203,\n\t\t203,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t457,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t457,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t201,\n\t\t519,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t457,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t520,\n\t\t513,\n\t\t521,\n\t\t522,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t523,\n\t\t517,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t315,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t312,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t524,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t525,\n\t\t465,\n\t\t526,\n\t\t526,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t469,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t527,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t40,\n\t\t528,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t527,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t529,\n\t\t44,\n\t\t44,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t468,\n\t\t529,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t464,\n\t\t465,\n\t\t466,\n\t\t526,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t468,\n\t\t469,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t464,\n\t\t465,\n\t\t526,\n\t\t526,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t469,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t530,\n\t\t64,\n\t\t0,\n\t\t0,\n\t\t40,\n\t\t528,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t530,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t407,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t121,\n\t\t121,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t407,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t407,\n\t\t0,\n\t\t470,\n\t\t0,\n\t\t121,\n\t\t121,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t407,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t525,\n\t\t465,\n\t\t526,\n\t\t526,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t469,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t529,\n\t\t44,\n\t\t44,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t475,\n\t\t529,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t472,\n\t\t465,\n\t\t473,\n\t\t526,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t475,\n\t\t469,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t472,\n\t\t465,\n\t\t526,\n\t\t526,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t469,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t40,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t415,\n\t\t478,\n\t\t478,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t419,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t481,\n\t\t141,\n\t\t141,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t481,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t531,\n\t\t532,\n\t\t533,\n\t\t534,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t535,\n\t\t536,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t479,\n\t\t0,\n\t\t537,\n\t\t0,\n\t\t248,\n\t\t248,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t479,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t479,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t246,\n\t\t538,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t479,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t539,\n\t\t532,\n\t\t540,\n\t\t541,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t542,\n\t\t536,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t353,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t350,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t543,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t361,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t358,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t544,\n\t\t544,\n\t\t442,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t545,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t491,\n\t\t492,\n\t\t493,\n\t\t494,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t362,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t492,\n\t\t492,\n\t\t494,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t362,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t546,\n\t\t546,\n\t\t494,\n\t\t161,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t547,\n\t\t546,\n\t\t546,\n\t\t494,\n\t\t161,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t548,\n\t\t549,\n\t\t368,\n\t\t550,\n\t\t0,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t362,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t274,\n\t\t0,\n\t\t368,\n\t\t368,\n\t\t0,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t161,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t498,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t495,\n\t\t0,\n\t\t496,\n\t\t368,\n\t\t0,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t498,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t495,\n\t\t0,\n\t\t368,\n\t\t368,\n\t\t0,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t551,\n\t\t500,\n\t\t552,\n\t\t552,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t504,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t553,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t76,\n\t\t554,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t553,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t555,\n\t\t80,\n\t\t80,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t503,\n\t\t555,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t499,\n\t\t500,\n\t\t501,\n\t\t552,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t503,\n\t\t504,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t499,\n\t\t500,\n\t\t552,\n\t\t552,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t504,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t556,\n\t\t90,\n\t\t0,\n\t\t0,\n\t\t76,\n\t\t554,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t556,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t448,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t175,\n\t\t175,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t448,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t448,\n\t\t0,\n\t\t505,\n\t\t0,\n\t\t175,\n\t\t175,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t448,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t551,\n\t\t500,\n\t\t552,\n\t\t552,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t504,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t555,\n\t\t80,\n\t\t80,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t510,\n\t\t555,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t507,\n\t\t500,\n\t\t508,\n\t\t552,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t510,\n\t\t504,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t507,\n\t\t500,\n\t\t552,\n\t\t552,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t504,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t76,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t557,\n\t\t513,\n\t\t558,\n\t\t558,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t517,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t559,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t97,\n\t\t560,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t559,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t561,\n\t\t101,\n\t\t101,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t516,\n\t\t561,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t512,\n\t\t513,\n\t\t514,\n\t\t558,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t516,\n\t\t517,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t512,\n\t\t513,\n\t\t558,\n\t\t558,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t517,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t562,\n\t\t111,\n\t\t0,\n\t\t0,\n\t\t97,\n\t\t560,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t562,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t457,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t201,\n\t\t201,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t457,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t457,\n\t\t0,\n\t\t518,\n\t\t0,\n\t\t201,\n\t\t201,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t457,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t557,\n\t\t513,\n\t\t558,\n\t\t558,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t517,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t561,\n\t\t101,\n\t\t101,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t523,\n\t\t561,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t520,\n\t\t513,\n\t\t521,\n\t\t558,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t523,\n\t\t517,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t520,\n\t\t513,\n\t\t558,\n\t\t558,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t517,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t97,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t465,\n\t\t526,\n\t\t526,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t469,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t529,\n\t\t44,\n\t\t44,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t529,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t563,\n\t\t66,\n\t\t564,\n\t\t565,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t566,\n\t\t68,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t527,\n\t\t0,\n\t\t567,\n\t\t0,\n\t\t123,\n\t\t123,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t527,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t527,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t121,\n\t\t568,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t527,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t569,\n\t\t66,\n\t\t570,\n\t\t571,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t572,\n\t\t68,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t573,\n\t\t532,\n\t\t574,\n\t\t574,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t536,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t575,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t137,\n\t\t576,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t575,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t577,\n\t\t141,\n\t\t141,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t535,\n\t\t577,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t531,\n\t\t532,\n\t\t533,\n\t\t574,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t535,\n\t\t536,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t531,\n\t\t532,\n\t\t574,\n\t\t574,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t536,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t578,\n\t\t151,\n\t\t0,\n\t\t0,\n\t\t137,\n\t\t576,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t578,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t479,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t246,\n\t\t246,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t479,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t479,\n\t\t0,\n\t\t537,\n\t\t0,\n\t\t246,\n\t\t246,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t479,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t573,\n\t\t532,\n\t\t574,\n\t\t574,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t536,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t577,\n\t\t141,\n\t\t141,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t542,\n\t\t577,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t539,\n\t\t532,\n\t\t540,\n\t\t574,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t542,\n\t\t536,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t539,\n\t\t532,\n\t\t574,\n\t\t574,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t536,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t137,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t442,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t439,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t579,\n\t\t579,\n\t\t494,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t580,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t549,\n\t\t368,\n\t\t550,\n\t\t0,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t362,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t368,\n\t\t368,\n\t\t0,\n\t\t161,\n\t\t0,\n\t\t162,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t362,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t581,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t161,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t500,\n\t\t552,\n\t\t552,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t504,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t555,\n\t\t80,\n\t\t80,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t555,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t582,\n\t\t91,\n\t\t583,\n\t\t584,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t585,\n\t\t93,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t553,\n\t\t0,\n\t\t586,\n\t\t0,\n\t\t177,\n\t\t177,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t553,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t553,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t175,\n\t\t587,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t553,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t588,\n\t\t91,\n\t\t589,\n\t\t590,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t591,\n\t\t93,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t513,\n\t\t558,\n\t\t558,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t517,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t561,\n\t\t101,\n\t\t101,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t561,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t592,\n\t\t112,\n\t\t593,\n\t\t594,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t595,\n\t\t114,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t559,\n\t\t0,\n\t\t596,\n\t\t0,\n\t\t203,\n\t\t203,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t559,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t559,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t201,\n\t\t597,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t559,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t598,\n\t\t112,\n\t\t599,\n\t\t600,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t601,\n\t\t114,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t602,\n\t\t66,\n\t\t67,\n\t\t67,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t68,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t165,\n\t\t44,\n\t\t44,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t566,\n\t\t165,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t563,\n\t\t66,\n\t\t564,\n\t\t67,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t566,\n\t\t68,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t563,\n\t\t66,\n\t\t67,\n\t\t67,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t68,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t527,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t121,\n\t\t121,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t527,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t527,\n\t\t0,\n\t\t567,\n\t\t0,\n\t\t121,\n\t\t121,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t42,\n\t\t0,\n\t\t527,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t602,\n\t\t66,\n\t\t67,\n\t\t67,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t68,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t165,\n\t\t44,\n\t\t44,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t572,\n\t\t165,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t569,\n\t\t66,\n\t\t570,\n\t\t67,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t572,\n\t\t68,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t569,\n\t\t66,\n\t\t67,\n\t\t67,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t68,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t532,\n\t\t574,\n\t\t574,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t536,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t577,\n\t\t141,\n\t\t141,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t577,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t603,\n\t\t152,\n\t\t604,\n\t\t605,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t606,\n\t\t154,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t575,\n\t\t0,\n\t\t607,\n\t\t0,\n\t\t248,\n\t\t248,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t575,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t575,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t246,\n\t\t608,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t575,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t609,\n\t\t152,\n\t\t610,\n\t\t611,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t612,\n\t\t154,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t494,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t491,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t613,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t614,\n\t\t91,\n\t\t92,\n\t\t92,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t93,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t194,\n\t\t80,\n\t\t80,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t585,\n\t\t194,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t582,\n\t\t91,\n\t\t583,\n\t\t92,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t585,\n\t\t93,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t582,\n\t\t91,\n\t\t92,\n\t\t92,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t93,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t553,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t175,\n\t\t175,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t553,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t553,\n\t\t0,\n\t\t586,\n\t\t0,\n\t\t175,\n\t\t175,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t78,\n\t\t0,\n\t\t553,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t614,\n\t\t91,\n\t\t92,\n\t\t92,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t93,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t194,\n\t\t80,\n\t\t80,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t591,\n\t\t194,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t588,\n\t\t91,\n\t\t589,\n\t\t92,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t591,\n\t\t93,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t588,\n\t\t91,\n\t\t92,\n\t\t92,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t93,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t615,\n\t\t112,\n\t\t113,\n\t\t113,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t114,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t220,\n\t\t101,\n\t\t101,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t595,\n\t\t220,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t592,\n\t\t112,\n\t\t593,\n\t\t113,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t595,\n\t\t114,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t592,\n\t\t112,\n\t\t113,\n\t\t113,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t114,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t559,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t201,\n\t\t201,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t559,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t559,\n\t\t0,\n\t\t596,\n\t\t0,\n\t\t201,\n\t\t201,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t99,\n\t\t0,\n\t\t559,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t615,\n\t\t112,\n\t\t113,\n\t\t113,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t114,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t220,\n\t\t101,\n\t\t101,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t601,\n\t\t220,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t598,\n\t\t112,\n\t\t599,\n\t\t113,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t601,\n\t\t114,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t598,\n\t\t112,\n\t\t113,\n\t\t113,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t114,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t66,\n\t\t67,\n\t\t67,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t10,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t68,\n\t\t0,\n\t\t0,\n\t\t16,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t616,\n\t\t152,\n\t\t153,\n\t\t153,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t154,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t265,\n\t\t141,\n\t\t141,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t606,\n\t\t265,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t603,\n\t\t152,\n\t\t604,\n\t\t153,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t606,\n\t\t154,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t603,\n\t\t152,\n\t\t153,\n\t\t153,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t154,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t575,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t246,\n\t\t246,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t575,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t575,\n\t\t0,\n\t\t607,\n\t\t0,\n\t\t246,\n\t\t246,\n\t\t0,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t139,\n\t\t0,\n\t\t575,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t616,\n\t\t152,\n\t\t153,\n\t\t153,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t154,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t265,\n\t\t141,\n\t\t141,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t612,\n\t\t265,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t609,\n\t\t152,\n\t\t610,\n\t\t153,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t612,\n\t\t154,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t609,\n\t\t152,\n\t\t153,\n\t\t153,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t154,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t549,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t91,\n\t\t92,\n\t\t92,\n\t\t22,\n\t\t23,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t93,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t112,\n\t\t113,\n\t\t113,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t34,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t114,\n\t\t0,\n\t\t0,\n\t\t37,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t152,\n\t\t153,\n\t\t153,\n\t\t57,\n\t\t58,\n\t\t0,\n\t\t59,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t154,\n\t\t0,\n\t\t0,\n\t\t62,\n\t\t0\n\t]\n];\nvar accepting = [\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\tfalse,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\tfalse,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\tfalse,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\tfalse,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\tfalse,\n\tfalse,\n\tfalse,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\tfalse,\n\tfalse,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\tfalse,\n\tfalse,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue\n];\nvar tags = [\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"symbol_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"symbol_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"symbol_cluster\"\n\t],\n\t[\n\t\t\"symbol_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"symbol_cluster\"\n\t],\n\t[\n\t\t\"symbol_cluster\"\n\t],\n\t[\n\t\t\"symbol_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"symbol_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"consonant_syllable\",\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"consonant_syllable\"\n\t],\n\t[\n\t\t\"vowel_syllable\"\n\t],\n\t[\n\t\t\"standalone_cluster\"\n\t]\n];\nvar indicMachine = {\n\tstateTable: stateTable,\n\taccepting: accepting,\n\ttags: tags\n};\n\nvar categories = [\n\t\"O\",\n\t\"IND\",\n\t\"S\",\n\t\"GB\",\n\t\"B\",\n\t\"FM\",\n\t\"CGJ\",\n\t\"VMAbv\",\n\t\"VMPst\",\n\t\"VAbv\",\n\t\"VPst\",\n\t\"CMBlw\",\n\t\"VPre\",\n\t\"VBlw\",\n\t\"H\",\n\t\"VMBlw\",\n\t\"CMAbv\",\n\t\"MBlw\",\n\t\"CS\",\n\t\"R\",\n\t\"SUB\",\n\t\"MPst\",\n\t\"MPre\",\n\t\"FAbv\",\n\t\"FPst\",\n\t\"FBlw\",\n\t\"null\",\n\t\"SMAbv\",\n\t\"SMBlw\",\n\t\"VMPre\",\n\t\"ZWNJ\",\n\t\"ZWJ\",\n\t\"WJ\",\n\t\"M\",\n\t\"VS\",\n\t\"N\",\n\t\"HN\",\n\t\"MAbv\"\n];\nvar decompositions = {\n\t\"2507\": [\n\t\t2503,\n\t\t2494\n\t],\n\t\"2508\": [\n\t\t2503,\n\t\t2519\n\t],\n\t\"2888\": [\n\t\t2887,\n\t\t2902\n\t],\n\t\"2891\": [\n\t\t2887,\n\t\t2878\n\t],\n\t\"2892\": [\n\t\t2887,\n\t\t2903\n\t],\n\t\"3018\": [\n\t\t3014,\n\t\t3006\n\t],\n\t\"3019\": [\n\t\t3015,\n\t\t3006\n\t],\n\t\"3020\": [\n\t\t3014,\n\t\t3031\n\t],\n\t\"3144\": [\n\t\t3142,\n\t\t3158\n\t],\n\t\"3264\": [\n\t\t3263,\n\t\t3285\n\t],\n\t\"3271\": [\n\t\t3270,\n\t\t3285\n\t],\n\t\"3272\": [\n\t\t3270,\n\t\t3286\n\t],\n\t\"3274\": [\n\t\t3270,\n\t\t3266\n\t],\n\t\"3275\": [\n\t\t3270,\n\t\t3266,\n\t\t3285\n\t],\n\t\"3402\": [\n\t\t3398,\n\t\t3390\n\t],\n\t\"3403\": [\n\t\t3399,\n\t\t3390\n\t],\n\t\"3404\": [\n\t\t3398,\n\t\t3415\n\t],\n\t\"3546\": [\n\t\t3545,\n\t\t3530\n\t],\n\t\"3548\": [\n\t\t3545,\n\t\t3535\n\t],\n\t\"3549\": [\n\t\t3545,\n\t\t3535,\n\t\t3530\n\t],\n\t\"3550\": [\n\t\t3545,\n\t\t3551\n\t],\n\t\"3635\": [\n\t\t3661,\n\t\t3634\n\t],\n\t\"3763\": [\n\t\t3789,\n\t\t3762\n\t],\n\t\"3955\": [\n\t\t3953,\n\t\t3954\n\t],\n\t\"3957\": [\n\t\t3953,\n\t\t3956\n\t],\n\t\"3958\": [\n\t\t4018,\n\t\t3968\n\t],\n\t\"3959\": [\n\t\t4018,\n\t\t3953,\n\t\t3968\n\t],\n\t\"3960\": [\n\t\t4019,\n\t\t3968\n\t],\n\t\"3961\": [\n\t\t4019,\n\t\t3953,\n\t\t3968\n\t],\n\t\"3969\": [\n\t\t3953,\n\t\t3968\n\t],\n\t\"6971\": [\n\t\t6970,\n\t\t6965\n\t],\n\t\"6973\": [\n\t\t6972,\n\t\t6965\n\t],\n\t\"6976\": [\n\t\t6974,\n\t\t6965\n\t],\n\t\"6977\": [\n\t\t6975,\n\t\t6965\n\t],\n\t\"6979\": [\n\t\t6978,\n\t\t6965\n\t],\n\t\"69934\": [\n\t\t69937,\n\t\t69927\n\t],\n\t\"69935\": [\n\t\t69938,\n\t\t69927\n\t],\n\t\"70475\": [\n\t\t70471,\n\t\t70462\n\t],\n\t\"70476\": [\n\t\t70471,\n\t\t70487\n\t],\n\t\"70843\": [\n\t\t70841,\n\t\t70842\n\t],\n\t\"70844\": [\n\t\t70841,\n\t\t70832\n\t],\n\t\"70846\": [\n\t\t70841,\n\t\t70845\n\t],\n\t\"71098\": [\n\t\t71096,\n\t\t71087\n\t],\n\t\"71099\": [\n\t\t71097,\n\t\t71087\n\t]\n};\nvar stateTable$1 = [\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t2,\n\t\t2,\n\t\t3,\n\t\t4,\n\t\t4,\n\t\t5,\n\t\t0,\n\t\t6,\n\t\t7,\n\t\t8,\n\t\t9,\n\t\t10,\n\t\t11,\n\t\t12,\n\t\t13,\n\t\t14,\n\t\t15,\n\t\t16,\n\t\t0,\n\t\t17,\n\t\t18,\n\t\t11,\n\t\t19,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t2,\n\t\t0,\n\t\t0,\n\t\t24,\n\t\t0,\n\t\t25\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t26,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t28,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t0,\n\t\t30,\n\t\t31,\n\t\t32,\n\t\t33,\n\t\t34,\n\t\t35,\n\t\t36,\n\t\t37,\n\t\t38,\n\t\t39,\n\t\t40,\n\t\t0,\n\t\t0,\n\t\t41,\n\t\t35,\n\t\t42,\n\t\t43,\n\t\t44,\n\t\t45,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t46,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t39,\n\t\t0,\n\t\t0,\n\t\t47\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t5,\n\t\t0,\n\t\t6,\n\t\t7,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t14,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t5,\n\t\t0,\n\t\t0,\n\t\t7,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t5,\n\t\t0,\n\t\t6,\n\t\t7,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t12,\n\t\t0,\n\t\t14,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t5,\n\t\t0,\n\t\t6,\n\t\t7,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t14,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t5,\n\t\t0,\n\t\t6,\n\t\t7,\n\t\t8,\n\t\t9,\n\t\t10,\n\t\t11,\n\t\t12,\n\t\t13,\n\t\t14,\n\t\t0,\n\t\t16,\n\t\t0,\n\t\t0,\n\t\t18,\n\t\t11,\n\t\t19,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t25\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t5,\n\t\t0,\n\t\t6,\n\t\t7,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t11,\n\t\t12,\n\t\t0,\n\t\t14,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t5,\n\t\t0,\n\t\t6,\n\t\t7,\n\t\t0,\n\t\t9,\n\t\t0,\n\t\t0,\n\t\t12,\n\t\t0,\n\t\t14,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t18,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t5,\n\t\t0,\n\t\t0,\n\t\t7,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t14,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t5,\n\t\t0,\n\t\t6,\n\t\t7,\n\t\t8,\n\t\t9,\n\t\t10,\n\t\t11,\n\t\t12,\n\t\t13,\n\t\t14,\n\t\t15,\n\t\t16,\n\t\t0,\n\t\t0,\n\t\t18,\n\t\t11,\n\t\t19,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t25\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t5,\n\t\t0,\n\t\t6,\n\t\t7,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t11,\n\t\t12,\n\t\t0,\n\t\t14,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t11,\n\t\t0,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t4,\n\t\t4,\n\t\t5,\n\t\t0,\n\t\t6,\n\t\t7,\n\t\t8,\n\t\t9,\n\t\t10,\n\t\t11,\n\t\t12,\n\t\t13,\n\t\t14,\n\t\t15,\n\t\t16,\n\t\t0,\n\t\t0,\n\t\t18,\n\t\t11,\n\t\t19,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t25\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t5,\n\t\t0,\n\t\t6,\n\t\t7,\n\t\t8,\n\t\t9,\n\t\t48,\n\t\t11,\n\t\t12,\n\t\t13,\n\t\t14,\n\t\t48,\n\t\t16,\n\t\t0,\n\t\t0,\n\t\t18,\n\t\t11,\n\t\t19,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t49,\n\t\t0,\n\t\t0,\n\t\t25\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t5,\n\t\t0,\n\t\t6,\n\t\t7,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t11,\n\t\t12,\n\t\t0,\n\t\t14,\n\t\t0,\n\t\t16,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t11,\n\t\t0,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t25\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t5,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t5,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t21,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t5,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t21,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t5,\n\t\t0,\n\t\t6,\n\t\t7,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t14,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t50,\n\t\t0,\n\t\t51,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t5,\n\t\t0,\n\t\t6,\n\t\t7,\n\t\t8,\n\t\t9,\n\t\t0,\n\t\t11,\n\t\t12,\n\t\t0,\n\t\t14,\n\t\t0,\n\t\t16,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t11,\n\t\t0,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t27,\n\t\t28,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t28,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t0,\n\t\t30,\n\t\t31,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t38,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t43,\n\t\t44,\n\t\t45,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t0,\n\t\t0,\n\t\t31,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t43,\n\t\t44,\n\t\t45,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t0,\n\t\t30,\n\t\t31,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t36,\n\t\t0,\n\t\t38,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t43,\n\t\t44,\n\t\t45,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t46,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t0,\n\t\t30,\n\t\t31,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t38,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t43,\n\t\t44,\n\t\t45,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t46,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t0,\n\t\t30,\n\t\t31,\n\t\t32,\n\t\t33,\n\t\t34,\n\t\t35,\n\t\t36,\n\t\t37,\n\t\t38,\n\t\t0,\n\t\t40,\n\t\t0,\n\t\t0,\n\t\t41,\n\t\t35,\n\t\t42,\n\t\t43,\n\t\t44,\n\t\t45,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t46,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t47\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t0,\n\t\t30,\n\t\t31,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t35,\n\t\t36,\n\t\t0,\n\t\t38,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t43,\n\t\t44,\n\t\t45,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t46,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t0,\n\t\t30,\n\t\t31,\n\t\t0,\n\t\t33,\n\t\t0,\n\t\t0,\n\t\t36,\n\t\t0,\n\t\t38,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t43,\n\t\t44,\n\t\t45,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t46,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t41,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t0,\n\t\t0,\n\t\t31,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t38,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t43,\n\t\t44,\n\t\t45,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t0,\n\t\t30,\n\t\t31,\n\t\t32,\n\t\t33,\n\t\t34,\n\t\t35,\n\t\t36,\n\t\t37,\n\t\t38,\n\t\t39,\n\t\t40,\n\t\t0,\n\t\t0,\n\t\t41,\n\t\t35,\n\t\t42,\n\t\t43,\n\t\t44,\n\t\t45,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t46,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t47\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t0,\n\t\t30,\n\t\t31,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t35,\n\t\t36,\n\t\t0,\n\t\t38,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t35,\n\t\t0,\n\t\t43,\n\t\t44,\n\t\t45,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t46,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t0,\n\t\t30,\n\t\t31,\n\t\t32,\n\t\t33,\n\t\t52,\n\t\t35,\n\t\t36,\n\t\t37,\n\t\t38,\n\t\t52,\n\t\t40,\n\t\t0,\n\t\t0,\n\t\t41,\n\t\t35,\n\t\t42,\n\t\t43,\n\t\t44,\n\t\t45,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t46,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t53,\n\t\t0,\n\t\t0,\n\t\t47\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t0,\n\t\t30,\n\t\t31,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t35,\n\t\t36,\n\t\t0,\n\t\t38,\n\t\t0,\n\t\t40,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t35,\n\t\t0,\n\t\t43,\n\t\t44,\n\t\t45,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t46,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t47\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t43,\n\t\t44,\n\t\t45,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t44,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t44,\n\t\t45,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t0,\n\t\t30,\n\t\t31,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t38,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t43,\n\t\t44,\n\t\t45,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t46,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t0,\n\t\t30,\n\t\t31,\n\t\t32,\n\t\t33,\n\t\t0,\n\t\t35,\n\t\t36,\n\t\t0,\n\t\t38,\n\t\t0,\n\t\t40,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t35,\n\t\t0,\n\t\t43,\n\t\t44,\n\t\t45,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t46,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t5,\n\t\t0,\n\t\t6,\n\t\t7,\n\t\t8,\n\t\t9,\n\t\t48,\n\t\t11,\n\t\t12,\n\t\t13,\n\t\t14,\n\t\t0,\n\t\t16,\n\t\t0,\n\t\t0,\n\t\t18,\n\t\t11,\n\t\t19,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t25\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t5,\n\t\t0,\n\t\t6,\n\t\t7,\n\t\t8,\n\t\t9,\n\t\t48,\n\t\t11,\n\t\t12,\n\t\t13,\n\t\t14,\n\t\t48,\n\t\t16,\n\t\t0,\n\t\t0,\n\t\t18,\n\t\t11,\n\t\t19,\n\t\t20,\n\t\t21,\n\t\t22,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t23,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t25\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t51,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t54,\n\t\t0,\n\t\t0\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t0,\n\t\t30,\n\t\t31,\n\t\t32,\n\t\t33,\n\t\t52,\n\t\t35,\n\t\t36,\n\t\t37,\n\t\t38,\n\t\t0,\n\t\t40,\n\t\t0,\n\t\t0,\n\t\t41,\n\t\t35,\n\t\t42,\n\t\t43,\n\t\t44,\n\t\t45,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t46,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t47\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t29,\n\t\t0,\n\t\t30,\n\t\t31,\n\t\t32,\n\t\t33,\n\t\t52,\n\t\t35,\n\t\t36,\n\t\t37,\n\t\t38,\n\t\t52,\n\t\t40,\n\t\t0,\n\t\t0,\n\t\t41,\n\t\t35,\n\t\t42,\n\t\t43,\n\t\t44,\n\t\t45,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t46,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t47\n\t],\n\t[\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t50,\n\t\t0,\n\t\t51,\n\t\t0\n\t]\n];\nvar accepting$1 = [\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\tfalse,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue,\n\ttrue\n];\nvar tags$1 = [\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"independent_cluster\"\n\t],\n\t[\n\t\t\"symbol_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"numeral_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"independent_cluster\"\n\t],\n\t[\n\t\t\"symbol_cluster\"\n\t],\n\t[\n\t\t\"symbol_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"virama_terminated_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"broken_cluster\"\n\t],\n\t[\n\t\t\"numeral_cluster\"\n\t],\n\t[\n\t\t\"number_joiner_terminated_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"standard_cluster\"\n\t],\n\t[\n\t\t\"numeral_cluster\"\n\t]\n];\nvar useData = {\n\tcategories: categories,\n\tdecompositions: decompositions,\n\tstateTable: stateTable$1,\n\taccepting: accepting$1,\n\ttags: tags$1\n};\n\n// Cateories used in the OpenType spec:\n// https://www.microsoft.com/typography/otfntdev/devanot/shaping.aspx\nvar CATEGORIES = {\n  X: 1 << 0,\n  C: 1 << 1,\n  V: 1 << 2,\n  N: 1 << 3,\n  H: 1 << 4,\n  ZWNJ: 1 << 5,\n  ZWJ: 1 << 6,\n  M: 1 << 7,\n  SM: 1 << 8,\n  VD: 1 << 9,\n  A: 1 << 10,\n  Placeholder: 1 << 11,\n  Dotted_Circle: 1 << 12,\n  RS: 1 << 13,\n  // Register Shifter, used in Khmer OT spec.\n  Coeng: 1 << 14,\n  // Khmer-style Virama.\n  Repha: 1 << 15,\n  // Atomically-encoded logical or visual repha.\n  Ra: 1 << 16,\n  CM: 1 << 17,\n  // Consonant-Medial.\n  Symbol: 1 << 18 // Avagraha, etc that take marks (SM,A,VD).\n\n}; // Visual positions in a syllable from left to right.\n\nvar POSITIONS = {\n  Start: 1 << 0,\n  Ra_To_Become_Reph: 1 << 1,\n  Pre_M: 1 << 2,\n  Pre_C: 1 << 3,\n  Base_C: 1 << 4,\n  After_Main: 1 << 5,\n  Above_C: 1 << 6,\n  Before_Sub: 1 << 7,\n  Below_C: 1 << 8,\n  After_Sub: 1 << 9,\n  Before_Post: 1 << 10,\n  Post_C: 1 << 11,\n  After_Post: 1 << 12,\n  Final_C: 1 << 13,\n  SMVD: 1 << 14,\n  End: 1 << 15\n};\nvar CONSONANT_FLAGS = CATEGORIES.C | CATEGORIES.Ra | CATEGORIES.CM | CATEGORIES.V | CATEGORIES.Placeholder | CATEGORIES.Dotted_Circle;\nvar JOINER_FLAGS = CATEGORIES.ZWJ | CATEGORIES.ZWNJ;\nvar HALANT_OR_COENG_FLAGS = CATEGORIES.H | CATEGORIES.Coeng;\nvar INDIC_CONFIGS = {\n  Default: {\n    hasOldSpec: false,\n    virama: 0,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Devanagari: {\n    hasOldSpec: true,\n    virama: 0x094D,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Bengali: {\n    hasOldSpec: true,\n    virama: 0x09CD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Sub,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Gurmukhi: {\n    hasOldSpec: true,\n    virama: 0x0A4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Sub,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Gujarati: {\n    hasOldSpec: true,\n    virama: 0x0ACD,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Oriya: {\n    hasOldSpec: true,\n    virama: 0x0B4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Main,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Tamil: {\n    hasOldSpec: true,\n    virama: 0x0BCD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Telugu: {\n    hasOldSpec: true,\n    virama: 0x0C4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Explicit',\n    blwfMode: 'Post_Only'\n  },\n  Kannada: {\n    hasOldSpec: true,\n    virama: 0x0CCD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Post_Only'\n  },\n  Malayalam: {\n    hasOldSpec: true,\n    virama: 0x0D4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Main,\n    rephMode: 'Log_Repha',\n    blwfMode: 'Pre_And_Post'\n  },\n  // Handled by UniversalShaper\n  // Sinhala: {\n  //   hasOldSpec: false,\n  //   virama: 0x0DCA,\n  //   basePos: 'Last_Sinhala',\n  //   rephPos: POSITIONS.After_Main,\n  //   rephMode: 'Explicit',\n  //   blwfMode: 'Pre_And_Post'\n  // },\n  Khmer: {\n    hasOldSpec: false,\n    virama: 0x17D2,\n    basePos: 'First',\n    rephPos: POSITIONS.Ra_To_Become_Reph,\n    rephMode: 'Vis_Repha',\n    blwfMode: 'Pre_And_Post'\n  }\n}; // Additional decompositions that aren't in Unicode\n\nvar INDIC_DECOMPOSITIONS = {\n  // Khmer\n  0x17BE: [0x17C1, 0x17BE],\n  0x17BF: [0x17C1, 0x17BF],\n  0x17C0: [0x17C1, 0x17C0],\n  0x17C4: [0x17C1, 0x17C4],\n  0x17C5: [0x17C1, 0x17C5]\n};\n\nvar {\n  decompositions: decompositions$1\n} = useData;\nvar trie$1 = new UnicodeTrie((__webpack_require__(/*! fs */ \"fs\").readFileSync)(__dirname + '/indic.trie'));\nvar stateMachine = new StateMachine(indicMachine);\n/**\r\n * The IndicShaper supports indic scripts e.g. Devanagari, Kannada, etc.\r\n * Based on code from Harfbuzz: https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-indic.cc\r\n */\n\nclass IndicShaper extends DefaultShaper {\n  static planFeatures(plan) {\n    plan.addStage(setupSyllables);\n    plan.addStage(['locl', 'ccmp']);\n    plan.addStage(initialReordering);\n    plan.addStage('nukt');\n    plan.addStage('akhn');\n    plan.addStage('rphf', false);\n    plan.addStage('rkrf');\n    plan.addStage('pref', false);\n    plan.addStage('blwf', false);\n    plan.addStage('abvf', false);\n    plan.addStage('half', false);\n    plan.addStage('pstf', false);\n    plan.addStage('vatu');\n    plan.addStage('cjct');\n    plan.addStage('cfar', false);\n    plan.addStage(finalReordering);\n    plan.addStage({\n      local: ['init'],\n      global: ['pres', 'abvs', 'blws', 'psts', 'haln', 'dist', 'abvm', 'blwm', 'calt', 'clig']\n    }); // Setup the indic config for the selected script\n\n    plan.unicodeScript = fromOpenType(plan.script);\n    plan.indicConfig = INDIC_CONFIGS[plan.unicodeScript] || INDIC_CONFIGS.Default;\n    plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== '2'; // TODO: turn off kern (Khmer) and liga features.\n  }\n\n  static assignFeatures(plan, glyphs) {\n    var _loop = function (i) {\n      var codepoint = glyphs[i].codePoints[0];\n      var d = INDIC_DECOMPOSITIONS[codepoint] || decompositions$1[codepoint];\n\n      if (d) {\n        var decomposed = d.map(c => {\n          var g = plan.font.glyphForCodePoint(c);\n          return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);\n        });\n        glyphs.splice(i, 1, ...decomposed);\n      }\n    };\n\n    // Decompose split matras\n    // TODO: do this in a more general unicode normalizer\n    for (var i = glyphs.length - 1; i >= 0; i--) {\n      _loop(i);\n    }\n  }\n\n}\n\n_defineProperty(IndicShaper, \"zeroMarkWidths\", 'NONE');\n\nfunction indicCategory(glyph) {\n  return trie$1.get(glyph.codePoints[0]) >> 8;\n}\n\nfunction indicPosition(glyph) {\n  return 1 << (trie$1.get(glyph.codePoints[0]) & 0xff);\n}\n\nclass IndicInfo {\n  constructor(category, position, syllableType, syllable) {\n    this.category = category;\n    this.position = position;\n    this.syllableType = syllableType;\n    this.syllable = syllable;\n  }\n\n}\n\nfunction setupSyllables(font, glyphs) {\n  var syllable = 0;\n  var last = 0;\n\n  for (var [start, end, tags] of stateMachine.match(glyphs.map(indicCategory))) {\n    if (start > last) {\n      ++syllable;\n\n      for (var i = last; i < start; i++) {\n        glyphs[i].shaperInfo = new IndicInfo(CATEGORIES.X, POSITIONS.End, 'non_indic_cluster', syllable);\n      }\n    }\n\n    ++syllable; // Create shaper info\n\n    for (var _i = start; _i <= end; _i++) {\n      glyphs[_i].shaperInfo = new IndicInfo(1 << indicCategory(glyphs[_i]), indicPosition(glyphs[_i]), tags[0], syllable);\n    }\n\n    last = end + 1;\n  }\n\n  if (last < glyphs.length) {\n    ++syllable;\n\n    for (var _i2 = last; _i2 < glyphs.length; _i2++) {\n      glyphs[_i2].shaperInfo = new IndicInfo(CATEGORIES.X, POSITIONS.End, 'non_indic_cluster', syllable);\n    }\n  }\n}\n\nfunction isConsonant(glyph) {\n  return glyph.shaperInfo.category & CONSONANT_FLAGS;\n}\n\nfunction isJoiner(glyph) {\n  return glyph.shaperInfo.category & JOINER_FLAGS;\n}\n\nfunction isHalantOrCoeng(glyph) {\n  return glyph.shaperInfo.category & HALANT_OR_COENG_FLAGS;\n}\n\nfunction wouldSubstitute(glyphs, feature) {\n  for (var glyph of glyphs) {\n    glyph.features = {\n      [feature]: true\n    };\n  }\n\n  var GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;\n  GSUB.applyFeatures([feature], glyphs);\n  return glyphs.length === 1;\n}\n\nfunction consonantPosition(font, consonant, virama) {\n  var glyphs = [virama, consonant, virama];\n\n  if (wouldSubstitute(glyphs.slice(0, 2), 'blwf') || wouldSubstitute(glyphs.slice(1, 3), 'blwf')) {\n    return POSITIONS.Below_C;\n  } else if (wouldSubstitute(glyphs.slice(0, 2), 'pstf') || wouldSubstitute(glyphs.slice(1, 3), 'pstf')) {\n    return POSITIONS.Post_C;\n  } else if (wouldSubstitute(glyphs.slice(0, 2), 'pref') || wouldSubstitute(glyphs.slice(1, 3), 'pref')) {\n    return POSITIONS.Post_C;\n  }\n\n  return POSITIONS.Base_C;\n}\n\nfunction initialReordering(font, glyphs, plan) {\n  var indicConfig = plan.indicConfig;\n  var features = font._layoutEngine.engine.GSUBProcessor.features;\n  var dottedCircle = font.glyphForCodePoint(0x25cc).id;\n  var virama = font.glyphForCodePoint(indicConfig.virama).id;\n\n  if (virama) {\n    var info = new GlyphInfo(font, virama, [indicConfig.virama]);\n\n    for (var i = 0; i < glyphs.length; i++) {\n      if (glyphs[i].shaperInfo.position === POSITIONS.Base_C) {\n        glyphs[i].shaperInfo.position = consonantPosition(font, glyphs[i].copy(), info);\n      }\n    }\n  }\n\n  for (var start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {\n    var {\n      category,\n      syllableType\n    } = glyphs[start].shaperInfo;\n\n    if (syllableType === 'symbol_cluster' || syllableType === 'non_indic_cluster') {\n      continue;\n    }\n\n    if (syllableType === 'broken_cluster' && dottedCircle) {\n      var g = new GlyphInfo(font, dottedCircle, [0x25cc]);\n      g.shaperInfo = new IndicInfo(1 << indicCategory(g), indicPosition(g), glyphs[start].shaperInfo.syllableType, glyphs[start].shaperInfo.syllable); // Insert after possible Repha.\n\n      var _i3 = start;\n\n      while (_i3 < end && glyphs[_i3].shaperInfo.category === CATEGORIES.Repha) {\n        _i3++;\n      }\n\n      glyphs.splice(_i3++, 0, g);\n      end++;\n    } // 1. Find base consonant:\n    //\n    // The shaping engine finds the base consonant of the syllable, using the\n    // following algorithm: starting from the end of the syllable, move backwards\n    // until a consonant is found that does not have a below-base or post-base\n    // form (post-base forms have to follow below-base forms), or that is not a\n    // pre-base reordering Ra, or arrive at the first consonant. The consonant\n    // stopped at will be the base.\n\n\n    var base = end;\n    var limit = start;\n    var hasReph = false; // If the syllable starts with Ra + Halant (in a script that has Reph)\n    // and has more than one consonant, Ra is excluded from candidates for\n    // base consonants.\n\n    if (indicConfig.rephPos !== POSITIONS.Ra_To_Become_Reph && features.rphf && start + 3 <= end && (indicConfig.rephMode === 'Implicit' && !isJoiner(glyphs[start + 2]) || indicConfig.rephMode === 'Explicit' && glyphs[start + 2].shaperInfo.category === CATEGORIES.ZWJ)) {\n      // See if it matches the 'rphf' feature.\n      var _g = [glyphs[start].copy(), glyphs[start + 1].copy(), glyphs[start + 2].copy()];\n\n      if (wouldSubstitute(_g.slice(0, 2), 'rphf') || indicConfig.rephMode === 'Explicit' && wouldSubstitute(_g, 'rphf')) {\n        limit += 2;\n\n        while (limit < end && isJoiner(glyphs[limit])) {\n          limit++;\n        }\n\n        base = start;\n        hasReph = true;\n      }\n    } else if (indicConfig.rephMode === 'Log_Repha' && glyphs[start].shaperInfo.category === CATEGORIES.Repha) {\n      limit++;\n\n      while (limit < end && isJoiner(glyphs[limit])) {\n        limit++;\n      }\n\n      base = start;\n      hasReph = true;\n    }\n\n    switch (indicConfig.basePos) {\n      case 'Last':\n        {\n          // starting from the end of the syllable, move backwards\n          var _i4 = end;\n          var seenBelow = false;\n\n          do {\n            var _info = glyphs[--_i4].shaperInfo; // until a consonant is found\n\n            if (isConsonant(glyphs[_i4])) {\n              // that does not have a below-base or post-base form\n              // (post-base forms have to follow below-base forms),\n              if (_info.position !== POSITIONS.Below_C && (_info.position !== POSITIONS.Post_C || seenBelow)) {\n                base = _i4;\n                break;\n              } // or that is not a pre-base reordering Ra,\n              //\n              // IMPLEMENTATION NOTES:\n              //\n              // Our pre-base reordering Ra's are marked POS_POST_C, so will be skipped\n              // by the logic above already.\n              //\n              // or arrive at the first consonant. The consonant stopped at will\n              // be the base.\n\n\n              if (_info.position === POSITIONS.Below_C) {\n                seenBelow = true;\n              }\n\n              base = _i4;\n            } else if (start < _i4 && _info.category === CATEGORIES.ZWJ && glyphs[_i4 - 1].shaperInfo.category === CATEGORIES.H) {\n              // A ZWJ after a Halant stops the base search, and requests an explicit\n              // half form.\n              // A ZWJ before a Halant, requests a subjoined form instead, and hence\n              // search continues.  This is particularly important for Bengali\n              // sequence Ra,H,Ya that should form Ya-Phalaa by subjoining Ya.\n              break;\n            }\n          } while (_i4 > limit);\n\n          break;\n        }\n\n      case 'First':\n        {\n          // The first consonant is always the base.\n          base = start; // Mark all subsequent consonants as below.\n\n          for (var _i5 = base + 1; _i5 < end; _i5++) {\n            if (isConsonant(glyphs[_i5])) {\n              glyphs[_i5].shaperInfo.position = POSITIONS.Below_C;\n            }\n          }\n        }\n    } // If the syllable starts with Ra + Halant (in a script that has Reph)\n    // and has more than one consonant, Ra is excluded from candidates for\n    // base consonants.\n    //\n    //  Only do this for unforced Reph. (ie. not for Ra,H,ZWJ)\n\n\n    if (hasReph && base === start && limit - base <= 2) {\n      hasReph = false;\n    } // 2. Decompose and reorder Matras:\n    //\n    // Each matra and any syllable modifier sign in the cluster are moved to the\n    // appropriate position relative to the consonant(s) in the cluster. The\n    // shaping engine decomposes two- or three-part matras into their constituent\n    // parts before any repositioning. Matra characters are classified by which\n    // consonant in a conjunct they have affinity for and are reordered to the\n    // following positions:\n    //\n    //   o Before first half form in the syllable\n    //   o After subjoined consonants\n    //   o After post-form consonant\n    //   o After main consonant (for above marks)\n    //\n    // IMPLEMENTATION NOTES:\n    //\n    // The normalize() routine has already decomposed matras for us, so we don't\n    // need to worry about that.\n    // 3.  Reorder marks to canonical order:\n    //\n    // Adjacent nukta and halant or nukta and vedic sign are always repositioned\n    // if necessary, so that the nukta is first.\n    //\n    // IMPLEMENTATION NOTES:\n    //\n    // We don't need to do this: the normalize() routine already did this for us.\n    // Reorder characters\n\n\n    for (var _i6 = start; _i6 < base; _i6++) {\n      var _info2 = glyphs[_i6].shaperInfo;\n      _info2.position = Math.min(POSITIONS.Pre_C, _info2.position);\n    }\n\n    if (base < end) {\n      glyphs[base].shaperInfo.position = POSITIONS.Base_C;\n    } // Mark final consonants.  A final consonant is one appearing after a matra,\n    // like in Khmer.\n\n\n    for (var _i7 = base + 1; _i7 < end; _i7++) {\n      if (glyphs[_i7].shaperInfo.category === CATEGORIES.M) {\n        for (var j = _i7 + 1; j < end; j++) {\n          if (isConsonant(glyphs[j])) {\n            glyphs[j].shaperInfo.position = POSITIONS.Final_C;\n            break;\n          }\n        }\n\n        break;\n      }\n    } // Handle beginning Ra\n\n\n    if (hasReph) {\n      glyphs[start].shaperInfo.position = POSITIONS.Ra_To_Become_Reph;\n    } // For old-style Indic script tags, move the first post-base Halant after\n    // last consonant.\n    //\n    // Reports suggest that in some scripts Uniscribe does this only if there\n    // is *not* a Halant after last consonant already (eg. Kannada), while it\n    // does it unconditionally in other scripts (eg. Malayalam).  We don't\n    // currently know about other scripts, so we single out Malayalam for now.\n    //\n    // Kannada test case:\n    // U+0C9A,U+0CCD,U+0C9A,U+0CCD\n    // With some versions of Lohit Kannada.\n    // https://bugs.freedesktop.org/show_bug.cgi?id=59118\n    //\n    // Malayalam test case:\n    // U+0D38,U+0D4D,U+0D31,U+0D4D,U+0D31,U+0D4D\n    // With lohit-ttf-20121122/Lohit-Malayalam.ttf\n\n\n    if (plan.isOldSpec) {\n      var disallowDoubleHalants = plan.unicodeScript !== 'Malayalam';\n\n      for (var _i8 = base + 1; _i8 < end; _i8++) {\n        if (glyphs[_i8].shaperInfo.category === CATEGORIES.H) {\n          var _j = void 0;\n\n          for (_j = end - 1; _j > _i8; _j--) {\n            if (isConsonant(glyphs[_j]) || disallowDoubleHalants && glyphs[_j].shaperInfo.category === CATEGORIES.H) {\n              break;\n            }\n          }\n\n          if (glyphs[_j].shaperInfo.category !== CATEGORIES.H && _j > _i8) {\n            // Move Halant to after last consonant.\n            var t = glyphs[_i8];\n            glyphs.splice(_i8, 0, ...glyphs.splice(_i8 + 1, _j - _i8));\n            glyphs[_j] = t;\n          }\n\n          break;\n        }\n      }\n    } // Attach misc marks to previous char to move with them.\n\n\n    var lastPos = POSITIONS.Start;\n\n    for (var _i9 = start; _i9 < end; _i9++) {\n      var _info3 = glyphs[_i9].shaperInfo;\n\n      if (_info3.category & (JOINER_FLAGS | CATEGORIES.N | CATEGORIES.RS | CATEGORIES.CM | HALANT_OR_COENG_FLAGS & _info3.category)) {\n        _info3.position = lastPos;\n\n        if (_info3.category === CATEGORIES.H && _info3.position === POSITIONS.Pre_M) {\n          // Uniscribe doesn't move the Halant with Left Matra.\n          // TEST: U+092B,U+093F,U+094DE\n          // We follow.  This is important for the Sinhala\n          // U+0DDA split matra since it decomposes to U+0DD9,U+0DCA\n          // where U+0DD9 is a left matra and U+0DCA is the virama.\n          // We don't want to move the virama with the left matra.\n          // TEST: U+0D9A,U+0DDA\n          for (var _j2 = _i9; _j2 > start; _j2--) {\n            if (glyphs[_j2 - 1].shaperInfo.position !== POSITIONS.Pre_M) {\n              _info3.position = glyphs[_j2 - 1].shaperInfo.position;\n              break;\n            }\n          }\n        }\n      } else if (_info3.position !== POSITIONS.SMVD) {\n        lastPos = _info3.position;\n      }\n    } // For post-base consonants let them own anything before them\n    // since the last consonant or matra.\n\n\n    var last = base;\n\n    for (var _i10 = base + 1; _i10 < end; _i10++) {\n      if (isConsonant(glyphs[_i10])) {\n        for (var _j3 = last + 1; _j3 < _i10; _j3++) {\n          if (glyphs[_j3].shaperInfo.position < POSITIONS.SMVD) {\n            glyphs[_j3].shaperInfo.position = glyphs[_i10].shaperInfo.position;\n          }\n        }\n\n        last = _i10;\n      } else if (glyphs[_i10].shaperInfo.category === CATEGORIES.M) {\n        last = _i10;\n      }\n    }\n\n    var arr = glyphs.slice(start, end);\n    arr.sort((a, b) => a.shaperInfo.position - b.shaperInfo.position);\n    glyphs.splice(start, arr.length, ...arr); // Find base again\n\n    for (var _i11 = start; _i11 < end; _i11++) {\n      if (glyphs[_i11].shaperInfo.position === POSITIONS.Base_C) {\n        base = _i11;\n        break;\n      }\n    } // Setup features now\n    // Reph\n\n\n    for (var _i12 = start; _i12 < end && glyphs[_i12].shaperInfo.position === POSITIONS.Ra_To_Become_Reph; _i12++) {\n      glyphs[_i12].features.rphf = true;\n    } // Pre-base\n\n\n    var blwf = !plan.isOldSpec && indicConfig.blwfMode === 'Pre_And_Post';\n\n    for (var _i13 = start; _i13 < base; _i13++) {\n      glyphs[_i13].features.half = true;\n\n      if (blwf) {\n        glyphs[_i13].features.blwf = true;\n      }\n    } // Post-base\n\n\n    for (var _i14 = base + 1; _i14 < end; _i14++) {\n      glyphs[_i14].features.abvf = true;\n      glyphs[_i14].features.pstf = true;\n      glyphs[_i14].features.blwf = true;\n    }\n\n    if (plan.isOldSpec && plan.unicodeScript === 'Devanagari') {\n      // Old-spec eye-lash Ra needs special handling.  From the\n      // spec:\n      //\n      // \"The feature 'below-base form' is applied to consonants\n      // having below-base forms and following the base consonant.\n      // The exception is vattu, which may appear below half forms\n      // as well as below the base glyph. The feature 'below-base\n      // form' will be applied to all such occurrences of Ra as well.\"\n      //\n      // Test case: U+0924,U+094D,U+0930,U+094d,U+0915\n      // with Sanskrit 2003 font.\n      //\n      // However, note that Ra,Halant,ZWJ is the correct way to\n      // request eyelash form of Ra, so we wouldbn't inhibit it\n      // in that sequence.\n      //\n      // Test case: U+0924,U+094D,U+0930,U+094d,U+200D,U+0915\n      for (var _i15 = start; _i15 + 1 < base; _i15++) {\n        if (glyphs[_i15].shaperInfo.category === CATEGORIES.Ra && glyphs[_i15 + 1].shaperInfo.category === CATEGORIES.H && (_i15 + 1 === base || glyphs[_i15 + 2].shaperInfo.category === CATEGORIES.ZWJ)) {\n          glyphs[_i15].features.blwf = true;\n          glyphs[_i15 + 1].features.blwf = true;\n        }\n      }\n    }\n\n    var prefLen = 2;\n\n    if (features.pref && base + prefLen < end) {\n      // Find a Halant,Ra sequence and mark it for pre-base reordering processing.\n      for (var _i16 = base + 1; _i16 + prefLen - 1 < end; _i16++) {\n        var _g2 = [glyphs[_i16].copy(), glyphs[_i16 + 1].copy()];\n\n        if (wouldSubstitute(_g2, 'pref')) {\n          for (var _j4 = 0; _j4 < prefLen; _j4++) {\n            glyphs[_i16++].features.pref = true;\n          } // Mark the subsequent stuff with 'cfar'.  Used in Khmer.\n          // Read the feature spec.\n          // This allows distinguishing the following cases with MS Khmer fonts:\n          // U+1784,U+17D2,U+179A,U+17D2,U+1782\n          // U+1784,U+17D2,U+1782,U+17D2,U+179A\n\n\n          if (features.cfar) {\n            for (; _i16 < end; _i16++) {\n              glyphs[_i16].features.cfar = true;\n            }\n          }\n\n          break;\n        }\n      }\n    } // Apply ZWJ/ZWNJ effects\n\n\n    for (var _i17 = start + 1; _i17 < end; _i17++) {\n      if (isJoiner(glyphs[_i17])) {\n        var nonJoiner = glyphs[_i17].shaperInfo.category === CATEGORIES.ZWNJ;\n        var _j5 = _i17;\n\n        do {\n          _j5--; // ZWJ/ZWNJ should disable CJCT.  They do that by simply\n          // being there, since we don't skip them for the CJCT\n          // feature (ie. F_MANUAL_ZWJ)\n          // A ZWNJ disables HALF.\n\n          if (nonJoiner) {\n            delete glyphs[_j5].features.half;\n          }\n        } while (_j5 > start && !isConsonant(glyphs[_j5]));\n      }\n    }\n  }\n}\n\nfunction finalReordering(font, glyphs, plan) {\n  var indicConfig = plan.indicConfig;\n  var features = font._layoutEngine.engine.GSUBProcessor.features;\n\n  for (var start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {\n    // 4. Final reordering:\n    //\n    // After the localized forms and basic shaping forms GSUB features have been\n    // applied (see below), the shaping engine performs some final glyph\n    // reordering before applying all the remaining font features to the entire\n    // cluster.\n    var tryPref = !!features.pref; // Find base again\n\n    var base = start;\n\n    for (; base < end; base++) {\n      if (glyphs[base].shaperInfo.position >= POSITIONS.Base_C) {\n        if (tryPref && base + 1 < end) {\n          for (var i = base + 1; i < end; i++) {\n            if (glyphs[i].features.pref) {\n              if (!(glyphs[i].substituted && glyphs[i].isLigated && !glyphs[i].isMultiplied)) {\n                // Ok, this was a 'pref' candidate but didn't form any.\n                // Base is around here...\n                base = i;\n\n                while (base < end && isHalantOrCoeng(glyphs[base])) {\n                  base++;\n                }\n\n                glyphs[base].shaperInfo.position = POSITIONS.BASE_C;\n                tryPref = false;\n              }\n\n              break;\n            }\n          }\n        } // For Malayalam, skip over unformed below- (but NOT post-) forms.\n\n\n        if (plan.unicodeScript === 'Malayalam') {\n          for (var _i18 = base + 1; _i18 < end; _i18++) {\n            while (_i18 < end && isJoiner(glyphs[_i18])) {\n              _i18++;\n            }\n\n            if (_i18 === end || !isHalantOrCoeng(glyphs[_i18])) {\n              break;\n            }\n\n            _i18++; // Skip halant.\n\n            while (_i18 < end && isJoiner(glyphs[_i18])) {\n              _i18++;\n            }\n\n            if (_i18 < end && isConsonant(glyphs[_i18]) && glyphs[_i18].shaperInfo.position === POSITIONS.Below_C) {\n              base = _i18;\n              glyphs[base].shaperInfo.position = POSITIONS.Base_C;\n            }\n          }\n        }\n\n        if (start < base && glyphs[base].shaperInfo.position > POSITIONS.Base_C) {\n          base--;\n        }\n\n        break;\n      }\n    }\n\n    if (base === end && start < base && glyphs[base - 1].shaperInfo.category === CATEGORIES.ZWJ) {\n      base--;\n    }\n\n    if (base < end) {\n      while (start < base && glyphs[base].shaperInfo.category & (CATEGORIES.N | HALANT_OR_COENG_FLAGS)) {\n        base--;\n      }\n    } // o Reorder matras:\n    //\n    // If a pre-base matra character had been reordered before applying basic\n    // features, the glyph can be moved closer to the main consonant based on\n    // whether half-forms had been formed. Actual position for the matra is\n    // defined as “after last standalone halant glyph, after initial matra\n    // position and before the main consonant”. If ZWJ or ZWNJ follow this\n    // halant, position is moved after it.\n    //\n\n\n    if (start + 1 < end && start < base) {\n      // Otherwise there can't be any pre-base matra characters.\n      // If we lost track of base, alas, position before last thingy.\n      var newPos = base === end ? base - 2 : base - 1; // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n      // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n      // We want to position matra after them.\n\n      if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {\n        while (newPos > start && !(glyphs[newPos].shaperInfo.category & (CATEGORIES.M | HALANT_OR_COENG_FLAGS))) {\n          newPos--;\n        } // If we found no Halant we are done.\n        // Otherwise only proceed if the Halant does\n        // not belong to the Matra itself!\n\n\n        if (isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== POSITIONS.Pre_M) {\n          // If ZWJ or ZWNJ follow this halant, position is moved after it.\n          if (newPos + 1 < end && isJoiner(glyphs[newPos + 1])) {\n            newPos++;\n          }\n        } else {\n          newPos = start; // No move.\n        }\n      }\n\n      if (start < newPos && glyphs[newPos].shaperInfo.position !== POSITIONS.Pre_M) {\n        // Now go see if there's actually any matras...\n        for (var _i19 = newPos; _i19 > start; _i19--) {\n          if (glyphs[_i19 - 1].shaperInfo.position === POSITIONS.Pre_M) {\n            var oldPos = _i19 - 1;\n\n            if (oldPos < base && base <= newPos) {\n              // Shouldn't actually happen.\n              base--;\n            }\n\n            var tmp = glyphs[oldPos];\n            glyphs.splice(oldPos, 0, ...glyphs.splice(oldPos + 1, newPos - oldPos));\n            glyphs[newPos] = tmp;\n            newPos--;\n          }\n        }\n      }\n    } // o Reorder reph:\n    //\n    // Reph’s original position is always at the beginning of the syllable,\n    // (i.e. it is not reordered at the character reordering stage). However,\n    // it will be reordered according to the basic-forms shaping results.\n    // Possible positions for reph, depending on the script, are; after main,\n    // before post-base consonant forms, and after post-base consonant forms.\n    // Two cases:\n    //\n    // - If repha is encoded as a sequence of characters (Ra,H or Ra,H,ZWJ), then\n    //   we should only move it if the sequence ligated to the repha form.\n    //\n    // - If repha is encoded separately and in the logical position, we should only\n    //   move it if it did NOT ligate.  If it ligated, it's probably the font trying\n    //   to make it work without the reordering.\n\n\n    if (start + 1 < end && glyphs[start].shaperInfo.position === POSITIONS.Ra_To_Become_Reph && glyphs[start].shaperInfo.category === CATEGORIES.Repha !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)) {\n      var newRephPos = void 0;\n      var rephPos = indicConfig.rephPos;\n      var found = false; // 1. If reph should be positioned after post-base consonant forms,\n      //    proceed to step 5.\n\n      if (rephPos !== POSITIONS.After_Post) {\n        //  2. If the reph repositioning class is not after post-base: target\n        //     position is after the first explicit halant glyph between the\n        //     first post-reph consonant and last main consonant. If ZWJ or ZWNJ\n        //     are following this halant, position is moved after it. If such\n        //     position is found, this is the target position. Otherwise,\n        //     proceed to the next step.\n        //\n        //     Note: in old-implementation fonts, where classifications were\n        //     fixed in shaping engine, there was no case where reph position\n        //     will be found on this step.\n        newRephPos = start + 1;\n\n        while (newRephPos < base && !isHalantOrCoeng(glyphs[newRephPos])) {\n          newRephPos++;\n        }\n\n        if (newRephPos < base && isHalantOrCoeng(glyphs[newRephPos])) {\n          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n          if (newRephPos + 1 < base && isJoiner(glyphs[newRephPos + 1])) {\n            newRephPos++;\n          }\n\n          found = true;\n        } // 3. If reph should be repositioned after the main consonant: find the\n        //    first consonant not ligated with main, or find the first\n        //    consonant that is not a potential pre-base reordering Ra.\n\n\n        if (!found && rephPos === POSITIONS.After_Main) {\n          newRephPos = base;\n\n          while (newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= POSITIONS.After_Main) {\n            newRephPos++;\n          }\n\n          found = newRephPos < end;\n        } // 4. If reph should be positioned before post-base consonant, find\n        //    first post-base classified consonant not ligated with main. If no\n        //    consonant is found, the target position should be before the\n        //    first matra, syllable modifier sign or vedic sign.\n        //\n        // This is our take on what step 4 is trying to say (and failing, BADLY).\n\n\n        if (!found && rephPos === POSITIONS.After_Sub) {\n          newRephPos = base;\n\n          while (newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & (POSITIONS.Post_C | POSITIONS.After_Post | POSITIONS.SMVD))) {\n            newRephPos++;\n          }\n\n          found = newRephPos < end;\n        }\n      } //  5. If no consonant is found in steps 3 or 4, move reph to a position\n      //     immediately before the first post-base matra, syllable modifier\n      //     sign or vedic sign that has a reordering class after the intended\n      //     reph position. For example, if the reordering position for reph\n      //     is post-main, it will skip above-base matras that also have a\n      //     post-main position.\n\n\n      if (!found) {\n        // Copied from step 2.\n        newRephPos = start + 1;\n\n        while (newRephPos < base && !isHalantOrCoeng(glyphs[newRephPos])) {\n          newRephPos++;\n        }\n\n        if (newRephPos < base && isHalantOrCoeng(glyphs[newRephPos])) {\n          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n          if (newRephPos + 1 < base && isJoiner(glyphs[newRephPos + 1])) {\n            newRephPos++;\n          }\n\n          found = true;\n        }\n      } // 6. Otherwise, reorder reph to the end of the syllable.\n\n\n      if (!found) {\n        newRephPos = end - 1;\n\n        while (newRephPos > start && glyphs[newRephPos].shaperInfo.position === POSITIONS.SMVD) {\n          newRephPos--;\n        } // If the Reph is to be ending up after a Matra,Halant sequence,\n        // position it before that Halant so it can interact with the Matra.\n        // However, if it's a plain Consonant,Halant we shouldn't do that.\n        // Uniscribe doesn't do this.\n        // TEST: U+0930,U+094D,U+0915,U+094B,U+094D\n\n\n        if (isHalantOrCoeng(glyphs[newRephPos])) {\n          for (var _i20 = base + 1; _i20 < newRephPos; _i20++) {\n            if (glyphs[_i20].shaperInfo.category === CATEGORIES.M) {\n              newRephPos--;\n            }\n          }\n        }\n      }\n\n      var reph = glyphs[start];\n      glyphs.splice(start, 0, ...glyphs.splice(start + 1, newRephPos - start));\n      glyphs[newRephPos] = reph;\n\n      if (start < base && base <= newRephPos) {\n        base--;\n      }\n    } // o Reorder pre-base reordering consonants:\n    //\n    // If a pre-base reordering consonant is found, reorder it according to\n    // the following rules:\n\n\n    if (tryPref && base + 1 < end) {\n      for (var _i21 = base + 1; _i21 < end; _i21++) {\n        if (glyphs[_i21].features.pref) {\n          // 1. Only reorder a glyph produced by substitution during application\n          //    of the <pref> feature. (Note that a font may shape a Ra consonant with\n          //    the feature generally but block it in certain contexts.)\n          // Note: We just check that something got substituted.  We don't check that\n          // the <pref> feature actually did it...\n          //\n          // Reorder pref only if it ligated.\n          if (glyphs[_i21].isLigated && !glyphs[_i21].isMultiplied) {\n            // 2. Try to find a target position the same way as for pre-base matra.\n            //    If it is found, reorder pre-base consonant glyph.\n            //\n            // 3. If position is not found, reorder immediately before main\n            //    consonant.\n            var _newPos = base; // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n            // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n            // We want to position matra after them.\n\n            if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {\n              while (_newPos > start && !(glyphs[_newPos - 1].shaperInfo.category & (CATEGORIES.M | HALANT_OR_COENG_FLAGS))) {\n                _newPos--;\n              } // In Khmer coeng model, a H,Ra can go *after* matras.  If it goes after a\n              // split matra, it should be reordered to *before* the left part of such matra.\n\n\n              if (_newPos > start && glyphs[_newPos - 1].shaperInfo.category === CATEGORIES.M) {\n                var _oldPos2 = _i21;\n\n                for (var j = base + 1; j < _oldPos2; j++) {\n                  if (glyphs[j].shaperInfo.category === CATEGORIES.M) {\n                    _newPos--;\n                    break;\n                  }\n                }\n              }\n            }\n\n            if (_newPos > start && isHalantOrCoeng(glyphs[_newPos - 1])) {\n              // -> If ZWJ or ZWNJ follow this halant, position is moved after it.\n              if (_newPos < end && isJoiner(glyphs[_newPos])) {\n                _newPos++;\n              }\n            }\n\n            var _oldPos = _i21;\n            var _tmp = glyphs[_oldPos];\n            glyphs.splice(_newPos + 1, 0, ...glyphs.splice(_newPos, _oldPos - _newPos));\n            glyphs[_newPos] = _tmp;\n\n            if (_newPos <= base && base < _oldPos) {\n              base++;\n            }\n          }\n\n          break;\n        }\n      }\n    } // Apply 'init' to the Left Matra if it's a word start.\n\n\n    if (glyphs[start].shaperInfo.position === POSITIONS.Pre_M && (!start || !/Cf|Mn/.test(unicode.getCategory(glyphs[start - 1].codePoints[0])))) {\n      glyphs[start].features.init = true;\n    }\n  }\n}\n\nfunction nextSyllable(glyphs, start) {\n  if (start >= glyphs.length) return start;\n  var syllable = glyphs[start].shaperInfo.syllable;\n\n  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable) {\n  }\n\n  return start;\n}\n\nvar {\n  categories: categories$1,\n  decompositions: decompositions$2\n} = useData;\nvar trie$2 = new UnicodeTrie((__webpack_require__(/*! fs */ \"fs\").readFileSync)(__dirname + '/use.trie'));\nvar stateMachine$1 = new StateMachine(useData);\n/**\r\n * This shaper is an implementation of the Universal Shaping Engine, which\r\n * uses Unicode data to shape a number of scripts without a dedicated shaping engine.\r\n * See https://www.microsoft.com/typography/OpenTypeDev/USE/intro.htm.\r\n */\n\nclass UniversalShaper extends DefaultShaper {\n  static planFeatures(plan) {\n    plan.addStage(setupSyllables$1); // Default glyph pre-processing group\n\n    plan.addStage(['locl', 'ccmp', 'nukt', 'akhn']); // Reordering group\n\n    plan.addStage(clearSubstitutionFlags);\n    plan.addStage(['rphf'], false);\n    plan.addStage(recordRphf);\n    plan.addStage(clearSubstitutionFlags);\n    plan.addStage(['pref']);\n    plan.addStage(recordPref); // Orthographic unit shaping group\n\n    plan.addStage(['rkrf', 'abvf', 'blwf', 'half', 'pstf', 'vatu', 'cjct']);\n    plan.addStage(reorder); // Topographical features\n    // Scripts that need this are handled by the Arabic shaper, not implemented here for now.\n    // plan.addStage(['isol', 'init', 'medi', 'fina', 'med2', 'fin2', 'fin3'], false);\n    // Standard topographic presentation and positional feature application\n\n    plan.addStage(['abvs', 'blws', 'pres', 'psts', 'dist', 'abvm', 'blwm']);\n  }\n\n  static assignFeatures(plan, glyphs) {\n    var _loop = function (i) {\n      var codepoint = glyphs[i].codePoints[0];\n\n      if (decompositions$2[codepoint]) {\n        var decomposed = decompositions$2[codepoint].map(c => {\n          var g = plan.font.glyphForCodePoint(c);\n          return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);\n        });\n        glyphs.splice(i, 1, ...decomposed);\n      }\n    };\n\n    // Decompose split vowels\n    // TODO: do this in a more general unicode normalizer\n    for (var i = glyphs.length - 1; i >= 0; i--) {\n      _loop(i);\n    }\n  }\n\n}\n\n_defineProperty(UniversalShaper, \"zeroMarkWidths\", 'BEFORE_GPOS');\n\nfunction useCategory(glyph) {\n  return trie$2.get(glyph.codePoints[0]);\n}\n\nclass USEInfo {\n  constructor(category, syllableType, syllable) {\n    this.category = category;\n    this.syllableType = syllableType;\n    this.syllable = syllable;\n  }\n\n}\n\nfunction setupSyllables$1(font, glyphs) {\n  var syllable = 0;\n\n  for (var [start, end, tags] of stateMachine$1.match(glyphs.map(useCategory))) {\n    ++syllable; // Create shaper info\n\n    for (var i = start; i <= end; i++) {\n      glyphs[i].shaperInfo = new USEInfo(categories$1[useCategory(glyphs[i])], tags[0], syllable);\n    } // Assign rphf feature\n\n\n    var limit = glyphs[start].shaperInfo.category === 'R' ? 1 : Math.min(3, end - start);\n\n    for (var _i = start; _i < start + limit; _i++) {\n      glyphs[_i].features.rphf = true;\n    }\n  }\n}\n\nfunction clearSubstitutionFlags(font, glyphs) {\n  for (var glyph of glyphs) {\n    glyph.substituted = false;\n  }\n}\n\nfunction recordRphf(font, glyphs) {\n  for (var glyph of glyphs) {\n    if (glyph.substituted && glyph.features.rphf) {\n      // Mark a substituted repha.\n      glyph.shaperInfo.category = 'R';\n    }\n  }\n}\n\nfunction recordPref(font, glyphs) {\n  for (var glyph of glyphs) {\n    if (glyph.substituted) {\n      // Mark a substituted pref as VPre, as they behave the same way.\n      glyph.shaperInfo.category = 'VPre';\n    }\n  }\n}\n\nfunction reorder(font, glyphs) {\n  var dottedCircle = font.glyphForCodePoint(0x25cc).id;\n\n  for (var start = 0, end = nextSyllable$1(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable$1(glyphs, start)) {\n    var i = void 0,\n        j = void 0;\n    var info = glyphs[start].shaperInfo;\n    var type = info.syllableType; // Only a few syllable types need reordering.\n\n    if (type !== 'virama_terminated_cluster' && type !== 'standard_cluster' && type !== 'broken_cluster') {\n      continue;\n    } // Insert a dotted circle glyph in broken clusters.\n\n\n    if (type === 'broken_cluster' && dottedCircle) {\n      var g = new GlyphInfo(font, dottedCircle, [0x25cc]);\n      g.shaperInfo = info; // Insert after possible Repha.\n\n      for (i = start; i < end && glyphs[i].shaperInfo.category === 'R'; i++) {\n      }\n\n      glyphs.splice(++i, 0, g);\n      end++;\n    } // Move things forward.\n\n\n    if (info.category === 'R' && end - start > 1) {\n      // Got a repha. Reorder it to after first base, before first halant.\n      for (i = start + 1; i < end; i++) {\n        info = glyphs[i].shaperInfo;\n\n        if (isBase(info) || isHalant(glyphs[i])) {\n          // If we hit a halant, move before it; otherwise it's a base: move to it's\n          // place, and shift things in between backward.\n          if (isHalant(glyphs[i])) {\n            i--;\n          }\n\n          glyphs.splice(start, 0, ...glyphs.splice(start + 1, i - start), glyphs[i]);\n          break;\n        }\n      }\n    } // Move things back.\n\n\n    for (i = start, j = end; i < end; i++) {\n      info = glyphs[i].shaperInfo;\n\n      if (isBase(info) || isHalant(glyphs[i])) {\n        // If we hit a halant, move after it; otherwise it's a base: move to it's\n        // place, and shift things in between backward.\n        j = isHalant(glyphs[i]) ? i + 1 : i;\n      } else if ((info.category === 'VPre' || info.category === 'VMPre') && j < i) {\n        glyphs.splice(j, 1, glyphs[i], ...glyphs.splice(j, i - j));\n      }\n    }\n  }\n}\n\nfunction nextSyllable$1(glyphs, start) {\n  if (start >= glyphs.length) return start;\n  var syllable = glyphs[start].shaperInfo.syllable;\n\n  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable) {\n  }\n\n  return start;\n}\n\nfunction isHalant(glyph) {\n  return glyph.shaperInfo.category === 'H' && !glyph.isLigated;\n}\n\nfunction isBase(info) {\n  return info.category === 'B' || info.category === 'GB';\n}\n\nvar SHAPERS = {\n  arab: ArabicShaper,\n  // Arabic\n  mong: ArabicShaper,\n  // Mongolian\n  syrc: ArabicShaper,\n  // Syriac\n  'nko ': ArabicShaper,\n  // N'Ko\n  phag: ArabicShaper,\n  // Phags Pa\n  mand: ArabicShaper,\n  // Mandaic\n  mani: ArabicShaper,\n  // Manichaean\n  phlp: ArabicShaper,\n  // Psalter Pahlavi\n  hang: HangulShaper,\n  // Hangul\n  bng2: IndicShaper,\n  // Bengali\n  beng: IndicShaper,\n  // Bengali\n  dev2: IndicShaper,\n  // Devanagari\n  deva: IndicShaper,\n  // Devanagari\n  gjr2: IndicShaper,\n  // Gujarati\n  gujr: IndicShaper,\n  // Gujarati\n  guru: IndicShaper,\n  // Gurmukhi\n  gur2: IndicShaper,\n  // Gurmukhi\n  knda: IndicShaper,\n  // Kannada\n  knd2: IndicShaper,\n  // Kannada\n  mlm2: IndicShaper,\n  // Malayalam\n  mlym: IndicShaper,\n  // Malayalam\n  ory2: IndicShaper,\n  // Oriya\n  orya: IndicShaper,\n  // Oriya\n  taml: IndicShaper,\n  // Tamil\n  tml2: IndicShaper,\n  // Tamil\n  telu: IndicShaper,\n  // Telugu\n  tel2: IndicShaper,\n  // Telugu\n  khmr: IndicShaper,\n  // Khmer\n  bali: UniversalShaper,\n  // Balinese\n  batk: UniversalShaper,\n  // Batak\n  brah: UniversalShaper,\n  // Brahmi\n  bugi: UniversalShaper,\n  // Buginese\n  buhd: UniversalShaper,\n  // Buhid\n  cakm: UniversalShaper,\n  // Chakma\n  cham: UniversalShaper,\n  // Cham\n  dupl: UniversalShaper,\n  // Duployan\n  egyp: UniversalShaper,\n  // Egyptian Hieroglyphs\n  gran: UniversalShaper,\n  // Grantha\n  hano: UniversalShaper,\n  // Hanunoo\n  java: UniversalShaper,\n  // Javanese\n  kthi: UniversalShaper,\n  // Kaithi\n  kali: UniversalShaper,\n  // Kayah Li\n  khar: UniversalShaper,\n  // Kharoshthi\n  khoj: UniversalShaper,\n  // Khojki\n  sind: UniversalShaper,\n  // Khudawadi\n  lepc: UniversalShaper,\n  // Lepcha\n  limb: UniversalShaper,\n  // Limbu\n  mahj: UniversalShaper,\n  // Mahajani\n  // mand: UniversalShaper, // Mandaic\n  // mani: UniversalShaper, // Manichaean\n  mtei: UniversalShaper,\n  // Meitei Mayek\n  modi: UniversalShaper,\n  // Modi\n  // mong: UniversalShaper, // Mongolian\n  // 'nko ': UniversalShaper, // N’Ko\n  hmng: UniversalShaper,\n  // Pahawh Hmong\n  // phag: UniversalShaper, // Phags-pa\n  // phlp: UniversalShaper, // Psalter Pahlavi\n  rjng: UniversalShaper,\n  // Rejang\n  saur: UniversalShaper,\n  // Saurashtra\n  shrd: UniversalShaper,\n  // Sharada\n  sidd: UniversalShaper,\n  // Siddham\n  sinh: UniversalShaper,\n  // Sinhala\n  sund: UniversalShaper,\n  // Sundanese\n  sylo: UniversalShaper,\n  // Syloti Nagri\n  tglg: UniversalShaper,\n  // Tagalog\n  tagb: UniversalShaper,\n  // Tagbanwa\n  tale: UniversalShaper,\n  // Tai Le\n  lana: UniversalShaper,\n  // Tai Tham\n  tavt: UniversalShaper,\n  // Tai Viet\n  takr: UniversalShaper,\n  // Takri\n  tibt: UniversalShaper,\n  // Tibetan\n  tfng: UniversalShaper,\n  // Tifinagh\n  tirh: UniversalShaper,\n  // Tirhuta\n  latn: DefaultShaper,\n  // Latin\n  DFLT: DefaultShaper // Default\n\n};\nfunction choose(script) {\n  if (!Array.isArray(script)) {\n    script = [script];\n  }\n\n  for (var s of script) {\n    var shaper = SHAPERS[s];\n\n    if (shaper) {\n      return shaper;\n    }\n  }\n\n  return DefaultShaper;\n}\n\nclass GSUBProcessor extends OTProcessor {\n  applyLookup(lookupType, table) {\n    switch (lookupType) {\n      case 1:\n        {\n          // Single Substitution\n          var index = this.coverageIndex(table.coverage);\n\n          if (index === -1) {\n            return false;\n          }\n\n          var glyph = this.glyphIterator.cur;\n\n          switch (table.version) {\n            case 1:\n              glyph.id = glyph.id + table.deltaGlyphID & 0xffff;\n              break;\n\n            case 2:\n              glyph.id = table.substitute.get(index);\n              break;\n          }\n\n          return true;\n        }\n\n      case 2:\n        {\n          // Multiple Substitution\n          var _index = this.coverageIndex(table.coverage);\n\n          if (_index !== -1) {\n            var sequence = table.sequences.get(_index);\n\n            if (sequence.length === 0) {\n              // If the sequence length is zero, delete the glyph.\n              // The OpenType spec disallows this, but seems like Harfbuzz and Uniscribe allow it.\n              this.glyphs.splice(this.glyphIterator.index, 1);\n              return true;\n            }\n\n            this.glyphIterator.cur.id = sequence[0];\n            this.glyphIterator.cur.ligatureComponent = 0;\n            var features = this.glyphIterator.cur.features;\n            var curGlyph = this.glyphIterator.cur;\n            var replacement = sequence.slice(1).map((gid, i) => {\n              var glyph = new GlyphInfo(this.font, gid, undefined, features);\n              glyph.shaperInfo = curGlyph.shaperInfo;\n              glyph.isLigated = curGlyph.isLigated;\n              glyph.ligatureComponent = i + 1;\n              glyph.substituted = true;\n              glyph.isMultiplied = true;\n              return glyph;\n            });\n            this.glyphs.splice(this.glyphIterator.index + 1, 0, ...replacement);\n            return true;\n          }\n\n          return false;\n        }\n\n      case 3:\n        {\n          // Alternate Substitution\n          var _index2 = this.coverageIndex(table.coverage);\n\n          if (_index2 !== -1) {\n            var USER_INDEX = 0; // TODO\n\n            this.glyphIterator.cur.id = table.alternateSet.get(_index2)[USER_INDEX];\n            return true;\n          }\n\n          return false;\n        }\n\n      case 4:\n        {\n          // Ligature Substitution\n          var _index3 = this.coverageIndex(table.coverage);\n\n          if (_index3 === -1) {\n            return false;\n          }\n\n          for (var ligature of table.ligatureSets.get(_index3)) {\n            var matched = this.sequenceMatchIndices(1, ligature.components);\n\n            if (!matched) {\n              continue;\n            }\n\n            var _curGlyph = this.glyphIterator.cur; // Concatenate all of the characters the new ligature will represent\n\n            var characters = _curGlyph.codePoints.slice();\n\n            for (var _index4 of matched) {\n              characters.push(...this.glyphs[_index4].codePoints);\n            } // Create the replacement ligature glyph\n\n\n            var ligatureGlyph = new GlyphInfo(this.font, ligature.glyph, characters, _curGlyph.features);\n            ligatureGlyph.shaperInfo = _curGlyph.shaperInfo;\n            ligatureGlyph.isLigated = true;\n            ligatureGlyph.substituted = true; // From Harfbuzz:\n            // - If it *is* a mark ligature, we don't allocate a new ligature id, and leave\n            //   the ligature to keep its old ligature id.  This will allow it to attach to\n            //   a base ligature in GPOS.  Eg. if the sequence is: LAM,LAM,SHADDA,FATHA,HEH,\n            //   and LAM,LAM,HEH for a ligature, they will leave SHADDA and FATHA with a\n            //   ligature id and component value of 2.  Then if SHADDA,FATHA form a ligature\n            //   later, we don't want them to lose their ligature id/component, otherwise\n            //   GPOS will fail to correctly position the mark ligature on top of the\n            //   LAM,LAM,HEH ligature. See https://bugzilla.gnome.org/show_bug.cgi?id=676343\n            //\n            // - If a ligature is formed of components that some of which are also ligatures\n            //   themselves, and those ligature components had marks attached to *their*\n            //   components, we have to attach the marks to the new ligature component\n            //   positions!  Now *that*'s tricky!  And these marks may be following the\n            //   last component of the whole sequence, so we should loop forward looking\n            //   for them and update them.\n            //\n            //   Eg. the sequence is LAM,LAM,SHADDA,FATHA,HEH, and the font first forms a\n            //   'calt' ligature of LAM,HEH, leaving the SHADDA and FATHA with a ligature\n            //   id and component == 1.  Now, during 'liga', the LAM and the LAM-HEH ligature\n            //   form a LAM-LAM-HEH ligature.  We need to reassign the SHADDA and FATHA to\n            //   the new ligature with a component value of 2.\n            //\n            //   This in fact happened to a font...  See https://bugzilla.gnome.org/show_bug.cgi?id=437633\n\n            var isMarkLigature = _curGlyph.isMark;\n\n            for (var i = 0; i < matched.length && isMarkLigature; i++) {\n              isMarkLigature = this.glyphs[matched[i]].isMark;\n            }\n\n            ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;\n            var lastLigID = _curGlyph.ligatureID;\n            var lastNumComps = _curGlyph.codePoints.length;\n            var curComps = lastNumComps;\n            var idx = this.glyphIterator.index + 1; // Set ligatureID and ligatureComponent on glyphs that were skipped in the matched sequence.\n            // This allows GPOS to attach marks to the correct ligature components.\n\n            for (var matchIndex of matched) {\n              // Don't assign new ligature components for mark ligatures (see above)\n              if (isMarkLigature) {\n                idx = matchIndex;\n              } else {\n                while (idx < matchIndex) {\n                  var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);\n                  this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;\n                  this.glyphs[idx].ligatureComponent = ligatureComponent;\n                  idx++;\n                }\n              }\n\n              lastLigID = this.glyphs[idx].ligatureID;\n              lastNumComps = this.glyphs[idx].codePoints.length;\n              curComps += lastNumComps;\n              idx++; // skip base glyph\n            } // Adjust ligature components for any marks following\n\n\n            if (lastLigID && !isMarkLigature) {\n              for (var _i = idx; _i < this.glyphs.length; _i++) {\n                if (this.glyphs[_i].ligatureID === lastLigID) {\n                  var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[_i].ligatureComponent || 1, lastNumComps);\n                  this.glyphs[_i].ligatureComponent = ligatureComponent;\n                } else {\n                  break;\n                }\n              }\n            } // Delete the matched glyphs, and replace the current glyph with the ligature glyph\n\n\n            for (var _i2 = matched.length - 1; _i2 >= 0; _i2--) {\n              this.glyphs.splice(matched[_i2], 1);\n            }\n\n            this.glyphs[this.glyphIterator.index] = ligatureGlyph;\n            return true;\n          }\n\n          return false;\n        }\n\n      case 5:\n        // Contextual Substitution\n        return this.applyContext(table);\n\n      case 6:\n        // Chaining Contextual Substitution\n        return this.applyChainingContext(table);\n\n      case 7:\n        // Extension Substitution\n        return this.applyLookup(table.lookupType, table.extension);\n\n      default:\n        throw new Error(\"GSUB lookupType \".concat(lookupType, \" is not supported\"));\n    }\n  }\n\n}\n\nclass GPOSProcessor extends OTProcessor {\n  applyPositionValue(sequenceIndex, value) {\n    var position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];\n\n    if (value.xAdvance != null) {\n      position.xAdvance += value.xAdvance;\n    }\n\n    if (value.yAdvance != null) {\n      position.yAdvance += value.yAdvance;\n    }\n\n    if (value.xPlacement != null) {\n      position.xOffset += value.xPlacement;\n    }\n\n    if (value.yPlacement != null) {\n      position.yOffset += value.yPlacement;\n    } // Adjustments for font variations\n\n\n    var variationProcessor = this.font._variationProcessor;\n    var variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n\n    if (variationProcessor && variationStore) {\n      if (value.xPlaDevice) {\n        position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);\n      }\n\n      if (value.yPlaDevice) {\n        position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);\n      }\n\n      if (value.xAdvDevice) {\n        position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);\n      }\n\n      if (value.yAdvDevice) {\n        position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);\n      }\n    } // TODO: device tables\n\n  }\n\n  applyLookup(lookupType, table) {\n    switch (lookupType) {\n      case 1:\n        {\n          // Single positioning value\n          var index = this.coverageIndex(table.coverage);\n\n          if (index === -1) {\n            return false;\n          }\n\n          switch (table.version) {\n            case 1:\n              this.applyPositionValue(0, table.value);\n              break;\n\n            case 2:\n              this.applyPositionValue(0, table.values.get(index));\n              break;\n          }\n\n          return true;\n        }\n\n      case 2:\n        {\n          // Pair Adjustment Positioning\n          var nextGlyph = this.glyphIterator.peek();\n\n          if (!nextGlyph) {\n            return false;\n          }\n\n          var _index = this.coverageIndex(table.coverage);\n\n          if (_index === -1) {\n            return false;\n          }\n\n          switch (table.version) {\n            case 1:\n              // Adjustments for glyph pairs\n              var set = table.pairSets.get(_index);\n\n              for (var _pair of set) {\n                if (_pair.secondGlyph === nextGlyph.id) {\n                  this.applyPositionValue(0, _pair.value1);\n                  this.applyPositionValue(1, _pair.value2);\n                  return true;\n                }\n              }\n\n              return false;\n\n            case 2:\n              // Class pair adjustment\n              var class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);\n              var class2 = this.getClassID(nextGlyph.id, table.classDef2);\n\n              if (class1 === -1 || class2 === -1) {\n                return false;\n              }\n\n              var pair = table.classRecords.get(class1).get(class2);\n              this.applyPositionValue(0, pair.value1);\n              this.applyPositionValue(1, pair.value2);\n              return true;\n          }\n        }\n\n      case 3:\n        {\n          // Cursive Attachment Positioning\n          var nextIndex = this.glyphIterator.peekIndex();\n          var _nextGlyph = this.glyphs[nextIndex];\n\n          if (!_nextGlyph) {\n            return false;\n          }\n\n          var curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];\n\n          if (!curRecord || !curRecord.exitAnchor) {\n            return false;\n          }\n\n          var nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, _nextGlyph.id)];\n\n          if (!nextRecord || !nextRecord.entryAnchor) {\n            return false;\n          }\n\n          var entry = this.getAnchor(nextRecord.entryAnchor);\n          var exit = this.getAnchor(curRecord.exitAnchor);\n          var cur = this.positions[this.glyphIterator.index];\n          var next = this.positions[nextIndex];\n\n          switch (this.direction) {\n            case 'ltr':\n              cur.xAdvance = exit.x + cur.xOffset;\n              var d = entry.x + next.xOffset;\n              next.xAdvance -= d;\n              next.xOffset -= d;\n              break;\n\n            case 'rtl':\n              d = exit.x + cur.xOffset;\n              cur.xAdvance -= d;\n              cur.xOffset -= d;\n              next.xAdvance = entry.x + next.xOffset;\n              break;\n          }\n\n          if (this.glyphIterator.flags.rightToLeft) {\n            this.glyphIterator.cur.cursiveAttachment = nextIndex;\n            cur.yOffset = entry.y - exit.y;\n          } else {\n            _nextGlyph.cursiveAttachment = this.glyphIterator.index;\n            cur.yOffset = exit.y - entry.y;\n          }\n\n          return true;\n        }\n\n      case 4:\n        {\n          // Mark to base positioning\n          var markIndex = this.coverageIndex(table.markCoverage);\n\n          if (markIndex === -1) {\n            return false;\n          } // search backward for a base glyph\n\n\n          var baseGlyphIndex = this.glyphIterator.index;\n\n          while (--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0)) {\n          }\n\n          if (baseGlyphIndex < 0) {\n            return false;\n          }\n\n          var baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);\n\n          if (baseIndex === -1) {\n            return false;\n          }\n\n          var markRecord = table.markArray[markIndex];\n          var baseAnchor = table.baseArray[baseIndex][markRecord.class];\n          this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n          return true;\n        }\n\n      case 5:\n        {\n          // Mark to ligature positioning\n          var _markIndex = this.coverageIndex(table.markCoverage);\n\n          if (_markIndex === -1) {\n            return false;\n          } // search backward for a base glyph\n\n\n          var _baseGlyphIndex = this.glyphIterator.index;\n\n          while (--_baseGlyphIndex >= 0 && this.glyphs[_baseGlyphIndex].isMark) {\n          }\n\n          if (_baseGlyphIndex < 0) {\n            return false;\n          }\n\n          var ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[_baseGlyphIndex].id);\n\n          if (ligIndex === -1) {\n            return false;\n          }\n\n          var ligAttach = table.ligatureArray[ligIndex];\n          var markGlyph = this.glyphIterator.cur;\n          var ligGlyph = this.glyphs[_baseGlyphIndex];\n          var compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && markGlyph.ligatureComponent > 0 ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1 : ligGlyph.codePoints.length - 1;\n          var _markRecord = table.markArray[_markIndex];\n          var _baseAnchor = ligAttach[compIndex][_markRecord.class];\n          this.applyAnchor(_markRecord, _baseAnchor, _baseGlyphIndex);\n          return true;\n        }\n\n      case 6:\n        {\n          // Mark to mark positioning\n          var mark1Index = this.coverageIndex(table.mark1Coverage);\n\n          if (mark1Index === -1) {\n            return false;\n          } // get the previous mark to attach to\n\n\n          var prevIndex = this.glyphIterator.peekIndex(-1);\n          var prev = this.glyphs[prevIndex];\n\n          if (!prev || !prev.isMark) {\n            return false;\n          }\n\n          var _cur = this.glyphIterator.cur; // The following logic was borrowed from Harfbuzz\n\n          var good = false;\n\n          if (_cur.ligatureID === prev.ligatureID) {\n            if (!_cur.ligatureID) {\n              // Marks belonging to the same base\n              good = true;\n            } else if (_cur.ligatureComponent === prev.ligatureComponent) {\n              // Marks belonging to the same ligature component\n              good = true;\n            }\n          } else {\n            // If ligature ids don't match, it may be the case that one of the marks\n            // itself is a ligature, in which case match.\n            if (_cur.ligatureID && !_cur.ligatureComponent || prev.ligatureID && !prev.ligatureComponent) {\n              good = true;\n            }\n          }\n\n          if (!good) {\n            return false;\n          }\n\n          var mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);\n\n          if (mark2Index === -1) {\n            return false;\n          }\n\n          var _markRecord2 = table.mark1Array[mark1Index];\n          var _baseAnchor2 = table.mark2Array[mark2Index][_markRecord2.class];\n          this.applyAnchor(_markRecord2, _baseAnchor2, prevIndex);\n          return true;\n        }\n\n      case 7:\n        // Contextual positioning\n        return this.applyContext(table);\n\n      case 8:\n        // Chaining contextual positioning\n        return this.applyChainingContext(table);\n\n      case 9:\n        // Extension positioning\n        return this.applyLookup(table.lookupType, table.extension);\n\n      default:\n        throw new Error(\"Unsupported GPOS table: \".concat(lookupType));\n    }\n  }\n\n  applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {\n    var baseCoords = this.getAnchor(baseAnchor);\n    var markCoords = this.getAnchor(markRecord.markAnchor);\n    var basePos = this.positions[baseGlyphIndex];\n    var markPos = this.positions[this.glyphIterator.index];\n    markPos.xOffset = baseCoords.x - markCoords.x;\n    markPos.yOffset = baseCoords.y - markCoords.y;\n    this.glyphIterator.cur.markAttachment = baseGlyphIndex;\n  }\n\n  getAnchor(anchor) {\n    // TODO: contour point, device tables\n    var x = anchor.xCoordinate;\n    var y = anchor.yCoordinate; // Adjustments for font variations\n\n    var variationProcessor = this.font._variationProcessor;\n    var variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n\n    if (variationProcessor && variationStore) {\n      if (anchor.xDeviceTable) {\n        x += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);\n      }\n\n      if (anchor.yDeviceTable) {\n        y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);\n      }\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n\n  applyFeatures(userFeatures, glyphs, advances) {\n    super.applyFeatures(userFeatures, glyphs, advances);\n\n    for (var i = 0; i < this.glyphs.length; i++) {\n      this.fixCursiveAttachment(i);\n    }\n\n    this.fixMarkAttachment();\n  }\n\n  fixCursiveAttachment(i) {\n    var glyph = this.glyphs[i];\n\n    if (glyph.cursiveAttachment != null) {\n      var j = glyph.cursiveAttachment;\n      glyph.cursiveAttachment = null;\n      this.fixCursiveAttachment(j);\n      this.positions[i].yOffset += this.positions[j].yOffset;\n    }\n  }\n\n  fixMarkAttachment() {\n    for (var i = 0; i < this.glyphs.length; i++) {\n      var glyph = this.glyphs[i];\n\n      if (glyph.markAttachment != null) {\n        var j = glyph.markAttachment;\n        this.positions[i].xOffset += this.positions[j].xOffset;\n        this.positions[i].yOffset += this.positions[j].yOffset;\n\n        if (this.direction === 'ltr') {\n          for (var k = j; k < i; k++) {\n            this.positions[i].xOffset -= this.positions[k].xAdvance;\n            this.positions[i].yOffset -= this.positions[k].yAdvance;\n          }\n        } else {\n          for (var _k = j + 1; _k < i + 1; _k++) {\n            this.positions[i].xOffset += this.positions[_k].xAdvance;\n            this.positions[i].yOffset += this.positions[_k].yAdvance;\n          }\n        }\n      }\n    }\n  }\n\n}\n\nclass OTLayoutEngine {\n  constructor(font) {\n    this.font = font;\n    this.glyphInfos = null;\n    this.plan = null;\n    this.GSUBProcessor = null;\n    this.GPOSProcessor = null;\n    this.fallbackPosition = true;\n\n    if (font.GSUB) {\n      this.GSUBProcessor = new GSUBProcessor(font, font.GSUB);\n    }\n\n    if (font.GPOS) {\n      this.GPOSProcessor = new GPOSProcessor(font, font.GPOS);\n    }\n  }\n\n  setup(glyphRun) {\n    // Map glyphs to GlyphInfo objects so data can be passed between\n    // GSUB and GPOS without mutating the real (shared) Glyph objects.\n    this.glyphInfos = glyphRun.glyphs.map(glyph => new GlyphInfo(this.font, glyph.id, [...glyph.codePoints])); // Select a script based on what is available in GSUB/GPOS.\n\n    var script = null;\n\n    if (this.GPOSProcessor) {\n      script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n    }\n\n    if (this.GSUBProcessor) {\n      script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n    } // Choose a shaper based on the script, and setup a shaping plan.\n    // This determines which features to apply to which glyphs.\n\n\n    this.shaper = choose(script);\n    this.plan = new ShapingPlan(this.font, script, glyphRun.direction);\n    this.shaper.plan(this.plan, this.glyphInfos, glyphRun.features); // Assign chosen features to output glyph run\n\n    for (var key in this.plan.allFeatures) {\n      glyphRun.features[key] = true;\n    }\n  }\n\n  substitute(glyphRun) {\n    if (this.GSUBProcessor) {\n      this.plan.process(this.GSUBProcessor, this.glyphInfos); // Map glyph infos back to normal Glyph objects\n\n      glyphRun.glyphs = this.glyphInfos.map(glyphInfo => this.font.getGlyph(glyphInfo.id, glyphInfo.codePoints));\n    }\n  }\n\n  position(glyphRun) {\n    if (this.shaper.zeroMarkWidths === 'BEFORE_GPOS') {\n      this.zeroMarkAdvances(glyphRun.positions);\n    }\n\n    if (this.GPOSProcessor) {\n      this.plan.process(this.GPOSProcessor, this.glyphInfos, glyphRun.positions);\n    }\n\n    if (this.shaper.zeroMarkWidths === 'AFTER_GPOS') {\n      this.zeroMarkAdvances(glyphRun.positions);\n    } // Reverse the glyphs and positions if the script is right-to-left\n\n\n    if (glyphRun.direction === 'rtl') {\n      glyphRun.glyphs.reverse();\n      glyphRun.positions.reverse();\n    }\n\n    return this.GPOSProcessor && this.GPOSProcessor.features;\n  }\n\n  zeroMarkAdvances(positions) {\n    for (var i = 0; i < this.glyphInfos.length; i++) {\n      if (this.glyphInfos[i].isMark) {\n        positions[i].xAdvance = 0;\n        positions[i].yAdvance = 0;\n      }\n    }\n  }\n\n  cleanup() {\n    this.glyphInfos = null;\n    this.plan = null;\n    this.shaper = null;\n  }\n\n  getAvailableFeatures(script, language) {\n    var features = [];\n\n    if (this.GSUBProcessor) {\n      this.GSUBProcessor.selectScript(script, language);\n      features.push(...Object.keys(this.GSUBProcessor.features));\n    }\n\n    if (this.GPOSProcessor) {\n      this.GPOSProcessor.selectScript(script, language);\n      features.push(...Object.keys(this.GPOSProcessor.features));\n    }\n\n    return features;\n  }\n\n}\n\nclass LayoutEngine {\n  constructor(font) {\n    this.font = font;\n    this.unicodeLayoutEngine = null;\n    this.kernProcessor = null; // Choose an advanced layout engine. We try the AAT morx table first since more\n    // scripts are currently supported because the shaping logic is built into the font.\n\n    if (this.font.morx) {\n      this.engine = new AATLayoutEngine(this.font);\n    } else if (this.font.GSUB || this.font.GPOS) {\n      this.engine = new OTLayoutEngine(this.font);\n    }\n  }\n\n  layout(string, features, script, language, direction) {\n    // Make the features parameter optional\n    if (typeof features === 'string') {\n      direction = language;\n      language = script;\n      script = features;\n      features = [];\n    } // Map string to glyphs if needed\n\n\n    if (typeof string === 'string') {\n      // Attempt to detect the script from the string if not provided.\n      if (script == null) {\n        script = forString(string);\n      }\n\n      var glyphs = this.font.glyphsForString(string);\n    } else {\n      // Attempt to detect the script from the glyph code points if not provided.\n      if (script == null) {\n        var codePoints = [];\n\n        for (var glyph of string) {\n          codePoints.push(...glyph.codePoints);\n        }\n\n        script = forCodePoints(codePoints);\n      }\n\n      var glyphs = string;\n    }\n\n    var glyphRun = new GlyphRun(glyphs, features, script, language, direction); // Return early if there are no glyphs\n\n    if (glyphs.length === 0) {\n      glyphRun.positions = [];\n      return glyphRun;\n    } // Setup the advanced layout engine\n\n\n    if (this.engine && this.engine.setup) {\n      this.engine.setup(glyphRun);\n    } // Substitute and position the glyphs\n\n\n    this.substitute(glyphRun);\n    this.position(glyphRun);\n    this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions); // Let the layout engine clean up any state it might have\n\n    if (this.engine && this.engine.cleanup) {\n      this.engine.cleanup();\n    }\n\n    return glyphRun;\n  }\n\n  substitute(glyphRun) {\n    // Call the advanced layout engine to make substitutions\n    if (this.engine && this.engine.substitute) {\n      this.engine.substitute(glyphRun);\n    }\n  }\n\n  position(glyphRun) {\n    // Get initial glyph positions\n    glyphRun.positions = glyphRun.glyphs.map(glyph => new GlyphPosition(glyph.advanceWidth));\n    var positioned = null; // Call the advanced layout engine. Returns the features applied.\n\n    if (this.engine && this.engine.position) {\n      positioned = this.engine.position(glyphRun);\n    } // if there is no GPOS table, use unicode properties to position marks.\n\n\n    if (!positioned && (!this.engine || this.engine.fallbackPosition)) {\n      if (!this.unicodeLayoutEngine) {\n        this.unicodeLayoutEngine = new UnicodeLayoutEngine(this.font);\n      }\n\n      this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);\n    } // if kerning is not supported by GPOS, do kerning with the TrueType/AAT kern table\n\n\n    if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {\n      if (!this.kernProcessor) {\n        this.kernProcessor = new KernProcessor(this.font);\n      }\n\n      this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);\n      glyphRun.features.kern = true;\n    }\n  }\n\n  hideDefaultIgnorables(glyphs, positions) {\n    var space = this.font.glyphForCodePoint(0x20);\n\n    for (var i = 0; i < glyphs.length; i++) {\n      if (this.isDefaultIgnorable(glyphs[i].codePoints[0])) {\n        glyphs[i] = space;\n        positions[i].xAdvance = 0;\n        positions[i].yAdvance = 0;\n      }\n    }\n  }\n\n  isDefaultIgnorable(ch) {\n    // From DerivedCoreProperties.txt in the Unicode database,\n    // minus U+115F, U+1160, U+3164 and U+FFA0, which is what\n    // Harfbuzz and Uniscribe do.\n    var plane = ch >> 16;\n\n    if (plane === 0) {\n      // BMP\n      switch (ch >> 8) {\n        case 0x00:\n          return ch === 0x00AD;\n\n        case 0x03:\n          return ch === 0x034F;\n\n        case 0x06:\n          return ch === 0x061C;\n\n        case 0x17:\n          return 0x17B4 <= ch && ch <= 0x17B5;\n\n        case 0x18:\n          return 0x180B <= ch && ch <= 0x180E;\n\n        case 0x20:\n          return 0x200B <= ch && ch <= 0x200F || 0x202A <= ch && ch <= 0x202E || 0x2060 <= ch && ch <= 0x206F;\n\n        case 0xFE:\n          return 0xFE00 <= ch && ch <= 0xFE0F || ch === 0xFEFF;\n\n        case 0xFF:\n          return 0xFFF0 <= ch && ch <= 0xFFF8;\n\n        default:\n          return false;\n      }\n    } else {\n      // Other planes\n      switch (plane) {\n        case 0x01:\n          return 0x1BCA0 <= ch && ch <= 0x1BCA3 || 0x1D173 <= ch && ch <= 0x1D17A;\n\n        case 0x0E:\n          return 0xE0000 <= ch && ch <= 0xE0FFF;\n\n        default:\n          return false;\n      }\n    }\n  }\n\n  getAvailableFeatures(script, language) {\n    var features = [];\n\n    if (this.engine) {\n      features.push(...this.engine.getAvailableFeatures(script, language));\n    }\n\n    if (this.font.kern && features.indexOf('kern') === -1) {\n      features.push('kern');\n    }\n\n    return features;\n  }\n\n  stringsForGlyph(gid) {\n    var result = new Set();\n\n    var codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);\n\n    for (var codePoint of codePoints) {\n      result.add(String.fromCodePoint(codePoint));\n    }\n\n    if (this.engine && this.engine.stringsForGlyph) {\n      for (var string of this.engine.stringsForGlyph(gid)) {\n        result.add(string);\n      }\n    }\n\n    return Array.from(result);\n  }\n\n}\n\nvar SVG_COMMANDS = {\n  moveTo: 'M',\n  lineTo: 'L',\n  quadraticCurveTo: 'Q',\n  bezierCurveTo: 'C',\n  closePath: 'Z'\n};\n/**\r\n * Path objects are returned by glyphs and represent the actual\r\n * vector outlines for each glyph in the font. Paths can be converted\r\n * to SVG path data strings, or to functions that can be applied to\r\n * render the path to a graphics context.\r\n */\n\nclass Path {\n  constructor() {\n    this.commands = [];\n    this._bbox = null;\n    this._cbox = null;\n  }\n  /**\r\n   * Compiles the path to a JavaScript function that can be applied with\r\n   * a graphics context in order to render the path.\r\n   * @return {string}\r\n   */\n\n\n  toFunction() {\n    return ctx => {\n      this.commands.forEach(c => {\n        return ctx[c.command].apply(ctx, c.args);\n      });\n    };\n  }\n  /**\r\n   * Converts the path to an SVG path data string\r\n   * @return {string}\r\n   */\n\n\n  toSVG() {\n    var cmds = this.commands.map(c => {\n      var args = c.args.map(arg => Math.round(arg * 100) / 100);\n      return \"\".concat(SVG_COMMANDS[c.command]).concat(args.join(' '));\n    });\n    return cmds.join('');\n  }\n  /**\r\n   * Gets the \"control box\" of a path.\r\n   * This is like the bounding box, but it includes all points including\r\n   * control points of bezier segments and is much faster to compute than\r\n   * the real bounding box.\r\n   * @type {BBox}\r\n   */\n\n\n  get cbox() {\n    if (!this._cbox) {\n      var cbox = new BBox();\n\n      for (var command of this.commands) {\n        for (var i = 0; i < command.args.length; i += 2) {\n          cbox.addPoint(command.args[i], command.args[i + 1]);\n        }\n      }\n\n      this._cbox = Object.freeze(cbox);\n    }\n\n    return this._cbox;\n  }\n  /**\r\n   * Gets the exact bounding box of the path by evaluating curve segments.\r\n   * Slower to compute than the control box, but more accurate.\r\n   * @type {BBox}\r\n   */\n\n\n  get bbox() {\n    if (this._bbox) {\n      return this._bbox;\n    }\n\n    var bbox = new BBox();\n    var cx = 0,\n        cy = 0;\n\n    var f = t => Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];\n\n    for (var c of this.commands) {\n      switch (c.command) {\n        case 'moveTo':\n        case 'lineTo':\n          var [x, y] = c.args;\n          bbox.addPoint(x, y);\n          cx = x;\n          cy = y;\n          break;\n\n        case 'quadraticCurveTo':\n        case 'bezierCurveTo':\n          if (c.command === 'quadraticCurveTo') {\n            // http://fontforge.org/bezier.html\n            var [qp1x, qp1y, p3x, p3y] = c.args;\n            var cp1x = cx + 2 / 3 * (qp1x - cx); // CP1 = QP0 + 2/3 * (QP1-QP0)\n\n            var cp1y = cy + 2 / 3 * (qp1y - cy);\n            var cp2x = p3x + 2 / 3 * (qp1x - p3x); // CP2 = QP2 + 2/3 * (QP1-QP2)\n\n            var cp2y = p3y + 2 / 3 * (qp1y - p3y);\n          } else {\n            var [cp1x, cp1y, cp2x, cp2y, p3x, p3y] = c.args;\n          } // http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n\n\n          bbox.addPoint(p3x, p3y);\n          var p0 = [cx, cy];\n          var p1 = [cp1x, cp1y];\n          var p2 = [cp2x, cp2y];\n          var p3 = [p3x, p3y];\n\n          for (var i = 0; i <= 1; i++) {\n            var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n            var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n            c = 3 * p1[i] - 3 * p0[i];\n\n            if (a === 0) {\n              if (b === 0) {\n                continue;\n              }\n\n              var t = -c / b;\n\n              if (0 < t && t < 1) {\n                if (i === 0) {\n                  bbox.addPoint(f(t), bbox.maxY);\n                } else if (i === 1) {\n                  bbox.addPoint(bbox.maxX, f(t));\n                }\n              }\n\n              continue;\n            }\n\n            var b2ac = Math.pow(b, 2) - 4 * c * a;\n\n            if (b2ac < 0) {\n              continue;\n            }\n\n            var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n\n            if (0 < t1 && t1 < 1) {\n              if (i === 0) {\n                bbox.addPoint(f(t1), bbox.maxY);\n              } else if (i === 1) {\n                bbox.addPoint(bbox.maxX, f(t1));\n              }\n            }\n\n            var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n\n            if (0 < t2 && t2 < 1) {\n              if (i === 0) {\n                bbox.addPoint(f(t2), bbox.maxY);\n              } else if (i === 1) {\n                bbox.addPoint(bbox.maxX, f(t2));\n              }\n            }\n          }\n\n          cx = p3x;\n          cy = p3y;\n          break;\n      }\n    }\n\n    return this._bbox = Object.freeze(bbox);\n  }\n  /**\r\n   * Applies a mapping function to each point in the path.\r\n   * @param {function} fn\r\n   * @return {Path}\r\n   */\n\n\n  mapPoints(fn) {\n    var path = new Path();\n\n    for (var c of this.commands) {\n      var args = [];\n\n      for (var i = 0; i < c.args.length; i += 2) {\n        var [x, y] = fn(c.args[i], c.args[i + 1]);\n        args.push(x, y);\n      }\n\n      path[c.command](...args);\n    }\n\n    return path;\n  }\n  /**\r\n   * Transforms the path by the given matrix.\r\n   */\n\n\n  transform(m0, m1, m2, m3, m4, m5) {\n    return this.mapPoints((x, y) => {\n      x = m0 * x + m2 * y + m4;\n      y = m1 * x + m3 * y + m5;\n      return [x, y];\n    });\n  }\n  /**\r\n   * Translates the path by the given offset.\r\n   */\n\n\n  translate(x, y) {\n    return this.transform(1, 0, 0, 1, x, y);\n  }\n  /**\r\n   * Rotates the path by the given angle (in radians).\r\n   */\n\n\n  rotate(angle) {\n    var cos = Math.cos(angle);\n    var sin = Math.sin(angle);\n    return this.transform(cos, sin, -sin, cos, 0, 0);\n  }\n  /**\r\n   * Scales the path.\r\n   */\n\n\n  scale(scaleX, scaleY = scaleX) {\n    return this.transform(scaleX, 0, 0, scaleY, 0, 0);\n  }\n\n}\n\nvar _loop = function (command) {\n  Path.prototype[command] = function (...args) {\n    this._bbox = this._cbox = null;\n    this.commands.push({\n      command,\n      args\n    });\n    return this;\n  };\n};\n\nfor (var command of ['moveTo', 'lineTo', 'quadraticCurveTo', 'bezierCurveTo', 'closePath']) {\n  _loop(command);\n}\n\nvar StandardNames = ['.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave', 'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis', 'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis', 'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section', 'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal', 'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation', 'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown', 'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright', 'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft', 'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction', 'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase', 'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex', 'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth', 'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior', 'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla', 'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];\n\nvar _class$3;\n/**\r\n * Glyph objects represent a glyph in the font. They have various properties for accessing metrics and\r\n * the actual vector path the glyph represents, and methods for rendering the glyph to a graphics context.\r\n *\r\n * You do not create glyph objects directly. They are created by various methods on the font object.\r\n * There are several subclasses of the base Glyph class internally that may be returned depending\r\n * on the font format, but they all inherit from this class.\r\n */\n\nvar Glyph = (_class$3 = class Glyph {\n  constructor(id, codePoints, font) {\n    /**\r\n     * The glyph id in the font\r\n     * @type {number}\r\n     */\n    this.id = id;\n    /**\r\n     * An array of unicode code points that are represented by this glyph.\r\n     * There can be multiple code points in the case of ligatures and other glyphs\r\n     * that represent multiple visual characters.\r\n     * @type {number[]}\r\n     */\n\n    this.codePoints = codePoints;\n    this._font = font; // TODO: get this info from GDEF if available\n\n    this.isMark = this.codePoints.length > 0 && this.codePoints.every(unicode.isMark);\n    this.isLigature = this.codePoints.length > 1;\n  }\n\n  _getPath() {\n    return new Path();\n  }\n\n  _getCBox() {\n    return this.path.cbox;\n  }\n\n  _getBBox() {\n    return this.path.bbox;\n  }\n\n  _getTableMetrics(table) {\n    if (this.id < table.metrics.length) {\n      return table.metrics.get(this.id);\n    }\n\n    var metric = table.metrics.get(table.metrics.length - 1);\n    var res = {\n      advance: metric ? metric.advance : 0,\n      bearing: table.bearings.get(this.id - table.metrics.length) || 0\n    };\n    return res;\n  }\n\n  _getMetrics(cbox) {\n    if (this._metrics) {\n      return this._metrics;\n    }\n\n    var {\n      advance: advanceWidth,\n      bearing: leftBearing\n    } = this._getTableMetrics(this._font.hmtx); // For vertical metrics, use vmtx if available, or fall back to global data from OS/2 or hhea\n\n\n    if (this._font.vmtx) {\n      var {\n        advance: advanceHeight,\n        bearing: topBearing\n      } = this._getTableMetrics(this._font.vmtx);\n    } else {\n      var os2;\n\n      if (typeof cbox === 'undefined' || cbox === null) {\n        ({\n          cbox\n        } = this);\n      }\n\n      if ((os2 = this._font['OS/2']) && os2.version > 0) {\n        var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);\n        var topBearing = os2.typoAscender - cbox.maxY;\n      } else {\n        var {\n          hhea\n        } = this._font;\n        var advanceHeight = Math.abs(hhea.ascent - hhea.descent);\n        var topBearing = hhea.ascent - cbox.maxY;\n      }\n    }\n\n    if (this._font._variationProcessor && this._font.HVAR) {\n      advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);\n    }\n\n    return this._metrics = {\n      advanceWidth,\n      advanceHeight,\n      leftBearing,\n      topBearing\n    };\n  }\n  /**\r\n   * The glyph’s control box.\r\n   * This is often the same as the bounding box, but is faster to compute.\r\n   * Because of the way bezier curves are defined, some of the control points\r\n   * can be outside of the bounding box. Where `bbox` takes this into account,\r\n   * `cbox` does not. Thus, cbox is less accurate, but faster to compute.\r\n   * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)\r\n   * for a more detailed description.\r\n   *\r\n   * @type {BBox}\r\n   */\n\n\n  get cbox() {\n    return this._getCBox();\n  }\n  /**\r\n   * The glyph’s bounding box, i.e. the rectangle that encloses the\r\n   * glyph outline as tightly as possible.\r\n   * @type {BBox}\r\n   */\n\n\n  get bbox() {\n    return this._getBBox();\n  }\n  /**\r\n   * A vector Path object representing the glyph outline.\r\n   * @type {Path}\r\n   */\n\n\n  get path() {\n    // Cache the path so we only decode it once\n    // Decoding is actually performed by subclasses\n    return this._getPath();\n  }\n  /**\r\n   * Returns a path scaled to the given font size.\r\n   * @param {number} size\r\n   * @return {Path}\r\n   */\n\n\n  getScaledPath(size) {\n    var scale = 1 / this._font.unitsPerEm * size;\n    return this.path.scale(scale);\n  }\n  /**\r\n   * The glyph's advance width.\r\n   * @type {number}\r\n   */\n\n\n  get advanceWidth() {\n    return this._getMetrics().advanceWidth;\n  }\n  /**\r\n   * The glyph's advance height.\r\n   * @type {number}\r\n   */\n\n\n  get advanceHeight() {\n    return this._getMetrics().advanceHeight;\n  }\n\n  get ligatureCaretPositions() {}\n\n  _getName() {\n    var {\n      post\n    } = this._font;\n\n    if (!post) {\n      return null;\n    }\n\n    switch (post.version) {\n      case 1:\n        return StandardNames[this.id];\n\n      case 2:\n        var id = post.glyphNameIndex[this.id];\n\n        if (id < StandardNames.length) {\n          return StandardNames[id];\n        }\n\n        return post.names[id - StandardNames.length];\n\n      case 2.5:\n        return StandardNames[this.id + post.offsets[this.id]];\n\n      case 4:\n        return String.fromCharCode(post.map[this.id]);\n    }\n  }\n  /**\r\n   * The glyph's name\r\n   * @type {string}\r\n   */\n\n\n  get name() {\n    return this._getName();\n  }\n  /**\r\n   * Renders the glyph to the given graphics context, at the specified font size.\r\n   * @param {CanvasRenderingContext2d} ctx\r\n   * @param {number} size\r\n   */\n\n\n  render(ctx, size) {\n    ctx.save();\n    var scale = 1 / this._font.head.unitsPerEm * size;\n    ctx.scale(scale, scale);\n    var fn = this.path.toFunction();\n    fn(ctx);\n    ctx.fill();\n    ctx.restore();\n  }\n\n}, (_applyDecoratedDescriptor(_class$3.prototype, \"cbox\", [cache], Object.getOwnPropertyDescriptor(_class$3.prototype, \"cbox\"), _class$3.prototype), _applyDecoratedDescriptor(_class$3.prototype, \"bbox\", [cache], Object.getOwnPropertyDescriptor(_class$3.prototype, \"bbox\"), _class$3.prototype), _applyDecoratedDescriptor(_class$3.prototype, \"path\", [cache], Object.getOwnPropertyDescriptor(_class$3.prototype, \"path\"), _class$3.prototype), _applyDecoratedDescriptor(_class$3.prototype, \"advanceWidth\", [cache], Object.getOwnPropertyDescriptor(_class$3.prototype, \"advanceWidth\"), _class$3.prototype), _applyDecoratedDescriptor(_class$3.prototype, \"advanceHeight\", [cache], Object.getOwnPropertyDescriptor(_class$3.prototype, \"advanceHeight\"), _class$3.prototype), _applyDecoratedDescriptor(_class$3.prototype, \"name\", [cache], Object.getOwnPropertyDescriptor(_class$3.prototype, \"name\"), _class$3.prototype)), _class$3);\n\nvar GlyfHeader = new r.Struct({\n  numberOfContours: r.int16,\n  // if negative, this is a composite glyph\n  xMin: r.int16,\n  yMin: r.int16,\n  xMax: r.int16,\n  yMax: r.int16\n}); // Flags for simple glyphs\n\nvar ON_CURVE = 1 << 0;\nvar X_SHORT_VECTOR = 1 << 1;\nvar Y_SHORT_VECTOR = 1 << 2;\nvar REPEAT = 1 << 3;\nvar SAME_X = 1 << 4;\nvar SAME_Y = 1 << 5; // Flags for composite glyphs\n\nvar ARG_1_AND_2_ARE_WORDS = 1 << 0;\nvar WE_HAVE_A_SCALE = 1 << 3;\nvar MORE_COMPONENTS = 1 << 5;\nvar WE_HAVE_AN_X_AND_Y_SCALE = 1 << 6;\nvar WE_HAVE_A_TWO_BY_TWO = 1 << 7;\nvar WE_HAVE_INSTRUCTIONS = 1 << 8;\n\nclass Point {\n  constructor(onCurve, endContour, x = 0, y = 0) {\n    this.onCurve = onCurve;\n    this.endContour = endContour;\n    this.x = x;\n    this.y = y;\n  }\n\n  copy() {\n    return new Point(this.onCurve, this.endContour, this.x, this.y);\n  }\n\n} // Represents a component in a composite glyph\n\nclass Component {\n  constructor(glyphID, dx, dy) {\n    this.glyphID = glyphID;\n    this.dx = dx;\n    this.dy = dy;\n    this.pos = 0;\n    this.scaleX = this.scaleY = 1;\n    this.scale01 = this.scale10 = 0;\n  }\n\n}\n/**\r\n * Represents a TrueType glyph.\r\n */\n\n\nclass TTFGlyph extends Glyph {\n  // Parses just the glyph header and returns the bounding box\n  _getCBox(internal) {\n    // We need to decode the glyph if variation processing is requested,\n    // so it's easier just to recompute the path's cbox after decoding.\n    if (this._font._variationProcessor && !internal) {\n      return this.path.cbox;\n    }\n\n    var stream = this._font._getTableStream('glyf');\n\n    stream.pos += this._font.loca.offsets[this.id];\n    var glyph = GlyfHeader.decode(stream);\n    var cbox = new BBox(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);\n    return Object.freeze(cbox);\n  } // Parses a single glyph coordinate\n\n\n  _parseGlyphCoord(stream, prev, short, same) {\n    if (short) {\n      var val = stream.readUInt8();\n\n      if (!same) {\n        val = -val;\n      }\n\n      val += prev;\n    } else {\n      if (same) {\n        var val = prev;\n      } else {\n        var val = prev + stream.readInt16BE();\n      }\n    }\n\n    return val;\n  } // Decodes the glyph data into points for simple glyphs,\n  // or components for composite glyphs\n\n\n  _decode() {\n    var glyfPos = this._font.loca.offsets[this.id];\n    var nextPos = this._font.loca.offsets[this.id + 1]; // Nothing to do if there is no data for this glyph\n\n    if (glyfPos === nextPos) {\n      return null;\n    }\n\n    var stream = this._font._getTableStream('glyf');\n\n    stream.pos += glyfPos;\n    var startPos = stream.pos;\n    var glyph = GlyfHeader.decode(stream);\n\n    if (glyph.numberOfContours > 0) {\n      this._decodeSimple(glyph, stream);\n    } else if (glyph.numberOfContours < 0) {\n      this._decodeComposite(glyph, stream, startPos);\n    }\n\n    return glyph;\n  }\n\n  _decodeSimple(glyph, stream) {\n    // this is a simple glyph\n    glyph.points = [];\n    var endPtsOfContours = new r.Array(r.uint16, glyph.numberOfContours).decode(stream);\n    glyph.instructions = new r.Array(r.uint8, r.uint16).decode(stream);\n    var flags = [];\n    var numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;\n\n    while (flags.length < numCoords) {\n      var flag = stream.readUInt8();\n      flags.push(flag); // check for repeat flag\n\n      if (flag & REPEAT) {\n        var count = stream.readUInt8();\n\n        for (var j = 0; j < count; j++) {\n          flags.push(flag);\n        }\n      }\n    }\n\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      var point = new Point(!!(flag & ON_CURVE), endPtsOfContours.indexOf(i) >= 0, 0, 0);\n      glyph.points.push(point);\n    }\n\n    var px = 0;\n\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      glyph.points[i].x = px = this._parseGlyphCoord(stream, px, flag & X_SHORT_VECTOR, flag & SAME_X);\n    }\n\n    var py = 0;\n\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      glyph.points[i].y = py = this._parseGlyphCoord(stream, py, flag & Y_SHORT_VECTOR, flag & SAME_Y);\n    }\n\n    if (this._font._variationProcessor) {\n      var points = glyph.points.slice();\n      points.push(...this._getPhantomPoints(glyph));\n\n      this._font._variationProcessor.transformPoints(this.id, points);\n\n      glyph.phantomPoints = points.slice(-4);\n    }\n\n    return;\n  }\n\n  _decodeComposite(glyph, stream, offset = 0) {\n    // this is a composite glyph\n    glyph.components = [];\n    var haveInstructions = false;\n    var flags = MORE_COMPONENTS;\n\n    while (flags & MORE_COMPONENTS) {\n      flags = stream.readUInt16BE();\n      var gPos = stream.pos - offset;\n      var glyphID = stream.readUInt16BE();\n\n      if (!haveInstructions) {\n        haveInstructions = (flags & WE_HAVE_INSTRUCTIONS) !== 0;\n      }\n\n      if (flags & ARG_1_AND_2_ARE_WORDS) {\n        var dx = stream.readInt16BE();\n        var dy = stream.readInt16BE();\n      } else {\n        var dx = stream.readInt8();\n        var dy = stream.readInt8();\n      }\n\n      var component = new Component(glyphID, dx, dy);\n      component.pos = gPos;\n\n      if (flags & WE_HAVE_A_SCALE) {\n        // fixed number with 14 bits of fraction\n        component.scaleX = component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n      } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {\n        component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n      } else if (flags & WE_HAVE_A_TWO_BY_TWO) {\n        component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scale01 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scale10 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n      }\n\n      glyph.components.push(component);\n    }\n\n    if (this._font._variationProcessor) {\n      var points = [];\n\n      for (var j = 0; j < glyph.components.length; j++) {\n        var component = glyph.components[j];\n        points.push(new Point(true, true, component.dx, component.dy));\n      }\n\n      points.push(...this._getPhantomPoints(glyph));\n\n      this._font._variationProcessor.transformPoints(this.id, points);\n\n      glyph.phantomPoints = points.splice(-4, 4);\n\n      for (var i = 0; i < points.length; i++) {\n        var point = points[i];\n        glyph.components[i].dx = point.x;\n        glyph.components[i].dy = point.y;\n      }\n    }\n\n    return haveInstructions;\n  }\n\n  _getPhantomPoints(glyph) {\n    var cbox = this._getCBox(true);\n\n    if (this._metrics == null) {\n      this._metrics = Glyph.prototype._getMetrics.call(this, cbox);\n    }\n\n    var {\n      advanceWidth,\n      advanceHeight,\n      leftBearing,\n      topBearing\n    } = this._metrics;\n    return [new Point(false, true, glyph.xMin - leftBearing, 0), new Point(false, true, glyph.xMin - leftBearing + advanceWidth, 0), new Point(false, true, 0, glyph.yMax + topBearing), new Point(false, true, 0, glyph.yMax + topBearing + advanceHeight)];\n  } // Decodes font data, resolves composite glyphs, and returns an array of contours\n\n\n  _getContours() {\n    var glyph = this._decode();\n\n    if (!glyph) {\n      return [];\n    }\n\n    var points = [];\n\n    if (glyph.numberOfContours < 0) {\n      // resolve composite glyphs\n      for (var component of glyph.components) {\n        var _contours = this._font.getGlyph(component.glyphID)._getContours();\n\n        for (var i = 0; i < _contours.length; i++) {\n          var contour = _contours[i];\n\n          for (var j = 0; j < contour.length; j++) {\n            var _point = contour[j];\n            var x = _point.x * component.scaleX + _point.y * component.scale01 + component.dx;\n            var y = _point.y * component.scaleY + _point.x * component.scale10 + component.dy;\n            points.push(new Point(_point.onCurve, _point.endContour, x, y));\n          }\n        }\n      }\n    } else {\n      points = glyph.points || [];\n    } // Recompute and cache metrics if we performed variation processing, and don't have an HVAR table\n\n\n    if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {\n      this._metrics.advanceWidth = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;\n      this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;\n      this._metrics.leftBearing = glyph.xMin - glyph.phantomPoints[0].x;\n      this._metrics.topBearing = glyph.phantomPoints[2].y - glyph.yMax;\n    }\n\n    var contours = [];\n    var cur = [];\n\n    for (var k = 0; k < points.length; k++) {\n      var point = points[k];\n      cur.push(point);\n\n      if (point.endContour) {\n        contours.push(cur);\n        cur = [];\n      }\n    }\n\n    return contours;\n  }\n\n  _getMetrics() {\n    if (this._metrics) {\n      return this._metrics;\n    }\n\n    var cbox = this._getCBox(true);\n\n    super._getMetrics(cbox);\n\n    if (this._font._variationProcessor && !this._font.HVAR) {\n      // No HVAR table, decode the glyph. This triggers recomputation of metrics.\n      this.path;\n    }\n\n    return this._metrics;\n  } // Converts contours to a Path object that can be rendered\n\n\n  _getPath() {\n    var contours = this._getContours();\n\n    var path = new Path();\n\n    for (var i = 0; i < contours.length; i++) {\n      var contour = contours[i];\n      var firstPt = contour[0];\n      var lastPt = contour[contour.length - 1];\n      var start = 0;\n\n      if (firstPt.onCurve) {\n        // The first point will be consumed by the moveTo command, so skip in the loop\n        var curvePt = null;\n        start = 1;\n      } else {\n        if (lastPt.onCurve) {\n          // Start at the last point if the first point is off curve and the last point is on curve\n          firstPt = lastPt;\n        } else {\n          // Start at the middle if both the first and last points are off curve\n          firstPt = new Point(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);\n        }\n\n        var curvePt = firstPt;\n      }\n\n      path.moveTo(firstPt.x, firstPt.y);\n\n      for (var j = start; j < contour.length; j++) {\n        var pt = contour[j];\n        var prevPt = j === 0 ? firstPt : contour[j - 1];\n\n        if (prevPt.onCurve && pt.onCurve) {\n          path.lineTo(pt.x, pt.y);\n        } else if (prevPt.onCurve && !pt.onCurve) {\n          var curvePt = pt;\n        } else if (!prevPt.onCurve && !pt.onCurve) {\n          var midX = (prevPt.x + pt.x) / 2;\n          var midY = (prevPt.y + pt.y) / 2;\n          path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);\n          var curvePt = pt;\n        } else if (!prevPt.onCurve && pt.onCurve) {\n          path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);\n          var curvePt = null;\n        } else {\n          throw new Error(\"Unknown TTF path state\");\n        }\n      } // Connect the first and last points\n\n\n      if (curvePt) {\n        path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);\n      }\n\n      path.closePath();\n    }\n\n    return path;\n  }\n\n}\n\n/**\r\n * Represents an OpenType PostScript glyph, in the Compact Font Format.\r\n */\n\nclass CFFGlyph extends Glyph {\n  _getName() {\n    if (this._font.CFF2) {\n      return super._getName();\n    }\n\n    return this._font['CFF '].getGlyphName(this.id);\n  }\n\n  bias(s) {\n    if (s.length < 1240) {\n      return 107;\n    } else if (s.length < 33900) {\n      return 1131;\n    } else {\n      return 32768;\n    }\n  }\n\n  _getPath() {\n    var cff = this._font.CFF2 || this._font['CFF '];\n    var {\n      stream\n    } = cff;\n    var str = cff.topDict.CharStrings[this.id];\n    var end = str.offset + str.length;\n    stream.pos = str.offset;\n    var path = new Path();\n    var stack = [];\n    var trans = [];\n    var width = null;\n    var nStems = 0;\n    var x = 0,\n        y = 0;\n    var usedGsubrs;\n    var usedSubrs;\n    var open = false;\n    this._usedGsubrs = usedGsubrs = {};\n    this._usedSubrs = usedSubrs = {};\n    var gsubrs = cff.globalSubrIndex || [];\n    var gsubrsBias = this.bias(gsubrs);\n    var privateDict = cff.privateDictForGlyph(this.id) || {};\n    var subrs = privateDict.Subrs || [];\n    var subrsBias = this.bias(subrs);\n    var vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;\n    var vsindex = privateDict.vsindex;\n    var variationProcessor = this._font._variationProcessor;\n\n    function checkWidth() {\n      if (width == null) {\n        width = stack.shift() + privateDict.nominalWidthX;\n      }\n    }\n\n    function parseStems() {\n      if (stack.length % 2 !== 0) {\n        checkWidth();\n      }\n\n      nStems += stack.length >> 1;\n      return stack.length = 0;\n    }\n\n    function moveTo(x, y) {\n      if (open) {\n        path.closePath();\n      }\n\n      path.moveTo(x, y);\n      open = true;\n    }\n\n    var parse = function () {\n      while (stream.pos < end) {\n        var op = stream.readUInt8();\n\n        if (op < 32) {\n          switch (op) {\n            case 1: // hstem\n\n            case 3: // vstem\n\n            case 18: // hstemhm\n\n            case 23:\n              // vstemhm\n              parseStems();\n              break;\n\n            case 4:\n              // vmoveto\n              if (stack.length > 1) {\n                checkWidth();\n              }\n\n              y += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 5:\n              // rlineto\n              while (stack.length >= 2) {\n                x += stack.shift();\n                y += stack.shift();\n                path.lineTo(x, y);\n              }\n\n              break;\n\n            case 6: // hlineto\n\n            case 7:\n              // vlineto\n              var phase = op === 6;\n\n              while (stack.length >= 1) {\n                if (phase) {\n                  x += stack.shift();\n                } else {\n                  y += stack.shift();\n                }\n\n                path.lineTo(x, y);\n                phase = !phase;\n              }\n\n              break;\n\n            case 8:\n              // rrcurveto\n              while (stack.length > 0) {\n                var c1x = x + stack.shift();\n                var c1y = y + stack.shift();\n                var c2x = c1x + stack.shift();\n                var c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n\n              break;\n\n            case 10:\n              // callsubr\n              var index = stack.pop() + subrsBias;\n              var subr = subrs[index];\n\n              if (subr) {\n                usedSubrs[index] = true;\n                var p = stream.pos;\n                var e = end;\n                stream.pos = subr.offset;\n                end = subr.offset + subr.length;\n                parse();\n                stream.pos = p;\n                end = e;\n              }\n\n              break;\n\n            case 11:\n              // return\n              if (cff.version >= 2) {\n                break;\n              }\n\n              return;\n\n            case 14:\n              // endchar\n              if (cff.version >= 2) {\n                break;\n              }\n\n              if (stack.length > 0) {\n                checkWidth();\n              }\n\n              if (open) {\n                path.closePath();\n                open = false;\n              }\n\n              break;\n\n            case 15:\n              {\n                // vsindex\n                if (cff.version < 2) {\n                  throw new Error('vsindex operator not supported in CFF v1');\n                }\n\n                vsindex = stack.pop();\n                break;\n              }\n\n            case 16:\n              {\n                // blend\n                if (cff.version < 2) {\n                  throw new Error('blend operator not supported in CFF v1');\n                }\n\n                if (!variationProcessor) {\n                  throw new Error('blend operator in non-variation font');\n                }\n\n                var blendVector = variationProcessor.getBlendVector(vstore, vsindex);\n                var numBlends = stack.pop();\n                var numOperands = numBlends * blendVector.length;\n                var delta = stack.length - numOperands;\n                var base = delta - numBlends;\n\n                for (var i = 0; i < numBlends; i++) {\n                  var sum = stack[base + i];\n\n                  for (var j = 0; j < blendVector.length; j++) {\n                    sum += blendVector[j] * stack[delta++];\n                  }\n\n                  stack[base + i] = sum;\n                }\n\n                while (numOperands--) {\n                  stack.pop();\n                }\n\n                break;\n              }\n\n            case 19: // hintmask\n\n            case 20:\n              // cntrmask\n              parseStems();\n              stream.pos += nStems + 7 >> 3;\n              break;\n\n            case 21:\n              // rmoveto\n              if (stack.length > 2) {\n                checkWidth();\n              }\n\n              x += stack.shift();\n              y += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 22:\n              // hmoveto\n              if (stack.length > 1) {\n                checkWidth();\n              }\n\n              x += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 24:\n              // rcurveline\n              while (stack.length >= 8) {\n                var c1x = x + stack.shift();\n                var c1y = y + stack.shift();\n                var c2x = c1x + stack.shift();\n                var c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n\n              x += stack.shift();\n              y += stack.shift();\n              path.lineTo(x, y);\n              break;\n\n            case 25:\n              // rlinecurve\n              while (stack.length >= 8) {\n                x += stack.shift();\n                y += stack.shift();\n                path.lineTo(x, y);\n              }\n\n              var c1x = x + stack.shift();\n              var c1y = y + stack.shift();\n              var c2x = c1x + stack.shift();\n              var c2y = c1y + stack.shift();\n              x = c2x + stack.shift();\n              y = c2y + stack.shift();\n              path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              break;\n\n            case 26:\n              // vvcurveto\n              if (stack.length % 2) {\n                x += stack.shift();\n              }\n\n              while (stack.length >= 4) {\n                c1x = x;\n                c1y = y + stack.shift();\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x;\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n\n              break;\n\n            case 27:\n              // hhcurveto\n              if (stack.length % 2) {\n                y += stack.shift();\n              }\n\n              while (stack.length >= 4) {\n                c1x = x + stack.shift();\n                c1y = y;\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y;\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n\n              break;\n\n            case 28:\n              // shortint\n              stack.push(stream.readInt16BE());\n              break;\n\n            case 29:\n              // callgsubr\n              index = stack.pop() + gsubrsBias;\n              subr = gsubrs[index];\n\n              if (subr) {\n                usedGsubrs[index] = true;\n                var p = stream.pos;\n                var e = end;\n                stream.pos = subr.offset;\n                end = subr.offset + subr.length;\n                parse();\n                stream.pos = p;\n                end = e;\n              }\n\n              break;\n\n            case 30: // vhcurveto\n\n            case 31:\n              // hvcurveto\n              phase = op === 31;\n\n              while (stack.length >= 4) {\n                if (phase) {\n                  c1x = x + stack.shift();\n                  c1y = y;\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  y = c2y + stack.shift();\n                  x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                } else {\n                  c1x = x;\n                  c1y = y + stack.shift();\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  x = c2x + stack.shift();\n                  y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                }\n\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n                phase = !phase;\n              }\n\n              break;\n\n            case 12:\n              op = stream.readUInt8();\n\n              switch (op) {\n                case 3:\n                  // and\n                  var a = stack.pop();\n                  var b = stack.pop();\n                  stack.push(a && b ? 1 : 0);\n                  break;\n\n                case 4:\n                  // or\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a || b ? 1 : 0);\n                  break;\n\n                case 5:\n                  // not\n                  a = stack.pop();\n                  stack.push(a ? 0 : 1);\n                  break;\n\n                case 9:\n                  // abs\n                  a = stack.pop();\n                  stack.push(Math.abs(a));\n                  break;\n\n                case 10:\n                  // add\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a + b);\n                  break;\n\n                case 11:\n                  // sub\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a - b);\n                  break;\n\n                case 12:\n                  // div\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a / b);\n                  break;\n\n                case 14:\n                  // neg\n                  a = stack.pop();\n                  stack.push(-a);\n                  break;\n\n                case 15:\n                  // eq\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a === b ? 1 : 0);\n                  break;\n\n                case 18:\n                  // drop\n                  stack.pop();\n                  break;\n\n                case 20:\n                  // put\n                  var val = stack.pop();\n                  var idx = stack.pop();\n                  trans[idx] = val;\n                  break;\n\n                case 21:\n                  // get\n                  idx = stack.pop();\n                  stack.push(trans[idx] || 0);\n                  break;\n\n                case 22:\n                  // ifelse\n                  var s1 = stack.pop();\n                  var s2 = stack.pop();\n                  var v1 = stack.pop();\n                  var v2 = stack.pop();\n                  stack.push(v1 <= v2 ? s1 : s2);\n                  break;\n\n                case 23:\n                  // random\n                  stack.push(Math.random());\n                  break;\n\n                case 24:\n                  // mul\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a * b);\n                  break;\n\n                case 26:\n                  // sqrt\n                  a = stack.pop();\n                  stack.push(Math.sqrt(a));\n                  break;\n\n                case 27:\n                  // dup\n                  a = stack.pop();\n                  stack.push(a, a);\n                  break;\n\n                case 28:\n                  // exch\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(b, a);\n                  break;\n\n                case 29:\n                  // index\n                  idx = stack.pop();\n\n                  if (idx < 0) {\n                    idx = 0;\n                  } else if (idx > stack.length - 1) {\n                    idx = stack.length - 1;\n                  }\n\n                  stack.push(stack[idx]);\n                  break;\n\n                case 30:\n                  // roll\n                  var n = stack.pop();\n\n                  var _j = stack.pop();\n\n                  if (_j >= 0) {\n                    while (_j > 0) {\n                      var t = stack[n - 1];\n\n                      for (var _i = n - 2; _i >= 0; _i--) {\n                        stack[_i + 1] = stack[_i];\n                      }\n\n                      stack[0] = t;\n                      _j--;\n                    }\n                  } else {\n                    while (_j < 0) {\n                      var t = stack[0];\n\n                      for (var _i2 = 0; _i2 <= n; _i2++) {\n                        stack[_i2] = stack[_i2 + 1];\n                      }\n\n                      stack[n - 1] = t;\n                      _j++;\n                    }\n                  }\n\n                  break;\n\n                case 34:\n                  // hflex\n                  c1x = x + stack.shift();\n                  c1y = y;\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  var c3x = c2x + stack.shift();\n                  var c3y = c2y;\n                  var c4x = c3x + stack.shift();\n                  var c4y = c3y;\n                  var c5x = c4x + stack.shift();\n                  var c5y = c4y;\n                  var c6x = c5x + stack.shift();\n                  var c6y = c5y;\n                  x = c6x;\n                  y = c6y;\n                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                  break;\n\n                case 35:\n                  // flex\n                  var pts = [];\n\n                  for (var _i3 = 0; _i3 <= 5; _i3++) {\n                    x += stack.shift();\n                    y += stack.shift();\n                    pts.push(x, y);\n                  }\n\n                  path.bezierCurveTo(...pts.slice(0, 6));\n                  path.bezierCurveTo(...pts.slice(6));\n                  stack.shift(); // fd\n\n                  break;\n\n                case 36:\n                  // hflex1\n                  c1x = x + stack.shift();\n                  c1y = y + stack.shift();\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  c3x = c2x + stack.shift();\n                  c3y = c2y;\n                  c4x = c3x + stack.shift();\n                  c4y = c3y;\n                  c5x = c4x + stack.shift();\n                  c5y = c4y + stack.shift();\n                  c6x = c5x + stack.shift();\n                  c6y = c5y;\n                  x = c6x;\n                  y = c6y;\n                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                  break;\n\n                case 37:\n                  // flex1\n                  var startx = x;\n                  var starty = y;\n                  pts = [];\n\n                  for (var _i4 = 0; _i4 <= 4; _i4++) {\n                    x += stack.shift();\n                    y += stack.shift();\n                    pts.push(x, y);\n                  }\n\n                  if (Math.abs(x - startx) > Math.abs(y - starty)) {\n                    // horizontal\n                    x += stack.shift();\n                    y = starty;\n                  } else {\n                    x = startx;\n                    y += stack.shift();\n                  }\n\n                  pts.push(x, y);\n                  path.bezierCurveTo(...pts.slice(0, 6));\n                  path.bezierCurveTo(...pts.slice(6));\n                  break;\n\n                default:\n                  throw new Error(\"Unknown op: 12 \".concat(op));\n              }\n\n              break;\n\n            default:\n              throw new Error(\"Unknown op: \".concat(op));\n          }\n        } else if (op < 247) {\n          stack.push(op - 139);\n        } else if (op < 251) {\n          var b1 = stream.readUInt8();\n          stack.push((op - 247) * 256 + b1 + 108);\n        } else if (op < 255) {\n          var b1 = stream.readUInt8();\n          stack.push(-(op - 251) * 256 - b1 - 108);\n        } else {\n          stack.push(stream.readInt32BE() / 65536);\n        }\n      }\n    };\n\n    parse();\n\n    if (open) {\n      path.closePath();\n    }\n\n    return path;\n  }\n\n}\n\nvar SBIXImage = new r.Struct({\n  originX: r.uint16,\n  originY: r.uint16,\n  type: new r.String(4),\n  data: new r.Buffer(t => t.parent.buflen - t._currentOffset)\n});\n/**\r\n * Represents a color (e.g. emoji) glyph in Apple's SBIX format.\r\n */\n\nclass SBIXGlyph extends TTFGlyph {\n  /**\r\n   * Returns an object representing a glyph image at the given point size.\r\n   * The object has a data property with a Buffer containing the actual image data,\r\n   * along with the image type, and origin.\r\n   *\r\n   * @param {number} size\r\n   * @return {object}\r\n   */\n  getImageForSize(size) {\n    for (var i = 0; i < this._font.sbix.imageTables.length; i++) {\n      var table = this._font.sbix.imageTables[i];\n\n      if (table.ppem >= size) {\n        break;\n      }\n    }\n\n    var offsets = table.imageOffsets;\n    var start = offsets[this.id];\n    var end = offsets[this.id + 1];\n\n    if (start === end) {\n      return null;\n    }\n\n    this._font.stream.pos = start;\n    return SBIXImage.decode(this._font.stream, {\n      buflen: end - start\n    });\n  }\n\n  render(ctx, size) {\n    var img = this.getImageForSize(size);\n\n    if (img != null) {\n      var scale = size / this._font.unitsPerEm;\n      ctx.image(img.data, {\n        height: size,\n        x: img.originX,\n        y: (this.bbox.minY - img.originY) * scale\n      });\n    }\n\n    if (this._font.sbix.flags.renderOutlines) {\n      super.render(ctx, size);\n    }\n  }\n\n}\n\nclass COLRLayer {\n  constructor(glyph, color) {\n    this.glyph = glyph;\n    this.color = color;\n  }\n\n}\n/**\r\n * Represents a color (e.g. emoji) glyph in Microsoft's COLR format.\r\n * Each glyph in this format contain a list of colored layers, each\r\n * of which  is another vector glyph.\r\n */\n\n\nclass COLRGlyph extends Glyph {\n  _getBBox() {\n    var bbox = new BBox();\n\n    for (var i = 0; i < this.layers.length; i++) {\n      var layer = this.layers[i];\n      var b = layer.glyph.bbox;\n      bbox.addPoint(b.minX, b.minY);\n      bbox.addPoint(b.maxX, b.maxY);\n    }\n\n    return bbox;\n  }\n  /**\r\n   * Returns an array of objects containing the glyph and color for\r\n   * each layer in the composite color glyph.\r\n   * @type {object[]}\r\n   */\n\n\n  get layers() {\n    var cpal = this._font.CPAL;\n    var colr = this._font.COLR;\n    var low = 0;\n    var high = colr.baseGlyphRecord.length - 1;\n\n    while (low <= high) {\n      var mid = low + high >> 1;\n      var rec = colr.baseGlyphRecord[mid];\n\n      if (this.id < rec.gid) {\n        high = mid - 1;\n      } else if (this.id > rec.gid) {\n        low = mid + 1;\n      } else {\n        var baseLayer = rec;\n        break;\n      }\n    } // if base glyph not found in COLR table,\n    // default to normal glyph from glyf or CFF\n\n\n    if (baseLayer == null) {\n      var g = this._font._getBaseGlyph(this.id);\n\n      var color = {\n        red: 0,\n        green: 0,\n        blue: 0,\n        alpha: 255\n      };\n      return [new COLRLayer(g, color)];\n    } // otherwise, return an array of all the layers\n\n\n    var layers = [];\n\n    for (var i = baseLayer.firstLayerIndex; i < baseLayer.firstLayerIndex + baseLayer.numLayers; i++) {\n      var rec = colr.layerRecords[i];\n      var color = cpal.colorRecords[rec.paletteIndex];\n\n      var g = this._font._getBaseGlyph(rec.gid);\n\n      layers.push(new COLRLayer(g, color));\n    }\n\n    return layers;\n  }\n\n  render(ctx, size) {\n    for (var {\n      glyph,\n      color\n    } of this.layers) {\n      ctx.fillColor([color.red, color.green, color.blue], color.alpha / 255 * 100);\n      glyph.render(ctx, size);\n    }\n\n    return;\n  }\n\n}\n\nvar TUPLES_SHARE_POINT_NUMBERS = 0x8000;\nvar TUPLE_COUNT_MASK = 0x0fff;\nvar EMBEDDED_TUPLE_COORD = 0x8000;\nvar INTERMEDIATE_TUPLE = 0x4000;\nvar PRIVATE_POINT_NUMBERS = 0x2000;\nvar TUPLE_INDEX_MASK = 0x0fff;\nvar POINTS_ARE_WORDS = 0x80;\nvar POINT_RUN_COUNT_MASK = 0x7f;\nvar DELTAS_ARE_ZERO = 0x80;\nvar DELTAS_ARE_WORDS = 0x40;\nvar DELTA_RUN_COUNT_MASK = 0x3f;\n/**\r\n * This class is transforms TrueType glyphs according to the data from\r\n * the Apple Advanced Typography variation tables (fvar, gvar, and avar).\r\n * These tables allow infinite adjustments to glyph weight, width, slant,\r\n * and optical size without the designer needing to specify every exact style.\r\n *\r\n * Apple's documentation for these tables is not great, so thanks to the\r\n * Freetype project for figuring much of this out.\r\n *\r\n * @private\r\n */\n\nclass GlyphVariationProcessor {\n  constructor(font, coords) {\n    this.font = font;\n    this.normalizedCoords = this.normalizeCoords(coords);\n    this.blendVectors = new Map();\n  }\n\n  normalizeCoords(coords) {\n    // the default mapping is linear along each axis, in two segments:\n    // from the minValue to defaultValue, and from defaultValue to maxValue.\n    var normalized = [];\n\n    for (var i = 0; i < this.font.fvar.axis.length; i++) {\n      var axis = this.font.fvar.axis[i];\n\n      if (coords[i] < axis.defaultValue) {\n        normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.defaultValue - axis.minValue + Number.EPSILON));\n      } else {\n        normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.maxValue - axis.defaultValue + Number.EPSILON));\n      }\n    } // if there is an avar table, the normalized value is calculated\n    // by interpolating between the two nearest mapped values.\n\n\n    if (this.font.avar) {\n      for (var i = 0; i < this.font.avar.segment.length; i++) {\n        var segment = this.font.avar.segment[i];\n\n        for (var j = 0; j < segment.correspondence.length; j++) {\n          var pair = segment.correspondence[j];\n\n          if (j >= 1 && normalized[i] < pair.fromCoord) {\n            var prev = segment.correspondence[j - 1];\n            normalized[i] = ((normalized[i] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + Number.EPSILON) / (pair.fromCoord - prev.fromCoord + Number.EPSILON) + prev.toCoord;\n            break;\n          }\n        }\n      }\n    }\n\n    return normalized;\n  }\n\n  transformPoints(gid, glyphPoints) {\n    if (!this.font.fvar || !this.font.gvar) {\n      return;\n    }\n\n    var {\n      gvar\n    } = this.font;\n\n    if (gid >= gvar.glyphCount) {\n      return;\n    }\n\n    var offset = gvar.offsets[gid];\n\n    if (offset === gvar.offsets[gid + 1]) {\n      return;\n    } // Read the gvar data for this glyph\n\n\n    var {\n      stream\n    } = this.font;\n    stream.pos = offset;\n\n    if (stream.pos >= stream.length) {\n      return;\n    }\n\n    var tupleCount = stream.readUInt16BE();\n    var offsetToData = offset + stream.readUInt16BE();\n\n    if (tupleCount & TUPLES_SHARE_POINT_NUMBERS) {\n      var here = stream.pos;\n      stream.pos = offsetToData;\n      var sharedPoints = this.decodePoints();\n      offsetToData = stream.pos;\n      stream.pos = here;\n    }\n\n    var origPoints = glyphPoints.map(pt => pt.copy());\n    tupleCount &= TUPLE_COUNT_MASK;\n\n    for (var i = 0; i < tupleCount; i++) {\n      var tupleDataSize = stream.readUInt16BE();\n      var tupleIndex = stream.readUInt16BE();\n\n      if (tupleIndex & EMBEDDED_TUPLE_COORD) {\n        var tupleCoords = [];\n\n        for (var a = 0; a < gvar.axisCount; a++) {\n          tupleCoords.push(stream.readInt16BE() / 16384);\n        }\n      } else {\n        if ((tupleIndex & TUPLE_INDEX_MASK) >= gvar.globalCoordCount) {\n          throw new Error('Invalid gvar table');\n        }\n\n        var tupleCoords = gvar.globalCoords[tupleIndex & TUPLE_INDEX_MASK];\n      }\n\n      if (tupleIndex & INTERMEDIATE_TUPLE) {\n        var startCoords = [];\n\n        for (var _a = 0; _a < gvar.axisCount; _a++) {\n          startCoords.push(stream.readInt16BE() / 16384);\n        }\n\n        var endCoords = [];\n\n        for (var _a2 = 0; _a2 < gvar.axisCount; _a2++) {\n          endCoords.push(stream.readInt16BE() / 16384);\n        }\n      } // Get the factor at which to apply this tuple\n\n\n      var factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);\n\n      if (factor === 0) {\n        offsetToData += tupleDataSize;\n        continue;\n      }\n\n      var here = stream.pos;\n      stream.pos = offsetToData;\n\n      if (tupleIndex & PRIVATE_POINT_NUMBERS) {\n        var points = this.decodePoints();\n      } else {\n        var points = sharedPoints;\n      } // points.length = 0 means there are deltas for all points\n\n\n      var nPoints = points.length === 0 ? glyphPoints.length : points.length;\n      var xDeltas = this.decodeDeltas(nPoints);\n      var yDeltas = this.decodeDeltas(nPoints);\n\n      if (points.length === 0) {\n        // all points\n        for (var _i = 0; _i < glyphPoints.length; _i++) {\n          var point = glyphPoints[_i];\n          point.x += Math.round(xDeltas[_i] * factor);\n          point.y += Math.round(yDeltas[_i] * factor);\n        }\n      } else {\n        var outPoints = origPoints.map(pt => pt.copy());\n        var hasDelta = glyphPoints.map(() => false);\n\n        for (var _i2 = 0; _i2 < points.length; _i2++) {\n          var idx = points[_i2];\n\n          if (idx < glyphPoints.length) {\n            var _point = outPoints[idx];\n            hasDelta[idx] = true;\n            _point.x += Math.round(xDeltas[_i2] * factor);\n            _point.y += Math.round(yDeltas[_i2] * factor);\n          }\n        }\n\n        this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);\n\n        for (var _i3 = 0; _i3 < glyphPoints.length; _i3++) {\n          var deltaX = outPoints[_i3].x - origPoints[_i3].x;\n          var deltaY = outPoints[_i3].y - origPoints[_i3].y;\n          glyphPoints[_i3].x += deltaX;\n          glyphPoints[_i3].y += deltaY;\n        }\n      }\n\n      offsetToData += tupleDataSize;\n      stream.pos = here;\n    }\n  }\n\n  decodePoints() {\n    var stream = this.font.stream;\n    var count = stream.readUInt8();\n\n    if (count & POINTS_ARE_WORDS) {\n      count = (count & POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();\n    }\n\n    var points = new Uint16Array(count);\n    var i = 0;\n    var point = 0;\n\n    while (i < count) {\n      var run = stream.readUInt8();\n      var runCount = (run & POINT_RUN_COUNT_MASK) + 1;\n      var fn = run & POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;\n\n      for (var j = 0; j < runCount && i < count; j++) {\n        point += fn.call(stream);\n        points[i++] = point;\n      }\n    }\n\n    return points;\n  }\n\n  decodeDeltas(count) {\n    var stream = this.font.stream;\n    var i = 0;\n    var deltas = new Int16Array(count);\n\n    while (i < count) {\n      var run = stream.readUInt8();\n      var runCount = (run & DELTA_RUN_COUNT_MASK) + 1;\n\n      if (run & DELTAS_ARE_ZERO) {\n        i += runCount;\n      } else {\n        var fn = run & DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;\n\n        for (var j = 0; j < runCount && i < count; j++) {\n          deltas[i++] = fn.call(stream);\n        }\n      }\n    }\n\n    return deltas;\n  }\n\n  tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {\n    var normalized = this.normalizedCoords;\n    var {\n      gvar\n    } = this.font;\n    var factor = 1;\n\n    for (var i = 0; i < gvar.axisCount; i++) {\n      if (tupleCoords[i] === 0) {\n        continue;\n      }\n\n      if (normalized[i] === 0) {\n        return 0;\n      }\n\n      if ((tupleIndex & INTERMEDIATE_TUPLE) === 0) {\n        if (normalized[i] < Math.min(0, tupleCoords[i]) || normalized[i] > Math.max(0, tupleCoords[i])) {\n          return 0;\n        }\n\n        factor = (factor * normalized[i] + Number.EPSILON) / (tupleCoords[i] + Number.EPSILON);\n      } else {\n        if (normalized[i] < startCoords[i] || normalized[i] > endCoords[i]) {\n          return 0;\n        } else if (normalized[i] < tupleCoords[i]) {\n          factor = factor * (normalized[i] - startCoords[i] + Number.EPSILON) / (tupleCoords[i] - startCoords[i] + Number.EPSILON);\n        } else {\n          factor = factor * (endCoords[i] - normalized[i] + Number.EPSILON) / (endCoords[i] - tupleCoords[i] + Number.EPSILON);\n        }\n      }\n    }\n\n    return factor;\n  } // Interpolates points without delta values.\n  // Needed for the Ø and Q glyphs in Skia.\n  // Algorithm from Freetype.\n\n\n  interpolateMissingDeltas(points, inPoints, hasDelta) {\n    if (points.length === 0) {\n      return;\n    }\n\n    var point = 0;\n\n    while (point < points.length) {\n      var firstPoint = point; // find the end point of the contour\n\n      var endPoint = point;\n      var pt = points[endPoint];\n\n      while (!pt.endContour) {\n        pt = points[++endPoint];\n      } // find the first point that has a delta\n\n\n      while (point <= endPoint && !hasDelta[point]) {\n        point++;\n      }\n\n      if (point > endPoint) {\n        continue;\n      }\n\n      var firstDelta = point;\n      var curDelta = point;\n      point++;\n\n      while (point <= endPoint) {\n        // find the next point with a delta, and interpolate intermediate points\n        if (hasDelta[point]) {\n          this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);\n          curDelta = point;\n        }\n\n        point++;\n      } // shift contour if we only have a single delta\n\n\n      if (curDelta === firstDelta) {\n        this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);\n      } else {\n        // otherwise, handle the remaining points at the end and beginning of the contour\n        this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);\n\n        if (firstDelta > 0) {\n          this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);\n        }\n      }\n\n      point = endPoint + 1;\n    }\n  }\n\n  deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {\n    if (p1 > p2) {\n      return;\n    }\n\n    var iterable = ['x', 'y'];\n\n    for (var i = 0; i < iterable.length; i++) {\n      var k = iterable[i];\n\n      if (inPoints[ref1][k] > inPoints[ref2][k]) {\n        var p = ref1;\n        ref1 = ref2;\n        ref2 = p;\n      }\n\n      var in1 = inPoints[ref1][k];\n      var in2 = inPoints[ref2][k];\n      var out1 = outPoints[ref1][k];\n      var out2 = outPoints[ref2][k]; // If the reference points have the same coordinate but different\n      // delta, inferred delta is zero.  Otherwise interpolate.\n\n      if (in1 !== in2 || out1 === out2) {\n        var scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);\n\n        for (var _p = p1; _p <= p2; _p++) {\n          var out = inPoints[_p][k];\n\n          if (out <= in1) {\n            out += out1 - in1;\n          } else if (out >= in2) {\n            out += out2 - in2;\n          } else {\n            out = out1 + (out - in1) * scale;\n          }\n\n          outPoints[_p][k] = out;\n        }\n      }\n    }\n  }\n\n  deltaShift(p1, p2, ref, inPoints, outPoints) {\n    var deltaX = outPoints[ref].x - inPoints[ref].x;\n    var deltaY = outPoints[ref].y - inPoints[ref].y;\n\n    if (deltaX === 0 && deltaY === 0) {\n      return;\n    }\n\n    for (var p = p1; p <= p2; p++) {\n      if (p !== ref) {\n        outPoints[p].x += deltaX;\n        outPoints[p].y += deltaY;\n      }\n    }\n  }\n\n  getAdvanceAdjustment(gid, table) {\n    var outerIndex, innerIndex;\n\n    if (table.advanceWidthMapping) {\n      var idx = gid;\n\n      if (idx >= table.advanceWidthMapping.mapCount) {\n        idx = table.advanceWidthMapping.mapCount - 1;\n      }\n\n      var entryFormat = table.advanceWidthMapping.entryFormat;\n      ({\n        outerIndex,\n        innerIndex\n      } = table.advanceWidthMapping.mapData[idx]);\n    } else {\n      outerIndex = 0;\n      innerIndex = gid;\n    }\n\n    return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);\n  } // See pseudo code from `Font Variations Overview'\n  // in the OpenType specification.\n\n\n  getDelta(itemStore, outerIndex, innerIndex) {\n    if (outerIndex >= itemStore.itemVariationData.length) {\n      return 0;\n    }\n\n    var varData = itemStore.itemVariationData[outerIndex];\n\n    if (innerIndex >= varData.deltaSets.length) {\n      return 0;\n    }\n\n    var deltaSet = varData.deltaSets[innerIndex];\n    var blendVector = this.getBlendVector(itemStore, outerIndex);\n    var netAdjustment = 0;\n\n    for (var master = 0; master < varData.regionIndexCount; master++) {\n      netAdjustment += deltaSet.deltas[master] * blendVector[master];\n    }\n\n    return netAdjustment;\n  }\n\n  getBlendVector(itemStore, outerIndex) {\n    var varData = itemStore.itemVariationData[outerIndex];\n\n    if (this.blendVectors.has(varData)) {\n      return this.blendVectors.get(varData);\n    }\n\n    var normalizedCoords = this.normalizedCoords;\n    var blendVector = []; // outer loop steps through master designs to be blended\n\n    for (var master = 0; master < varData.regionIndexCount; master++) {\n      var scalar = 1;\n      var regionIndex = varData.regionIndexes[master];\n      var axes = itemStore.variationRegionList.variationRegions[regionIndex]; // inner loop steps through axes in this region\n\n      for (var j = 0; j < axes.length; j++) {\n        var axis = axes[j];\n        var axisScalar = void 0; // compute the scalar contribution of this axis\n        // ignore invalid ranges\n\n        if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord) {\n          axisScalar = 1;\n        } else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0) {\n          axisScalar = 1; // peak of 0 means ignore this axis\n        } else if (axis.peakCoord === 0) {\n          axisScalar = 1; // ignore this region if coords are out of range\n        } else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord) {\n          axisScalar = 0; // calculate a proportional factor\n        } else {\n          if (normalizedCoords[j] === axis.peakCoord) {\n            axisScalar = 1;\n          } else if (normalizedCoords[j] < axis.peakCoord) {\n            axisScalar = (normalizedCoords[j] - axis.startCoord + Number.EPSILON) / (axis.peakCoord - axis.startCoord + Number.EPSILON);\n          } else {\n            axisScalar = (axis.endCoord - normalizedCoords[j] + Number.EPSILON) / (axis.endCoord - axis.peakCoord + Number.EPSILON);\n          }\n        } // take product of all the axis scalars\n\n\n        scalar *= axisScalar;\n      }\n\n      blendVector[master] = scalar;\n    }\n\n    this.blendVectors.set(varData, blendVector);\n    return blendVector;\n  }\n\n}\n\nvar resolved = Promise.resolve();\nclass Subset {\n  constructor(font) {\n    this.font = font;\n    this.glyphs = [];\n    this.mapping = {}; // always include the missing glyph\n\n    this.includeGlyph(0);\n  }\n\n  includeGlyph(glyph) {\n    if (typeof glyph === 'object') {\n      glyph = glyph.id;\n    }\n\n    if (this.mapping[glyph] == null) {\n      this.glyphs.push(glyph);\n      this.mapping[glyph] = this.glyphs.length - 1;\n    }\n\n    return this.mapping[glyph];\n  }\n\n  encodeStream() {\n    var s = new r.EncodeStream();\n    resolved.then(() => {\n      this.encode(s);\n      return s.end();\n    });\n    return s;\n  }\n\n}\n\nvar ON_CURVE$1 = 1 << 0;\nvar X_SHORT_VECTOR$1 = 1 << 1;\nvar Y_SHORT_VECTOR$1 = 1 << 2;\nvar REPEAT$1 = 1 << 3;\nvar SAME_X$1 = 1 << 4;\nvar SAME_Y$1 = 1 << 5;\n\nclass Point$1 {\n  static size(val) {\n    return val >= 0 && val <= 255 ? 1 : 2;\n  }\n\n  static encode(stream, value) {\n    if (value >= 0 && value <= 255) {\n      stream.writeUInt8(value);\n    } else {\n      stream.writeInt16BE(value);\n    }\n  }\n\n}\n\nvar Glyf = new r.Struct({\n  numberOfContours: r.int16,\n  // if negative, this is a composite glyph\n  xMin: r.int16,\n  yMin: r.int16,\n  xMax: r.int16,\n  yMax: r.int16,\n  endPtsOfContours: new r.Array(r.uint16, 'numberOfContours'),\n  instructions: new r.Array(r.uint8, r.uint16),\n  flags: new r.Array(r.uint8, 0),\n  xPoints: new r.Array(Point$1, 0),\n  yPoints: new r.Array(Point$1, 0)\n});\n/**\r\n * Encodes TrueType glyph outlines\r\n */\n\nclass TTFGlyphEncoder {\n  encodeSimple(path, instructions = []) {\n    var endPtsOfContours = [];\n    var xPoints = [];\n    var yPoints = [];\n    var flags = [];\n    var same = 0;\n    var lastX = 0,\n        lastY = 0,\n        lastFlag = 0;\n    var pointCount = 0;\n\n    for (var i = 0; i < path.commands.length; i++) {\n      var c = path.commands[i];\n\n      for (var j = 0; j < c.args.length; j += 2) {\n        var x = c.args[j];\n        var y = c.args[j + 1];\n        var flag = 0; // If the ending point of a quadratic curve is the midpoint\n        // between the control point and the control point of the next\n        // quadratic curve, we can omit the ending point.\n\n        if (c.command === 'quadraticCurveTo' && j === 2) {\n          var next = path.commands[i + 1];\n\n          if (next && next.command === 'quadraticCurveTo') {\n            var midX = (lastX + next.args[0]) / 2;\n            var midY = (lastY + next.args[1]) / 2;\n\n            if (x === midX && y === midY) {\n              continue;\n            }\n          }\n        } // All points except control points are on curve.\n\n\n        if (!(c.command === 'quadraticCurveTo' && j === 0)) {\n          flag |= ON_CURVE$1;\n        }\n\n        flag = this._encodePoint(x, lastX, xPoints, flag, X_SHORT_VECTOR$1, SAME_X$1);\n        flag = this._encodePoint(y, lastY, yPoints, flag, Y_SHORT_VECTOR$1, SAME_Y$1);\n\n        if (flag === lastFlag && same < 255) {\n          flags[flags.length - 1] |= REPEAT$1;\n          same++;\n        } else {\n          if (same > 0) {\n            flags.push(same);\n            same = 0;\n          }\n\n          flags.push(flag);\n          lastFlag = flag;\n        }\n\n        lastX = x;\n        lastY = y;\n        pointCount++;\n      }\n\n      if (c.command === 'closePath') {\n        endPtsOfContours.push(pointCount - 1);\n      }\n    } // Close the path if the last command didn't already\n\n\n    if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== 'closePath') {\n      endPtsOfContours.push(pointCount - 1);\n    }\n\n    var bbox = path.bbox;\n    var glyf = {\n      numberOfContours: endPtsOfContours.length,\n      xMin: bbox.minX,\n      yMin: bbox.minY,\n      xMax: bbox.maxX,\n      yMax: bbox.maxY,\n      endPtsOfContours: endPtsOfContours,\n      instructions: instructions,\n      flags: flags,\n      xPoints: xPoints,\n      yPoints: yPoints\n    };\n    var size = Glyf.size(glyf);\n    var tail = 4 - size % 4;\n    var stream = new r.EncodeStream(size + tail);\n    Glyf.encode(stream, glyf); // Align to 4-byte length\n\n    if (tail !== 0) {\n      stream.fill(0, tail);\n    }\n\n    return stream.buffer;\n  }\n\n  _encodePoint(value, last, points, flag, shortFlag, sameFlag) {\n    var diff = value - last;\n\n    if (value === last) {\n      flag |= sameFlag;\n    } else {\n      if (-255 <= diff && diff <= 255) {\n        flag |= shortFlag;\n\n        if (diff < 0) {\n          diff = -diff;\n        } else {\n          flag |= sameFlag;\n        }\n      }\n\n      points.push(diff);\n    }\n\n    return flag;\n  }\n\n}\n\nclass TTFSubset extends Subset {\n  constructor(font) {\n    super(font);\n    this.glyphEncoder = new TTFGlyphEncoder();\n  }\n\n  _addGlyph(gid) {\n    var glyph = this.font.getGlyph(gid);\n\n    var glyf = glyph._decode(); // get the offset to the glyph from the loca table\n\n\n    var curOffset = this.font.loca.offsets[gid];\n    var nextOffset = this.font.loca.offsets[gid + 1];\n\n    var stream = this.font._getTableStream('glyf');\n\n    stream.pos += curOffset;\n    var buffer = stream.readBuffer(nextOffset - curOffset); // if it is a compound glyph, include its components\n\n    if (glyf && glyf.numberOfContours < 0) {\n      buffer = Buffer.from(buffer);\n\n      for (var component of glyf.components) {\n        gid = this.includeGlyph(component.glyphID);\n        buffer.writeUInt16BE(gid, component.pos);\n      }\n    } else if (glyf && this.font._variationProcessor) {\n      // If this is a TrueType variation glyph, re-encode the path\n      buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);\n    }\n\n    this.glyf.push(buffer);\n    this.loca.offsets.push(this.offset);\n    this.hmtx.metrics.push({\n      advance: glyph.advanceWidth,\n      bearing: glyph._getMetrics().leftBearing\n    });\n    this.offset += buffer.length;\n    return this.glyf.length - 1;\n  }\n\n  encode(stream) {\n    // tables required by PDF spec:\n    //   head, hhea, loca, maxp, cvt , prep, glyf, hmtx, fpgm\n    //\n    // additional tables required for standalone fonts:\n    //   name, cmap, OS/2, post\n    this.glyf = [];\n    this.offset = 0;\n    this.loca = {\n      offsets: [],\n      version: this.font.loca.version\n    };\n    this.hmtx = {\n      metrics: [],\n      bearings: []\n    }; // include all the glyphs\n    // not using a for loop because we need to support adding more\n    // glyphs to the array as we go, and CoffeeScript caches the length.\n\n    var i = 0;\n\n    while (i < this.glyphs.length) {\n      this._addGlyph(this.glyphs[i++]);\n    }\n\n    var maxp = cloneDeep(this.font.maxp);\n    maxp.numGlyphs = this.glyf.length;\n    this.loca.offsets.push(this.offset);\n    var head = cloneDeep(this.font.head);\n    head.indexToLocFormat = this.loca.version;\n    var hhea = cloneDeep(this.font.hhea);\n    hhea.numberOfMetrics = this.hmtx.metrics.length; // map = []\n    // for index in [0...256]\n    //     if index < @numGlyphs\n    //         map[index] = index\n    //     else\n    //         map[index] = 0\n    //\n    // cmapTable =\n    //     version: 0\n    //     length: 262\n    //     language: 0\n    //     codeMap: map\n    //\n    // cmap =\n    //     version: 0\n    //     numSubtables: 1\n    //     tables: [\n    //         platformID: 1\n    //         encodingID: 0\n    //         table: cmapTable\n    //     ]\n    // TODO: subset prep, cvt, fpgm?\n\n    Directory.encode(stream, {\n      tables: {\n        head,\n        hhea,\n        loca: this.loca,\n        maxp,\n        'cvt ': this.font['cvt '],\n        prep: this.font.prep,\n        glyf: this.glyf,\n        hmtx: this.hmtx,\n        fpgm: this.font.fpgm // name: clone @font.name\n        // 'OS/2': clone @font['OS/2']\n        // post: clone @font.post\n        // cmap: cmap\n\n      }\n    });\n  }\n\n}\n\nclass CFFSubset extends Subset {\n  constructor(font) {\n    super(font);\n    this.cff = this.font['CFF '];\n\n    if (!this.cff) {\n      throw new Error('Not a CFF Font');\n    }\n  }\n\n  subsetCharstrings() {\n    this.charstrings = [];\n    var gsubrs = {};\n\n    for (var gid of this.glyphs) {\n      this.charstrings.push(this.cff.getCharString(gid));\n      var glyph = this.font.getGlyph(gid);\n      var path = glyph.path; // this causes the glyph to be parsed\n\n      for (var subr in glyph._usedGsubrs) {\n        gsubrs[subr] = true;\n      }\n    }\n\n    this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);\n  }\n\n  subsetSubrs(subrs, used) {\n    var res = [];\n\n    for (var i = 0; i < subrs.length; i++) {\n      var subr = subrs[i];\n\n      if (used[i]) {\n        this.cff.stream.pos = subr.offset;\n        res.push(this.cff.stream.readBuffer(subr.length));\n      } else {\n        res.push(Buffer.from([11])); // return\n      }\n    }\n\n    return res;\n  }\n\n  subsetFontdict(topDict) {\n    topDict.FDArray = [];\n    topDict.FDSelect = {\n      version: 0,\n      fds: []\n    };\n    var used_fds = {};\n    var used_subrs = [];\n    var fd_select = {};\n\n    for (var gid of this.glyphs) {\n      var fd = this.cff.fdForGlyph(gid);\n\n      if (fd == null) {\n        continue;\n      }\n\n      if (!used_fds[fd]) {\n        topDict.FDArray.push(Object.assign({}, this.cff.topDict.FDArray[fd]));\n        used_subrs.push({});\n        fd_select[fd] = topDict.FDArray.length - 1;\n      }\n\n      used_fds[fd] = true;\n      topDict.FDSelect.fds.push(fd_select[fd]);\n      var glyph = this.font.getGlyph(gid);\n      var path = glyph.path; // this causes the glyph to be parsed\n\n      for (var subr in glyph._usedSubrs) {\n        used_subrs[fd_select[fd]][subr] = true;\n      }\n    }\n\n    for (var i = 0; i < topDict.FDArray.length; i++) {\n      var dict = topDict.FDArray[i];\n      delete dict.FontName;\n\n      if (dict.Private && dict.Private.Subrs) {\n        dict.Private = Object.assign({}, dict.Private);\n        dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i]);\n      }\n    }\n\n    return;\n  }\n\n  createCIDFontdict(topDict) {\n    var used_subrs = {};\n\n    for (var gid of this.glyphs) {\n      var glyph = this.font.getGlyph(gid);\n      var path = glyph.path; // this causes the glyph to be parsed\n\n      for (var subr in glyph._usedSubrs) {\n        used_subrs[subr] = true;\n      }\n    }\n\n    var privateDict = Object.assign({}, this.cff.topDict.Private);\n\n    if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs) {\n      privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);\n    }\n\n    topDict.FDArray = [{\n      Private: privateDict\n    }];\n    return topDict.FDSelect = {\n      version: 3,\n      nRanges: 1,\n      ranges: [{\n        first: 0,\n        fd: 0\n      }],\n      sentinel: this.charstrings.length\n    };\n  }\n\n  addString(string) {\n    if (!string) {\n      return null;\n    }\n\n    if (!this.strings) {\n      this.strings = [];\n    }\n\n    this.strings.push(string);\n    return standardStrings.length + this.strings.length - 1;\n  }\n\n  encode(stream) {\n    this.subsetCharstrings();\n    var charset = {\n      version: this.charstrings.length > 255 ? 2 : 1,\n      ranges: [{\n        first: 1,\n        nLeft: this.charstrings.length - 2\n      }]\n    };\n    var topDict = Object.assign({}, this.cff.topDict);\n    topDict.Private = null;\n    topDict.charset = charset;\n    topDict.Encoding = null;\n    topDict.CharStrings = this.charstrings;\n\n    for (var key of ['version', 'Notice', 'Copyright', 'FullName', 'FamilyName', 'Weight', 'PostScript', 'BaseFontName', 'FontName']) {\n      topDict[key] = this.addString(this.cff.string(topDict[key]));\n    }\n\n    topDict.ROS = [this.addString('Adobe'), this.addString('Identity'), 0];\n    topDict.CIDCount = this.charstrings.length;\n\n    if (this.cff.isCIDFont) {\n      this.subsetFontdict(topDict);\n    } else {\n      this.createCIDFontdict(topDict);\n    }\n\n    var top = {\n      version: 1,\n      hdrSize: this.cff.hdrSize,\n      offSize: 4,\n      header: this.cff.header,\n      nameIndex: [this.cff.postscriptName],\n      topDictIndex: [topDict],\n      stringIndex: this.strings,\n      globalSubrIndex: this.gsubrs\n    };\n    CFFTop.encode(stream, top);\n  }\n\n}\n\nvar _class$4;\n/**\r\n * This is the base class for all SFNT-based font formats in fontkit.\r\n * It supports TrueType, and PostScript glyphs, and several color glyph formats.\r\n */\n\nvar TTFFont = (_class$4 = class TTFFont {\n  static probe(buffer) {\n    var format = buffer.toString('ascii', 0, 4);\n    return format === 'true' || format === 'OTTO' || format === String.fromCharCode(0, 1, 0, 0);\n  }\n\n  constructor(stream, variationCoords = null) {\n    this.defaultLanguage = null;\n    this.stream = stream;\n    this.variationCoords = variationCoords;\n    this._directoryPos = this.stream.pos;\n    this._tables = {};\n    this._glyphs = {};\n\n    this._decodeDirectory(); // define properties for each table to lazily parse\n\n\n    for (var tag in this.directory.tables) {\n      var table = this.directory.tables[tag];\n\n      if (tables[tag] && table.length > 0) {\n        Object.defineProperty(this, tag, {\n          get: this._getTable.bind(this, table)\n        });\n      }\n    }\n  }\n\n  setDefaultLanguage(lang = null) {\n    this.defaultLanguage = lang;\n  }\n\n  _getTable(table) {\n    if (!(table.tag in this._tables)) {\n      try {\n        this._tables[table.tag] = this._decodeTable(table);\n      } catch (e) {\n        if (fontkit.logErrors) {\n          console.error(\"Error decoding table \".concat(table.tag));\n          console.error(e.stack);\n        }\n      }\n    }\n\n    return this._tables[table.tag];\n  }\n\n  _getTableStream(tag) {\n    var table = this.directory.tables[tag];\n\n    if (table) {\n      this.stream.pos = table.offset;\n      return this.stream;\n    }\n\n    return null;\n  }\n\n  _decodeDirectory() {\n    return this.directory = Directory.decode(this.stream, {\n      _startOffset: 0\n    });\n  }\n\n  _decodeTable(table) {\n    var pos = this.stream.pos;\n\n    var stream = this._getTableStream(table.tag);\n\n    var result = tables[table.tag].decode(stream, this, table.length);\n    this.stream.pos = pos;\n    return result;\n  }\n  /**\r\n   * Gets a string from the font's `name` table\r\n   * `lang` is a BCP-47 language code.\r\n   * @return {string}\r\n   */\n\n\n  getName(key, lang = this.defaultLanguage || fontkit.defaultLanguage) {\n    var record = this.name && this.name.records[key];\n\n    if (record) {\n      // Attempt to retrieve the entry, depending on which translation is available:\n      return record[lang] || record[this.defaultLanguage] || record[fontkit.defaultLanguage] || record['en'] || record[Object.keys(record)[0]] // Seriously, ANY language would be fine\n      || null;\n    }\n\n    return null;\n  }\n  /**\r\n   * The unique PostScript name for this font, e.g. \"Helvetica-Bold\"\r\n   * @type {string}\r\n   */\n\n\n  get postscriptName() {\n    return this.getName('postscriptName');\n  }\n  /**\r\n   * The font's full name, e.g. \"Helvetica Bold\"\r\n   * @type {string}\r\n   */\n\n\n  get fullName() {\n    return this.getName('fullName');\n  }\n  /**\r\n   * The font's family name, e.g. \"Helvetica\"\r\n   * @type {string}\r\n   */\n\n\n  get familyName() {\n    return this.getName('fontFamily');\n  }\n  /**\r\n   * The font's sub-family, e.g. \"Bold\".\r\n   * @type {string}\r\n   */\n\n\n  get subfamilyName() {\n    return this.getName('fontSubfamily');\n  }\n  /**\r\n   * The font's copyright information\r\n   * @type {string}\r\n   */\n\n\n  get copyright() {\n    return this.getName('copyright');\n  }\n  /**\r\n   * The font's version number\r\n   * @type {string}\r\n   */\n\n\n  get version() {\n    return this.getName('version');\n  }\n  /**\r\n   * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))\r\n   * @type {number}\r\n   */\n\n\n  get ascent() {\n    return this.hhea.ascent;\n  }\n  /**\r\n   * The font’s [descender](https://en.wikipedia.org/wiki/Descender)\r\n   * @type {number}\r\n   */\n\n\n  get descent() {\n    return this.hhea.descent;\n  }\n  /**\r\n   * The amount of space that should be included between lines\r\n   * @type {number}\r\n   */\n\n\n  get lineGap() {\n    return this.hhea.lineGap;\n  }\n  /**\r\n   * The offset from the normal underline position that should be used\r\n   * @type {number}\r\n   */\n\n\n  get underlinePosition() {\n    return this.post.underlinePosition;\n  }\n  /**\r\n   * The weight of the underline that should be used\r\n   * @type {number}\r\n   */\n\n\n  get underlineThickness() {\n    return this.post.underlineThickness;\n  }\n  /**\r\n   * If this is an italic font, the angle the cursor should be drawn at to match the font design\r\n   * @type {number}\r\n   */\n\n\n  get italicAngle() {\n    return this.post.italicAngle;\n  }\n  /**\r\n   * The height of capital letters above the baseline.\r\n   * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.\r\n   * @type {number}\r\n   */\n\n\n  get capHeight() {\n    var os2 = this['OS/2'];\n    return os2 ? os2.capHeight : this.ascent;\n  }\n  /**\r\n   * The height of lower case letters in the font.\r\n   * See [here](https://en.wikipedia.org/wiki/X-height) for more details.\r\n   * @type {number}\r\n   */\n\n\n  get xHeight() {\n    var os2 = this['OS/2'];\n    return os2 ? os2.xHeight : 0;\n  }\n  /**\r\n   * The number of glyphs in the font.\r\n   * @type {number}\r\n   */\n\n\n  get numGlyphs() {\n    return this.maxp.numGlyphs;\n  }\n  /**\r\n   * The size of the font’s internal coordinate grid\r\n   * @type {number}\r\n   */\n\n\n  get unitsPerEm() {\n    return this.head.unitsPerEm;\n  }\n  /**\r\n   * The font’s bounding box, i.e. the box that encloses all glyphs in the font.\r\n   * @type {BBox}\r\n   */\n\n\n  get bbox() {\n    return Object.freeze(new BBox(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));\n  }\n\n  get _cmapProcessor() {\n    return new CmapProcessor(this.cmap);\n  }\n  /**\r\n   * An array of all of the unicode code points supported by the font.\r\n   * @type {number[]}\r\n   */\n\n\n  get characterSet() {\n    return this._cmapProcessor.getCharacterSet();\n  }\n  /**\r\n   * Returns whether there is glyph in the font for the given unicode code point.\r\n   *\r\n   * @param {number} codePoint\r\n   * @return {boolean}\r\n   */\n\n\n  hasGlyphForCodePoint(codePoint) {\n    return !!this._cmapProcessor.lookup(codePoint);\n  }\n  /**\r\n   * Maps a single unicode code point to a Glyph object.\r\n   * Does not perform any advanced substitutions (there is no context to do so).\r\n   *\r\n   * @param {number} codePoint\r\n   * @return {Glyph}\r\n   */\n\n\n  glyphForCodePoint(codePoint) {\n    return this.getGlyph(this._cmapProcessor.lookup(codePoint), [codePoint]);\n  }\n  /**\r\n   * Returns an array of Glyph objects for the given string.\r\n   * This is only a one-to-one mapping from characters to glyphs.\r\n   * For most uses, you should use font.layout (described below), which\r\n   * provides a much more advanced mapping supporting AAT and OpenType shaping.\r\n   *\r\n   * @param {string} string\r\n   * @return {Glyph[]}\r\n   */\n\n\n  glyphsForString(string) {\n    var glyphs = [];\n    var len = string.length;\n    var idx = 0;\n    var last = -1;\n    var state = -1;\n\n    while (idx <= len) {\n      var code = 0;\n      var nextState = 0;\n\n      if (idx < len) {\n        // Decode the next codepoint from UTF 16\n        code = string.charCodeAt(idx++);\n\n        if (0xd800 <= code && code <= 0xdbff && idx < len) {\n          var next = string.charCodeAt(idx);\n\n          if (0xdc00 <= next && next <= 0xdfff) {\n            idx++;\n            code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;\n          }\n        } // Compute the next state: 1 if the next codepoint is a variation selector, 0 otherwise.\n\n\n        nextState = 0xfe00 <= code && code <= 0xfe0f || 0xe0100 <= code && code <= 0xe01ef ? 1 : 0;\n      } else {\n        idx++;\n      }\n\n      if (state === 0 && nextState === 1) {\n        // Variation selector following normal codepoint.\n        glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [last, code]));\n      } else if (state === 0 && nextState === 0) {\n        // Normal codepoint following normal codepoint.\n        glyphs.push(this.glyphForCodePoint(last));\n      }\n\n      last = code;\n      state = nextState;\n    }\n\n    return glyphs;\n  }\n\n  get _layoutEngine() {\n    return new LayoutEngine(this);\n  }\n  /**\r\n   * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.\r\n   *\r\n   * @param {string} string\r\n   * @param {string[]} [userFeatures]\r\n   * @param {string} [script]\r\n   * @param {string} [language]\r\n   * @param {string} [direction]\r\n   * @return {GlyphRun}\r\n   */\n\n\n  layout(string, userFeatures, script, language, direction) {\n    return this._layoutEngine.layout(string, userFeatures, script, language, direction);\n  }\n  /**\r\n   * Returns an array of strings that map to the given glyph id.\r\n   * @param {number} gid - glyph id\r\n   */\n\n\n  stringsForGlyph(gid) {\n    return this._layoutEngine.stringsForGlyph(gid);\n  }\n  /**\r\n   * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)\r\n   * (or mapped AAT tags) supported by the font.\r\n   * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.\r\n   * If this is an AAT font, the OpenType feature tags are mapped to AAT features.\r\n   *\r\n   * @type {string[]}\r\n   */\n\n\n  get availableFeatures() {\n    return this._layoutEngine.getAvailableFeatures();\n  }\n\n  getAvailableFeatures(script, language) {\n    return this._layoutEngine.getAvailableFeatures(script, language);\n  }\n\n  _getBaseGlyph(glyph, characters = []) {\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.glyf) {\n        this._glyphs[glyph] = new TTFGlyph(glyph, characters, this);\n      } else if (this.directory.tables['CFF '] || this.directory.tables.CFF2) {\n        this._glyphs[glyph] = new CFFGlyph(glyph, characters, this);\n      }\n    }\n\n    return this._glyphs[glyph] || null;\n  }\n  /**\r\n   * Returns a glyph object for the given glyph id.\r\n   * You can pass the array of code points this glyph represents for\r\n   * your use later, and it will be stored in the glyph object.\r\n   *\r\n   * @param {number} glyph\r\n   * @param {number[]} characters\r\n   * @return {Glyph}\r\n   */\n\n\n  getGlyph(glyph, characters = []) {\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.sbix) {\n        this._glyphs[glyph] = new SBIXGlyph(glyph, characters, this);\n      } else if (this.directory.tables.COLR && this.directory.tables.CPAL) {\n        this._glyphs[glyph] = new COLRGlyph(glyph, characters, this);\n      } else {\n        this._getBaseGlyph(glyph, characters);\n      }\n    }\n\n    return this._glyphs[glyph] || null;\n  }\n  /**\r\n   * Returns a Subset for this font.\r\n   * @return {Subset}\r\n   */\n\n\n  createSubset() {\n    if (this.directory.tables['CFF ']) {\n      return new CFFSubset(this);\n    }\n\n    return new TTFSubset(this);\n  }\n  /**\r\n   * Returns an object describing the available variation axes\r\n   * that this font supports. Keys are setting tags, and values\r\n   * contain the axis name, range, and default value.\r\n   *\r\n   * @type {object}\r\n   */\n\n\n  get variationAxes() {\n    var res = {};\n\n    if (!this.fvar) {\n      return res;\n    }\n\n    for (var axis of this.fvar.axis) {\n      res[axis.axisTag.trim()] = {\n        name: axis.name.en,\n        min: axis.minValue,\n        default: axis.defaultValue,\n        max: axis.maxValue\n      };\n    }\n\n    return res;\n  }\n  /**\r\n   * Returns an object describing the named variation instances\r\n   * that the font designer has specified. Keys are variation names\r\n   * and values are the variation settings for this instance.\r\n   *\r\n   * @type {object}\r\n   */\n\n\n  get namedVariations() {\n    var res = {};\n\n    if (!this.fvar) {\n      return res;\n    }\n\n    for (var instance of this.fvar.instance) {\n      var settings = {};\n\n      for (var i = 0; i < this.fvar.axis.length; i++) {\n        var axis = this.fvar.axis[i];\n        settings[axis.axisTag.trim()] = instance.coord[i];\n      }\n\n      res[instance.name.en] = settings;\n    }\n\n    return res;\n  }\n  /**\r\n   * Returns a new font with the given variation settings applied.\r\n   * Settings can either be an instance name, or an object containing\r\n   * variation tags as specified by the `variationAxes` property.\r\n   *\r\n   * @param {object} settings\r\n   * @return {TTFFont}\r\n   */\n\n\n  getVariation(settings) {\n    if (!(this.directory.tables.fvar && (this.directory.tables.gvar && this.directory.tables.glyf || this.directory.tables.CFF2))) {\n      throw new Error('Variations require a font with the fvar, gvar and glyf, or CFF2 tables.');\n    }\n\n    if (typeof settings === 'string') {\n      settings = this.namedVariations[settings];\n    }\n\n    if (typeof settings !== 'object') {\n      throw new Error('Variation settings must be either a variation name or settings object.');\n    } // normalize the coordinates\n\n\n    var coords = this.fvar.axis.map((axis, i) => {\n      var axisTag = axis.axisTag.trim();\n\n      if (axisTag in settings) {\n        return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));\n      } else {\n        return axis.defaultValue;\n      }\n    });\n    var stream = new r.DecodeStream(this.stream.buffer);\n    stream.pos = this._directoryPos;\n    var font = new TTFFont(stream, coords);\n    font._tables = this._tables;\n    return font;\n  }\n\n  get _variationProcessor() {\n    if (!this.fvar) {\n      return null;\n    }\n\n    var variationCoords = this.variationCoords; // Ignore if no variation coords and not CFF2\n\n    if (!variationCoords && !this.CFF2) {\n      return null;\n    }\n\n    if (!variationCoords) {\n      variationCoords = this.fvar.axis.map(axis => axis.defaultValue);\n    }\n\n    return new GlyphVariationProcessor(this, variationCoords);\n  } // Standardized format plugin API\n\n\n  getFont(name) {\n    return this.getVariation(name);\n  }\n\n}, (_applyDecoratedDescriptor(_class$4.prototype, \"bbox\", [cache], Object.getOwnPropertyDescriptor(_class$4.prototype, \"bbox\"), _class$4.prototype), _applyDecoratedDescriptor(_class$4.prototype, \"_cmapProcessor\", [cache], Object.getOwnPropertyDescriptor(_class$4.prototype, \"_cmapProcessor\"), _class$4.prototype), _applyDecoratedDescriptor(_class$4.prototype, \"characterSet\", [cache], Object.getOwnPropertyDescriptor(_class$4.prototype, \"characterSet\"), _class$4.prototype), _applyDecoratedDescriptor(_class$4.prototype, \"_layoutEngine\", [cache], Object.getOwnPropertyDescriptor(_class$4.prototype, \"_layoutEngine\"), _class$4.prototype), _applyDecoratedDescriptor(_class$4.prototype, \"variationAxes\", [cache], Object.getOwnPropertyDescriptor(_class$4.prototype, \"variationAxes\"), _class$4.prototype), _applyDecoratedDescriptor(_class$4.prototype, \"namedVariations\", [cache], Object.getOwnPropertyDescriptor(_class$4.prototype, \"namedVariations\"), _class$4.prototype), _applyDecoratedDescriptor(_class$4.prototype, \"_variationProcessor\", [cache], Object.getOwnPropertyDescriptor(_class$4.prototype, \"_variationProcessor\"), _class$4.prototype)), _class$4);\n\nvar WOFFDirectoryEntry = new r.Struct({\n  tag: new r.String(4),\n  offset: new r.Pointer(r.uint32, 'void', {\n    type: 'global'\n  }),\n  compLength: r.uint32,\n  length: r.uint32,\n  origChecksum: r.uint32\n});\nvar WOFFDirectory = new r.Struct({\n  tag: new r.String(4),\n  // should be 'wOFF'\n  flavor: r.uint32,\n  length: r.uint32,\n  numTables: r.uint16,\n  reserved: new r.Reserved(r.uint16),\n  totalSfntSize: r.uint32,\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  metaOffset: r.uint32,\n  metaLength: r.uint32,\n  metaOrigLength: r.uint32,\n  privOffset: r.uint32,\n  privLength: r.uint32,\n  tables: new r.Array(WOFFDirectoryEntry, 'numTables')\n});\n\nWOFFDirectory.process = function () {\n  var tables = {};\n\n  for (var table of this.tables) {\n    tables[table.tag] = table;\n  }\n\n  this.tables = tables;\n};\n\nclass WOFFFont extends TTFFont {\n  static probe(buffer) {\n    return buffer.toString('ascii', 0, 4) === 'wOFF';\n  }\n\n  _decodeDirectory() {\n    this.directory = WOFFDirectory.decode(this.stream, {\n      _startOffset: 0\n    });\n  }\n\n  _getTableStream(tag) {\n    var table = this.directory.tables[tag];\n\n    if (table) {\n      this.stream.pos = table.offset;\n\n      if (table.compLength < table.length) {\n        this.stream.pos += 2; // skip deflate header\n\n        var outBuffer = Buffer.alloc(table.length);\n        var buf = inflate(this.stream.readBuffer(table.compLength - 2), outBuffer);\n        return new r.DecodeStream(buf);\n      } else {\n        return this.stream;\n      }\n    }\n\n    return null;\n  }\n\n}\n\n/**\r\n * Represents a TrueType glyph in the WOFF2 format, which compresses glyphs differently.\r\n */\n\nclass WOFF2Glyph extends TTFGlyph {\n  _decode() {\n    // We have to decode in advance (in WOFF2Font), so just return the pre-decoded data.\n    return this._font._transformedGlyphs[this.id];\n  }\n\n  _getCBox() {\n    return this.path.bbox;\n  }\n\n}\n\nvar Base128 = {\n  decode(stream) {\n    var result = 0;\n    var iterable = [0, 1, 2, 3, 4];\n\n    for (var j = 0; j < iterable.length; j++) {\n      var code = stream.readUInt8(); // If any of the top seven bits are set then we're about to overflow.\n\n      if (result & 0xe0000000) {\n        throw new Error('Overflow');\n      }\n\n      result = result << 7 | code & 0x7f;\n\n      if ((code & 0x80) === 0) {\n        return result;\n      }\n    }\n\n    throw new Error('Bad base 128 number');\n  }\n\n};\nvar knownTags = ['cmap', 'head', 'hhea', 'hmtx', 'maxp', 'name', 'OS/2', 'post', 'cvt ', 'fpgm', 'glyf', 'loca', 'prep', 'CFF ', 'VORG', 'EBDT', 'EBLC', 'gasp', 'hdmx', 'kern', 'LTSH', 'PCLT', 'VDMX', 'vhea', 'vmtx', 'BASE', 'GDEF', 'GPOS', 'GSUB', 'EBSC', 'JSTF', 'MATH', 'CBDT', 'CBLC', 'COLR', 'CPAL', 'SVG ', 'sbix', 'acnt', 'avar', 'bdat', 'bloc', 'bsln', 'cvar', 'fdsc', 'feat', 'fmtx', 'fvar', 'gvar', 'hsty', 'just', 'lcar', 'mort', 'morx', 'opbd', 'prop', 'trak', 'Zapf', 'Silf', 'Glat', 'Gloc', 'Feat', 'Sill'];\nvar WOFF2DirectoryEntry = new r.Struct({\n  flags: r.uint8,\n  customTag: new r.Optional(new r.String(4), t => (t.flags & 0x3f) === 0x3f),\n  tag: t => t.customTag || knownTags[t.flags & 0x3f],\n  // || (() => { throw new Error(`Bad tag: ${flags & 0x3f}`); })(); },\n  length: Base128,\n  transformVersion: t => t.flags >>> 6 & 0x03,\n  transformed: t => t.tag === 'glyf' || t.tag === 'loca' ? t.transformVersion === 0 : t.transformVersion !== 0,\n  transformLength: new r.Optional(Base128, t => t.transformed)\n});\nvar WOFF2Directory = new r.Struct({\n  tag: new r.String(4),\n  // should be 'wOF2'\n  flavor: r.uint32,\n  length: r.uint32,\n  numTables: r.uint16,\n  reserved: new r.Reserved(r.uint16),\n  totalSfntSize: r.uint32,\n  totalCompressedSize: r.uint32,\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  metaOffset: r.uint32,\n  metaLength: r.uint32,\n  metaOrigLength: r.uint32,\n  privOffset: r.uint32,\n  privLength: r.uint32,\n  tables: new r.Array(WOFF2DirectoryEntry, 'numTables')\n});\n\nWOFF2Directory.process = function () {\n  var tables = {};\n\n  for (var i = 0; i < this.tables.length; i++) {\n    var table = this.tables[i];\n    tables[table.tag] = table;\n  }\n\n  return this.tables = tables;\n};\n\n/**\r\n * Subclass of TTFFont that represents a TTF/OTF font compressed by WOFF2\r\n * See spec here: http://www.w3.org/TR/WOFF2/\r\n */\n\nclass WOFF2Font extends TTFFont {\n  static probe(buffer) {\n    return buffer.toString('ascii', 0, 4) === 'wOF2';\n  }\n\n  _decodeDirectory() {\n    this.directory = WOFF2Directory.decode(this.stream);\n    this._dataPos = this.stream.pos;\n  }\n\n  _decompress() {\n    // decompress data and setup table offsets if we haven't already\n    if (!this._decompressed) {\n      this.stream.pos = this._dataPos;\n      var buffer = this.stream.readBuffer(this.directory.totalCompressedSize);\n      var decompressedSize = 0;\n\n      for (var tag in this.directory.tables) {\n        var entry = this.directory.tables[tag];\n        entry.offset = decompressedSize;\n        decompressedSize += entry.transformLength != null ? entry.transformLength : entry.length;\n      }\n\n      var decompressed = brotli(buffer, decompressedSize);\n\n      if (!decompressed) {\n        throw new Error('Error decoding compressed data in WOFF2');\n      }\n\n      this.stream = new r.DecodeStream(Buffer.from(decompressed));\n      this._decompressed = true;\n    }\n  }\n\n  _decodeTable(table) {\n    this._decompress();\n\n    return super._decodeTable(table);\n  } // Override this method to get a glyph and return our\n  // custom subclass if there is a glyf table.\n\n\n  _getBaseGlyph(glyph, characters = []) {\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.glyf && this.directory.tables.glyf.transformed) {\n        if (!this._transformedGlyphs) {\n          this._transformGlyfTable();\n        }\n\n        return this._glyphs[glyph] = new WOFF2Glyph(glyph, characters, this);\n      } else {\n        return super._getBaseGlyph(glyph, characters);\n      }\n    }\n  }\n\n  _transformGlyfTable() {\n    this._decompress();\n\n    this.stream.pos = this.directory.tables.glyf.offset;\n    var table = GlyfTable.decode(this.stream);\n    var glyphs = [];\n\n    for (var index = 0; index < table.numGlyphs; index++) {\n      var glyph = {};\n      var nContours = table.nContours.readInt16BE();\n      glyph.numberOfContours = nContours;\n\n      if (nContours > 0) {\n        // simple glyph\n        var nPoints = [];\n        var totalPoints = 0;\n\n        for (var i = 0; i < nContours; i++) {\n          var _r = read255UInt16(table.nPoints);\n\n          totalPoints += _r;\n          nPoints.push(totalPoints);\n        }\n\n        glyph.points = decodeTriplet(table.flags, table.glyphs, totalPoints);\n\n        for (var _i = 0; _i < nContours; _i++) {\n          glyph.points[nPoints[_i] - 1].endContour = true;\n        }\n\n        var instructionSize = read255UInt16(table.glyphs);\n      } else if (nContours < 0) {\n        // composite glyph\n        var haveInstructions = TTFGlyph.prototype._decodeComposite.call({\n          _font: this\n        }, glyph, table.composites);\n\n        if (haveInstructions) {\n          var instructionSize = read255UInt16(table.glyphs);\n        }\n      }\n\n      glyphs.push(glyph);\n    }\n\n    this._transformedGlyphs = glyphs;\n  }\n\n} // Special class that accepts a length and returns a sub-stream for that data\n\nclass Substream {\n  constructor(length) {\n    this.length = length;\n    this._buf = new r.Buffer(length);\n  }\n\n  decode(stream, parent) {\n    return new r.DecodeStream(this._buf.decode(stream, parent));\n  }\n\n} // This struct represents the entire glyf table\n\n\nvar GlyfTable = new r.Struct({\n  version: r.uint32,\n  numGlyphs: r.uint16,\n  indexFormat: r.uint16,\n  nContourStreamSize: r.uint32,\n  nPointsStreamSize: r.uint32,\n  flagStreamSize: r.uint32,\n  glyphStreamSize: r.uint32,\n  compositeStreamSize: r.uint32,\n  bboxStreamSize: r.uint32,\n  instructionStreamSize: r.uint32,\n  nContours: new Substream('nContourStreamSize'),\n  nPoints: new Substream('nPointsStreamSize'),\n  flags: new Substream('flagStreamSize'),\n  glyphs: new Substream('glyphStreamSize'),\n  composites: new Substream('compositeStreamSize'),\n  bboxes: new Substream('bboxStreamSize'),\n  instructions: new Substream('instructionStreamSize')\n});\nvar WORD_CODE = 253;\nvar ONE_MORE_BYTE_CODE2 = 254;\nvar ONE_MORE_BYTE_CODE1 = 255;\nvar LOWEST_U_CODE = 253;\n\nfunction read255UInt16(stream) {\n  var code = stream.readUInt8();\n\n  if (code === WORD_CODE) {\n    return stream.readUInt16BE();\n  }\n\n  if (code === ONE_MORE_BYTE_CODE1) {\n    return stream.readUInt8() + LOWEST_U_CODE;\n  }\n\n  if (code === ONE_MORE_BYTE_CODE2) {\n    return stream.readUInt8() + LOWEST_U_CODE * 2;\n  }\n\n  return code;\n}\n\nfunction withSign(flag, baseval) {\n  return flag & 1 ? baseval : -baseval;\n}\n\nfunction decodeTriplet(flags, glyphs, nPoints) {\n  var y;\n  var x = y = 0;\n  var res = [];\n\n  for (var i = 0; i < nPoints; i++) {\n    var dx = 0,\n        dy = 0;\n    var flag = flags.readUInt8();\n    var onCurve = !(flag >> 7);\n    flag &= 0x7f;\n\n    if (flag < 10) {\n      dx = 0;\n      dy = withSign(flag, ((flag & 14) << 7) + glyphs.readUInt8());\n    } else if (flag < 20) {\n      dx = withSign(flag, ((flag - 10 & 14) << 7) + glyphs.readUInt8());\n      dy = 0;\n    } else if (flag < 84) {\n      var b0 = flag - 20;\n      var b1 = glyphs.readUInt8();\n      dx = withSign(flag, 1 + (b0 & 0x30) + (b1 >> 4));\n      dy = withSign(flag >> 1, 1 + ((b0 & 0x0c) << 2) + (b1 & 0x0f));\n    } else if (flag < 120) {\n      var b0 = flag - 84;\n      dx = withSign(flag, 1 + (b0 / 12 << 8) + glyphs.readUInt8());\n      dy = withSign(flag >> 1, 1 + (b0 % 12 >> 2 << 8) + glyphs.readUInt8());\n    } else if (flag < 124) {\n      var b1 = glyphs.readUInt8();\n      var b2 = glyphs.readUInt8();\n      dx = withSign(flag, (b1 << 4) + (b2 >> 4));\n      dy = withSign(flag >> 1, ((b2 & 0x0f) << 8) + glyphs.readUInt8());\n    } else {\n      dx = withSign(flag, glyphs.readUInt16BE());\n      dy = withSign(flag >> 1, glyphs.readUInt16BE());\n    }\n\n    x += dx;\n    y += dy;\n    res.push(new Point(onCurve, false, x, y));\n  }\n\n  return res;\n}\n\nvar TTCHeader = new r.VersionedStruct(r.uint32, {\n  0x00010000: {\n    numFonts: r.uint32,\n    offsets: new r.Array(r.uint32, 'numFonts')\n  },\n  0x00020000: {\n    numFonts: r.uint32,\n    offsets: new r.Array(r.uint32, 'numFonts'),\n    dsigTag: r.uint32,\n    dsigLength: r.uint32,\n    dsigOffset: r.uint32\n  }\n});\nclass TrueTypeCollection {\n  static probe(buffer) {\n    return buffer.toString('ascii', 0, 4) === 'ttcf';\n  }\n\n  constructor(stream) {\n    this.stream = stream;\n\n    if (stream.readString(4) !== 'ttcf') {\n      throw new Error('Not a TrueType collection');\n    }\n\n    this.header = TTCHeader.decode(stream);\n  }\n\n  getFont(name) {\n    for (var offset of this.header.offsets) {\n      var stream = new r.DecodeStream(this.stream.buffer);\n      stream.pos = offset;\n      var font = new TTFFont(stream);\n\n      if (font.postscriptName === name) {\n        return font;\n      }\n    }\n\n    return null;\n  }\n\n  get fonts() {\n    var fonts = [];\n\n    for (var offset of this.header.offsets) {\n      var stream = new r.DecodeStream(this.stream.buffer);\n      stream.pos = offset;\n      fonts.push(new TTFFont(stream));\n    }\n\n    return fonts;\n  }\n\n}\n\nvar DFontName = new r.String(r.uint8);\nvar DFontData = new r.Struct({\n  len: r.uint32,\n  buf: new r.Buffer('len')\n});\nvar Ref = new r.Struct({\n  id: r.uint16,\n  nameOffset: r.int16,\n  attr: r.uint8,\n  dataOffset: r.uint24,\n  handle: r.uint32\n});\nvar Type = new r.Struct({\n  name: new r.String(4),\n  maxTypeIndex: r.uint16,\n  refList: new r.Pointer(r.uint16, new r.Array(Ref, t => t.maxTypeIndex + 1), {\n    type: 'parent'\n  })\n});\nvar TypeList = new r.Struct({\n  length: r.uint16,\n  types: new r.Array(Type, t => t.length + 1)\n});\nvar DFontMap = new r.Struct({\n  reserved: new r.Reserved(r.uint8, 24),\n  typeList: new r.Pointer(r.uint16, TypeList),\n  nameListOffset: new r.Pointer(r.uint16, 'void')\n});\nvar DFontHeader = new r.Struct({\n  dataOffset: r.uint32,\n  map: new r.Pointer(r.uint32, DFontMap),\n  dataLength: r.uint32,\n  mapLength: r.uint32\n});\nclass DFont {\n  static probe(buffer) {\n    var stream = new r.DecodeStream(buffer);\n\n    try {\n      var header = DFontHeader.decode(stream);\n    } catch (e) {\n      return false;\n    }\n\n    for (var type of header.map.typeList.types) {\n      if (type.name === 'sfnt') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  constructor(stream) {\n    this.stream = stream;\n    this.header = DFontHeader.decode(this.stream);\n\n    for (var type of this.header.map.typeList.types) {\n      for (var ref of type.refList) {\n        if (ref.nameOffset >= 0) {\n          this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;\n          ref.name = DFontName.decode(this.stream);\n        } else {\n          ref.name = null;\n        }\n      }\n\n      if (type.name === 'sfnt') {\n        this.sfnt = type;\n      }\n    }\n  }\n\n  getFont(name) {\n    if (!this.sfnt) {\n      return null;\n    }\n\n    for (var ref of this.sfnt.refList) {\n      var pos = this.header.dataOffset + ref.dataOffset + 4;\n      var stream = new r.DecodeStream(this.stream.buffer.slice(pos));\n      var font = new TTFFont(stream);\n\n      if (font.postscriptName === name) {\n        return font;\n      }\n    }\n\n    return null;\n  }\n\n  get fonts() {\n    var fonts = [];\n\n    for (var ref of this.sfnt.refList) {\n      var pos = this.header.dataOffset + ref.dataOffset + 4;\n      var stream = new r.DecodeStream(this.stream.buffer.slice(pos));\n      fonts.push(new TTFFont(stream));\n    }\n\n    return fonts;\n  }\n\n}\n\nfontkit.registerFormat(TTFFont);\nfontkit.registerFormat(WOFFFont);\nfontkit.registerFormat(WOFF2Font);\nfontkit.registerFormat(TrueTypeCollection);\nfontkit.registerFormat(DFont);\n\nmodule.exports = fontkit;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/fontkit/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/linebreak/node_modules/base64-js/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@foliojs-fork/linebreak/node_modules/base64-js/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9saW5lYnJlYWsvbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWixrQkFBa0I7QUFDbEIsbUJBQW1CO0FBQ25CLHFCQUFxQjs7QUFFckI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUNBQW1DLFNBQVM7QUFDNUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxTQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsU0FBUztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJDQUEyQyxVQUFVO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9nYXNjYXQvcHJpc21hcXVhbnQvcHJpc21hLXF1YW50dW0vbm9kZV9tb2R1bGVzL0Bmb2xpb2pzLWZvcmsvbGluZWJyZWFrL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/linebreak/node_modules/base64-js/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/linebreak/src/classes.js":
/*!*************************************************************!*\
  !*** ./node_modules/@foliojs-fork/linebreak/src/classes.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("// The following break classes are handled by the pair table\r\nexports.OP = 0;   // Opening punctuation\r\nexports.CL = 1;   // Closing punctuation\r\nexports.CP = 2;   // Closing parenthesis\r\nexports.QU = 3;   // Ambiguous quotation\r\nexports.GL = 4;   // Glue\r\nexports.NS = 5;   // Non-starters\r\nexports.EX = 6;   // Exclamation/Interrogation\r\nexports.SY = 7;   // Symbols allowing break after\r\nexports.IS = 8;   // Infix separator\r\nexports.PR = 9;   // Prefix\r\nexports.PO = 10;  // Postfix\r\nexports.NU = 11;  // Numeric\r\nexports.AL = 12;  // Alphabetic\r\nexports.HL = 13;  // Hebrew Letter\r\nexports.ID = 14;  // Ideographic\r\nexports.IN = 15;  // Inseparable characters\r\nexports.HY = 16;  // Hyphen\r\nexports.BA = 17;  // Break after\r\nexports.BB = 18;  // Break before\r\nexports.B2 = 19;  // Break on either side (but not pair)\r\nexports.ZW = 20;  // Zero-width space\r\nexports.CM = 21;  // Combining marks\r\nexports.WJ = 22;  // Word joiner\r\nexports.H2 = 23;  // Hangul LV\r\nexports.H3 = 24;  // Hangul LVT\r\nexports.JL = 25;  // Hangul L Jamo\r\nexports.JV = 26;  // Hangul V Jamo\r\nexports.JT = 27;  // Hangul T Jamo\r\nexports.RI = 28;  // Regional Indicator\r\nexports.EB = 29;  // Emoji Base\r\nexports.EM = 30;  // Emoji Modifier\r\nexports.ZWJ = 31; // Zero Width Joiner\r\nexports.CB = 32;  // Contingent break\r\n\r\n// The following break classes are not handled by the pair table\r\nexports.AI = 33;  // Ambiguous (Alphabetic or Ideograph)\r\nexports.BK = 34;  // Break (mandatory)\r\nexports.CJ = 35;  // Conditional Japanese Starter\r\nexports.CR = 36;  // Carriage return\r\nexports.LF = 37;  // Line feed\r\nexports.NL = 38;  // Next line\r\nexports.SA = 39;  // South-East Asian\r\nexports.SG = 40;  // Surrogates\r\nexports.SP = 41;  // Space\r\nexports.XX = 42;  // Unknown\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9saW5lYnJlYWsvc3JjL2NsYXNzZXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxVQUFVLFFBQVE7QUFDbEIsVUFBVSxRQUFRO0FBQ2xCLFVBQVUsUUFBUTtBQUNsQixVQUFVLFFBQVE7QUFDbEIsVUFBVSxRQUFRO0FBQ2xCLFVBQVUsUUFBUTtBQUNsQixVQUFVLFFBQVE7QUFDbEIsVUFBVSxRQUFRO0FBQ2xCLFVBQVUsUUFBUTtBQUNsQixVQUFVLFFBQVE7QUFDbEIsVUFBVSxRQUFRO0FBQ2xCLFVBQVUsUUFBUTtBQUNsQixVQUFVLFFBQVE7QUFDbEIsVUFBVSxRQUFRO0FBQ2xCLFVBQVUsUUFBUTtBQUNsQixVQUFVLFFBQVE7QUFDbEIsVUFBVSxRQUFRO0FBQ2xCLFVBQVUsUUFBUTtBQUNsQixVQUFVLFFBQVE7QUFDbEIsVUFBVSxRQUFRO0FBQ2xCLFVBQVUsUUFBUTtBQUNsQixVQUFVLFFBQVE7QUFDbEIsVUFBVSxRQUFRO0FBQ2xCLFVBQVUsUUFBUTtBQUNsQixVQUFVLFFBQVE7QUFDbEIsVUFBVSxRQUFRO0FBQ2xCLFVBQVUsUUFBUTtBQUNsQixVQUFVLFFBQVE7QUFDbEIsVUFBVSxRQUFRO0FBQ2xCLFVBQVUsUUFBUTtBQUNsQixVQUFVLFFBQVE7QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFVBQVUsUUFBUTtBQUNsQjtBQUNBO0FBQ0EsVUFBVSxRQUFRO0FBQ2xCLFVBQVUsUUFBUTtBQUNsQixVQUFVLFFBQVE7QUFDbEIsVUFBVSxRQUFRO0FBQ2xCLFVBQVUsUUFBUTtBQUNsQixVQUFVLFFBQVE7QUFDbEIsVUFBVSxRQUFRO0FBQ2xCLFVBQVUsUUFBUTtBQUNsQixVQUFVLFFBQVE7QUFDbEIsVUFBVSxRQUFRIiwic291cmNlcyI6WyIvaG9tZS9nYXNjYXQvcHJpc21hcXVhbnQvcHJpc21hLXF1YW50dW0vbm9kZV9tb2R1bGVzL0Bmb2xpb2pzLWZvcmsvbGluZWJyZWFrL3NyYy9jbGFzc2VzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSBmb2xsb3dpbmcgYnJlYWsgY2xhc3NlcyBhcmUgaGFuZGxlZCBieSB0aGUgcGFpciB0YWJsZVxyXG5leHBvcnRzLk9QID0gMDsgICAvLyBPcGVuaW5nIHB1bmN0dWF0aW9uXHJcbmV4cG9ydHMuQ0wgPSAxOyAgIC8vIENsb3NpbmcgcHVuY3R1YXRpb25cclxuZXhwb3J0cy5DUCA9IDI7ICAgLy8gQ2xvc2luZyBwYXJlbnRoZXNpc1xyXG5leHBvcnRzLlFVID0gMzsgICAvLyBBbWJpZ3VvdXMgcXVvdGF0aW9uXHJcbmV4cG9ydHMuR0wgPSA0OyAgIC8vIEdsdWVcclxuZXhwb3J0cy5OUyA9IDU7ICAgLy8gTm9uLXN0YXJ0ZXJzXHJcbmV4cG9ydHMuRVggPSA2OyAgIC8vIEV4Y2xhbWF0aW9uL0ludGVycm9nYXRpb25cclxuZXhwb3J0cy5TWSA9IDc7ICAgLy8gU3ltYm9scyBhbGxvd2luZyBicmVhayBhZnRlclxyXG5leHBvcnRzLklTID0gODsgICAvLyBJbmZpeCBzZXBhcmF0b3JcclxuZXhwb3J0cy5QUiA9IDk7ICAgLy8gUHJlZml4XHJcbmV4cG9ydHMuUE8gPSAxMDsgIC8vIFBvc3RmaXhcclxuZXhwb3J0cy5OVSA9IDExOyAgLy8gTnVtZXJpY1xyXG5leHBvcnRzLkFMID0gMTI7ICAvLyBBbHBoYWJldGljXHJcbmV4cG9ydHMuSEwgPSAxMzsgIC8vIEhlYnJldyBMZXR0ZXJcclxuZXhwb3J0cy5JRCA9IDE0OyAgLy8gSWRlb2dyYXBoaWNcclxuZXhwb3J0cy5JTiA9IDE1OyAgLy8gSW5zZXBhcmFibGUgY2hhcmFjdGVyc1xyXG5leHBvcnRzLkhZID0gMTY7ICAvLyBIeXBoZW5cclxuZXhwb3J0cy5CQSA9IDE3OyAgLy8gQnJlYWsgYWZ0ZXJcclxuZXhwb3J0cy5CQiA9IDE4OyAgLy8gQnJlYWsgYmVmb3JlXHJcbmV4cG9ydHMuQjIgPSAxOTsgIC8vIEJyZWFrIG9uIGVpdGhlciBzaWRlIChidXQgbm90IHBhaXIpXHJcbmV4cG9ydHMuWlcgPSAyMDsgIC8vIFplcm8td2lkdGggc3BhY2VcclxuZXhwb3J0cy5DTSA9IDIxOyAgLy8gQ29tYmluaW5nIG1hcmtzXHJcbmV4cG9ydHMuV0ogPSAyMjsgIC8vIFdvcmQgam9pbmVyXHJcbmV4cG9ydHMuSDIgPSAyMzsgIC8vIEhhbmd1bCBMVlxyXG5leHBvcnRzLkgzID0gMjQ7ICAvLyBIYW5ndWwgTFZUXHJcbmV4cG9ydHMuSkwgPSAyNTsgIC8vIEhhbmd1bCBMIEphbW9cclxuZXhwb3J0cy5KViA9IDI2OyAgLy8gSGFuZ3VsIFYgSmFtb1xyXG5leHBvcnRzLkpUID0gMjc7ICAvLyBIYW5ndWwgVCBKYW1vXHJcbmV4cG9ydHMuUkkgPSAyODsgIC8vIFJlZ2lvbmFsIEluZGljYXRvclxyXG5leHBvcnRzLkVCID0gMjk7ICAvLyBFbW9qaSBCYXNlXHJcbmV4cG9ydHMuRU0gPSAzMDsgIC8vIEVtb2ppIE1vZGlmaWVyXHJcbmV4cG9ydHMuWldKID0gMzE7IC8vIFplcm8gV2lkdGggSm9pbmVyXHJcbmV4cG9ydHMuQ0IgPSAzMjsgIC8vIENvbnRpbmdlbnQgYnJlYWtcclxuXHJcbi8vIFRoZSBmb2xsb3dpbmcgYnJlYWsgY2xhc3NlcyBhcmUgbm90IGhhbmRsZWQgYnkgdGhlIHBhaXIgdGFibGVcclxuZXhwb3J0cy5BSSA9IDMzOyAgLy8gQW1iaWd1b3VzIChBbHBoYWJldGljIG9yIElkZW9ncmFwaClcclxuZXhwb3J0cy5CSyA9IDM0OyAgLy8gQnJlYWsgKG1hbmRhdG9yeSlcclxuZXhwb3J0cy5DSiA9IDM1OyAgLy8gQ29uZGl0aW9uYWwgSmFwYW5lc2UgU3RhcnRlclxyXG5leHBvcnRzLkNSID0gMzY7ICAvLyBDYXJyaWFnZSByZXR1cm5cclxuZXhwb3J0cy5MRiA9IDM3OyAgLy8gTGluZSBmZWVkXHJcbmV4cG9ydHMuTkwgPSAzODsgIC8vIE5leHQgbGluZVxyXG5leHBvcnRzLlNBID0gMzk7ICAvLyBTb3V0aC1FYXN0IEFzaWFuXHJcbmV4cG9ydHMuU0cgPSA0MDsgIC8vIFN1cnJvZ2F0ZXNcclxuZXhwb3J0cy5TUCA9IDQxOyAgLy8gU3BhY2VcclxuZXhwb3J0cy5YWCA9IDQyOyAgLy8gVW5rbm93blxyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/linebreak/src/classes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/linebreak/src/linebreaker.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@foliojs-fork/linebreak/src/linebreaker.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const UnicodeTrie = __webpack_require__(/*! unicode-trie */ \"(rsc)/./node_modules/unicode-trie/index.js\");\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst base64 = __webpack_require__(/*! base64-js */ \"(rsc)/./node_modules/@foliojs-fork/linebreak/node_modules/base64-js/index.js\");\r\nconst { BK, CR, LF, NL, SG, WJ, SP, ZWJ, BA, HY, NS, AI, AL, CJ, HL, RI, SA, XX } = __webpack_require__(/*! ./classes */ \"(rsc)/./node_modules/@foliojs-fork/linebreak/src/classes.js\");\r\nconst { DI_BRK, IN_BRK, CI_BRK, CP_BRK, PR_BRK, pairTable } = __webpack_require__(/*! ./pairs */ \"(rsc)/./node_modules/@foliojs-fork/linebreak/src/pairs.js\");\r\n\r\nconst data = base64.toByteArray(fs.readFileSync(__dirname + '/classes.trie', 'base64'));\r\nconst classTrie = new UnicodeTrie(data);\r\n\r\nconst mapClass = function (c) {\r\n  switch (c) {\r\n    case AI:\r\n      return AL;\r\n\r\n    case SA:\r\n    case SG:\r\n    case XX:\r\n      return AL;\r\n\r\n    case CJ:\r\n      return NS;\r\n\r\n    default:\r\n      return c;\r\n  }\r\n};\r\n\r\nconst mapFirst = function (c) {\r\n  switch (c) {\r\n    case LF:\r\n    case NL:\r\n      return BK;\r\n\r\n    case SP:\r\n      return WJ;\r\n\r\n    default:\r\n      return c;\r\n  }\r\n};\r\n\r\nclass Break {\r\n  constructor(position, required = false) {\r\n    this.position = position;\r\n    this.required = required;\r\n  }\r\n}\r\n\r\nclass LineBreaker {\r\n  constructor(string) {\r\n    this.string = string;\r\n    this.pos = 0;\r\n    this.lastPos = 0;\r\n    this.curClass = null;\r\n    this.nextClass = null;\r\n    this.LB8a = false;\r\n    this.LB21a = false;\r\n    this.LB30a = 0;\r\n  }\r\n\r\n  nextCodePoint() {\r\n    const code = this.string.charCodeAt(this.pos++);\r\n    const next = this.string.charCodeAt(this.pos);\r\n\r\n    // If a surrogate pair\r\n    if ((0xd800 <= code && code <= 0xdbff) && (0xdc00 <= next && next <= 0xdfff)) {\r\n      this.pos++;\r\n      return ((code - 0xd800) * 0x400) + (next - 0xdc00) + 0x10000;\r\n    }\r\n\r\n    return code;\r\n  }\r\n\r\n  nextCharClass() {\r\n    return mapClass(classTrie.get(this.nextCodePoint()));\r\n  }\r\n\r\n  getSimpleBreak() {\r\n    // handle classes not handled by the pair table\r\n    switch (this.nextClass) {\r\n      case SP:\r\n        return false;\r\n\r\n      case BK:\r\n      case LF:\r\n      case NL:\r\n        this.curClass = BK;\r\n        return false;\r\n\r\n      case CR:\r\n        this.curClass = CR;\r\n        return false;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  getPairTableBreak(lastClass) {\r\n    // if not handled already, use the pair table\r\n    let shouldBreak = false;\r\n    switch (pairTable[this.curClass][this.nextClass]) {\r\n      case DI_BRK: // Direct break\r\n        shouldBreak = true;\r\n        break;\r\n\r\n      case IN_BRK: // possible indirect break\r\n        shouldBreak = lastClass === SP;\r\n        break;\r\n\r\n      case CI_BRK:\r\n        shouldBreak = lastClass === SP;\r\n        if (!shouldBreak) {\r\n          shouldBreak = false;\r\n          return shouldBreak;\r\n        }\r\n        break;\r\n\r\n      case CP_BRK: // prohibited for combining marks\r\n        if (lastClass !== SP) {\r\n          return shouldBreak;\r\n        }\r\n        break;\r\n\r\n      case PR_BRK:\r\n        break;\r\n    }\r\n\r\n    if (this.LB8a) {\r\n      shouldBreak = false;\r\n    }\r\n\r\n    // Rule LB21a\r\n    if (this.LB21a && (this.curClass === HY || this.curClass === BA)) {\r\n      shouldBreak = false;\r\n      this.LB21a = false;\r\n    } else {\r\n      this.LB21a = (this.curClass === HL);\r\n    }\r\n\r\n    // Rule LB30a\r\n    if (this.curClass === RI) {\r\n      this.LB30a++;\r\n      if (this.LB30a == 2 && (this.nextClass === RI)) {\r\n        shouldBreak = true;\r\n        this.LB30a = 0;\r\n      }\r\n    } else {\r\n      this.LB30a = 0;\r\n    }\r\n\r\n    this.curClass = this.nextClass;\r\n\r\n    return shouldBreak;\r\n  }\r\n\r\n  nextBreak() {\r\n    // get the first char if we're at the beginning of the string\r\n    if (this.curClass == null) {\r\n      let firstClass = this.nextCharClass();\r\n      this.curClass = mapFirst(firstClass);\r\n      this.nextClass = firstClass;\r\n      this.LB8a = (firstClass === ZWJ);\r\n      this.LB30a = 0;\r\n    }\r\n\r\n    while (this.pos < this.string.length) {\r\n      this.lastPos = this.pos;\r\n      const lastClass = this.nextClass;\r\n      this.nextClass = this.nextCharClass();\r\n\r\n      // explicit newline\r\n      if ((this.curClass === BK) || ((this.curClass === CR) && (this.nextClass !== LF))) {\r\n        this.curClass = mapFirst(mapClass(this.nextClass));\r\n        return new Break(this.lastPos, true);\r\n      }\r\n\r\n      let shouldBreak = this.getSimpleBreak();\r\n\r\n      if (shouldBreak === null) {\r\n        shouldBreak = this.getPairTableBreak(lastClass);\r\n      }\r\n\r\n      // Rule LB8a\r\n      this.LB8a = (this.nextClass === ZWJ);\r\n\r\n      if (shouldBreak) {\r\n        return new Break(this.lastPos);\r\n      }\r\n    }\r\n\r\n    if (this.lastPos < this.string.length) {\r\n      this.lastPos = this.string.length;\r\n      return new Break(this.string.length);\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nmodule.exports = LineBreaker;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/linebreak/src/linebreaker.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/linebreak/src/pairs.js":
/*!***********************************************************!*\
  !*** ./node_modules/@foliojs-fork/linebreak/src/pairs.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("let CI_BRK, CP_BRK, DI_BRK, IN_BRK, PR_BRK;\r\nexports.DI_BRK = (DI_BRK = 0); // Direct break opportunity\r\nexports.IN_BRK = (IN_BRK = 1); // Indirect break opportunity\r\nexports.CI_BRK = (CI_BRK = 2); // Indirect break opportunity for combining marks\r\nexports.CP_BRK = (CP_BRK = 3); // Prohibited break for combining marks\r\nexports.PR_BRK = (PR_BRK = 4); // Prohibited break\r\n\r\n// Based on example pair table from https://www.unicode.org/reports/tr14/tr14-37.html#Table2\r\n// - ZWJ special processing for LB8a of Revision 41\r\n// - CB manually added as per Rule LB20\r\n// - CL, CP, NS, SY, IS, PR, PO, HY, BA, B2 and RI manually adjusted as per LB22 of Revision 45\r\nexports.pairTable = [\r\n  //OP   , CL    , CP    , QU    , GL    , NS    , EX    , SY    , IS    , PR    , PO    , NU    , AL    , HL    , ID    , IN    , HY    , BA    , BB    , B2    , ZW    , CM    , WJ    , H2    , H3    , JL    , JV    , JT    , RI    , EB    , EM    , ZWJ   , CB\r\n  [PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, CP_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK], // OP\r\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // CL\r\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // CP\r\n  [PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], // QU\r\n  [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], // GL\r\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // NS\r\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // EX\r\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // SY\r\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // IS\r\n  [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK], // PR\r\n  [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // PO\r\n  [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // NU\r\n  [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // AL\r\n  [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // HL\r\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // ID\r\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // IN\r\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, DI_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // HY\r\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, DI_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // BA\r\n  [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK], // BB\r\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, PR_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // B2\r\n  [DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], // ZW\r\n  [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // CM\r\n  [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], // WJ\r\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // H2\r\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // H3\r\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // JL\r\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // JV\r\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // JT\r\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // RI\r\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK], // EB\r\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // EM\r\n  [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], // ZWJ\r\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, DI_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK]  // CB\r\n];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/linebreak/src/pairs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/pdfkit/js/pdfkit.es.js":
/*!***********************************************************!*\
  !*** ./node_modules/@foliojs-fork/pdfkit/js/pdfkit.es.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zlib */ \"zlib\");\n/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(zlib__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto-js */ \"(rsc)/./node_modules/crypto-js/index.js\");\n/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(crypto_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _foliojs_fork_fontkit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @foliojs-fork/fontkit */ \"(rsc)/./node_modules/@foliojs-fork/fontkit/index.js\");\n/* harmony import */ var _foliojs_fork_fontkit__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_foliojs_fork_fontkit__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _foliojs_fork_linebreak__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @foliojs-fork/linebreak */ \"(rsc)/./node_modules/@foliojs-fork/linebreak/src/linebreaker.js\");\n/* harmony import */ var _foliojs_fork_linebreak__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_foliojs_fork_linebreak__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var jpeg_exif__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! jpeg-exif */ \"(rsc)/./node_modules/jpeg-exif/lib/index.js\");\n/* harmony import */ var png_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! png-js */ \"(rsc)/./node_modules/png-js/png-node.js\");\n/* harmony import */ var png_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(png_js__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\n\n/*\r\nPDFAbstractReference - abstract class for PDF reference\r\n*/\n\nclass PDFAbstractReference {\n  toString() {\n    throw new Error('Must be implemented by subclasses');\n  }\n}\n\n/*\r\nPDFTree - abstract base class for name and number tree objects\r\n*/\nclass PDFTree {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._items = {};\n    // disable /Limits output for this tree\n    this.limits = typeof options.limits === 'boolean' ? options.limits : true;\n  }\n  add(key, val) {\n    return this._items[key] = val;\n  }\n  get(key) {\n    return this._items[key];\n  }\n  toString() {\n    // Needs to be sorted by key\n    const sortedKeys = Object.keys(this._items).sort((a, b) => this._compareKeys(a, b));\n    const out = ['<<'];\n    if (this.limits && sortedKeys.length > 1) {\n      const first = sortedKeys[0],\n        last = sortedKeys[sortedKeys.length - 1];\n      out.push(`  /Limits ${PDFObject.convert([this._dataForKey(first), this._dataForKey(last)])}`);\n    }\n    out.push(`  /${this._keysName()} [`);\n    for (let key of sortedKeys) {\n      out.push(`    ${PDFObject.convert(this._dataForKey(key))} ${PDFObject.convert(this._items[key])}`);\n    }\n    out.push(']');\n    out.push('>>');\n    return out.join('\\n');\n  }\n  _compareKeys( /*a, b*/\n  ) {\n    throw new Error('Must be implemented by subclasses');\n  }\n  _keysName() {\n    throw new Error('Must be implemented by subclasses');\n  }\n  _dataForKey( /*k*/\n  ) {\n    throw new Error('Must be implemented by subclasses');\n  }\n}\n\nclass SpotColor {\n  constructor(doc, name, C, M, Y, K) {\n    this.id = 'CS' + Object.keys(doc.spotColors).length;\n    this.name = name;\n    this.values = [C, M, Y, K];\n    this.ref = doc.ref(['Separation', this.name, 'DeviceCMYK', {\n      Range: [0, 1, 0, 1, 0, 1, 0, 1],\n      C0: [0, 0, 0, 0],\n      C1: this.values.map(value => value / 100),\n      FunctionType: 2,\n      Domain: [0, 1],\n      N: 1\n    }]);\n    this.ref.end();\n  }\n  toString() {\n    return `${this.ref.id} 0 R`;\n  }\n}\n\n/*\r\nPDFObject - converts JavaScript types into their corresponding PDF types.\r\nBy Devon Govett\r\n*/\nconst pad = (str, length) => (Array(length + 1).join('0') + str).slice(-length);\nconst escapableRe = /[\\n\\r\\t\\b\\f()\\\\]/g;\nconst escapable = {\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\\\': '\\\\\\\\',\n  '(': '\\\\(',\n  ')': '\\\\)'\n};\n\n// Convert little endian UTF-16 to big endian\nconst swapBytes = function (buff) {\n  const l = buff.length;\n  if (l & 0x01) {\n    throw new Error('Buffer length must be even');\n  } else {\n    for (let i = 0, end = l - 1; i < end; i += 2) {\n      const a = buff[i];\n      buff[i] = buff[i + 1];\n      buff[i + 1] = a;\n    }\n  }\n  return buff;\n};\nclass PDFObject {\n  static convert(object) {\n    let encryptFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    // String literals are converted to the PDF name type\n    if (typeof object === 'string') {\n      return `/${object}`;\n\n      // String objects are converted to PDF strings (UTF-16)\n    } else if (object instanceof String) {\n      let string = object;\n      // Detect if this is a unicode string\n      let isUnicode = false;\n      for (let i = 0, end = string.length; i < end; i++) {\n        if (string.charCodeAt(i) > 0x7f) {\n          isUnicode = true;\n          break;\n        }\n      }\n\n      // If so, encode it as big endian UTF-16\n      let stringBuffer;\n      if (isUnicode) {\n        stringBuffer = swapBytes(Buffer.from(`\\ufeff${string}`, 'utf16le'));\n      } else {\n        stringBuffer = Buffer.from(string.valueOf(), 'ascii');\n      }\n\n      // Encrypt the string when necessary\n      if (encryptFn) {\n        string = encryptFn(stringBuffer).toString('binary');\n      } else {\n        string = stringBuffer.toString('binary');\n      }\n\n      // Escape characters as required by the spec\n      string = string.replace(escapableRe, c => escapable[c]);\n      return `(${string})`;\n\n      // Buffers are converted to PDF hex strings\n    } else if (Buffer.isBuffer(object)) {\n      return `<${object.toString('hex')}>`;\n    } else if (object instanceof PDFAbstractReference || object instanceof PDFTree || object instanceof SpotColor) {\n      return object.toString();\n    } else if (object instanceof Date) {\n      let string = `D:${pad(object.getUTCFullYear(), 4)}` + pad(object.getUTCMonth() + 1, 2) + pad(object.getUTCDate(), 2) + pad(object.getUTCHours(), 2) + pad(object.getUTCMinutes(), 2) + pad(object.getUTCSeconds(), 2) + 'Z';\n\n      // Encrypt the string when necessary\n      if (encryptFn) {\n        string = encryptFn(Buffer.from(string, 'ascii')).toString('binary');\n\n        // Escape characters as required by the spec\n        string = string.replace(escapableRe, c => escapable[c]);\n      }\n      return `(${string})`;\n    } else if (Array.isArray(object)) {\n      const items = object.map(e => PDFObject.convert(e, encryptFn)).join(' ');\n      return `[${items}]`;\n    } else if ({}.toString.call(object) === '[object Object]') {\n      const out = ['<<'];\n      for (let key in object) {\n        const val = object[key];\n        out.push(`/${key} ${PDFObject.convert(val, encryptFn)}`);\n      }\n      out.push('>>');\n      return out.join('\\n');\n    } else if (typeof object === 'number') {\n      return PDFObject.number(object);\n    } else {\n      return `${object}`;\n    }\n  }\n  static number(n) {\n    if (n > -1e21 && n < 1e21) {\n      return Math.round(n * 1e6) / 1e6;\n    }\n    throw new Error(`unsupported number: ${n}`);\n  }\n}\n\n/*\r\nPDFReference - represents a reference to another object in the PDF object heirarchy\r\nBy Devon Govett\r\n*/\nclass PDFReference extends PDFAbstractReference {\n  constructor(document, id) {\n    let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n    this.document = document;\n    this.id = id;\n    this.data = data;\n    this.gen = 0;\n    this.compress = this.document.compress && !this.data.Filter;\n    this.uncompressedLength = 0;\n    this.buffer = [];\n  }\n  write(chunk) {\n    if (!Buffer.isBuffer(chunk)) {\n      chunk = Buffer.from(chunk + '\\n', 'binary');\n    }\n    this.uncompressedLength += chunk.length;\n    if (this.data.Length == null) {\n      this.data.Length = 0;\n    }\n    this.buffer.push(chunk);\n    this.data.Length += chunk.length;\n    if (this.compress) {\n      return this.data.Filter = 'FlateDecode';\n    }\n  }\n  end(chunk) {\n    if (chunk) {\n      this.write(chunk);\n    }\n    return this.finalize();\n  }\n  finalize() {\n    this.offset = this.document._offset;\n    const encryptFn = this.document._security ? this.document._security.getEncryptFn(this.id, this.gen) : null;\n    if (this.buffer.length) {\n      this.buffer = Buffer.concat(this.buffer);\n      if (this.compress) {\n        this.buffer = zlib__WEBPACK_IMPORTED_MODULE_1___default().deflateSync(this.buffer);\n      }\n      if (encryptFn) {\n        this.buffer = encryptFn(this.buffer);\n      }\n      this.data.Length = this.buffer.length;\n    }\n    this.document._write(`${this.id} ${this.gen} obj`);\n    this.document._write(PDFObject.convert(this.data, encryptFn));\n    if (this.buffer.length) {\n      this.document._write('stream');\n      this.document._write(this.buffer);\n      this.buffer = []; // free up memory\n      this.document._write('\\nendstream');\n    }\n    this.document._write('endobj');\n    this.document._refEnd(this);\n  }\n  toString() {\n    return `${this.id} ${this.gen} R`;\n  }\n}\n\n/*\r\nPDFPage - represents a single page in the PDF document\r\nBy Devon Govett\r\n*/\n\nconst DEFAULT_MARGINS = {\n  top: 72,\n  left: 72,\n  bottom: 72,\n  right: 72\n};\nconst SIZES = {\n  '4A0': [4767.87, 6740.79],\n  '2A0': [3370.39, 4767.87],\n  A0: [2383.94, 3370.39],\n  A1: [1683.78, 2383.94],\n  A2: [1190.55, 1683.78],\n  A3: [841.89, 1190.55],\n  A4: [595.28, 841.89],\n  A5: [419.53, 595.28],\n  A6: [297.64, 419.53],\n  A7: [209.76, 297.64],\n  A8: [147.4, 209.76],\n  A9: [104.88, 147.4],\n  A10: [73.7, 104.88],\n  B0: [2834.65, 4008.19],\n  B1: [2004.09, 2834.65],\n  B2: [1417.32, 2004.09],\n  B3: [1000.63, 1417.32],\n  B4: [708.66, 1000.63],\n  B5: [498.9, 708.66],\n  B6: [354.33, 498.9],\n  B7: [249.45, 354.33],\n  B8: [175.75, 249.45],\n  B9: [124.72, 175.75],\n  B10: [87.87, 124.72],\n  C0: [2599.37, 3676.54],\n  C1: [1836.85, 2599.37],\n  C2: [1298.27, 1836.85],\n  C3: [918.43, 1298.27],\n  C4: [649.13, 918.43],\n  C5: [459.21, 649.13],\n  C6: [323.15, 459.21],\n  C7: [229.61, 323.15],\n  C8: [161.57, 229.61],\n  C9: [113.39, 161.57],\n  C10: [79.37, 113.39],\n  RA0: [2437.8, 3458.27],\n  RA1: [1729.13, 2437.8],\n  RA2: [1218.9, 1729.13],\n  RA3: [864.57, 1218.9],\n  RA4: [609.45, 864.57],\n  SRA0: [2551.18, 3628.35],\n  SRA1: [1814.17, 2551.18],\n  SRA2: [1275.59, 1814.17],\n  SRA3: [907.09, 1275.59],\n  SRA4: [637.8, 907.09],\n  EXECUTIVE: [521.86, 756.0],\n  FOLIO: [612.0, 936.0],\n  LEGAL: [612.0, 1008.0],\n  LETTER: [612.0, 792.0],\n  TABLOID: [792.0, 1224.0]\n};\nclass PDFPage {\n  constructor(document) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.document = document;\n    this.size = options.size || 'letter';\n    this.layout = options.layout || 'portrait';\n\n    // process margins\n    if (typeof options.margin === 'number') {\n      this.margins = {\n        top: options.margin,\n        left: options.margin,\n        bottom: options.margin,\n        right: options.margin\n      };\n\n      // default to 1 inch margins\n    } else {\n      this.margins = options.margins || DEFAULT_MARGINS;\n    }\n\n    // calculate page dimensions\n    const dimensions = Array.isArray(this.size) ? this.size : SIZES[this.size.toUpperCase()];\n    this.width = dimensions[this.layout === 'portrait' ? 0 : 1];\n    this.height = dimensions[this.layout === 'portrait' ? 1 : 0];\n    this.content = this.document.ref();\n\n    // Initialize the Font, XObject, and ExtGState dictionaries\n    this.resources = this.document.ref({\n      ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI']\n    });\n\n    // The page dictionary\n    this.dictionary = this.document.ref({\n      Type: 'Page',\n      Parent: this.document._root.data.Pages,\n      MediaBox: [0, 0, this.width, this.height],\n      Contents: this.content,\n      Resources: this.resources\n    });\n    this.markings = [];\n  }\n\n  // Lazily create these objects\n  get fonts() {\n    const data = this.resources.data;\n    return data.Font != null ? data.Font : data.Font = {};\n  }\n  get xobjects() {\n    const data = this.resources.data;\n    return data.XObject != null ? data.XObject : data.XObject = {};\n  }\n  get ext_gstates() {\n    const data = this.resources.data;\n    return data.ExtGState != null ? data.ExtGState : data.ExtGState = {};\n  }\n  get patterns() {\n    const data = this.resources.data;\n    return data.Pattern != null ? data.Pattern : data.Pattern = {};\n  }\n  get colorSpaces() {\n    const data = this.resources.data;\n    return data.ColorSpace || (data.ColorSpace = {});\n  }\n  get annotations() {\n    const data = this.dictionary.data;\n    return data.Annots != null ? data.Annots : data.Annots = [];\n  }\n  get structParentTreeKey() {\n    const data = this.dictionary.data;\n    return data.StructParents != null ? data.StructParents : data.StructParents = this.document.createStructParentTreeNextKey();\n  }\n  maxY() {\n    return this.height - this.margins.bottom;\n  }\n  write(chunk) {\n    return this.content.write(chunk);\n  }\n\n  // Set tab order if document is tagged for accessibility.\n  _setTabOrder() {\n    if (!this.dictionary.Tabs && this.document.hasMarkInfoDictionary()) {\n      this.dictionary.data.Tabs = 'S';\n    }\n  }\n  end() {\n    this._setTabOrder();\n    this.dictionary.end();\n    this.resources.data.ColorSpace = this.resources.data.ColorSpace || {};\n    for (let color of Object.values(this.document.spotColors)) {\n      this.resources.data.ColorSpace[color.id] = color;\n    }\n    this.resources.end();\n    return this.content.end();\n  }\n}\n\n/*\r\nPDFNameTree - represents a name tree object\r\n*/\nclass PDFNameTree extends PDFTree {\n  _compareKeys(a, b) {\n    return a.localeCompare(b);\n  }\n  _keysName() {\n    return \"Names\";\n  }\n  _dataForKey(k) {\n    return new String(k);\n  }\n}\n\n/**\r\n * Check if value is in a range group.\r\n * @param {number} value\r\n * @param {number[]} rangeGroup\r\n * @returns {boolean}\r\n */\nfunction inRange(value, rangeGroup) {\n  if (value < rangeGroup[0]) return false;\n  let startRange = 0;\n  let endRange = rangeGroup.length / 2;\n  while (startRange <= endRange) {\n    const middleRange = Math.floor((startRange + endRange) / 2);\n\n    // actual array index\n    const arrayIndex = middleRange * 2;\n\n    // Check if value is in range pointed by actual index\n    if (value >= rangeGroup[arrayIndex] && value <= rangeGroup[arrayIndex + 1]) {\n      return true;\n    }\n    if (value > rangeGroup[arrayIndex + 1]) {\n      // Search Right Side Of Array\n      startRange = middleRange + 1;\n    } else {\n      // Search Left Side Of Array\n      endRange = middleRange - 1;\n    }\n  }\n  return false;\n}\n\n// prettier-ignore-start\n/**\r\n * A.1 Unassigned code points in Unicode 3.2\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-A.1\r\n */\nconst unassigned_code_points = [0x0221, 0x0221, 0x0234, 0x024f, 0x02ae, 0x02af, 0x02ef, 0x02ff, 0x0350, 0x035f, 0x0370, 0x0373, 0x0376, 0x0379, 0x037b, 0x037d, 0x037f, 0x0383, 0x038b, 0x038b, 0x038d, 0x038d, 0x03a2, 0x03a2, 0x03cf, 0x03cf, 0x03f7, 0x03ff, 0x0487, 0x0487, 0x04cf, 0x04cf, 0x04f6, 0x04f7, 0x04fa, 0x04ff, 0x0510, 0x0530, 0x0557, 0x0558, 0x0560, 0x0560, 0x0588, 0x0588, 0x058b, 0x0590, 0x05a2, 0x05a2, 0x05ba, 0x05ba, 0x05c5, 0x05cf, 0x05eb, 0x05ef, 0x05f5, 0x060b, 0x060d, 0x061a, 0x061c, 0x061e, 0x0620, 0x0620, 0x063b, 0x063f, 0x0656, 0x065f, 0x06ee, 0x06ef, 0x06ff, 0x06ff, 0x070e, 0x070e, 0x072d, 0x072f, 0x074b, 0x077f, 0x07b2, 0x0900, 0x0904, 0x0904, 0x093a, 0x093b, 0x094e, 0x094f, 0x0955, 0x0957, 0x0971, 0x0980, 0x0984, 0x0984, 0x098d, 0x098e, 0x0991, 0x0992, 0x09a9, 0x09a9, 0x09b1, 0x09b1, 0x09b3, 0x09b5, 0x09ba, 0x09bb, 0x09bd, 0x09bd, 0x09c5, 0x09c6, 0x09c9, 0x09ca, 0x09ce, 0x09d6, 0x09d8, 0x09db, 0x09de, 0x09de, 0x09e4, 0x09e5, 0x09fb, 0x0a01, 0x0a03, 0x0a04, 0x0a0b, 0x0a0e, 0x0a11, 0x0a12, 0x0a29, 0x0a29, 0x0a31, 0x0a31, 0x0a34, 0x0a34, 0x0a37, 0x0a37, 0x0a3a, 0x0a3b, 0x0a3d, 0x0a3d, 0x0a43, 0x0a46, 0x0a49, 0x0a4a, 0x0a4e, 0x0a58, 0x0a5d, 0x0a5d, 0x0a5f, 0x0a65, 0x0a75, 0x0a80, 0x0a84, 0x0a84, 0x0a8c, 0x0a8c, 0x0a8e, 0x0a8e, 0x0a92, 0x0a92, 0x0aa9, 0x0aa9, 0x0ab1, 0x0ab1, 0x0ab4, 0x0ab4, 0x0aba, 0x0abb, 0x0ac6, 0x0ac6, 0x0aca, 0x0aca, 0x0ace, 0x0acf, 0x0ad1, 0x0adf, 0x0ae1, 0x0ae5, 0x0af0, 0x0b00, 0x0b04, 0x0b04, 0x0b0d, 0x0b0e, 0x0b11, 0x0b12, 0x0b29, 0x0b29, 0x0b31, 0x0b31, 0x0b34, 0x0b35, 0x0b3a, 0x0b3b, 0x0b44, 0x0b46, 0x0b49, 0x0b4a, 0x0b4e, 0x0b55, 0x0b58, 0x0b5b, 0x0b5e, 0x0b5e, 0x0b62, 0x0b65, 0x0b71, 0x0b81, 0x0b84, 0x0b84, 0x0b8b, 0x0b8d, 0x0b91, 0x0b91, 0x0b96, 0x0b98, 0x0b9b, 0x0b9b, 0x0b9d, 0x0b9d, 0x0ba0, 0x0ba2, 0x0ba5, 0x0ba7, 0x0bab, 0x0bad, 0x0bb6, 0x0bb6, 0x0bba, 0x0bbd, 0x0bc3, 0x0bc5, 0x0bc9, 0x0bc9, 0x0bce, 0x0bd6, 0x0bd8, 0x0be6, 0x0bf3, 0x0c00, 0x0c04, 0x0c04, 0x0c0d, 0x0c0d, 0x0c11, 0x0c11, 0x0c29, 0x0c29, 0x0c34, 0x0c34, 0x0c3a, 0x0c3d, 0x0c45, 0x0c45, 0x0c49, 0x0c49, 0x0c4e, 0x0c54, 0x0c57, 0x0c5f, 0x0c62, 0x0c65, 0x0c70, 0x0c81, 0x0c84, 0x0c84, 0x0c8d, 0x0c8d, 0x0c91, 0x0c91, 0x0ca9, 0x0ca9, 0x0cb4, 0x0cb4, 0x0cba, 0x0cbd, 0x0cc5, 0x0cc5, 0x0cc9, 0x0cc9, 0x0cce, 0x0cd4, 0x0cd7, 0x0cdd, 0x0cdf, 0x0cdf, 0x0ce2, 0x0ce5, 0x0cf0, 0x0d01, 0x0d04, 0x0d04, 0x0d0d, 0x0d0d, 0x0d11, 0x0d11, 0x0d29, 0x0d29, 0x0d3a, 0x0d3d, 0x0d44, 0x0d45, 0x0d49, 0x0d49, 0x0d4e, 0x0d56, 0x0d58, 0x0d5f, 0x0d62, 0x0d65, 0x0d70, 0x0d81, 0x0d84, 0x0d84, 0x0d97, 0x0d99, 0x0db2, 0x0db2, 0x0dbc, 0x0dbc, 0x0dbe, 0x0dbf, 0x0dc7, 0x0dc9, 0x0dcb, 0x0dce, 0x0dd5, 0x0dd5, 0x0dd7, 0x0dd7, 0x0de0, 0x0df1, 0x0df5, 0x0e00, 0x0e3b, 0x0e3e, 0x0e5c, 0x0e80, 0x0e83, 0x0e83, 0x0e85, 0x0e86, 0x0e89, 0x0e89, 0x0e8b, 0x0e8c, 0x0e8e, 0x0e93, 0x0e98, 0x0e98, 0x0ea0, 0x0ea0, 0x0ea4, 0x0ea4, 0x0ea6, 0x0ea6, 0x0ea8, 0x0ea9, 0x0eac, 0x0eac, 0x0eba, 0x0eba, 0x0ebe, 0x0ebf, 0x0ec5, 0x0ec5, 0x0ec7, 0x0ec7, 0x0ece, 0x0ecf, 0x0eda, 0x0edb, 0x0ede, 0x0eff, 0x0f48, 0x0f48, 0x0f6b, 0x0f70, 0x0f8c, 0x0f8f, 0x0f98, 0x0f98, 0x0fbd, 0x0fbd, 0x0fcd, 0x0fce, 0x0fd0, 0x0fff, 0x1022, 0x1022, 0x1028, 0x1028, 0x102b, 0x102b, 0x1033, 0x1035, 0x103a, 0x103f, 0x105a, 0x109f, 0x10c6, 0x10cf, 0x10f9, 0x10fa, 0x10fc, 0x10ff, 0x115a, 0x115e, 0x11a3, 0x11a7, 0x11fa, 0x11ff, 0x1207, 0x1207, 0x1247, 0x1247, 0x1249, 0x1249, 0x124e, 0x124f, 0x1257, 0x1257, 0x1259, 0x1259, 0x125e, 0x125f, 0x1287, 0x1287, 0x1289, 0x1289, 0x128e, 0x128f, 0x12af, 0x12af, 0x12b1, 0x12b1, 0x12b6, 0x12b7, 0x12bf, 0x12bf, 0x12c1, 0x12c1, 0x12c6, 0x12c7, 0x12cf, 0x12cf, 0x12d7, 0x12d7, 0x12ef, 0x12ef, 0x130f, 0x130f, 0x1311, 0x1311, 0x1316, 0x1317, 0x131f, 0x131f, 0x1347, 0x1347, 0x135b, 0x1360, 0x137d, 0x139f, 0x13f5, 0x1400, 0x1677, 0x167f, 0x169d, 0x169f, 0x16f1, 0x16ff, 0x170d, 0x170d, 0x1715, 0x171f, 0x1737, 0x173f, 0x1754, 0x175f, 0x176d, 0x176d, 0x1771, 0x1771, 0x1774, 0x177f, 0x17dd, 0x17df, 0x17ea, 0x17ff, 0x180f, 0x180f, 0x181a, 0x181f, 0x1878, 0x187f, 0x18aa, 0x1dff, 0x1e9c, 0x1e9f, 0x1efa, 0x1eff, 0x1f16, 0x1f17, 0x1f1e, 0x1f1f, 0x1f46, 0x1f47, 0x1f4e, 0x1f4f, 0x1f58, 0x1f58, 0x1f5a, 0x1f5a, 0x1f5c, 0x1f5c, 0x1f5e, 0x1f5e, 0x1f7e, 0x1f7f, 0x1fb5, 0x1fb5, 0x1fc5, 0x1fc5, 0x1fd4, 0x1fd5, 0x1fdc, 0x1fdc, 0x1ff0, 0x1ff1, 0x1ff5, 0x1ff5, 0x1fff, 0x1fff, 0x2053, 0x2056, 0x2058, 0x205e, 0x2064, 0x2069, 0x2072, 0x2073, 0x208f, 0x209f, 0x20b2, 0x20cf, 0x20eb, 0x20ff, 0x213b, 0x213c, 0x214c, 0x2152, 0x2184, 0x218f, 0x23cf, 0x23ff, 0x2427, 0x243f, 0x244b, 0x245f, 0x24ff, 0x24ff, 0x2614, 0x2615, 0x2618, 0x2618, 0x267e, 0x267f, 0x268a, 0x2700, 0x2705, 0x2705, 0x270a, 0x270b, 0x2728, 0x2728, 0x274c, 0x274c, 0x274e, 0x274e, 0x2753, 0x2755, 0x2757, 0x2757, 0x275f, 0x2760, 0x2795, 0x2797, 0x27b0, 0x27b0, 0x27bf, 0x27cf, 0x27ec, 0x27ef, 0x2b00, 0x2e7f, 0x2e9a, 0x2e9a, 0x2ef4, 0x2eff, 0x2fd6, 0x2fef, 0x2ffc, 0x2fff, 0x3040, 0x3040, 0x3097, 0x3098, 0x3100, 0x3104, 0x312d, 0x3130, 0x318f, 0x318f, 0x31b8, 0x31ef, 0x321d, 0x321f, 0x3244, 0x3250, 0x327c, 0x327e, 0x32cc, 0x32cf, 0x32ff, 0x32ff, 0x3377, 0x337a, 0x33de, 0x33df, 0x33ff, 0x33ff, 0x4db6, 0x4dff, 0x9fa6, 0x9fff, 0xa48d, 0xa48f, 0xa4c7, 0xabff, 0xd7a4, 0xd7ff, 0xfa2e, 0xfa2f, 0xfa6b, 0xfaff, 0xfb07, 0xfb12, 0xfb18, 0xfb1c, 0xfb37, 0xfb37, 0xfb3d, 0xfb3d, 0xfb3f, 0xfb3f, 0xfb42, 0xfb42, 0xfb45, 0xfb45, 0xfbb2, 0xfbd2, 0xfd40, 0xfd4f, 0xfd90, 0xfd91, 0xfdc8, 0xfdcf, 0xfdfd, 0xfdff, 0xfe10, 0xfe1f, 0xfe24, 0xfe2f, 0xfe47, 0xfe48, 0xfe53, 0xfe53, 0xfe67, 0xfe67, 0xfe6c, 0xfe6f, 0xfe75, 0xfe75, 0xfefd, 0xfefe, 0xff00, 0xff00, 0xffbf, 0xffc1, 0xffc8, 0xffc9, 0xffd0, 0xffd1, 0xffd8, 0xffd9, 0xffdd, 0xffdf, 0xffe7, 0xffe7, 0xffef, 0xfff8, 0x10000, 0x102ff, 0x1031f, 0x1031f, 0x10324, 0x1032f, 0x1034b, 0x103ff, 0x10426, 0x10427, 0x1044e, 0x1cfff, 0x1d0f6, 0x1d0ff, 0x1d127, 0x1d129, 0x1d1de, 0x1d3ff, 0x1d455, 0x1d455, 0x1d49d, 0x1d49d, 0x1d4a0, 0x1d4a1, 0x1d4a3, 0x1d4a4, 0x1d4a7, 0x1d4a8, 0x1d4ad, 0x1d4ad, 0x1d4ba, 0x1d4ba, 0x1d4bc, 0x1d4bc, 0x1d4c1, 0x1d4c1, 0x1d4c4, 0x1d4c4, 0x1d506, 0x1d506, 0x1d50b, 0x1d50c, 0x1d515, 0x1d515, 0x1d51d, 0x1d51d, 0x1d53a, 0x1d53a, 0x1d53f, 0x1d53f, 0x1d545, 0x1d545, 0x1d547, 0x1d549, 0x1d551, 0x1d551, 0x1d6a4, 0x1d6a7, 0x1d7ca, 0x1d7cd, 0x1d800, 0x1fffd, 0x2a6d7, 0x2f7ff, 0x2fa1e, 0x2fffd, 0x30000, 0x3fffd, 0x40000, 0x4fffd, 0x50000, 0x5fffd, 0x60000, 0x6fffd, 0x70000, 0x7fffd, 0x80000, 0x8fffd, 0x90000, 0x9fffd, 0xa0000, 0xafffd, 0xb0000, 0xbfffd, 0xc0000, 0xcfffd, 0xd0000, 0xdfffd, 0xe0000, 0xe0000, 0xe0002, 0xe001f, 0xe0080, 0xefffd];\n// prettier-ignore-end\n\nconst isUnassignedCodePoint = character => inRange(character, unassigned_code_points);\n\n// prettier-ignore-start\n/**\r\n * B.1 Commonly mapped to nothing\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-B.1\r\n */\nconst commonly_mapped_to_nothing = [0x00ad, 0x00ad, 0x034f, 0x034f, 0x1806, 0x1806, 0x180b, 0x180b, 0x180c, 0x180c, 0x180d, 0x180d, 0x200b, 0x200b, 0x200c, 0x200c, 0x200d, 0x200d, 0x2060, 0x2060, 0xfe00, 0xfe00, 0xfe01, 0xfe01, 0xfe02, 0xfe02, 0xfe03, 0xfe03, 0xfe04, 0xfe04, 0xfe05, 0xfe05, 0xfe06, 0xfe06, 0xfe07, 0xfe07, 0xfe08, 0xfe08, 0xfe09, 0xfe09, 0xfe0a, 0xfe0a, 0xfe0b, 0xfe0b, 0xfe0c, 0xfe0c, 0xfe0d, 0xfe0d, 0xfe0e, 0xfe0e, 0xfe0f, 0xfe0f, 0xfeff, 0xfeff];\n// prettier-ignore-end\n\nconst isCommonlyMappedToNothing = character => inRange(character, commonly_mapped_to_nothing);\n\n// prettier-ignore-start\n/**\r\n * C.1.2 Non-ASCII space characters\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.1.2\r\n */\nconst non_ASCII_space_characters = [0x00a0, 0x00a0 /* NO-BREAK SPACE */, 0x1680, 0x1680 /* OGHAM SPACE MARK */, 0x2000, 0x2000 /* EN QUAD */, 0x2001, 0x2001 /* EM QUAD */, 0x2002, 0x2002 /* EN SPACE */, 0x2003, 0x2003 /* EM SPACE */, 0x2004, 0x2004 /* THREE-PER-EM SPACE */, 0x2005, 0x2005 /* FOUR-PER-EM SPACE */, 0x2006, 0x2006 /* SIX-PER-EM SPACE */, 0x2007, 0x2007 /* FIGURE SPACE */, 0x2008, 0x2008 /* PUNCTUATION SPACE */, 0x2009, 0x2009 /* THIN SPACE */, 0x200a, 0x200a /* HAIR SPACE */, 0x200b, 0x200b /* ZERO WIDTH SPACE */, 0x202f, 0x202f /* NARROW NO-BREAK SPACE */, 0x205f, 0x205f /* MEDIUM MATHEMATICAL SPACE */, 0x3000, 0x3000 /* IDEOGRAPHIC SPACE */];\n// prettier-ignore-end\n\nconst isNonASCIISpaceCharacter = character => inRange(character, non_ASCII_space_characters);\n\n// prettier-ignore-start\nconst non_ASCII_controls_characters = [\n/**\r\n * C.2.2 Non-ASCII control characters\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.2.2\r\n */\n0x0080, 0x009f /* [CONTROL CHARACTERS] */, 0x06dd, 0x06dd /* ARABIC END OF AYAH */, 0x070f, 0x070f /* SYRIAC ABBREVIATION MARK */, 0x180e, 0x180e /* MONGOLIAN VOWEL SEPARATOR */, 0x200c, 0x200c /* ZERO WIDTH NON-JOINER */, 0x200d, 0x200d /* ZERO WIDTH JOINER */, 0x2028, 0x2028 /* LINE SEPARATOR */, 0x2029, 0x2029 /* PARAGRAPH SEPARATOR */, 0x2060, 0x2060 /* WORD JOINER */, 0x2061, 0x2061 /* FUNCTION APPLICATION */, 0x2062, 0x2062 /* INVISIBLE TIMES */, 0x2063, 0x2063 /* INVISIBLE SEPARATOR */, 0x206a, 0x206f /* [CONTROL CHARACTERS] */, 0xfeff, 0xfeff /* ZERO WIDTH NO-BREAK SPACE */, 0xfff9, 0xfffc /* [CONTROL CHARACTERS] */, 0x1d173, 0x1d17a /* [MUSICAL CONTROL CHARACTERS] */];\nconst non_character_codepoints = [\n/**\r\n * C.4 Non-character code points\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.4\r\n */\n0xfdd0, 0xfdef /* [NONCHARACTER CODE POINTS] */, 0xfffe, 0xffff /* [NONCHARACTER CODE POINTS] */, 0x1fffe, 0x1ffff /* [NONCHARACTER CODE POINTS] */, 0x2fffe, 0x2ffff /* [NONCHARACTER CODE POINTS] */, 0x3fffe, 0x3ffff /* [NONCHARACTER CODE POINTS] */, 0x4fffe, 0x4ffff /* [NONCHARACTER CODE POINTS] */, 0x5fffe, 0x5ffff /* [NONCHARACTER CODE POINTS] */, 0x6fffe, 0x6ffff /* [NONCHARACTER CODE POINTS] */, 0x7fffe, 0x7ffff /* [NONCHARACTER CODE POINTS] */, 0x8fffe, 0x8ffff /* [NONCHARACTER CODE POINTS] */, 0x9fffe, 0x9ffff /* [NONCHARACTER CODE POINTS] */, 0xafffe, 0xaffff /* [NONCHARACTER CODE POINTS] */, 0xbfffe, 0xbffff /* [NONCHARACTER CODE POINTS] */, 0xcfffe, 0xcffff /* [NONCHARACTER CODE POINTS] */, 0xdfffe, 0xdffff /* [NONCHARACTER CODE POINTS] */, 0xefffe, 0xeffff /* [NONCHARACTER CODE POINTS] */, 0x10fffe, 0x10ffff /* [NONCHARACTER CODE POINTS] */];\n\n/**\r\n * 2.3.  Prohibited Output\r\n */\nconst prohibited_characters = [\n/**\r\n * C.2.1 ASCII control characters\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.2.1\r\n */\n0, 0x001f /* [CONTROL CHARACTERS] */, 0x007f, 0x007f /* DELETE */,\n/**\r\n * C.8 Change display properties or are deprecated\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.8\r\n */\n0x0340, 0x0340 /* COMBINING GRAVE TONE MARK */, 0x0341, 0x0341 /* COMBINING ACUTE TONE MARK */, 0x200e, 0x200e /* LEFT-TO-RIGHT MARK */, 0x200f, 0x200f /* RIGHT-TO-LEFT MARK */, 0x202a, 0x202a /* LEFT-TO-RIGHT EMBEDDING */, 0x202b, 0x202b /* RIGHT-TO-LEFT EMBEDDING */, 0x202c, 0x202c /* POP DIRECTIONAL FORMATTING */, 0x202d, 0x202d /* LEFT-TO-RIGHT OVERRIDE */, 0x202e, 0x202e /* RIGHT-TO-LEFT OVERRIDE */, 0x206a, 0x206a /* INHIBIT SYMMETRIC SWAPPING */, 0x206b, 0x206b /* ACTIVATE SYMMETRIC SWAPPING */, 0x206c, 0x206c /* INHIBIT ARABIC FORM SHAPING */, 0x206d, 0x206d /* ACTIVATE ARABIC FORM SHAPING */, 0x206e, 0x206e /* NATIONAL DIGIT SHAPES */, 0x206f, 0x206f /* NOMINAL DIGIT SHAPES */,\n/**\r\n * C.7 Inappropriate for canonical representation\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.7\r\n */\n0x2ff0, 0x2ffb /* [IDEOGRAPHIC DESCRIPTION CHARACTERS] */,\n/**\r\n * C.5 Surrogate codes\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.5\r\n */\n0xd800, 0xdfff,\n/**\r\n * C.3 Private use\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.3\r\n */\n0xe000, 0xf8ff /* [PRIVATE USE, PLANE 0] */,\n/**\r\n * C.6 Inappropriate for plain text\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.6\r\n */\n0xfff9, 0xfff9 /* INTERLINEAR ANNOTATION ANCHOR */, 0xfffa, 0xfffa /* INTERLINEAR ANNOTATION SEPARATOR */, 0xfffb, 0xfffb /* INTERLINEAR ANNOTATION TERMINATOR */, 0xfffc, 0xfffc /* OBJECT REPLACEMENT CHARACTER */, 0xfffd, 0xfffd /* REPLACEMENT CHARACTER */,\n/**\r\n * C.9 Tagging characters\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.9\r\n */\n0xe0001, 0xe0001 /* LANGUAGE TAG */, 0xe0020, 0xe007f /* [TAGGING CHARACTERS] */,\n/**\r\n * C.3 Private use\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.3\r\n */\n\n0xf0000, 0xffffd /* [PRIVATE USE, PLANE 15] */, 0x100000, 0x10fffd /* [PRIVATE USE, PLANE 16] */];\n// prettier-ignore-end\n\nconst isProhibitedCharacter = character => inRange(character, non_ASCII_space_characters) || inRange(character, prohibited_characters) || inRange(character, non_ASCII_controls_characters) || inRange(character, non_character_codepoints);\n\n// prettier-ignore-start\n/**\r\n * D.1 Characters with bidirectional property \"R\" or \"AL\"\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-D.1\r\n */\nconst bidirectional_r_al = [0x05be, 0x05be, 0x05c0, 0x05c0, 0x05c3, 0x05c3, 0x05d0, 0x05ea, 0x05f0, 0x05f4, 0x061b, 0x061b, 0x061f, 0x061f, 0x0621, 0x063a, 0x0640, 0x064a, 0x066d, 0x066f, 0x0671, 0x06d5, 0x06dd, 0x06dd, 0x06e5, 0x06e6, 0x06fa, 0x06fe, 0x0700, 0x070d, 0x0710, 0x0710, 0x0712, 0x072c, 0x0780, 0x07a5, 0x07b1, 0x07b1, 0x200f, 0x200f, 0xfb1d, 0xfb1d, 0xfb1f, 0xfb28, 0xfb2a, 0xfb36, 0xfb38, 0xfb3c, 0xfb3e, 0xfb3e, 0xfb40, 0xfb41, 0xfb43, 0xfb44, 0xfb46, 0xfbb1, 0xfbd3, 0xfd3d, 0xfd50, 0xfd8f, 0xfd92, 0xfdc7, 0xfdf0, 0xfdfc, 0xfe70, 0xfe74, 0xfe76, 0xfefc];\n// prettier-ignore-end\n\nconst isBidirectionalRAL = character => inRange(character, bidirectional_r_al);\n\n// prettier-ignore-start\n/**\r\n * D.2 Characters with bidirectional property \"L\"\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-D.2\r\n */\nconst bidirectional_l = [0x0041, 0x005a, 0x0061, 0x007a, 0x00aa, 0x00aa, 0x00b5, 0x00b5, 0x00ba, 0x00ba, 0x00c0, 0x00d6, 0x00d8, 0x00f6, 0x00f8, 0x0220, 0x0222, 0x0233, 0x0250, 0x02ad, 0x02b0, 0x02b8, 0x02bb, 0x02c1, 0x02d0, 0x02d1, 0x02e0, 0x02e4, 0x02ee, 0x02ee, 0x037a, 0x037a, 0x0386, 0x0386, 0x0388, 0x038a, 0x038c, 0x038c, 0x038e, 0x03a1, 0x03a3, 0x03ce, 0x03d0, 0x03f5, 0x0400, 0x0482, 0x048a, 0x04ce, 0x04d0, 0x04f5, 0x04f8, 0x04f9, 0x0500, 0x050f, 0x0531, 0x0556, 0x0559, 0x055f, 0x0561, 0x0587, 0x0589, 0x0589, 0x0903, 0x0903, 0x0905, 0x0939, 0x093d, 0x0940, 0x0949, 0x094c, 0x0950, 0x0950, 0x0958, 0x0961, 0x0964, 0x0970, 0x0982, 0x0983, 0x0985, 0x098c, 0x098f, 0x0990, 0x0993, 0x09a8, 0x09aa, 0x09b0, 0x09b2, 0x09b2, 0x09b6, 0x09b9, 0x09be, 0x09c0, 0x09c7, 0x09c8, 0x09cb, 0x09cc, 0x09d7, 0x09d7, 0x09dc, 0x09dd, 0x09df, 0x09e1, 0x09e6, 0x09f1, 0x09f4, 0x09fa, 0x0a05, 0x0a0a, 0x0a0f, 0x0a10, 0x0a13, 0x0a28, 0x0a2a, 0x0a30, 0x0a32, 0x0a33, 0x0a35, 0x0a36, 0x0a38, 0x0a39, 0x0a3e, 0x0a40, 0x0a59, 0x0a5c, 0x0a5e, 0x0a5e, 0x0a66, 0x0a6f, 0x0a72, 0x0a74, 0x0a83, 0x0a83, 0x0a85, 0x0a8b, 0x0a8d, 0x0a8d, 0x0a8f, 0x0a91, 0x0a93, 0x0aa8, 0x0aaa, 0x0ab0, 0x0ab2, 0x0ab3, 0x0ab5, 0x0ab9, 0x0abd, 0x0ac0, 0x0ac9, 0x0ac9, 0x0acb, 0x0acc, 0x0ad0, 0x0ad0, 0x0ae0, 0x0ae0, 0x0ae6, 0x0aef, 0x0b02, 0x0b03, 0x0b05, 0x0b0c, 0x0b0f, 0x0b10, 0x0b13, 0x0b28, 0x0b2a, 0x0b30, 0x0b32, 0x0b33, 0x0b36, 0x0b39, 0x0b3d, 0x0b3e, 0x0b40, 0x0b40, 0x0b47, 0x0b48, 0x0b4b, 0x0b4c, 0x0b57, 0x0b57, 0x0b5c, 0x0b5d, 0x0b5f, 0x0b61, 0x0b66, 0x0b70, 0x0b83, 0x0b83, 0x0b85, 0x0b8a, 0x0b8e, 0x0b90, 0x0b92, 0x0b95, 0x0b99, 0x0b9a, 0x0b9c, 0x0b9c, 0x0b9e, 0x0b9f, 0x0ba3, 0x0ba4, 0x0ba8, 0x0baa, 0x0bae, 0x0bb5, 0x0bb7, 0x0bb9, 0x0bbe, 0x0bbf, 0x0bc1, 0x0bc2, 0x0bc6, 0x0bc8, 0x0bca, 0x0bcc, 0x0bd7, 0x0bd7, 0x0be7, 0x0bf2, 0x0c01, 0x0c03, 0x0c05, 0x0c0c, 0x0c0e, 0x0c10, 0x0c12, 0x0c28, 0x0c2a, 0x0c33, 0x0c35, 0x0c39, 0x0c41, 0x0c44, 0x0c60, 0x0c61, 0x0c66, 0x0c6f, 0x0c82, 0x0c83, 0x0c85, 0x0c8c, 0x0c8e, 0x0c90, 0x0c92, 0x0ca8, 0x0caa, 0x0cb3, 0x0cb5, 0x0cb9, 0x0cbe, 0x0cbe, 0x0cc0, 0x0cc4, 0x0cc7, 0x0cc8, 0x0cca, 0x0ccb, 0x0cd5, 0x0cd6, 0x0cde, 0x0cde, 0x0ce0, 0x0ce1, 0x0ce6, 0x0cef, 0x0d02, 0x0d03, 0x0d05, 0x0d0c, 0x0d0e, 0x0d10, 0x0d12, 0x0d28, 0x0d2a, 0x0d39, 0x0d3e, 0x0d40, 0x0d46, 0x0d48, 0x0d4a, 0x0d4c, 0x0d57, 0x0d57, 0x0d60, 0x0d61, 0x0d66, 0x0d6f, 0x0d82, 0x0d83, 0x0d85, 0x0d96, 0x0d9a, 0x0db1, 0x0db3, 0x0dbb, 0x0dbd, 0x0dbd, 0x0dc0, 0x0dc6, 0x0dcf, 0x0dd1, 0x0dd8, 0x0ddf, 0x0df2, 0x0df4, 0x0e01, 0x0e30, 0x0e32, 0x0e33, 0x0e40, 0x0e46, 0x0e4f, 0x0e5b, 0x0e81, 0x0e82, 0x0e84, 0x0e84, 0x0e87, 0x0e88, 0x0e8a, 0x0e8a, 0x0e8d, 0x0e8d, 0x0e94, 0x0e97, 0x0e99, 0x0e9f, 0x0ea1, 0x0ea3, 0x0ea5, 0x0ea5, 0x0ea7, 0x0ea7, 0x0eaa, 0x0eab, 0x0ead, 0x0eb0, 0x0eb2, 0x0eb3, 0x0ebd, 0x0ebd, 0x0ec0, 0x0ec4, 0x0ec6, 0x0ec6, 0x0ed0, 0x0ed9, 0x0edc, 0x0edd, 0x0f00, 0x0f17, 0x0f1a, 0x0f34, 0x0f36, 0x0f36, 0x0f38, 0x0f38, 0x0f3e, 0x0f47, 0x0f49, 0x0f6a, 0x0f7f, 0x0f7f, 0x0f85, 0x0f85, 0x0f88, 0x0f8b, 0x0fbe, 0x0fc5, 0x0fc7, 0x0fcc, 0x0fcf, 0x0fcf, 0x1000, 0x1021, 0x1023, 0x1027, 0x1029, 0x102a, 0x102c, 0x102c, 0x1031, 0x1031, 0x1038, 0x1038, 0x1040, 0x1057, 0x10a0, 0x10c5, 0x10d0, 0x10f8, 0x10fb, 0x10fb, 0x1100, 0x1159, 0x115f, 0x11a2, 0x11a8, 0x11f9, 0x1200, 0x1206, 0x1208, 0x1246, 0x1248, 0x1248, 0x124a, 0x124d, 0x1250, 0x1256, 0x1258, 0x1258, 0x125a, 0x125d, 0x1260, 0x1286, 0x1288, 0x1288, 0x128a, 0x128d, 0x1290, 0x12ae, 0x12b0, 0x12b0, 0x12b2, 0x12b5, 0x12b8, 0x12be, 0x12c0, 0x12c0, 0x12c2, 0x12c5, 0x12c8, 0x12ce, 0x12d0, 0x12d6, 0x12d8, 0x12ee, 0x12f0, 0x130e, 0x1310, 0x1310, 0x1312, 0x1315, 0x1318, 0x131e, 0x1320, 0x1346, 0x1348, 0x135a, 0x1361, 0x137c, 0x13a0, 0x13f4, 0x1401, 0x1676, 0x1681, 0x169a, 0x16a0, 0x16f0, 0x1700, 0x170c, 0x170e, 0x1711, 0x1720, 0x1731, 0x1735, 0x1736, 0x1740, 0x1751, 0x1760, 0x176c, 0x176e, 0x1770, 0x1780, 0x17b6, 0x17be, 0x17c5, 0x17c7, 0x17c8, 0x17d4, 0x17da, 0x17dc, 0x17dc, 0x17e0, 0x17e9, 0x1810, 0x1819, 0x1820, 0x1877, 0x1880, 0x18a8, 0x1e00, 0x1e9b, 0x1ea0, 0x1ef9, 0x1f00, 0x1f15, 0x1f18, 0x1f1d, 0x1f20, 0x1f45, 0x1f48, 0x1f4d, 0x1f50, 0x1f57, 0x1f59, 0x1f59, 0x1f5b, 0x1f5b, 0x1f5d, 0x1f5d, 0x1f5f, 0x1f7d, 0x1f80, 0x1fb4, 0x1fb6, 0x1fbc, 0x1fbe, 0x1fbe, 0x1fc2, 0x1fc4, 0x1fc6, 0x1fcc, 0x1fd0, 0x1fd3, 0x1fd6, 0x1fdb, 0x1fe0, 0x1fec, 0x1ff2, 0x1ff4, 0x1ff6, 0x1ffc, 0x200e, 0x200e, 0x2071, 0x2071, 0x207f, 0x207f, 0x2102, 0x2102, 0x2107, 0x2107, 0x210a, 0x2113, 0x2115, 0x2115, 0x2119, 0x211d, 0x2124, 0x2124, 0x2126, 0x2126, 0x2128, 0x2128, 0x212a, 0x212d, 0x212f, 0x2131, 0x2133, 0x2139, 0x213d, 0x213f, 0x2145, 0x2149, 0x2160, 0x2183, 0x2336, 0x237a, 0x2395, 0x2395, 0x249c, 0x24e9, 0x3005, 0x3007, 0x3021, 0x3029, 0x3031, 0x3035, 0x3038, 0x303c, 0x3041, 0x3096, 0x309d, 0x309f, 0x30a1, 0x30fa, 0x30fc, 0x30ff, 0x3105, 0x312c, 0x3131, 0x318e, 0x3190, 0x31b7, 0x31f0, 0x321c, 0x3220, 0x3243, 0x3260, 0x327b, 0x327f, 0x32b0, 0x32c0, 0x32cb, 0x32d0, 0x32fe, 0x3300, 0x3376, 0x337b, 0x33dd, 0x33e0, 0x33fe, 0x3400, 0x4db5, 0x4e00, 0x9fa5, 0xa000, 0xa48c, 0xac00, 0xd7a3, 0xd800, 0xfa2d, 0xfa30, 0xfa6a, 0xfb00, 0xfb06, 0xfb13, 0xfb17, 0xff21, 0xff3a, 0xff41, 0xff5a, 0xff66, 0xffbe, 0xffc2, 0xffc7, 0xffca, 0xffcf, 0xffd2, 0xffd7, 0xffda, 0xffdc, 0x10300, 0x1031e, 0x10320, 0x10323, 0x10330, 0x1034a, 0x10400, 0x10425, 0x10428, 0x1044d, 0x1d000, 0x1d0f5, 0x1d100, 0x1d126, 0x1d12a, 0x1d166, 0x1d16a, 0x1d172, 0x1d183, 0x1d184, 0x1d18c, 0x1d1a9, 0x1d1ae, 0x1d1dd, 0x1d400, 0x1d454, 0x1d456, 0x1d49c, 0x1d49e, 0x1d49f, 0x1d4a2, 0x1d4a2, 0x1d4a5, 0x1d4a6, 0x1d4a9, 0x1d4ac, 0x1d4ae, 0x1d4b9, 0x1d4bb, 0x1d4bb, 0x1d4bd, 0x1d4c0, 0x1d4c2, 0x1d4c3, 0x1d4c5, 0x1d505, 0x1d507, 0x1d50a, 0x1d50d, 0x1d514, 0x1d516, 0x1d51c, 0x1d51e, 0x1d539, 0x1d53b, 0x1d53e, 0x1d540, 0x1d544, 0x1d546, 0x1d546, 0x1d54a, 0x1d550, 0x1d552, 0x1d6a3, 0x1d6a8, 0x1d7c9, 0x20000, 0x2a6d6, 0x2f800, 0x2fa1d, 0xf0000, 0xffffd, 0x100000, 0x10fffd];\n// prettier-ignore-end\n\nconst isBidirectionalL = character => inRange(character, bidirectional_l);\n\n// 2.1.  Mapping\n\n/**\r\n * non-ASCII space characters [StringPrep, C.1.2] that can be\r\n * mapped to SPACE (U+0020)\r\n */\nconst mapping2space = isNonASCIISpaceCharacter;\n\n/**\r\n * the \"commonly mapped to nothing\" characters [StringPrep, B.1]\r\n * that can be mapped to nothing.\r\n */\nconst mapping2nothing = isCommonlyMappedToNothing;\n\n// utils\nconst getCodePoint = character => character.codePointAt(0);\nconst first = x => x[0];\nconst last = x => x[x.length - 1];\n\n/**\r\n * Convert provided string into an array of Unicode Code Points.\r\n * Based on https://stackoverflow.com/a/21409165/1556249\r\n * and https://www.npmjs.com/package/code-point-at.\r\n * @param {string} input\r\n * @returns {number[]}\r\n */\nfunction toCodePoints(input) {\n  const codepoints = [];\n  const size = input.length;\n  for (let i = 0; i < size; i += 1) {\n    const before = input.charCodeAt(i);\n    if (before >= 0xd800 && before <= 0xdbff && size > i + 1) {\n      const next = input.charCodeAt(i + 1);\n      if (next >= 0xdc00 && next <= 0xdfff) {\n        codepoints.push((before - 0xd800) * 0x400 + next - 0xdc00 + 0x10000);\n        i += 1;\n        continue;\n      }\n    }\n    codepoints.push(before);\n  }\n  return codepoints;\n}\n\n/**\r\n * SASLprep.\r\n * @param {string} input\r\n * @param {Object} opts\r\n * @param {boolean} opts.allowUnassigned\r\n * @returns {string}\r\n */\nfunction saslprep(input) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected string.');\n  }\n  if (input.length === 0) {\n    return '';\n  }\n\n  // 1. Map\n  const mapped_input = toCodePoints(input)\n  // 1.1 mapping to space\n  .map(character => mapping2space(character) ? 0x20 : character)\n  // 1.2 mapping to nothing\n  .filter(character => !mapping2nothing(character));\n\n  // 2. Normalize\n  const normalized_input = String.fromCodePoint.apply(null, mapped_input).normalize('NFKC');\n  const normalized_map = toCodePoints(normalized_input);\n\n  // 3. Prohibit\n  const hasProhibited = normalized_map.some(isProhibitedCharacter);\n  if (hasProhibited) {\n    throw new Error('Prohibited character, see https://tools.ietf.org/html/rfc4013#section-2.3');\n  }\n\n  // Unassigned Code Points\n  if (opts.allowUnassigned !== true) {\n    const hasUnassigned = normalized_map.some(isUnassignedCodePoint);\n    if (hasUnassigned) {\n      throw new Error('Unassigned code point, see https://tools.ietf.org/html/rfc4013#section-2.5');\n    }\n  }\n\n  // 4. check bidi\n\n  const hasBidiRAL = normalized_map.some(isBidirectionalRAL);\n  const hasBidiL = normalized_map.some(isBidirectionalL);\n\n  // 4.1 If a string contains any RandALCat character, the string MUST NOT\n  // contain any LCat character.\n  if (hasBidiRAL && hasBidiL) {\n    throw new Error('String must not contain RandALCat and LCat at the same time,' + ' see https://tools.ietf.org/html/rfc3454#section-6');\n  }\n\n  /**\r\n   * 4.2 If a string contains any RandALCat character, a RandALCat\r\n   * character MUST be the first character of the string, and a\r\n   * RandALCat character MUST be the last character of the string.\r\n   */\n\n  const isFirstBidiRAL = isBidirectionalRAL(getCodePoint(first(normalized_input)));\n  const isLastBidiRAL = isBidirectionalRAL(getCodePoint(last(normalized_input)));\n  if (hasBidiRAL && !(isFirstBidiRAL && isLastBidiRAL)) {\n    throw new Error('Bidirectional RandALCat character must be the first and the last' + ' character of the string, see https://tools.ietf.org/html/rfc3454#section-6');\n  }\n  return normalized_input;\n}\n\n/*\r\n   PDFSecurity - represents PDF security settings\r\n   By Yang Liu <hi@zesik.com>\r\n */\nclass PDFSecurity {\n  static generateFileID() {\n    let info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let infoStr = `${info.CreationDate.getTime()}\\n`;\n    for (let key in info) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (!info.hasOwnProperty(key)) {\n        continue;\n      }\n      infoStr += `${key}: ${info[key].valueOf()}\\n`;\n    }\n    return wordArrayToBuffer(crypto_js__WEBPACK_IMPORTED_MODULE_2___default().MD5(infoStr));\n  }\n  static generateRandomWordArray(bytes) {\n    return crypto_js__WEBPACK_IMPORTED_MODULE_2___default().lib.WordArray.random(bytes);\n  }\n  static create(document) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!options.ownerPassword && !options.userPassword) {\n      return null;\n    }\n    return new PDFSecurity(document, options);\n  }\n  constructor(document) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!options.ownerPassword && !options.userPassword) {\n      throw new Error('None of owner password and user password is defined.');\n    }\n    this.document = document;\n    this._setupEncryption(options);\n  }\n  _setupEncryption(options) {\n    switch (options.pdfVersion) {\n      case '1.4':\n      case '1.5':\n        this.version = 2;\n        break;\n      case '1.6':\n      case '1.7':\n        this.version = 4;\n        break;\n      case '1.7ext3':\n        this.version = 5;\n        break;\n      default:\n        this.version = 1;\n        break;\n    }\n    const encDict = {\n      Filter: 'Standard'\n    };\n    switch (this.version) {\n      case 1:\n      case 2:\n      case 4:\n        this._setupEncryptionV1V2V4(this.version, encDict, options);\n        break;\n      case 5:\n        this._setupEncryptionV5(encDict, options);\n        break;\n    }\n    this.dictionary = this.document.ref(encDict);\n  }\n  _setupEncryptionV1V2V4(v, encDict, options) {\n    let r, permissions;\n    switch (v) {\n      case 1:\n        r = 2;\n        this.keyBits = 40;\n        permissions = getPermissionsR2(options.permissions);\n        break;\n      case 2:\n        r = 3;\n        this.keyBits = 128;\n        permissions = getPermissionsR3(options.permissions);\n        break;\n      case 4:\n        r = 4;\n        this.keyBits = 128;\n        permissions = getPermissionsR3(options.permissions);\n        break;\n    }\n    const paddedUserPassword = processPasswordR2R3R4(options.userPassword);\n    const paddedOwnerPassword = options.ownerPassword ? processPasswordR2R3R4(options.ownerPassword) : paddedUserPassword;\n    const ownerPasswordEntry = getOwnerPasswordR2R3R4(r, this.keyBits, paddedUserPassword, paddedOwnerPassword);\n    this.encryptionKey = getEncryptionKeyR2R3R4(r, this.keyBits, this.document._id, paddedUserPassword, ownerPasswordEntry, permissions);\n    let userPasswordEntry;\n    if (r === 2) {\n      userPasswordEntry = getUserPasswordR2(this.encryptionKey);\n    } else {\n      userPasswordEntry = getUserPasswordR3R4(this.document._id, this.encryptionKey);\n    }\n    encDict.V = v;\n    if (v >= 2) {\n      encDict.Length = this.keyBits;\n    }\n    if (v === 4) {\n      encDict.CF = {\n        StdCF: {\n          AuthEvent: 'DocOpen',\n          CFM: 'AESV2',\n          Length: this.keyBits / 8\n        }\n      };\n      encDict.StmF = 'StdCF';\n      encDict.StrF = 'StdCF';\n    }\n    encDict.R = r;\n    encDict.O = wordArrayToBuffer(ownerPasswordEntry);\n    encDict.U = wordArrayToBuffer(userPasswordEntry);\n    encDict.P = permissions;\n  }\n  _setupEncryptionV5(encDict, options) {\n    this.keyBits = 256;\n    const permissions = getPermissionsR3(options.permissions);\n    const processedUserPassword = processPasswordR5(options.userPassword);\n    const processedOwnerPassword = options.ownerPassword ? processPasswordR5(options.ownerPassword) : processedUserPassword;\n    this.encryptionKey = getEncryptionKeyR5(PDFSecurity.generateRandomWordArray);\n    const userPasswordEntry = getUserPasswordR5(processedUserPassword, PDFSecurity.generateRandomWordArray);\n    const userKeySalt = crypto_js__WEBPACK_IMPORTED_MODULE_2___default().lib.WordArray.create(userPasswordEntry.words.slice(10, 12), 8);\n    const userEncryptionKeyEntry = getUserEncryptionKeyR5(processedUserPassword, userKeySalt, this.encryptionKey);\n    const ownerPasswordEntry = getOwnerPasswordR5(processedOwnerPassword, userPasswordEntry, PDFSecurity.generateRandomWordArray);\n    const ownerKeySalt = crypto_js__WEBPACK_IMPORTED_MODULE_2___default().lib.WordArray.create(ownerPasswordEntry.words.slice(10, 12), 8);\n    const ownerEncryptionKeyEntry = getOwnerEncryptionKeyR5(processedOwnerPassword, ownerKeySalt, userPasswordEntry, this.encryptionKey);\n    const permsEntry = getEncryptedPermissionsR5(permissions, this.encryptionKey, PDFSecurity.generateRandomWordArray);\n    encDict.V = 5;\n    encDict.Length = this.keyBits;\n    encDict.CF = {\n      StdCF: {\n        AuthEvent: 'DocOpen',\n        CFM: 'AESV3',\n        Length: this.keyBits / 8\n      }\n    };\n    encDict.StmF = 'StdCF';\n    encDict.StrF = 'StdCF';\n    encDict.R = 5;\n    encDict.O = wordArrayToBuffer(ownerPasswordEntry);\n    encDict.OE = wordArrayToBuffer(ownerEncryptionKeyEntry);\n    encDict.U = wordArrayToBuffer(userPasswordEntry);\n    encDict.UE = wordArrayToBuffer(userEncryptionKeyEntry);\n    encDict.P = permissions;\n    encDict.Perms = wordArrayToBuffer(permsEntry);\n  }\n  getEncryptFn(obj, gen) {\n    let digest;\n    if (this.version < 5) {\n      digest = this.encryptionKey.clone().concat(crypto_js__WEBPACK_IMPORTED_MODULE_2___default().lib.WordArray.create([(obj & 0xff) << 24 | (obj & 0xff00) << 8 | obj >> 8 & 0xff00 | gen & 0xff, (gen & 0xff00) << 16], 5));\n    }\n    if (this.version === 1 || this.version === 2) {\n      let key = crypto_js__WEBPACK_IMPORTED_MODULE_2___default().MD5(digest);\n      key.sigBytes = Math.min(16, this.keyBits / 8 + 5);\n      return buffer => wordArrayToBuffer(crypto_js__WEBPACK_IMPORTED_MODULE_2___default().RC4.encrypt(crypto_js__WEBPACK_IMPORTED_MODULE_2___default().lib.WordArray.create(buffer), key).ciphertext);\n    }\n    let key;\n    if (this.version === 4) {\n      key = crypto_js__WEBPACK_IMPORTED_MODULE_2___default().MD5(digest.concat(crypto_js__WEBPACK_IMPORTED_MODULE_2___default().lib.WordArray.create([0x73416c54], 4)));\n    } else {\n      key = this.encryptionKey;\n    }\n    const iv = PDFSecurity.generateRandomWordArray(16);\n    const options = {\n      mode: (crypto_js__WEBPACK_IMPORTED_MODULE_2___default().mode).CBC,\n      padding: (crypto_js__WEBPACK_IMPORTED_MODULE_2___default().pad).Pkcs7,\n      iv\n    };\n    return buffer => wordArrayToBuffer(iv.clone().concat(crypto_js__WEBPACK_IMPORTED_MODULE_2___default().AES.encrypt(crypto_js__WEBPACK_IMPORTED_MODULE_2___default().lib.WordArray.create(buffer), key, options).ciphertext));\n  }\n  end() {\n    this.dictionary.end();\n  }\n}\nfunction getPermissionsR2() {\n  let permissionObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let permissions = 0xffffffc0 >> 0;\n  if (permissionObject.printing) {\n    permissions |= 0b000000000100;\n  }\n  if (permissionObject.modifying) {\n    permissions |= 0b000000001000;\n  }\n  if (permissionObject.copying) {\n    permissions |= 0b000000010000;\n  }\n  if (permissionObject.annotating) {\n    permissions |= 0b000000100000;\n  }\n  return permissions;\n}\nfunction getPermissionsR3() {\n  let permissionObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let permissions = 0xfffff0c0 >> 0;\n  if (permissionObject.printing === 'lowResolution') {\n    permissions |= 0b000000000100;\n  }\n  if (permissionObject.printing === 'highResolution') {\n    permissions |= 0b100000000100;\n  }\n  if (permissionObject.modifying) {\n    permissions |= 0b000000001000;\n  }\n  if (permissionObject.copying) {\n    permissions |= 0b000000010000;\n  }\n  if (permissionObject.annotating) {\n    permissions |= 0b000000100000;\n  }\n  if (permissionObject.fillingForms) {\n    permissions |= 0b000100000000;\n  }\n  if (permissionObject.contentAccessibility) {\n    permissions |= 0b001000000000;\n  }\n  if (permissionObject.documentAssembly) {\n    permissions |= 0b010000000000;\n  }\n  return permissions;\n}\nfunction getUserPasswordR2(encryptionKey) {\n  return crypto_js__WEBPACK_IMPORTED_MODULE_2___default().RC4.encrypt(processPasswordR2R3R4(), encryptionKey).ciphertext;\n}\nfunction getUserPasswordR3R4(documentId, encryptionKey) {\n  const key = encryptionKey.clone();\n  let cipher = crypto_js__WEBPACK_IMPORTED_MODULE_2___default().MD5(processPasswordR2R3R4().concat(crypto_js__WEBPACK_IMPORTED_MODULE_2___default().lib.WordArray.create(documentId)));\n  for (let i = 0; i < 20; i++) {\n    const xorRound = Math.ceil(key.sigBytes / 4);\n    for (let j = 0; j < xorRound; j++) {\n      key.words[j] = encryptionKey.words[j] ^ (i | i << 8 | i << 16 | i << 24);\n    }\n    cipher = crypto_js__WEBPACK_IMPORTED_MODULE_2___default().RC4.encrypt(cipher, key).ciphertext;\n  }\n  return cipher.concat(crypto_js__WEBPACK_IMPORTED_MODULE_2___default().lib.WordArray.create(null, 16));\n}\nfunction getOwnerPasswordR2R3R4(r, keyBits, paddedUserPassword, paddedOwnerPassword) {\n  let digest = paddedOwnerPassword;\n  let round = r >= 3 ? 51 : 1;\n  for (let i = 0; i < round; i++) {\n    digest = crypto_js__WEBPACK_IMPORTED_MODULE_2___default().MD5(digest);\n  }\n  const key = digest.clone();\n  key.sigBytes = keyBits / 8;\n  let cipher = paddedUserPassword;\n  round = r >= 3 ? 20 : 1;\n  for (let i = 0; i < round; i++) {\n    const xorRound = Math.ceil(key.sigBytes / 4);\n    for (let j = 0; j < xorRound; j++) {\n      key.words[j] = digest.words[j] ^ (i | i << 8 | i << 16 | i << 24);\n    }\n    cipher = crypto_js__WEBPACK_IMPORTED_MODULE_2___default().RC4.encrypt(cipher, key).ciphertext;\n  }\n  return cipher;\n}\nfunction getEncryptionKeyR2R3R4(r, keyBits, documentId, paddedUserPassword, ownerPasswordEntry, permissions) {\n  let key = paddedUserPassword.clone().concat(ownerPasswordEntry).concat(crypto_js__WEBPACK_IMPORTED_MODULE_2___default().lib.WordArray.create([lsbFirstWord(permissions)], 4)).concat(crypto_js__WEBPACK_IMPORTED_MODULE_2___default().lib.WordArray.create(documentId));\n  const round = r >= 3 ? 51 : 1;\n  for (let i = 0; i < round; i++) {\n    key = crypto_js__WEBPACK_IMPORTED_MODULE_2___default().MD5(key);\n    key.sigBytes = keyBits / 8;\n  }\n  return key;\n}\nfunction getUserPasswordR5(processedUserPassword, generateRandomWordArray) {\n  const validationSalt = generateRandomWordArray(8);\n  const keySalt = generateRandomWordArray(8);\n  return crypto_js__WEBPACK_IMPORTED_MODULE_2___default().SHA256(processedUserPassword.clone().concat(validationSalt)).concat(validationSalt).concat(keySalt);\n}\nfunction getUserEncryptionKeyR5(processedUserPassword, userKeySalt, encryptionKey) {\n  const key = crypto_js__WEBPACK_IMPORTED_MODULE_2___default().SHA256(processedUserPassword.clone().concat(userKeySalt));\n  const options = {\n    mode: (crypto_js__WEBPACK_IMPORTED_MODULE_2___default().mode).CBC,\n    padding: (crypto_js__WEBPACK_IMPORTED_MODULE_2___default().pad).NoPadding,\n    iv: crypto_js__WEBPACK_IMPORTED_MODULE_2___default().lib.WordArray.create(null, 16)\n  };\n  return crypto_js__WEBPACK_IMPORTED_MODULE_2___default().AES.encrypt(encryptionKey, key, options).ciphertext;\n}\nfunction getOwnerPasswordR5(processedOwnerPassword, userPasswordEntry, generateRandomWordArray) {\n  const validationSalt = generateRandomWordArray(8);\n  const keySalt = generateRandomWordArray(8);\n  return crypto_js__WEBPACK_IMPORTED_MODULE_2___default().SHA256(processedOwnerPassword.clone().concat(validationSalt).concat(userPasswordEntry)).concat(validationSalt).concat(keySalt);\n}\nfunction getOwnerEncryptionKeyR5(processedOwnerPassword, ownerKeySalt, userPasswordEntry, encryptionKey) {\n  const key = crypto_js__WEBPACK_IMPORTED_MODULE_2___default().SHA256(processedOwnerPassword.clone().concat(ownerKeySalt).concat(userPasswordEntry));\n  const options = {\n    mode: (crypto_js__WEBPACK_IMPORTED_MODULE_2___default().mode).CBC,\n    padding: (crypto_js__WEBPACK_IMPORTED_MODULE_2___default().pad).NoPadding,\n    iv: crypto_js__WEBPACK_IMPORTED_MODULE_2___default().lib.WordArray.create(null, 16)\n  };\n  return crypto_js__WEBPACK_IMPORTED_MODULE_2___default().AES.encrypt(encryptionKey, key, options).ciphertext;\n}\nfunction getEncryptionKeyR5(generateRandomWordArray) {\n  return generateRandomWordArray(32);\n}\nfunction getEncryptedPermissionsR5(permissions, encryptionKey, generateRandomWordArray) {\n  const cipher = crypto_js__WEBPACK_IMPORTED_MODULE_2___default().lib.WordArray.create([lsbFirstWord(permissions), 0xffffffff, 0x54616462], 12).concat(generateRandomWordArray(4));\n  const options = {\n    mode: (crypto_js__WEBPACK_IMPORTED_MODULE_2___default().mode).ECB,\n    padding: (crypto_js__WEBPACK_IMPORTED_MODULE_2___default().pad).NoPadding\n  };\n  return crypto_js__WEBPACK_IMPORTED_MODULE_2___default().AES.encrypt(cipher, encryptionKey, options).ciphertext;\n}\nfunction processPasswordR2R3R4() {\n  let password = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  const out = Buffer.alloc(32);\n  const length = password.length;\n  let index = 0;\n  while (index < length && index < 32) {\n    const code = password.charCodeAt(index);\n    if (code > 0xff) {\n      throw new Error('Password contains one or more invalid characters.');\n    }\n    out[index] = code;\n    index++;\n  }\n  while (index < 32) {\n    out[index] = PASSWORD_PADDING[index - length];\n    index++;\n  }\n  return crypto_js__WEBPACK_IMPORTED_MODULE_2___default().lib.WordArray.create(out);\n}\nfunction processPasswordR5() {\n  let password = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  password = unescape(encodeURIComponent(saslprep(password)));\n  const length = Math.min(127, password.length);\n  const out = Buffer.alloc(length);\n  for (let i = 0; i < length; i++) {\n    out[i] = password.charCodeAt(i);\n  }\n  return crypto_js__WEBPACK_IMPORTED_MODULE_2___default().lib.WordArray.create(out);\n}\nfunction lsbFirstWord(data) {\n  return (data & 0xff) << 24 | (data & 0xff00) << 8 | data >> 8 & 0xff00 | data >> 24 & 0xff;\n}\nfunction wordArrayToBuffer(wordArray) {\n  const byteArray = [];\n  for (let i = 0; i < wordArray.sigBytes; i++) {\n    byteArray.push(wordArray.words[Math.floor(i / 4)] >> 8 * (3 - i % 4) & 0xff);\n  }\n  return Buffer.from(byteArray);\n}\nconst PASSWORD_PADDING = [0x28, 0xbf, 0x4e, 0x5e, 0x4e, 0x75, 0x8a, 0x41, 0x64, 0x00, 0x4e, 0x56, 0xff, 0xfa, 0x01, 0x08, 0x2e, 0x2e, 0x00, 0xb6, 0xd0, 0x68, 0x3e, 0x80, 0x2f, 0x0c, 0xa9, 0xfe, 0x64, 0x53, 0x69, 0x7a];\n\nconst {\n  number\n} = PDFObject;\nclass PDFGradient {\n  constructor(doc) {\n    this.doc = doc;\n    this.stops = [];\n    this.embedded = false;\n    this.transform = [1, 0, 0, 1, 0, 0];\n  }\n  stop(pos, color, opacity) {\n    if (opacity == null) {\n      opacity = 1;\n    }\n    color = this.doc._normalizeColor(color);\n    if (this.stops.length === 0) {\n      if (color.length === 3) {\n        this._colorSpace = 'DeviceRGB';\n      } else if (color.length === 4) {\n        this._colorSpace = 'DeviceCMYK';\n      } else if (color.length === 1) {\n        this._colorSpace = 'DeviceGray';\n      } else {\n        throw new Error('Unknown color space');\n      }\n    } else if (this._colorSpace === 'DeviceRGB' && color.length !== 3 || this._colorSpace === 'DeviceCMYK' && color.length !== 4 || this._colorSpace === 'DeviceGray' && color.length !== 1) {\n      throw new Error('All gradient stops must use the same color space');\n    }\n    opacity = Math.max(0, Math.min(1, opacity));\n    this.stops.push([pos, color, opacity]);\n    return this;\n  }\n  setTransform(m11, m12, m21, m22, dx, dy) {\n    this.transform = [m11, m12, m21, m22, dx, dy];\n    return this;\n  }\n  embed(m) {\n    let fn;\n    const stopsLength = this.stops.length;\n    if (stopsLength === 0) {\n      return;\n    }\n    this.embedded = true;\n    this.matrix = m;\n\n    // if the last stop comes before 100%, add a copy at 100%\n    const last = this.stops[stopsLength - 1];\n    if (last[0] < 1) {\n      this.stops.push([1, last[1], last[2]]);\n    }\n    const bounds = [];\n    const encode = [];\n    const stops = [];\n    for (let i = 0; i < stopsLength - 1; i++) {\n      encode.push(0, 1);\n      if (i + 2 !== stopsLength) {\n        bounds.push(this.stops[i + 1][0]);\n      }\n      fn = this.doc.ref({\n        FunctionType: 2,\n        Domain: [0, 1],\n        C0: this.stops[i + 0][1],\n        C1: this.stops[i + 1][1],\n        N: 1\n      });\n      stops.push(fn);\n      fn.end();\n    }\n\n    // if there are only two stops, we don't need a stitching function\n    if (stopsLength === 1) {\n      fn = stops[0];\n    } else {\n      fn = this.doc.ref({\n        FunctionType: 3,\n        // stitching function\n        Domain: [0, 1],\n        Functions: stops,\n        Bounds: bounds,\n        Encode: encode\n      });\n      fn.end();\n    }\n    this.id = `Sh${++this.doc._gradCount}`;\n    const shader = this.shader(fn);\n    shader.end();\n    const pattern = this.doc.ref({\n      Type: 'Pattern',\n      PatternType: 2,\n      Shading: shader,\n      Matrix: this.matrix.map(number)\n    });\n    pattern.end();\n    if (this.stops.some(stop => stop[2] < 1)) {\n      let grad = this.opacityGradient();\n      grad._colorSpace = 'DeviceGray';\n      for (let stop of this.stops) {\n        grad.stop(stop[0], [stop[2]]);\n      }\n      grad = grad.embed(this.matrix);\n      const pageBBox = [0, 0, this.doc.page.width, this.doc.page.height];\n      const form = this.doc.ref({\n        Type: 'XObject',\n        Subtype: 'Form',\n        FormType: 1,\n        BBox: pageBBox,\n        Group: {\n          Type: 'Group',\n          S: 'Transparency',\n          CS: 'DeviceGray'\n        },\n        Resources: {\n          ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI'],\n          Pattern: {\n            Sh1: grad\n          }\n        }\n      });\n      form.write('/Pattern cs /Sh1 scn');\n      form.end(`${pageBBox.join(' ')} re f`);\n      const gstate = this.doc.ref({\n        Type: 'ExtGState',\n        SMask: {\n          Type: 'Mask',\n          S: 'Luminosity',\n          G: form\n        }\n      });\n      gstate.end();\n      const opacityPattern = this.doc.ref({\n        Type: 'Pattern',\n        PatternType: 1,\n        PaintType: 1,\n        TilingType: 2,\n        BBox: pageBBox,\n        XStep: pageBBox[2],\n        YStep: pageBBox[3],\n        Resources: {\n          ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI'],\n          Pattern: {\n            Sh1: pattern\n          },\n          ExtGState: {\n            Gs1: gstate\n          }\n        }\n      });\n      opacityPattern.write('/Gs1 gs /Pattern cs /Sh1 scn');\n      opacityPattern.end(`${pageBBox.join(' ')} re f`);\n      this.doc.page.patterns[this.id] = opacityPattern;\n    } else {\n      this.doc.page.patterns[this.id] = pattern;\n    }\n    return pattern;\n  }\n  apply(stroke) {\n    // apply gradient transform to existing document ctm\n    const [m0, m1, m2, m3, m4, m5] = this.doc._ctm;\n    const [m11, m12, m21, m22, dx, dy] = this.transform;\n    const m = [m0 * m11 + m2 * m12, m1 * m11 + m3 * m12, m0 * m21 + m2 * m22, m1 * m21 + m3 * m22, m0 * dx + m2 * dy + m4, m1 * dx + m3 * dy + m5];\n    if (!this.embedded || m.join(' ') !== this.matrix.join(' ')) {\n      this.embed(m);\n    }\n    this.doc._setColorSpace('Pattern', stroke);\n    const op = stroke ? 'SCN' : 'scn';\n    return this.doc.addContent(`/${this.id} ${op}`);\n  }\n}\nclass PDFLinearGradient extends PDFGradient {\n  constructor(doc, x1, y1, x2, y2) {\n    super(doc);\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n  }\n  shader(fn) {\n    return this.doc.ref({\n      ShadingType: 2,\n      ColorSpace: this._colorSpace,\n      Coords: [this.x1, this.y1, this.x2, this.y2],\n      Function: fn,\n      Extend: [true, true]\n    });\n  }\n  opacityGradient() {\n    return new PDFLinearGradient(this.doc, this.x1, this.y1, this.x2, this.y2);\n  }\n}\nclass PDFRadialGradient extends PDFGradient {\n  constructor(doc, x1, y1, r1, x2, y2, r2) {\n    super(doc);\n    this.doc = doc;\n    this.x1 = x1;\n    this.y1 = y1;\n    this.r1 = r1;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.r2 = r2;\n  }\n  shader(fn) {\n    return this.doc.ref({\n      ShadingType: 3,\n      ColorSpace: this._colorSpace,\n      Coords: [this.x1, this.y1, this.r1, this.x2, this.y2, this.r2],\n      Function: fn,\n      Extend: [true, true]\n    });\n  }\n  opacityGradient() {\n    return new PDFRadialGradient(this.doc, this.x1, this.y1, this.r1, this.x2, this.y2, this.r2);\n  }\n}\nvar Gradient = {\n  PDFGradient,\n  PDFLinearGradient,\n  PDFRadialGradient\n};\n\n/*\r\nPDF tiling pattern support. Uncolored only.\r\n */\n\nconst underlyingColorSpaces = ['DeviceCMYK', 'DeviceRGB'];\nclass PDFTilingPattern {\n  constructor(doc, bBox, xStep, yStep, stream) {\n    this.doc = doc;\n    this.bBox = bBox;\n    this.xStep = xStep;\n    this.yStep = yStep;\n    this.stream = stream;\n  }\n  createPattern() {\n    // no resources needed for our current usage\n    // required entry\n    const resources = this.doc.ref();\n    resources.end();\n    // apply default transform matrix (flipped in the default doc._ctm)\n    // see document.js & gradient.js\n    const [m0, m1, m2, m3, m4, m5] = this.doc._ctm;\n    const [m11, m12, m21, m22, dx, dy] = [1, 0, 0, 1, 0, 0];\n    const m = [m0 * m11 + m2 * m12, m1 * m11 + m3 * m12, m0 * m21 + m2 * m22, m1 * m21 + m3 * m22, m0 * dx + m2 * dy + m4, m1 * dx + m3 * dy + m5];\n    const pattern = this.doc.ref({\n      Type: 'Pattern',\n      PatternType: 1,\n      // tiling\n      PaintType: 2,\n      // 1-colored, 2-uncolored\n      TilingType: 2,\n      // 2-no distortion\n      BBox: this.bBox,\n      XStep: this.xStep,\n      YStep: this.yStep,\n      Matrix: m.map(v => +v.toFixed(5)),\n      Resources: resources\n    });\n    pattern.end(this.stream);\n    return pattern;\n  }\n  embedPatternColorSpaces() {\n    // map each pattern to an underlying color space\n    // and embed on each page\n    underlyingColorSpaces.forEach(csName => {\n      const csId = this.getPatternColorSpaceId(csName);\n      if (this.doc.page.colorSpaces[csId]) return;\n      const cs = this.doc.ref(['Pattern', csName]);\n      cs.end();\n      this.doc.page.colorSpaces[csId] = cs;\n    });\n  }\n  getPatternColorSpaceId(underlyingColorspace) {\n    return `CsP${underlyingColorspace}`;\n  }\n  embed() {\n    if (!this.id) {\n      this.doc._patternCount = this.doc._patternCount + 1;\n      this.id = 'P' + this.doc._patternCount;\n      this.pattern = this.createPattern();\n    }\n\n    // patterns are embedded in each page\n    if (!this.doc.page.patterns[this.id]) {\n      this.doc.page.patterns[this.id] = this.pattern;\n    }\n  }\n  apply(stroke, patternColor) {\n    // do any embedding/creating that might be needed\n    this.embedPatternColorSpaces();\n    this.embed();\n    const normalizedColor = this.doc._normalizeColor(patternColor);\n    if (!normalizedColor) throw Error(`invalid pattern color. (value: ${patternColor})`);\n\n    // select one of the pattern color spaces\n    const csId = this.getPatternColorSpaceId(this.doc._getColorSpace(normalizedColor));\n    this.doc._setColorSpace(csId, stroke);\n\n    // stroke/fill using the pattern and color (in the above underlying color space)\n    const op = stroke ? 'SCN' : 'scn';\n    return this.doc.addContent(`${normalizedColor.join(' ')} /${this.id} ${op}`);\n  }\n}\nvar pattern = {\n  PDFTilingPattern\n};\n\nconst {\n  PDFGradient: PDFGradient$1,\n  PDFLinearGradient: PDFLinearGradient$1,\n  PDFRadialGradient: PDFRadialGradient$1\n} = Gradient;\nconst {\n  PDFTilingPattern: PDFTilingPattern$1\n} = pattern;\nvar ColorMixin = {\n  initColor() {\n    this.spotColors = {};\n    // The opacity dictionaries\n    this._opacityRegistry = {};\n    this._opacityCount = 0;\n    this._patternCount = 0;\n    return this._gradCount = 0;\n  },\n  _normalizeColor(color) {\n    if (typeof color === 'string') {\n      if (color.charAt(0) === '#') {\n        if (color.length === 4) {\n          color = color.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, '#$1$1$2$2$3$3');\n        }\n        const hex = parseInt(color.slice(1), 16);\n        color = [hex >> 16, hex >> 8 & 0xff, hex & 0xff];\n      } else if (namedColors[color]) {\n        color = namedColors[color];\n      } else if (this.spotColors[color]) {\n        return this.spotColors[color];\n      }\n    }\n    if (Array.isArray(color)) {\n      // RGB\n      if (color.length === 3) {\n        color = color.map(part => part / 255);\n        // CMYK\n      } else if (color.length === 4) {\n        color = color.map(part => part / 100);\n      }\n      return color;\n    }\n    return null;\n  },\n  _setColor(color, stroke) {\n    if (color instanceof PDFGradient$1) {\n      color.apply(stroke);\n      return true;\n      // see if tiling pattern, decode & apply it it\n    } else if (Array.isArray(color) && color[0] instanceof PDFTilingPattern$1) {\n      color[0].apply(stroke, color[1]);\n      return true;\n    }\n    // any other case should be a normal color and not a pattern\n    return this._setColorCore(color, stroke);\n  },\n  _setColorCore(color, stroke) {\n    color = this._normalizeColor(color);\n    if (!color) {\n      return false;\n    }\n    const op = stroke ? 'SCN' : 'scn';\n    const space = this._getColorSpace(color);\n    this._setColorSpace(space, stroke);\n    if (color instanceof SpotColor) {\n      this.page.colorSpaces[color.id] = color.ref;\n      this.addContent(`1 ${op}`);\n    } else {\n      this.addContent(`${color.join(' ')} ${op}`);\n    }\n    return true;\n  },\n  _setColorSpace(space, stroke) {\n    const op = stroke ? 'CS' : 'cs';\n    return this.addContent(`/${space} ${op}`);\n  },\n  _getColorSpace(color) {\n    if (color instanceof SpotColor) {\n      return color.id;\n    }\n    return color.length === 4 ? 'DeviceCMYK' : 'DeviceRGB';\n  },\n  fillColor(color, opacity) {\n    const set = this._setColor(color, false);\n    if (set) {\n      this.fillOpacity(opacity);\n    }\n\n    // save this for text wrapper, which needs to reset\n    // the fill color on new pages\n    this._fillColor = [color, opacity];\n    return this;\n  },\n  strokeColor(color, opacity) {\n    const set = this._setColor(color, true);\n    if (set) {\n      this.strokeOpacity(opacity);\n    }\n    return this;\n  },\n  opacity(opacity) {\n    this._doOpacity(opacity, opacity);\n    return this;\n  },\n  fillOpacity(opacity) {\n    this._doOpacity(opacity, null);\n    return this;\n  },\n  strokeOpacity(opacity) {\n    this._doOpacity(null, opacity);\n    return this;\n  },\n  _doOpacity(fillOpacity, strokeOpacity) {\n    let dictionary, name;\n    if (fillOpacity == null && strokeOpacity == null) {\n      return;\n    }\n    if (fillOpacity != null) {\n      fillOpacity = Math.max(0, Math.min(1, fillOpacity));\n    }\n    if (strokeOpacity != null) {\n      strokeOpacity = Math.max(0, Math.min(1, strokeOpacity));\n    }\n    const key = `${fillOpacity}_${strokeOpacity}`;\n    if (this._opacityRegistry[key]) {\n      [dictionary, name] = this._opacityRegistry[key];\n    } else {\n      dictionary = {\n        Type: 'ExtGState'\n      };\n      if (fillOpacity != null) {\n        dictionary.ca = fillOpacity;\n      }\n      if (strokeOpacity != null) {\n        dictionary.CA = strokeOpacity;\n      }\n      dictionary = this.ref(dictionary);\n      dictionary.end();\n      const id = ++this._opacityCount;\n      name = `Gs${id}`;\n      this._opacityRegistry[key] = [dictionary, name];\n    }\n    this.page.ext_gstates[name] = dictionary;\n    return this.addContent(`/${name} gs`);\n  },\n  linearGradient(x1, y1, x2, y2) {\n    return new PDFLinearGradient$1(this, x1, y1, x2, y2);\n  },\n  radialGradient(x1, y1, r1, x2, y2, r2) {\n    return new PDFRadialGradient$1(this, x1, y1, r1, x2, y2, r2);\n  },\n  pattern(bbox, xStep, yStep, stream) {\n    return new PDFTilingPattern$1(this, bbox, xStep, yStep, stream);\n  },\n  addSpotColor(name, C, M, Y, K) {\n    const color = new SpotColor(this, name, C, M, Y, K);\n    this.spotColors[name] = color;\n    return this;\n  }\n};\nvar namedColors = {\n  aliceblue: [240, 248, 255],\n  antiquewhite: [250, 235, 215],\n  aqua: [0, 255, 255],\n  aquamarine: [127, 255, 212],\n  azure: [240, 255, 255],\n  beige: [245, 245, 220],\n  bisque: [255, 228, 196],\n  black: [0, 0, 0],\n  blanchedalmond: [255, 235, 205],\n  blue: [0, 0, 255],\n  blueviolet: [138, 43, 226],\n  brown: [165, 42, 42],\n  burlywood: [222, 184, 135],\n  cadetblue: [95, 158, 160],\n  chartreuse: [127, 255, 0],\n  chocolate: [210, 105, 30],\n  coral: [255, 127, 80],\n  cornflowerblue: [100, 149, 237],\n  cornsilk: [255, 248, 220],\n  crimson: [220, 20, 60],\n  cyan: [0, 255, 255],\n  darkblue: [0, 0, 139],\n  darkcyan: [0, 139, 139],\n  darkgoldenrod: [184, 134, 11],\n  darkgray: [169, 169, 169],\n  darkgreen: [0, 100, 0],\n  darkgrey: [169, 169, 169],\n  darkkhaki: [189, 183, 107],\n  darkmagenta: [139, 0, 139],\n  darkolivegreen: [85, 107, 47],\n  darkorange: [255, 140, 0],\n  darkorchid: [153, 50, 204],\n  darkred: [139, 0, 0],\n  darksalmon: [233, 150, 122],\n  darkseagreen: [143, 188, 143],\n  darkslateblue: [72, 61, 139],\n  darkslategray: [47, 79, 79],\n  darkslategrey: [47, 79, 79],\n  darkturquoise: [0, 206, 209],\n  darkviolet: [148, 0, 211],\n  deeppink: [255, 20, 147],\n  deepskyblue: [0, 191, 255],\n  dimgray: [105, 105, 105],\n  dimgrey: [105, 105, 105],\n  dodgerblue: [30, 144, 255],\n  firebrick: [178, 34, 34],\n  floralwhite: [255, 250, 240],\n  forestgreen: [34, 139, 34],\n  fuchsia: [255, 0, 255],\n  gainsboro: [220, 220, 220],\n  ghostwhite: [248, 248, 255],\n  gold: [255, 215, 0],\n  goldenrod: [218, 165, 32],\n  gray: [128, 128, 128],\n  grey: [128, 128, 128],\n  green: [0, 128, 0],\n  greenyellow: [173, 255, 47],\n  honeydew: [240, 255, 240],\n  hotpink: [255, 105, 180],\n  indianred: [205, 92, 92],\n  indigo: [75, 0, 130],\n  ivory: [255, 255, 240],\n  khaki: [240, 230, 140],\n  lavender: [230, 230, 250],\n  lavenderblush: [255, 240, 245],\n  lawngreen: [124, 252, 0],\n  lemonchiffon: [255, 250, 205],\n  lightblue: [173, 216, 230],\n  lightcoral: [240, 128, 128],\n  lightcyan: [224, 255, 255],\n  lightgoldenrodyellow: [250, 250, 210],\n  lightgray: [211, 211, 211],\n  lightgreen: [144, 238, 144],\n  lightgrey: [211, 211, 211],\n  lightpink: [255, 182, 193],\n  lightsalmon: [255, 160, 122],\n  lightseagreen: [32, 178, 170],\n  lightskyblue: [135, 206, 250],\n  lightslategray: [119, 136, 153],\n  lightslategrey: [119, 136, 153],\n  lightsteelblue: [176, 196, 222],\n  lightyellow: [255, 255, 224],\n  lime: [0, 255, 0],\n  limegreen: [50, 205, 50],\n  linen: [250, 240, 230],\n  magenta: [255, 0, 255],\n  maroon: [128, 0, 0],\n  mediumaquamarine: [102, 205, 170],\n  mediumblue: [0, 0, 205],\n  mediumorchid: [186, 85, 211],\n  mediumpurple: [147, 112, 219],\n  mediumseagreen: [60, 179, 113],\n  mediumslateblue: [123, 104, 238],\n  mediumspringgreen: [0, 250, 154],\n  mediumturquoise: [72, 209, 204],\n  mediumvioletred: [199, 21, 133],\n  midnightblue: [25, 25, 112],\n  mintcream: [245, 255, 250],\n  mistyrose: [255, 228, 225],\n  moccasin: [255, 228, 181],\n  navajowhite: [255, 222, 173],\n  navy: [0, 0, 128],\n  oldlace: [253, 245, 230],\n  olive: [128, 128, 0],\n  olivedrab: [107, 142, 35],\n  orange: [255, 165, 0],\n  orangered: [255, 69, 0],\n  orchid: [218, 112, 214],\n  palegoldenrod: [238, 232, 170],\n  palegreen: [152, 251, 152],\n  paleturquoise: [175, 238, 238],\n  palevioletred: [219, 112, 147],\n  papayawhip: [255, 239, 213],\n  peachpuff: [255, 218, 185],\n  peru: [205, 133, 63],\n  pink: [255, 192, 203],\n  plum: [221, 160, 221],\n  powderblue: [176, 224, 230],\n  purple: [128, 0, 128],\n  red: [255, 0, 0],\n  rosybrown: [188, 143, 143],\n  royalblue: [65, 105, 225],\n  saddlebrown: [139, 69, 19],\n  salmon: [250, 128, 114],\n  sandybrown: [244, 164, 96],\n  seagreen: [46, 139, 87],\n  seashell: [255, 245, 238],\n  sienna: [160, 82, 45],\n  silver: [192, 192, 192],\n  skyblue: [135, 206, 235],\n  slateblue: [106, 90, 205],\n  slategray: [112, 128, 144],\n  slategrey: [112, 128, 144],\n  snow: [255, 250, 250],\n  springgreen: [0, 255, 127],\n  steelblue: [70, 130, 180],\n  tan: [210, 180, 140],\n  teal: [0, 128, 128],\n  thistle: [216, 191, 216],\n  tomato: [255, 99, 71],\n  turquoise: [64, 224, 208],\n  violet: [238, 130, 238],\n  wheat: [245, 222, 179],\n  white: [255, 255, 255],\n  whitesmoke: [245, 245, 245],\n  yellow: [255, 255, 0],\n  yellowgreen: [154, 205, 50]\n};\n\nlet cx, cy, px, py, sx, sy;\ncx = cy = px = py = sx = sy = 0;\nconst parameters = {\n  A: 7,\n  a: 7,\n  C: 6,\n  c: 6,\n  H: 1,\n  h: 1,\n  L: 2,\n  l: 2,\n  M: 2,\n  m: 2,\n  Q: 4,\n  q: 4,\n  S: 4,\n  s: 4,\n  T: 2,\n  t: 2,\n  V: 1,\n  v: 1,\n  Z: 0,\n  z: 0\n};\nconst parse = function (path) {\n  let cmd;\n  const ret = [];\n  let args = [];\n  let curArg = '';\n  let foundDecimal = false;\n  let params = 0;\n  for (let c of path) {\n    if (parameters[c] != null) {\n      params = parameters[c];\n      if (cmd) {\n        // save existing command\n        if (curArg.length > 0) {\n          args[args.length] = +curArg;\n        }\n        ret[ret.length] = {\n          cmd,\n          args\n        };\n        args = [];\n        curArg = '';\n        foundDecimal = false;\n      }\n      cmd = c;\n    } else if ([' ', ','].includes(c) || c === '-' && curArg.length > 0 && curArg[curArg.length - 1] !== 'e' || c === '.' && foundDecimal) {\n      if (curArg.length === 0) {\n        continue;\n      }\n      if (args.length === params) {\n        // handle reused commands\n        ret[ret.length] = {\n          cmd,\n          args\n        };\n        args = [+curArg];\n\n        // handle assumed commands\n        if (cmd === 'M') {\n          cmd = 'L';\n        }\n        if (cmd === 'm') {\n          cmd = 'l';\n        }\n      } else {\n        args[args.length] = +curArg;\n      }\n      foundDecimal = c === '.';\n\n      // fix for negative numbers or repeated decimals with no delimeter between commands\n      curArg = ['-', '.'].includes(c) ? c : '';\n    } else {\n      curArg += c;\n      if (c === '.') {\n        foundDecimal = true;\n      }\n    }\n  }\n\n  // add the last command\n  if (curArg.length > 0) {\n    if (args.length === params) {\n      // handle reused commands\n      ret[ret.length] = {\n        cmd,\n        args\n      };\n      args = [+curArg];\n\n      // handle assumed commands\n      if (cmd === 'M') {\n        cmd = 'L';\n      }\n      if (cmd === 'm') {\n        cmd = 'l';\n      }\n    } else {\n      args[args.length] = +curArg;\n    }\n  }\n  ret[ret.length] = {\n    cmd,\n    args\n  };\n  return ret;\n};\nconst apply = function (commands, doc) {\n  // current point, control point, and subpath starting point\n  cx = cy = px = py = sx = sy = 0;\n\n  // run the commands\n  for (let i = 0; i < commands.length; i++) {\n    const c = commands[i];\n    if (typeof runners[c.cmd] === 'function') {\n      runners[c.cmd](doc, c.args);\n    }\n  }\n};\nconst runners = {\n  M(doc, a) {\n    cx = a[0];\n    cy = a[1];\n    px = py = null;\n    sx = cx;\n    sy = cy;\n    return doc.moveTo(cx, cy);\n  },\n  m(doc, a) {\n    cx += a[0];\n    cy += a[1];\n    px = py = null;\n    sx = cx;\n    sy = cy;\n    return doc.moveTo(cx, cy);\n  },\n  C(doc, a) {\n    cx = a[4];\n    cy = a[5];\n    px = a[2];\n    py = a[3];\n    return doc.bezierCurveTo(...a);\n  },\n  c(doc, a) {\n    doc.bezierCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy, a[4] + cx, a[5] + cy);\n    px = cx + a[2];\n    py = cy + a[3];\n    cx += a[4];\n    return cy += a[5];\n  },\n  S(doc, a) {\n    if (px === null) {\n      px = cx;\n      py = cy;\n    }\n    doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), a[0], a[1], a[2], a[3]);\n    px = a[0];\n    py = a[1];\n    cx = a[2];\n    return cy = a[3];\n  },\n  s(doc, a) {\n    if (px === null) {\n      px = cx;\n      py = cy;\n    }\n    doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), cx + a[0], cy + a[1], cx + a[2], cy + a[3]);\n    px = cx + a[0];\n    py = cy + a[1];\n    cx += a[2];\n    return cy += a[3];\n  },\n  Q(doc, a) {\n    px = a[0];\n    py = a[1];\n    cx = a[2];\n    cy = a[3];\n    return doc.quadraticCurveTo(a[0], a[1], cx, cy);\n  },\n  q(doc, a) {\n    doc.quadraticCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy);\n    px = cx + a[0];\n    py = cy + a[1];\n    cx += a[2];\n    return cy += a[3];\n  },\n  T(doc, a) {\n    if (px === null) {\n      px = cx;\n      py = cy;\n    } else {\n      px = cx - (px - cx);\n      py = cy - (py - cy);\n    }\n    doc.quadraticCurveTo(px, py, a[0], a[1]);\n    px = cx - (px - cx);\n    py = cy - (py - cy);\n    cx = a[0];\n    return cy = a[1];\n  },\n  t(doc, a) {\n    if (px === null) {\n      px = cx;\n      py = cy;\n    } else {\n      px = cx - (px - cx);\n      py = cy - (py - cy);\n    }\n    doc.quadraticCurveTo(px, py, cx + a[0], cy + a[1]);\n    cx += a[0];\n    return cy += a[1];\n  },\n  A(doc, a) {\n    solveArc(doc, cx, cy, a);\n    cx = a[5];\n    return cy = a[6];\n  },\n  a(doc, a) {\n    a[5] += cx;\n    a[6] += cy;\n    solveArc(doc, cx, cy, a);\n    cx = a[5];\n    return cy = a[6];\n  },\n  L(doc, a) {\n    cx = a[0];\n    cy = a[1];\n    px = py = null;\n    return doc.lineTo(cx, cy);\n  },\n  l(doc, a) {\n    cx += a[0];\n    cy += a[1];\n    px = py = null;\n    return doc.lineTo(cx, cy);\n  },\n  H(doc, a) {\n    cx = a[0];\n    px = py = null;\n    return doc.lineTo(cx, cy);\n  },\n  h(doc, a) {\n    cx += a[0];\n    px = py = null;\n    return doc.lineTo(cx, cy);\n  },\n  V(doc, a) {\n    cy = a[0];\n    px = py = null;\n    return doc.lineTo(cx, cy);\n  },\n  v(doc, a) {\n    cy += a[0];\n    px = py = null;\n    return doc.lineTo(cx, cy);\n  },\n  Z(doc) {\n    doc.closePath();\n    cx = sx;\n    return cy = sy;\n  },\n  z(doc) {\n    doc.closePath();\n    cx = sx;\n    return cy = sy;\n  }\n};\nconst solveArc = function (doc, x, y, coords) {\n  const [rx, ry, rot, large, sweep, ex, ey] = coords;\n  const segs = arcToSegments(ex, ey, rx, ry, large, sweep, rot, x, y);\n  for (let seg of segs) {\n    const bez = segmentToBezier(...seg);\n    doc.bezierCurveTo(...bez);\n  }\n};\n\n// from Inkscape svgtopdf, thanks!\nconst arcToSegments = function (x, y, rx, ry, large, sweep, rotateX, ox, oy) {\n  const th = rotateX * (Math.PI / 180);\n  const sin_th = Math.sin(th);\n  const cos_th = Math.cos(th);\n  rx = Math.abs(rx);\n  ry = Math.abs(ry);\n  px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;\n  py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;\n  let pl = px * px / (rx * rx) + py * py / (ry * ry);\n  if (pl > 1) {\n    pl = Math.sqrt(pl);\n    rx *= pl;\n    ry *= pl;\n  }\n  const a00 = cos_th / rx;\n  const a01 = sin_th / rx;\n  const a10 = -sin_th / ry;\n  const a11 = cos_th / ry;\n  const x0 = a00 * ox + a01 * oy;\n  const y0 = a10 * ox + a11 * oy;\n  const x1 = a00 * x + a01 * y;\n  const y1 = a10 * x + a11 * y;\n  const d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);\n  let sfactor_sq = 1 / d - 0.25;\n  if (sfactor_sq < 0) {\n    sfactor_sq = 0;\n  }\n  let sfactor = Math.sqrt(sfactor_sq);\n  if (sweep === large) {\n    sfactor = -sfactor;\n  }\n  const xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);\n  const yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);\n  const th0 = Math.atan2(y0 - yc, x0 - xc);\n  const th1 = Math.atan2(y1 - yc, x1 - xc);\n  let th_arc = th1 - th0;\n  if (th_arc < 0 && sweep === 1) {\n    th_arc += 2 * Math.PI;\n  } else if (th_arc > 0 && sweep === 0) {\n    th_arc -= 2 * Math.PI;\n  }\n  const segments = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 0.001)));\n  const result = [];\n  for (let i = 0; i < segments; i++) {\n    const th2 = th0 + i * th_arc / segments;\n    const th3 = th0 + (i + 1) * th_arc / segments;\n    result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];\n  }\n  return result;\n};\nconst segmentToBezier = function (cx, cy, th0, th1, rx, ry, sin_th, cos_th) {\n  const a00 = cos_th * rx;\n  const a01 = -sin_th * ry;\n  const a10 = sin_th * rx;\n  const a11 = cos_th * ry;\n  const th_half = 0.5 * (th1 - th0);\n  const t = 8 / 3 * Math.sin(th_half * 0.5) * Math.sin(th_half * 0.5) / Math.sin(th_half);\n  const x1 = cx + Math.cos(th0) - t * Math.sin(th0);\n  const y1 = cy + Math.sin(th0) + t * Math.cos(th0);\n  const x3 = cx + Math.cos(th1);\n  const y3 = cy + Math.sin(th1);\n  const x2 = x3 + t * Math.sin(th1);\n  const y2 = y3 - t * Math.cos(th1);\n  return [a00 * x1 + a01 * y1, a10 * x1 + a11 * y1, a00 * x2 + a01 * y2, a10 * x2 + a11 * y2, a00 * x3 + a01 * y3, a10 * x3 + a11 * y3];\n};\nclass SVGPath {\n  static apply(doc, path) {\n    const commands = parse(path);\n    apply(commands, doc);\n  }\n}\n\nconst {\n  number: number$1\n} = PDFObject;\n\n// This constant is used to approximate a symmetrical arc using a cubic\n// Bezier curve.\nconst KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\nvar VectorMixin = {\n  initVector() {\n    this._ctm = [1, 0, 0, 1, 0, 0]; // current transformation matrix\n    return this._ctmStack = [];\n  },\n  save() {\n    this._ctmStack.push(this._ctm.slice());\n    // TODO: save/restore colorspace and styles so not setting it unnessesarily all the time?\n    return this.addContent('q');\n  },\n  restore() {\n    this._ctm = this._ctmStack.pop() || [1, 0, 0, 1, 0, 0];\n    return this.addContent('Q');\n  },\n  closePath() {\n    return this.addContent('h');\n  },\n  lineWidth(w) {\n    return this.addContent(`${number$1(w)} w`);\n  },\n  _CAP_STYLES: {\n    BUTT: 0,\n    ROUND: 1,\n    SQUARE: 2\n  },\n  lineCap(c) {\n    if (typeof c === 'string') {\n      c = this._CAP_STYLES[c.toUpperCase()];\n    }\n    return this.addContent(`${c} J`);\n  },\n  _JOIN_STYLES: {\n    MITER: 0,\n    ROUND: 1,\n    BEVEL: 2\n  },\n  lineJoin(j) {\n    if (typeof j === 'string') {\n      j = this._JOIN_STYLES[j.toUpperCase()];\n    }\n    return this.addContent(`${j} j`);\n  },\n  miterLimit(m) {\n    return this.addContent(`${number$1(m)} M`);\n  },\n  dash(length) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const originalLength = length;\n    if (!Array.isArray(length)) {\n      length = [length, options.space || length];\n    }\n    const valid = length.every(x => Number.isFinite(x) && x > 0);\n    if (!valid) {\n      throw new Error(`dash(${JSON.stringify(originalLength)}, ${JSON.stringify(options)}) invalid, lengths must be numeric and greater than zero`);\n    }\n    length = length.map(number$1).join(' ');\n    return this.addContent(`[${length}] ${number$1(options.phase || 0)} d`);\n  },\n  undash() {\n    return this.addContent('[] 0 d');\n  },\n  moveTo(x, y) {\n    return this.addContent(`${number$1(x)} ${number$1(y)} m`);\n  },\n  lineTo(x, y) {\n    return this.addContent(`${number$1(x)} ${number$1(y)} l`);\n  },\n  bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n    return this.addContent(`${number$1(cp1x)} ${number$1(cp1y)} ${number$1(cp2x)} ${number$1(cp2y)} ${number$1(x)} ${number$1(y)} c`);\n  },\n  quadraticCurveTo(cpx, cpy, x, y) {\n    return this.addContent(`${number$1(cpx)} ${number$1(cpy)} ${number$1(x)} ${number$1(y)} v`);\n  },\n  rect(x, y, w, h) {\n    return this.addContent(`${number$1(x)} ${number$1(y)} ${number$1(w)} ${number$1(h)} re`);\n  },\n  roundedRect(x, y, w, h, r) {\n    if (r == null) {\n      r = 0;\n    }\n    r = Math.min(r, 0.5 * w, 0.5 * h);\n\n    // amount to inset control points from corners (see `ellipse`)\n    const c = r * (1.0 - KAPPA);\n    this.moveTo(x + r, y);\n    this.lineTo(x + w - r, y);\n    this.bezierCurveTo(x + w - c, y, x + w, y + c, x + w, y + r);\n    this.lineTo(x + w, y + h - r);\n    this.bezierCurveTo(x + w, y + h - c, x + w - c, y + h, x + w - r, y + h);\n    this.lineTo(x + r, y + h);\n    this.bezierCurveTo(x + c, y + h, x, y + h - c, x, y + h - r);\n    this.lineTo(x, y + r);\n    this.bezierCurveTo(x, y + c, x + c, y, x + r, y);\n    return this.closePath();\n  },\n  ellipse(x, y, r1, r2) {\n    // based on http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas/2173084#2173084\n    if (r2 == null) {\n      r2 = r1;\n    }\n    x -= r1;\n    y -= r2;\n    const ox = r1 * KAPPA;\n    const oy = r2 * KAPPA;\n    const xe = x + r1 * 2;\n    const ye = y + r2 * 2;\n    const xm = x + r1;\n    const ym = y + r2;\n    this.moveTo(x, ym);\n    this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n    this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n    this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n    this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n    return this.closePath();\n  },\n  circle(x, y, radius) {\n    return this.ellipse(x, y, radius);\n  },\n  arc(x, y, radius, startAngle, endAngle, anticlockwise) {\n    if (anticlockwise == null) {\n      anticlockwise = false;\n    }\n    const TWO_PI = 2.0 * Math.PI;\n    const HALF_PI = 0.5 * Math.PI;\n    let deltaAng = endAngle - startAngle;\n    if (Math.abs(deltaAng) > TWO_PI) {\n      // draw only full circle if more than that is specified\n      deltaAng = TWO_PI;\n    } else if (deltaAng !== 0 && anticlockwise !== deltaAng < 0) {\n      // necessary to flip direction of rendering\n      const dir = anticlockwise ? -1 : 1;\n      deltaAng = dir * TWO_PI + deltaAng;\n    }\n    const numSegs = Math.ceil(Math.abs(deltaAng) / HALF_PI);\n    const segAng = deltaAng / numSegs;\n    const handleLen = segAng / HALF_PI * KAPPA * radius;\n    let curAng = startAngle;\n\n    // component distances between anchor point and control point\n    let deltaCx = -Math.sin(curAng) * handleLen;\n    let deltaCy = Math.cos(curAng) * handleLen;\n\n    // anchor point\n    let ax = x + Math.cos(curAng) * radius;\n    let ay = y + Math.sin(curAng) * radius;\n\n    // calculate and render segments\n    this.moveTo(ax, ay);\n    for (let segIdx = 0; segIdx < numSegs; segIdx++) {\n      // starting control point\n      const cp1x = ax + deltaCx;\n      const cp1y = ay + deltaCy;\n\n      // step angle\n      curAng += segAng;\n\n      // next anchor point\n      ax = x + Math.cos(curAng) * radius;\n      ay = y + Math.sin(curAng) * radius;\n\n      // next control point delta\n      deltaCx = -Math.sin(curAng) * handleLen;\n      deltaCy = Math.cos(curAng) * handleLen;\n\n      // ending control point\n      const cp2x = ax - deltaCx;\n      const cp2y = ay - deltaCy;\n\n      // render segment\n      this.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, ax, ay);\n    }\n    return this;\n  },\n  polygon() {\n    for (var _len = arguments.length, points = new Array(_len), _key = 0; _key < _len; _key++) {\n      points[_key] = arguments[_key];\n    }\n    this.moveTo(...(points.shift() || []));\n    for (let point of points) {\n      this.lineTo(...(point || []));\n    }\n    return this.closePath();\n  },\n  path(path) {\n    SVGPath.apply(this, path);\n    return this;\n  },\n  _windingRule(rule) {\n    if (/even-?odd/.test(rule)) {\n      return '*';\n    }\n    return '';\n  },\n  fill(color, rule) {\n    if (/(even-?odd)|(non-?zero)/.test(color)) {\n      rule = color;\n      color = null;\n    }\n    if (color) {\n      this.fillColor(color);\n    }\n    return this.addContent(`f${this._windingRule(rule)}`);\n  },\n  stroke(color) {\n    if (color) {\n      this.strokeColor(color);\n    }\n    return this.addContent('S');\n  },\n  fillAndStroke(fillColor, strokeColor, rule) {\n    if (strokeColor == null) {\n      strokeColor = fillColor;\n    }\n    const isFillRule = /(even-?odd)|(non-?zero)/;\n    if (isFillRule.test(fillColor)) {\n      rule = fillColor;\n      fillColor = null;\n    }\n    if (isFillRule.test(strokeColor)) {\n      rule = strokeColor;\n      strokeColor = fillColor;\n    }\n    if (fillColor) {\n      this.fillColor(fillColor);\n      this.strokeColor(strokeColor);\n    }\n    return this.addContent(`B${this._windingRule(rule)}`);\n  },\n  clip(rule) {\n    return this.addContent(`W${this._windingRule(rule)} n`);\n  },\n  transform(m11, m12, m21, m22, dx, dy) {\n    // keep track of the current transformation matrix\n    if (m11 === 1 && m12 === 0 && m21 === 0 && m22 === 1 && dx === 0 && dy === 0) {\n      // Ignore identity transforms\n      return this;\n    }\n    const m = this._ctm;\n    const [m0, m1, m2, m3, m4, m5] = m;\n    m[0] = m0 * m11 + m2 * m12;\n    m[1] = m1 * m11 + m3 * m12;\n    m[2] = m0 * m21 + m2 * m22;\n    m[3] = m1 * m21 + m3 * m22;\n    m[4] = m0 * dx + m2 * dy + m4;\n    m[5] = m1 * dx + m3 * dy + m5;\n    const values = [m11, m12, m21, m22, dx, dy].map(v => number$1(v)).join(' ');\n    return this.addContent(`${values} cm`);\n  },\n  translate(x, y) {\n    return this.transform(1, 0, 0, 1, x, y);\n  },\n  rotate(angle) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let y;\n    const rad = angle * Math.PI / 180;\n    const cos = Math.cos(rad);\n    const sin = Math.sin(rad);\n    let x = y = 0;\n    if (options.origin != null) {\n      [x, y] = options.origin;\n      const x1 = x * cos - y * sin;\n      const y1 = x * sin + y * cos;\n      x -= x1;\n      y -= y1;\n    }\n    return this.transform(cos, sin, -sin, cos, x, y);\n  },\n  scale(xFactor, yFactor) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let y;\n    if (yFactor == null) {\n      yFactor = xFactor;\n    }\n    if (typeof yFactor === 'object') {\n      options = yFactor;\n      yFactor = xFactor;\n    }\n    let x = y = 0;\n    if (options.origin != null) {\n      [x, y] = options.origin;\n      x -= xFactor * x;\n      y -= yFactor * y;\n    }\n    return this.transform(xFactor, 0, 0, yFactor, x, y);\n  }\n};\n\nconst WIN_ANSI_MAP = {\n  402: 131,\n  8211: 150,\n  8212: 151,\n  8216: 145,\n  8217: 146,\n  8218: 130,\n  8220: 147,\n  8221: 148,\n  8222: 132,\n  8224: 134,\n  8225: 135,\n  8226: 149,\n  8230: 133,\n  8364: 128,\n  8240: 137,\n  8249: 139,\n  8250: 155,\n  710: 136,\n  8482: 153,\n  338: 140,\n  339: 156,\n  732: 152,\n  352: 138,\n  353: 154,\n  376: 159,\n  381: 142,\n  382: 158\n};\nconst characters = `\\\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n  \nspace         exclam         quotedbl       numbersign\ndollar        percent        ampersand      quotesingle\nparenleft     parenright     asterisk       plus\ncomma         hyphen         period         slash\nzero          one            two            three\nfour          five           six            seven\neight         nine           colon          semicolon\nless          equal          greater        question\n  \nat            A              B              C\nD             E              F              G\nH             I              J              K\nL             M              N              O\nP             Q              R              S\nT             U              V              W\nX             Y              Z              bracketleft\nbackslash     bracketright   asciicircum    underscore\n  \ngrave         a              b              c\nd             e              f              g\nh             i              j              k\nl             m              n              o\np             q              r              s\nt             u              v              w\nx             y              z              braceleft\nbar           braceright     asciitilde     .notdef\n  \nEuro          .notdef        quotesinglbase florin\nquotedblbase  ellipsis       dagger         daggerdbl\ncircumflex    perthousand    Scaron         guilsinglleft\nOE            .notdef        Zcaron         .notdef\n.notdef       quoteleft      quoteright     quotedblleft\nquotedblright bullet         endash         emdash\ntilde         trademark      scaron         guilsinglright\noe            .notdef        zcaron         ydieresis\n  \nspace         exclamdown     cent           sterling\ncurrency      yen            brokenbar      section\ndieresis      copyright      ordfeminine    guillemotleft\nlogicalnot    hyphen         registered     macron\ndegree        plusminus      twosuperior    threesuperior\nacute         mu             paragraph      periodcentered\ncedilla       onesuperior    ordmasculine   guillemotright\nonequarter    onehalf        threequarters  questiondown\n  \nAgrave        Aacute         Acircumflex    Atilde\nAdieresis     Aring          AE             Ccedilla\nEgrave        Eacute         Ecircumflex    Edieresis\nIgrave        Iacute         Icircumflex    Idieresis\nEth           Ntilde         Ograve         Oacute\nOcircumflex   Otilde         Odieresis      multiply\nOslash        Ugrave         Uacute         Ucircumflex\nUdieresis     Yacute         Thorn          germandbls\n  \nagrave        aacute         acircumflex    atilde\nadieresis     aring          ae             ccedilla\negrave        eacute         ecircumflex    edieresis\nigrave        iacute         icircumflex    idieresis\neth           ntilde         ograve         oacute\nocircumflex   otilde         odieresis      divide\noslash        ugrave         uacute         ucircumflex\nudieresis     yacute         thorn          ydieresis\\\n`.split(/\\s+/);\nclass AFMFont {\n  static open(filename) {\n    return new AFMFont(fs__WEBPACK_IMPORTED_MODULE_3___default().readFileSync(filename, 'utf8'));\n  }\n  constructor(contents) {\n    this.contents = contents;\n    this.attributes = {};\n    this.glyphWidths = {};\n    this.boundingBoxes = {};\n    this.kernPairs = {};\n    this.parse();\n    // todo: remove charWidths since appears to not be used\n    this.charWidths = new Array(256);\n    for (let char = 0; char <= 255; char++) {\n      this.charWidths[char] = this.glyphWidths[characters[char]];\n    }\n    this.bbox = this.attributes['FontBBox'].split(/\\s+/).map(e => +e);\n    this.ascender = +(this.attributes['Ascender'] || 0);\n    this.descender = +(this.attributes['Descender'] || 0);\n    this.xHeight = +(this.attributes['XHeight'] || 0);\n    this.capHeight = +(this.attributes['CapHeight'] || 0);\n    this.lineGap = this.bbox[3] - this.bbox[1] - (this.ascender - this.descender);\n  }\n  parse() {\n    let section = '';\n    for (let line of this.contents.split('\\n')) {\n      var match;\n      var a;\n      if (match = line.match(/^Start(\\w+)/)) {\n        section = match[1];\n        continue;\n      } else if (match = line.match(/^End(\\w+)/)) {\n        section = '';\n        continue;\n      }\n      switch (section) {\n        case 'FontMetrics':\n          match = line.match(/(^\\w+)\\s+(.*)/);\n          var key = match[1];\n          var value = match[2];\n          if (a = this.attributes[key]) {\n            if (!Array.isArray(a)) {\n              a = this.attributes[key] = [a];\n            }\n            a.push(value);\n          } else {\n            this.attributes[key] = value;\n          }\n          break;\n        case 'CharMetrics':\n          if (!/^CH?\\s/.test(line)) {\n            continue;\n          }\n          var name = line.match(/\\bN\\s+(\\.?\\w+)\\s*;/)[1];\n          this.glyphWidths[name] = +line.match(/\\bWX\\s+(\\d+)\\s*;/)[1];\n          break;\n        case 'KernPairs':\n          match = line.match(/^KPX\\s+(\\.?\\w+)\\s+(\\.?\\w+)\\s+(-?\\d+)/);\n          if (match) {\n            this.kernPairs[match[1] + '\\0' + match[2]] = parseInt(match[3]);\n          }\n          break;\n      }\n    }\n  }\n  encodeText(text) {\n    const res = [];\n    for (let i = 0, len = text.length; i < len; i++) {\n      let char = text.charCodeAt(i);\n      char = WIN_ANSI_MAP[char] || char;\n      res.push(char.toString(16));\n    }\n    return res;\n  }\n  glyphsForString(string) {\n    const glyphs = [];\n    for (let i = 0, len = string.length; i < len; i++) {\n      const charCode = string.charCodeAt(i);\n      glyphs.push(this.characterToGlyph(charCode));\n    }\n    return glyphs;\n  }\n  characterToGlyph(character) {\n    return characters[WIN_ANSI_MAP[character] || character] || '.notdef';\n  }\n  widthOfGlyph(glyph) {\n    return this.glyphWidths[glyph] || 0;\n  }\n  getKernPair(left, right) {\n    return this.kernPairs[left + '\\0' + right] || 0;\n  }\n  advancesForGlyphs(glyphs) {\n    const advances = [];\n    for (let index = 0; index < glyphs.length; index++) {\n      const left = glyphs[index];\n      const right = glyphs[index + 1];\n      advances.push(this.widthOfGlyph(left) + this.getKernPair(left, right));\n    }\n    return advances;\n  }\n}\n\nclass PDFFont {\n  constructor() {}\n  encode() {\n    throw new Error('Must be implemented by subclasses');\n  }\n  widthOfString() {\n    throw new Error('Must be implemented by subclasses');\n  }\n  ref() {\n    return this.dictionary != null ? this.dictionary : this.dictionary = this.document.ref();\n  }\n  finalize() {\n    if (this.embedded || this.dictionary == null) {\n      return;\n    }\n    this.embed();\n    return this.embedded = true;\n  }\n  embed() {\n    throw new Error('Must be implemented by subclasses');\n  }\n  lineHeight(size, includeGap) {\n    if (includeGap == null) {\n      includeGap = false;\n    }\n    const gap = includeGap ? this.lineGap : 0;\n    return (this.ascender + gap - this.descender) / 1000 * size;\n  }\n}\n\n// This insanity is so bundlers can inline the font files\nconst STANDARD_FONTS = {\n  Courier() {\n    return fs__WEBPACK_IMPORTED_MODULE_3___default().readFileSync(__dirname + '/data/Courier.afm', 'utf8');\n  },\n  'Courier-Bold'() {\n    return fs__WEBPACK_IMPORTED_MODULE_3___default().readFileSync(__dirname + '/data/Courier-Bold.afm', 'utf8');\n  },\n  'Courier-Oblique'() {\n    return fs__WEBPACK_IMPORTED_MODULE_3___default().readFileSync(__dirname + '/data/Courier-Oblique.afm', 'utf8');\n  },\n  'Courier-BoldOblique'() {\n    return fs__WEBPACK_IMPORTED_MODULE_3___default().readFileSync(__dirname + '/data/Courier-BoldOblique.afm', 'utf8');\n  },\n  Helvetica() {\n    return fs__WEBPACK_IMPORTED_MODULE_3___default().readFileSync(__dirname + '/data/Helvetica.afm', 'utf8');\n  },\n  'Helvetica-Bold'() {\n    return fs__WEBPACK_IMPORTED_MODULE_3___default().readFileSync(__dirname + '/data/Helvetica-Bold.afm', 'utf8');\n  },\n  'Helvetica-Oblique'() {\n    return fs__WEBPACK_IMPORTED_MODULE_3___default().readFileSync(__dirname + '/data/Helvetica-Oblique.afm', 'utf8');\n  },\n  'Helvetica-BoldOblique'() {\n    return fs__WEBPACK_IMPORTED_MODULE_3___default().readFileSync(__dirname + '/data/Helvetica-BoldOblique.afm', 'utf8');\n  },\n  'Times-Roman'() {\n    return fs__WEBPACK_IMPORTED_MODULE_3___default().readFileSync(__dirname + '/data/Times-Roman.afm', 'utf8');\n  },\n  'Times-Bold'() {\n    return fs__WEBPACK_IMPORTED_MODULE_3___default().readFileSync(__dirname + '/data/Times-Bold.afm', 'utf8');\n  },\n  'Times-Italic'() {\n    return fs__WEBPACK_IMPORTED_MODULE_3___default().readFileSync(__dirname + '/data/Times-Italic.afm', 'utf8');\n  },\n  'Times-BoldItalic'() {\n    return fs__WEBPACK_IMPORTED_MODULE_3___default().readFileSync(__dirname + '/data/Times-BoldItalic.afm', 'utf8');\n  },\n  Symbol() {\n    return fs__WEBPACK_IMPORTED_MODULE_3___default().readFileSync(__dirname + '/data/Symbol.afm', 'utf8');\n  },\n  ZapfDingbats() {\n    return fs__WEBPACK_IMPORTED_MODULE_3___default().readFileSync(__dirname + '/data/ZapfDingbats.afm', 'utf8');\n  }\n};\nclass StandardFont extends PDFFont {\n  constructor(document, name, id) {\n    super();\n    this.document = document;\n    this.name = name;\n    this.id = id;\n    this.font = new AFMFont(STANDARD_FONTS[this.name]());\n    ({\n      ascender: this.ascender,\n      descender: this.descender,\n      bbox: this.bbox,\n      lineGap: this.lineGap,\n      xHeight: this.xHeight,\n      capHeight: this.capHeight\n    } = this.font);\n  }\n  embed() {\n    this.dictionary.data = {\n      Type: 'Font',\n      BaseFont: this.name,\n      Subtype: 'Type1',\n      Encoding: 'WinAnsiEncoding'\n    };\n    return this.dictionary.end();\n  }\n  encode(text) {\n    const encoded = this.font.encodeText(text);\n    const glyphs = this.font.glyphsForString(`${text}`);\n    const advances = this.font.advancesForGlyphs(glyphs);\n    const positions = [];\n    for (let i = 0; i < glyphs.length; i++) {\n      const glyph = glyphs[i];\n      positions.push({\n        xAdvance: advances[i],\n        yAdvance: 0,\n        xOffset: 0,\n        yOffset: 0,\n        advanceWidth: this.font.widthOfGlyph(glyph)\n      });\n    }\n    return [encoded, positions];\n  }\n  widthOfString(string, size) {\n    const glyphs = this.font.glyphsForString(`${string}`);\n    const advances = this.font.advancesForGlyphs(glyphs);\n    let width = 0;\n    for (let advance of advances) {\n      width += advance;\n    }\n    const scale = size / 1000;\n    return width * scale;\n  }\n  static isStandardFont(name) {\n    return name in STANDARD_FONTS;\n  }\n}\n\nconst toHex = function (num) {\n  return `0000${num.toString(16)}`.slice(-4);\n};\nclass EmbeddedFont extends PDFFont {\n  constructor(document, font, id) {\n    super();\n    this.document = document;\n    this.font = font;\n    this.id = id;\n    this.subset = this.font.createSubset();\n    this.unicode = [[0]];\n    this.widths = [this.font.getGlyph(0).advanceWidth];\n    this.name = this.font.postscriptName;\n    this.scale = 1000 / this.font.unitsPerEm;\n    this.ascender = this.font.ascent * this.scale;\n    this.descender = this.font.descent * this.scale;\n    this.xHeight = this.font.xHeight * this.scale;\n    this.capHeight = this.font.capHeight * this.scale;\n    this.lineGap = this.font.lineGap * this.scale;\n    this.bbox = this.font.bbox;\n    if (document.options.fontLayoutCache !== false) {\n      this.layoutCache = Object.create(null);\n    }\n  }\n  layoutRun(text, features) {\n    const run = this.font.layout(text, features);\n\n    // Normalize position values\n    for (let i = 0; i < run.positions.length; i++) {\n      const position = run.positions[i];\n      for (let key in position) {\n        position[key] *= this.scale;\n      }\n      position.advanceWidth = run.glyphs[i].advanceWidth * this.scale;\n    }\n    return run;\n  }\n  layoutCached(text) {\n    if (!this.layoutCache) {\n      return this.layoutRun(text);\n    }\n    let cached;\n    if (cached = this.layoutCache[text]) {\n      return cached;\n    }\n    const run = this.layoutRun(text);\n    this.layoutCache[text] = run;\n    return run;\n  }\n  layout(text, features, onlyWidth) {\n    // Skip the cache if any user defined features are applied\n    if (features) {\n      return this.layoutRun(text, features);\n    }\n    let glyphs = onlyWidth ? null : [];\n    let positions = onlyWidth ? null : [];\n    let advanceWidth = 0;\n\n    // Split the string by words to increase cache efficiency.\n    // For this purpose, spaces and tabs are a good enough delimeter.\n    let last = 0;\n    let index = 0;\n    while (index <= text.length) {\n      var needle;\n      if (index === text.length && last < index || (needle = text.charAt(index), [' ', '\\t'].includes(needle))) {\n        const run = this.layoutCached(text.slice(last, ++index));\n        if (!onlyWidth) {\n          glyphs = glyphs.concat(run.glyphs);\n          positions = positions.concat(run.positions);\n        }\n        advanceWidth += run.advanceWidth;\n        last = index;\n      } else {\n        index++;\n      }\n    }\n    return {\n      glyphs,\n      positions,\n      advanceWidth\n    };\n  }\n  encode(text, features) {\n    const {\n      glyphs,\n      positions\n    } = this.layout(text, features);\n    const res = [];\n    for (let i = 0; i < glyphs.length; i++) {\n      const glyph = glyphs[i];\n      const gid = this.subset.includeGlyph(glyph.id);\n      res.push(`0000${gid.toString(16)}`.slice(-4));\n      if (this.widths[gid] == null) {\n        this.widths[gid] = glyph.advanceWidth * this.scale;\n      }\n      if (this.unicode[gid] == null) {\n        this.unicode[gid] = glyph.codePoints;\n      }\n    }\n    return [res, positions];\n  }\n  widthOfString(string, size, features) {\n    const width = this.layout(string, features, true).advanceWidth;\n    const scale = size / 1000;\n    return width * scale;\n  }\n  embed() {\n    const isCFF = this.subset.cff != null;\n    const fontFile = this.document.ref();\n    if (isCFF) {\n      fontFile.data.Subtype = 'CIDFontType0C';\n    }\n    this.subset.encodeStream().on('data', data => fontFile.write(data)).on('end', () => fontFile.end());\n    const familyClass = ((this.font['OS/2'] != null ? this.font['OS/2'].sFamilyClass : undefined) || 0) >> 8;\n    let flags = 0;\n    if (this.font.post.isFixedPitch) {\n      flags |= 1 << 0;\n    }\n    if (1 <= familyClass && familyClass <= 7) {\n      flags |= 1 << 1;\n    }\n    flags |= 1 << 2; // assume the font uses non-latin characters\n    if (familyClass === 10) {\n      flags |= 1 << 3;\n    }\n    if (this.font.head.macStyle.italic) {\n      flags |= 1 << 6;\n    }\n\n    // generate a tag (6 uppercase letters. 17 is the char code offset from '0' to 'A'. 73 will map to 'Z')\n    const tag = [1, 2, 3, 4, 5, 6].map(i => String.fromCharCode((this.id.charCodeAt(i) || 73) + 17)).join('');\n    const name = tag + '+' + this.font.postscriptName.replaceAll(' ', '_');\n    const {\n      bbox\n    } = this.font;\n    const descriptor = this.document.ref({\n      Type: 'FontDescriptor',\n      FontName: name,\n      Flags: flags,\n      FontBBox: [bbox.minX * this.scale, bbox.minY * this.scale, bbox.maxX * this.scale, bbox.maxY * this.scale],\n      ItalicAngle: this.font.italicAngle,\n      Ascent: this.ascender,\n      Descent: this.descender,\n      CapHeight: (this.font.capHeight || this.font.ascent) * this.scale,\n      XHeight: (this.font.xHeight || 0) * this.scale,\n      StemV: 0\n    }); // not sure how to calculate this\n\n    if (isCFF) {\n      descriptor.data.FontFile3 = fontFile;\n    } else {\n      descriptor.data.FontFile2 = fontFile;\n    }\n    if (this.document.subset && this.document.subset === 1) {\n      const CIDSet = Buffer.from('FFFFFFFFC0', 'hex');\n      const CIDSetRef = this.document.ref();\n      CIDSetRef.write(CIDSet);\n      CIDSetRef.end();\n      descriptor.data.CIDSet = CIDSetRef;\n    }\n    descriptor.end();\n    const descendantFontData = {\n      Type: 'Font',\n      Subtype: 'CIDFontType0',\n      BaseFont: name,\n      CIDSystemInfo: {\n        Registry: new String('Adobe'),\n        Ordering: new String('Identity'),\n        Supplement: 0\n      },\n      FontDescriptor: descriptor,\n      W: [0, this.widths]\n    };\n    if (!isCFF) {\n      descendantFontData.Subtype = 'CIDFontType2';\n      descendantFontData.CIDToGIDMap = 'Identity';\n    }\n    const descendantFont = this.document.ref(descendantFontData);\n    descendantFont.end();\n    this.dictionary.data = {\n      Type: 'Font',\n      Subtype: 'Type0',\n      BaseFont: name,\n      Encoding: 'Identity-H',\n      DescendantFonts: [descendantFont],\n      ToUnicode: this.toUnicodeCmap()\n    };\n    return this.dictionary.end();\n  }\n\n  // Maps the glyph ids encoded in the PDF back to unicode strings\n  // Because of ligature substitutions and the like, there may be one or more\n  // unicode characters represented by each glyph.\n  toUnicodeCmap() {\n    const cmap = this.document.ref();\n    const entries = [];\n    for (let codePoints of this.unicode) {\n      const encoded = [];\n\n      // encode codePoints to utf16\n      for (let value of codePoints) {\n        if (value > 0xffff) {\n          value -= 0x10000;\n          encoded.push(toHex(value >>> 10 & 0x3ff | 0xd800));\n          value = 0xdc00 | value & 0x3ff;\n        }\n        encoded.push(toHex(value));\n      }\n      entries.push(`<${encoded.join(' ')}>`);\n    }\n    const chunkSize = 256;\n    const chunks = Math.ceil(entries.length / chunkSize);\n    const ranges = [];\n    for (let i = 0; i < chunks; i++) {\n      const start = i * chunkSize;\n      const end = Math.min((i + 1) * chunkSize, entries.length);\n      ranges.push(`<${toHex(start)}> <${toHex(end - 1)}> [${entries.slice(start, end).join(' ')}]`);\n    }\n    cmap.end(`\\\n/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange\n1 beginbfrange\n${ranges.join('\\n')}\nendbfrange\nendcmap\nCMapName currentdict /CMap defineresource pop\nend\nend\\\n`);\n    return cmap;\n  }\n}\n\nclass PDFFontFactory {\n  static open(document, src, family, id) {\n    let font;\n    if (typeof src === 'string') {\n      if (StandardFont.isStandardFont(src)) {\n        return new StandardFont(document, src, id);\n      }\n      src = fs__WEBPACK_IMPORTED_MODULE_3___default().readFileSync(src);\n    }\n    if (Buffer.isBuffer(src)) {\n      font = _foliojs_fork_fontkit__WEBPACK_IMPORTED_MODULE_4___default().create(src, family);\n    } else if (src instanceof Uint8Array) {\n      font = _foliojs_fork_fontkit__WEBPACK_IMPORTED_MODULE_4___default().create(Buffer.from(src), family);\n    } else if (src instanceof ArrayBuffer) {\n      font = _foliojs_fork_fontkit__WEBPACK_IMPORTED_MODULE_4___default().create(Buffer.from(new Uint8Array(src)), family);\n    }\n    if (font == null) {\n      throw new Error('Not a supported font format or standard PDF font.');\n    }\n    return new EmbeddedFont(document, font, id);\n  }\n}\n\nconst isEqualFont = (font1, font2) => {\n  // compare font checksum\n  if (font1.font._tables?.head?.checkSumAdjustment !== font2.font._tables?.head?.checkSumAdjustment) {\n    return false;\n  }\n\n  // compare font name table\n  if (JSON.stringify(font1.font._tables?.name?.records) !== JSON.stringify(font2.font._tables?.name?.records)) {\n    return false;\n  }\n  return true;\n};\nvar FontsMixin = {\n  initFonts() {\n    let defaultFont = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Helvetica';\n    // Lookup table for embedded fonts\n    this._fontFamilies = {};\n    this._fontCount = 0;\n\n    // Font state\n    this._fontSize = 12;\n    this._font = null;\n    this._registeredFonts = {};\n\n    // Set the default font\n    if (defaultFont) {\n      this.font(defaultFont);\n    }\n  },\n  font(src, family, size) {\n    let cacheKey, font;\n    if (typeof family === 'number') {\n      size = family;\n      family = null;\n    }\n\n    // check registered fonts if src is a string\n    if (typeof src === 'string' && this._registeredFonts[src]) {\n      cacheKey = src;\n      ({\n        src,\n        family\n      } = this._registeredFonts[src]);\n    } else {\n      cacheKey = family || src;\n      if (typeof cacheKey !== 'string') {\n        cacheKey = null;\n      }\n    }\n    if (size != null) {\n      this.fontSize(size);\n    }\n\n    // fast path: check if the font is already in the PDF\n    if (font = this._fontFamilies[cacheKey]) {\n      this._font = font;\n      return this;\n    }\n\n    // load the font\n    const id = `F${++this._fontCount}`;\n    this._font = PDFFontFactory.open(this, src, family, id);\n\n    // check for existing font familes with the same name already in the PDF\n    // useful if the font was passed as a buffer\n    if ((font = this._fontFamilies[this._font.name]) && isEqualFont(this._font, font)) {\n      this._font = font;\n      return this;\n    }\n\n    // save the font for reuse later\n    if (cacheKey) {\n      this._fontFamilies[cacheKey] = this._font;\n    }\n    if (this._font.name) {\n      this._fontFamilies[this._font.name] = this._font;\n    }\n    return this;\n  },\n  fontSize(_fontSize) {\n    this._fontSize = _fontSize;\n    return this;\n  },\n  currentLineHeight(includeGap) {\n    if (includeGap == null) {\n      includeGap = false;\n    }\n    return this._font.lineHeight(this._fontSize, includeGap);\n  },\n  registerFont(name, src, family) {\n    this._registeredFonts[name] = {\n      src,\n      family\n    };\n    return this;\n  }\n};\n\nconst SOFT_HYPHEN = '\\u00AD';\nconst HYPHEN = '-';\nclass LineWrapper extends events__WEBPACK_IMPORTED_MODULE_5__.EventEmitter {\n  constructor(document, options) {\n    super();\n    this.document = document;\n    this.horizontalScaling = options.horizontalScaling || 100;\n    this.indent = (options.indent || 0) * this.horizontalScaling / 100;\n    this.characterSpacing = (options.characterSpacing || 0) * this.horizontalScaling / 100;\n    this.wordSpacing = (options.wordSpacing === 0) * this.horizontalScaling / 100;\n    this.columns = options.columns || 1;\n    this.columnGap = (options.columnGap != null ? options.columnGap : 18) * this.horizontalScaling / 100; // 1/4 inch\n    this.lineWidth = (options.width * this.horizontalScaling / 100 - this.columnGap * (this.columns - 1)) / this.columns;\n    this.spaceLeft = this.lineWidth;\n    this.startX = this.document.x;\n    this.startY = this.document.y;\n    this.column = 1;\n    this.ellipsis = options.ellipsis;\n    this.continuedX = 0;\n    this.features = options.features;\n\n    // calculate the maximum Y position the text can appear at\n    if (options.height != null) {\n      this.height = options.height;\n      this.maxY = this.startY + options.height;\n    } else {\n      this.maxY = this.document.page.maxY();\n    }\n\n    // handle paragraph indents\n    this.on('firstLine', options => {\n      // if this is the first line of the text segment, and\n      // we're continuing where we left off, indent that much\n      // otherwise use the user specified indent option\n      const indent = this.continuedX || this.indent;\n      this.document.x += indent;\n      this.lineWidth -= indent;\n\n      // if indentAllLines is set to true\n      // we're not resetting the indentation for this paragraph after the first line\n      if (options.indentAllLines) {\n        return;\n      }\n\n      // otherwise we start the next line without indent\n      return this.once('line', () => {\n        this.document.x -= indent;\n        this.lineWidth += indent;\n        if (options.continued && !this.continuedX) {\n          this.continuedX = this.indent;\n        }\n        if (!options.continued) {\n          return this.continuedX = 0;\n        }\n      });\n    });\n\n    // handle left aligning last lines of paragraphs\n    this.on('lastLine', options => {\n      const {\n        align\n      } = options;\n      if (align === 'justify') {\n        options.align = 'left';\n      }\n      this.lastLine = true;\n      return this.once('line', () => {\n        this.document.y += options.paragraphGap || 0;\n        options.align = align;\n        return this.lastLine = false;\n      });\n    });\n  }\n  wordWidth(word) {\n    return this.document.widthOfString(word, this) + this.characterSpacing + this.wordSpacing;\n  }\n  canFit(word, w) {\n    if (word[word.length - 1] != SOFT_HYPHEN) {\n      return w <= this.spaceLeft;\n    }\n    return w + this.wordWidth(HYPHEN) <= this.spaceLeft;\n  }\n  eachWord(text, fn) {\n    // setup a unicode line breaker\n    let bk;\n    const breaker = new (_foliojs_fork_linebreak__WEBPACK_IMPORTED_MODULE_6___default())(text);\n    let last = null;\n    const wordWidths = Object.create(null);\n    while (bk = breaker.nextBreak()) {\n      var shouldContinue;\n      let word = text.slice((last != null ? last.position : undefined) || 0, bk.position);\n      let w = wordWidths[word] != null ? wordWidths[word] : wordWidths[word] = this.wordWidth(word);\n\n      // if the word is longer than the whole line, chop it up\n      // TODO: break by grapheme clusters, not JS string characters\n      if (w > this.lineWidth + this.continuedX) {\n        // make some fake break objects\n        let lbk = last;\n        const fbk = {};\n        while (word.length) {\n          // fit as much of the word as possible into the space we have\n          var l, mightGrow;\n          if (w > this.spaceLeft) {\n            // start our check at the end of our available space - this method is faster than a loop of each character and it resolves\n            // an issue with long loops when processing massive words, such as a huge number of spaces\n            l = Math.ceil(this.spaceLeft / (w / word.length));\n            w = this.wordWidth(word.slice(0, l));\n            mightGrow = w <= this.spaceLeft && l < word.length;\n          } else {\n            l = word.length;\n          }\n          let mustShrink = w > this.spaceLeft && l > 0;\n          // shrink or grow word as necessary after our near-guess above\n          while (mustShrink || mightGrow) {\n            if (mustShrink) {\n              w = this.wordWidth(word.slice(0, --l));\n              mustShrink = w > this.spaceLeft && l > 0;\n            } else {\n              w = this.wordWidth(word.slice(0, ++l));\n              mustShrink = w > this.spaceLeft && l > 0;\n              mightGrow = w <= this.spaceLeft && l < word.length;\n            }\n          }\n\n          // check for the edge case where a single character cannot fit into a line.\n          if (l === 0 && this.spaceLeft === this.lineWidth) {\n            l = 1;\n          }\n\n          // send a required break unless this is the last piece and a linebreak is not specified\n          fbk.required = bk.required || l < word.length;\n          shouldContinue = fn(word.slice(0, l), w, fbk, lbk);\n          lbk = {\n            required: false\n          };\n\n          // get the remaining piece of the word\n          word = word.slice(l);\n          w = this.wordWidth(word);\n          if (shouldContinue === false) {\n            break;\n          }\n        }\n      } else {\n        // otherwise just emit the break as it was given to us\n        shouldContinue = fn(word, w, bk, last);\n      }\n      if (shouldContinue === false) {\n        break;\n      }\n      last = bk;\n    }\n  }\n  wrap(text, options) {\n    // override options from previous continued fragments\n    this.horizontalScaling = options.horizontalScaling || 100;\n    if (options.indent != null) {\n      this.indent = options.indent * this.horizontalScaling / 100;\n    }\n    if (options.characterSpacing != null) {\n      this.characterSpacing = options.characterSpacing * this.horizontalScaling / 100;\n    }\n    if (options.wordSpacing != null) {\n      this.wordSpacing = options.wordSpacing * this.horizontalScaling / 100;\n    }\n    if (options.ellipsis != null) {\n      this.ellipsis = options.ellipsis;\n    }\n\n    // make sure we're actually on the page\n    // and that the first line of is never by\n    // itself at the bottom of a page (orphans)\n    const nextY = this.document.y + this.document.currentLineHeight(true);\n    if (this.document.y > this.maxY || nextY > this.maxY) {\n      this.nextSection();\n    }\n    let buffer = '';\n    let textWidth = 0;\n    let wc = 0;\n    let lc = 0;\n    let {\n      y\n    } = this.document; // used to reset Y pos if options.continued (below)\n    const emitLine = () => {\n      options.textWidth = textWidth + this.wordSpacing * (wc - 1);\n      options.wordCount = wc;\n      options.lineWidth = this.lineWidth;\n      ({\n        y\n      } = this.document);\n      this.emit('line', buffer, options, this);\n      return lc++;\n    };\n    this.emit('sectionStart', options, this);\n    this.eachWord(text, (word, w, bk, last) => {\n      if (last == null || last.required) {\n        this.emit('firstLine', options, this);\n        this.spaceLeft = this.lineWidth;\n      }\n      if (this.canFit(word, w)) {\n        buffer += word;\n        textWidth += w;\n        wc++;\n      }\n      if (bk.required || !this.canFit(word, w)) {\n        // if the user specified a max height and an ellipsis, and is about to pass the\n        // max height and max columns after the next line, append the ellipsis\n        const lh = this.document.currentLineHeight(true);\n        if (this.height != null && this.ellipsis && this.document.y + lh * 2 > this.maxY && this.column >= this.columns) {\n          if (this.ellipsis === true) {\n            this.ellipsis = '…';\n          } // map default ellipsis character\n          buffer = buffer.replace(/\\s+$/, '');\n          textWidth = this.wordWidth(buffer + this.ellipsis);\n\n          // remove characters from the buffer until the ellipsis fits\n          // to avoid infinite loop need to stop while-loop if buffer is empty string\n          while (buffer && textWidth > this.lineWidth) {\n            buffer = buffer.slice(0, -1).replace(/\\s+$/, '');\n            textWidth = this.wordWidth(buffer + this.ellipsis);\n          }\n          // need to add ellipsis only if there is enough space for it\n          if (textWidth <= this.lineWidth) {\n            buffer = buffer + this.ellipsis;\n          }\n          textWidth = this.wordWidth(buffer);\n        }\n        if (bk.required) {\n          if (w > this.spaceLeft) {\n            emitLine();\n            buffer = word;\n            textWidth = w;\n            wc = 1;\n          }\n          this.emit('lastLine', options, this);\n        }\n\n        // Previous entry is a soft hyphen - add visible hyphen.\n        if (buffer[buffer.length - 1] == SOFT_HYPHEN) {\n          buffer = buffer.slice(0, -1) + HYPHEN;\n          this.spaceLeft -= this.wordWidth(HYPHEN);\n        }\n        emitLine();\n\n        // if we've reached the edge of the page,\n        // continue on a new page or column\n        if (this.document.y + lh > this.maxY) {\n          const shouldContinue = this.nextSection();\n\n          // stop if we reached the maximum height\n          if (!shouldContinue) {\n            wc = 0;\n            buffer = '';\n            return false;\n          }\n        }\n\n        // reset the space left and buffer\n        if (bk.required) {\n          this.spaceLeft = this.lineWidth;\n          buffer = '';\n          textWidth = 0;\n          return wc = 0;\n        } else {\n          // reset the space left and buffer\n          this.spaceLeft = this.lineWidth - w;\n          buffer = word;\n          textWidth = w;\n          return wc = 1;\n        }\n      } else {\n        return this.spaceLeft -= w;\n      }\n    });\n    if (wc > 0) {\n      this.emit('lastLine', options, this);\n      emitLine();\n    }\n    this.emit('sectionEnd', options, this);\n\n    // if the wrap is set to be continued, save the X position\n    // to start the first line of the next segment at, and reset\n    // the y position\n    if (options.continued === true) {\n      if (lc > 1) {\n        this.continuedX = 0;\n      }\n      this.continuedX += options.textWidth || 0;\n      return this.document.y = y;\n    } else {\n      return this.document.x = this.startX;\n    }\n  }\n  nextSection(options) {\n    this.emit('sectionEnd', options, this);\n    if (++this.column > this.columns) {\n      // if a max height was specified by the user, we're done.\n      // otherwise, the default is to make a new page at the bottom.\n      if (this.height != null) {\n        return false;\n      }\n      this.document.continueOnNewPage();\n      this.column = 1;\n      this.startY = this.document.page.margins.top;\n      this.maxY = this.document.page.maxY();\n      this.document.x = this.startX;\n      if (this.document._fillColor) {\n        this.document.fillColor(...this.document._fillColor);\n      }\n      this.emit('pageBreak', options, this);\n    } else {\n      this.document.x += this.lineWidth + this.columnGap;\n      this.document.y = this.startY;\n      this.emit('columnBreak', options, this);\n    }\n    this.emit('sectionStart', options, this);\n    return true;\n  }\n}\n\nconst {\n  number: number$2\n} = PDFObject;\nvar TextMixin = {\n  initText() {\n    this._line = this._line.bind(this);\n    // Current coordinates\n    this.x = 0;\n    this.y = 0;\n    return this._lineGap = 0;\n  },\n  lineGap(_lineGap) {\n    this._lineGap = _lineGap;\n    return this;\n  },\n  moveDown(lines) {\n    if (lines == null) {\n      lines = 1;\n    }\n    this.y += this.currentLineHeight(true) * lines + this._lineGap;\n    return this;\n  },\n  moveUp(lines) {\n    if (lines == null) {\n      lines = 1;\n    }\n    this.y -= this.currentLineHeight(true) * lines + this._lineGap;\n    return this;\n  },\n  _text(text, x, y, options, lineCallback) {\n    options = this._initOptions(x, y, options);\n\n    // Convert text to a string\n    text = text == null ? '' : `${text}`;\n\n    // if the wordSpacing option is specified, remove multiple consecutive spaces\n    if (options.wordSpacing) {\n      text = text.replace(/\\s{2,}/g, ' ');\n    }\n    const addStructure = () => {\n      if (options.structParent) {\n        options.structParent.add(this.struct(options.structType || 'P', [this.markStructureContent(options.structType || 'P')]));\n      }\n    };\n\n    // word wrapping\n    if (options.width) {\n      let wrapper = this._wrapper;\n      if (!wrapper) {\n        wrapper = new LineWrapper(this, options);\n        wrapper.on('line', lineCallback);\n        wrapper.on('firstLine', addStructure);\n      }\n      this._wrapper = options.continued ? wrapper : null;\n      this._textOptions = options.continued ? options : null;\n      wrapper.wrap(text, options);\n\n      // render paragraphs as single lines\n    } else {\n      for (let line of text.split('\\n')) {\n        addStructure();\n        lineCallback(line, options);\n      }\n    }\n    return this;\n  },\n  text(text, x, y, options) {\n    return this._text(text, x, y, options, this._line);\n  },\n  widthOfString(string) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const horizontalScaling = options.horizontalScaling || 100;\n    return (this._font.widthOfString(string, this._fontSize, options.features) + (options.characterSpacing || 0) * (string.length - 1)) * horizontalScaling / 100;\n  },\n  heightOfString(text, options) {\n    const {\n      x,\n      y\n    } = this;\n    options = this._initOptions(options);\n    options.height = Infinity; // don't break pages\n\n    const lineGap = options.lineGap || this._lineGap || 0;\n    this._text(text, this.x, this.y, options, () => {\n      return this.y += this.currentLineHeight(true) + lineGap;\n    });\n    const height = this.y - y;\n    this.x = x;\n    this.y = y;\n    return height;\n  },\n  list(list, x, y, options, wrapper) {\n    options = this._initOptions(x, y, options);\n    const listType = options.listType || 'bullet';\n    const unit = Math.round(this._font.ascender / 1000 * this._fontSize);\n    const midLine = unit / 2;\n    const r = options.bulletRadius || unit / 3;\n    const indent = options.textIndent || (listType === 'bullet' ? r * 5 : unit * 2);\n    const itemIndent = options.bulletIndent || (listType === 'bullet' ? r * 8 : unit * 2);\n    let level = 1;\n    const items = [];\n    const levels = [];\n    const numbers = [];\n    var flatten = function (list) {\n      let n = 1;\n      for (let i = 0; i < list.length; i++) {\n        const item = list[i];\n        if (Array.isArray(item)) {\n          level++;\n          flatten(item);\n          level--;\n        } else {\n          items.push(item);\n          levels.push(level);\n          if (listType !== 'bullet') {\n            numbers.push(n++);\n          }\n        }\n      }\n    };\n    flatten(list);\n    const label = function (n) {\n      switch (listType) {\n        case 'numbered':\n          return `${n}.`;\n        case 'lettered':\n          var letter = String.fromCharCode((n - 1) % 26 + 65);\n          var times = Math.floor((n - 1) / 26 + 1);\n          var text = Array(times + 1).join(letter);\n          return `${text}.`;\n      }\n    };\n    const drawListItem = function (listItem, i) {\n      wrapper = new LineWrapper(this, options);\n      wrapper.on('line', this._line);\n      level = 1;\n      wrapper.once('firstLine', () => {\n        let item, itemType, labelType, bodyType;\n        if (options.structParent) {\n          if (options.structTypes) {\n            [itemType, labelType, bodyType] = options.structTypes;\n          } else {\n            [itemType, labelType, bodyType] = ['LI', 'Lbl', 'LBody'];\n          }\n        }\n        if (itemType) {\n          item = this.struct(itemType);\n          options.structParent.add(item);\n        } else if (options.structParent) {\n          item = options.structParent;\n        }\n        let l;\n        if ((l = levels[i++]) !== level) {\n          const diff = itemIndent * (l - level);\n          this.x += diff;\n          wrapper.lineWidth -= diff;\n          level = l;\n        }\n        if (item && (labelType || bodyType)) {\n          item.add(this.struct(labelType || bodyType, [this.markStructureContent(labelType || bodyType)]));\n        }\n        switch (listType) {\n          case 'bullet':\n            this.circle(this.x - indent + r, this.y + midLine, r);\n            this.fill();\n            break;\n          case 'numbered':\n          case 'lettered':\n            var text = label(numbers[i - 1]);\n            this._fragment(text, this.x - indent, this.y, options);\n            break;\n        }\n        if (item && labelType && bodyType) {\n          item.add(this.struct(bodyType, [this.markStructureContent(bodyType)]));\n        }\n        if (item && item !== options.structParent) {\n          item.end();\n        }\n      });\n      wrapper.on('sectionStart', () => {\n        const pos = indent + itemIndent * (level - 1);\n        this.x += pos;\n        return wrapper.lineWidth -= pos;\n      });\n      wrapper.on('sectionEnd', () => {\n        const pos = indent + itemIndent * (level - 1);\n        this.x -= pos;\n        return wrapper.lineWidth += pos;\n      });\n      wrapper.wrap(listItem, options);\n    };\n    for (let i = 0; i < items.length; i++) {\n      drawListItem.call(this, items[i], i);\n    }\n    return this;\n  },\n  _initOptions() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let y = arguments.length > 1 ? arguments[1] : undefined;\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (typeof x === 'object') {\n      options = x;\n      x = null;\n    }\n\n    // clone options object\n    const result = Object.assign({}, options);\n\n    // extend options with previous values for continued text\n    if (this._textOptions) {\n      for (let key in this._textOptions) {\n        const val = this._textOptions[key];\n        if (key !== 'continued') {\n          if (result[key] === undefined) {\n            result[key] = val;\n          }\n        }\n      }\n    }\n\n    // Update the current position\n    if (x != null) {\n      this.x = x;\n    }\n    if (y != null) {\n      this.y = y;\n    }\n\n    // wrap to margins if no x or y position passed\n    if (result.lineBreak !== false) {\n      if (result.width == null) {\n        result.width = this.page.width - this.x - this.page.margins.right;\n      }\n      result.width = Math.max(result.width, 0);\n    }\n    if (!result.columns) {\n      result.columns = 0;\n    }\n    if (result.columnGap == null) {\n      result.columnGap = 18;\n    } // 1/4 inch\n\n    return result;\n  },\n  _line(text) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let wrapper = arguments.length > 2 ? arguments[2] : undefined;\n    this._fragment(text, this.x, this.y, options);\n    const lineGap = options.lineGap || this._lineGap || 0;\n    if (!wrapper) {\n      return this.x += this.widthOfString(text, options);\n    } else {\n      return this.y += this.currentLineHeight(true) + lineGap;\n    }\n  },\n  _fragment(text, x, y, options) {\n    let dy, encoded, i, positions, textWidth, words;\n    text = `${text}`.replace(/\\n/g, '');\n    if (text.length === 0) {\n      return;\n    }\n\n    // handle options\n    const align = options.align || 'left';\n    let wordSpacing = options.wordSpacing || 0;\n    const characterSpacing = options.characterSpacing || 0;\n    const horizontalScaling = options.horizontalScaling || 100;\n\n    // text alignments\n    if (options.width) {\n      switch (align) {\n        case 'right':\n          textWidth = this.widthOfString(text.replace(/\\s+$/, ''), options);\n          x += options.lineWidth - textWidth;\n          break;\n        case 'center':\n          x += options.lineWidth / 2 - options.textWidth / 2;\n          break;\n        case 'justify':\n          // calculate the word spacing value\n          words = text.trim().split(/\\s+/);\n          textWidth = this.widthOfString(text.replace(/\\s+/g, ''), options);\n          var spaceWidth = this.widthOfString(' ') + characterSpacing;\n          wordSpacing = Math.max(0, (options.lineWidth - textWidth) / Math.max(1, words.length - 1) - spaceWidth);\n          break;\n      }\n    }\n\n    // text baseline alignments based on http://wiki.apache.org/xmlgraphics-fop/LineLayout/AlignmentHandling\n    if (typeof options.baseline === 'number') {\n      dy = -options.baseline;\n    } else {\n      switch (options.baseline) {\n        case 'svg-middle':\n          dy = 0.5 * this._font.xHeight;\n          break;\n        case 'middle':\n        case 'svg-central':\n          dy = 0.5 * (this._font.descender + this._font.ascender);\n          break;\n        case 'bottom':\n        case 'ideographic':\n          dy = this._font.descender;\n          break;\n        case 'alphabetic':\n          dy = 0;\n          break;\n        case 'mathematical':\n          dy = 0.5 * this._font.ascender;\n          break;\n        case 'hanging':\n          dy = 0.8 * this._font.ascender;\n          break;\n        case 'top':\n          dy = this._font.ascender;\n          break;\n        default:\n          dy = this._font.ascender;\n      }\n      dy = dy / 1000 * this._fontSize;\n    }\n\n    // calculate the actual rendered width of the string after word and character spacing\n    const renderedWidth = options.textWidth + wordSpacing * (options.wordCount - 1) + characterSpacing * (text.length - 1);\n\n    // create link annotations if the link option is given\n    if (options.link != null) {\n      this.link(x, y, renderedWidth, this.currentLineHeight(), options.link);\n    }\n    if (options.goTo != null) {\n      this.goTo(x, y, renderedWidth, this.currentLineHeight(), options.goTo);\n    }\n    if (options.destination != null) {\n      this.addNamedDestination(options.destination, 'XYZ', x, y, null);\n    }\n\n    // create underline\n    if (options.underline) {\n      this.save();\n      if (!options.stroke) {\n        this.strokeColor(...(this._fillColor || []));\n      }\n      const lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);\n      this.lineWidth(lineWidth);\n      let lineY = y + this.currentLineHeight() - lineWidth;\n      this.moveTo(x, lineY);\n      this.lineTo(x + renderedWidth, lineY);\n      this.stroke();\n      this.restore();\n    }\n\n    // create strikethrough line\n    if (options.strike) {\n      this.save();\n      if (!options.stroke) {\n        this.strokeColor(...(this._fillColor || []));\n      }\n      const lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);\n      this.lineWidth(lineWidth);\n      let lineY = y + this.currentLineHeight() / 2;\n      this.moveTo(x, lineY);\n      this.lineTo(x + renderedWidth, lineY);\n      this.stroke();\n      this.restore();\n    }\n    this.save();\n\n    // oblique (angle in degrees or boolean)\n    if (options.oblique) {\n      let skew;\n      if (typeof options.oblique === 'number') {\n        skew = -Math.tan(options.oblique * Math.PI / 180);\n      } else {\n        skew = -0.25;\n      }\n      this.transform(1, 0, 0, 1, x, y);\n      this.transform(1, 0, skew, 1, -skew * dy, 0);\n      this.transform(1, 0, 0, 1, -x, -y);\n    }\n\n    // flip coordinate system\n    this.transform(1, 0, 0, -1, 0, this.page.height);\n    y = this.page.height - y - dy;\n\n    // add current font to page if necessary\n    if (this.page.fonts[this._font.id] == null) {\n      this.page.fonts[this._font.id] = this._font.ref();\n    }\n\n    // begin the text object\n    this.addContent('BT');\n\n    // text position\n    this.addContent(`1 0 0 1 ${number$2(x)} ${number$2(y)} Tm`);\n\n    // font and font size\n    this.addContent(`/${this._font.id} ${number$2(this._fontSize)} Tf`);\n\n    // rendering mode\n    const mode = options.fill && options.stroke ? 2 : options.stroke ? 1 : 0;\n    if (mode) {\n      this.addContent(`${mode} Tr`);\n    }\n\n    // Character spacing\n    if (characterSpacing) {\n      this.addContent(`${number$2(characterSpacing)} Tc`);\n    }\n\n    // Horizontal scaling\n    if (horizontalScaling !== 100) {\n      this.addContent(`${horizontalScaling} Tz`);\n    }\n\n    // Add the actual text\n    // If we have a word spacing value, we need to encode each word separately\n    // since the normal Tw operator only works on character code 32, which isn't\n    // used for embedded fonts.\n    if (wordSpacing) {\n      words = text.trim().split(/\\s+/);\n      wordSpacing += this.widthOfString(' ') + characterSpacing;\n      wordSpacing *= 1000 / this._fontSize;\n      encoded = [];\n      positions = [];\n      for (let word of words) {\n        const [encodedWord, positionsWord] = this._font.encode(word, options.features);\n        encoded = encoded.concat(encodedWord);\n        positions = positions.concat(positionsWord);\n\n        // add the word spacing to the end of the word\n        // clone object because of cache\n        const space = {};\n        const object = positions[positions.length - 1];\n        for (let key in object) {\n          const val = object[key];\n          space[key] = val;\n        }\n        space.xAdvance += wordSpacing;\n        positions[positions.length - 1] = space;\n      }\n    } else {\n      [encoded, positions] = this._font.encode(text, options.features);\n    }\n    const scale = this._fontSize / 1000;\n    const commands = [];\n    let last = 0;\n    let hadOffset = false;\n\n    // Adds a segment of text to the TJ command buffer\n    const addSegment = cur => {\n      if (last < cur) {\n        const hex = encoded.slice(last, cur).join('');\n        const advance = positions[cur - 1].xAdvance - positions[cur - 1].advanceWidth;\n        commands.push(`<${hex}> ${number$2(-advance)}`);\n      }\n      return last = cur;\n    };\n\n    // Flushes the current TJ commands to the output stream\n    const flush = i => {\n      addSegment(i);\n      if (commands.length > 0) {\n        this.addContent(`[${commands.join(' ')}] TJ`);\n        return commands.length = 0;\n      }\n    };\n    for (i = 0; i < positions.length; i++) {\n      // If we have an x or y offset, we have to break out of the current TJ command\n      // so we can move the text position.\n      const pos = positions[i];\n      if (pos.xOffset || pos.yOffset) {\n        // Flush the current buffer\n        flush(i);\n\n        // Move the text position and flush just the current character\n        this.addContent(`1 0 0 1 ${number$2(x + pos.xOffset * scale)} ${number$2(y + pos.yOffset * scale)} Tm`);\n        flush(i + 1);\n        hadOffset = true;\n      } else {\n        // If the last character had an offset, reset the text position\n        if (hadOffset) {\n          this.addContent(`1 0 0 1 ${number$2(x)} ${number$2(y)} Tm`);\n          hadOffset = false;\n        }\n\n        // Group segments that don't have any advance adjustments\n        if (pos.xAdvance - pos.advanceWidth !== 0) {\n          addSegment(i + 1);\n        }\n      }\n      x += pos.xAdvance * scale;\n    }\n\n    // Flush any remaining commands\n    flush(i);\n\n    // end the text object\n    this.addContent('ET');\n\n    // restore flipped coordinate system\n    return this.restore();\n  }\n};\n\nconst MARKERS = [0xffc0, 0xffc1, 0xffc2, 0xffc3, 0xffc5, 0xffc6, 0xffc7, 0xffc8, 0xffc9, 0xffca, 0xffcb, 0xffcc, 0xffcd, 0xffce, 0xffcf];\nconst COLOR_SPACE_MAP = {\n  1: 'DeviceGray',\n  3: 'DeviceRGB',\n  4: 'DeviceCMYK'\n};\nclass JPEG {\n  constructor(data, label) {\n    let marker;\n    this.data = data;\n    this.label = label;\n    if (this.data.readUInt16BE(0) !== 0xffd8) {\n      throw 'SOI not found in JPEG';\n    }\n\n    // Parse the EXIF orientation\n    this.orientation = jpeg_exif__WEBPACK_IMPORTED_MODULE_7__.fromBuffer(this.data).Orientation || 1;\n    let pos = 2;\n    while (pos < this.data.length) {\n      marker = this.data.readUInt16BE(pos);\n      pos += 2;\n      if (MARKERS.includes(marker)) {\n        break;\n      }\n      pos += this.data.readUInt16BE(pos);\n    }\n    if (!MARKERS.includes(marker)) {\n      throw 'Invalid JPEG.';\n    }\n    pos += 2;\n    this.bits = this.data[pos++];\n    this.height = this.data.readUInt16BE(pos);\n    pos += 2;\n    this.width = this.data.readUInt16BE(pos);\n    pos += 2;\n    const channels = this.data[pos++];\n    this.colorSpace = COLOR_SPACE_MAP[channels];\n    this.obj = null;\n  }\n  embed(document) {\n    if (this.obj) {\n      return;\n    }\n    this.obj = document.ref({\n      Type: 'XObject',\n      Subtype: 'Image',\n      BitsPerComponent: this.bits,\n      Width: this.width,\n      Height: this.height,\n      ColorSpace: this.colorSpace,\n      Filter: 'DCTDecode'\n    });\n\n    // add extra decode params for CMYK images. By swapping the\n    // min and max values from the default, we invert the colors. See\n    // section 4.8.4 of the spec.\n    if (this.colorSpace === 'DeviceCMYK') {\n      this.obj.data['Decode'] = [1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0];\n    }\n    this.obj.end(this.data);\n\n    // free memory\n    return this.data = null;\n  }\n}\n\nclass PNGImage {\n  constructor(data, label) {\n    this.label = label;\n    this.image = new (png_js__WEBPACK_IMPORTED_MODULE_8___default())(data);\n    this.width = this.image.width;\n    this.height = this.image.height;\n    this.imgData = this.image.imgData;\n    this.obj = null;\n  }\n  embed(document) {\n    let dataDecoded = false;\n    this.document = document;\n    if (this.obj) {\n      return;\n    }\n    const hasAlphaChannel = this.image.hasAlphaChannel;\n    const isInterlaced = this.image.interlaceMethod === 1;\n    this.obj = this.document.ref({\n      Type: 'XObject',\n      Subtype: 'Image',\n      BitsPerComponent: hasAlphaChannel ? 8 : this.image.bits,\n      Width: this.width,\n      Height: this.height,\n      Filter: 'FlateDecode'\n    });\n    if (!hasAlphaChannel) {\n      const params = this.document.ref({\n        Predictor: isInterlaced ? 1 : 15,\n        Colors: this.image.colors,\n        BitsPerComponent: this.image.bits,\n        Columns: this.width\n      });\n      this.obj.data['DecodeParms'] = params;\n      params.end();\n    }\n    if (this.image.palette.length === 0) {\n      this.obj.data['ColorSpace'] = this.image.colorSpace;\n    } else {\n      // embed the color palette in the PDF as an object stream\n      const palette = this.document.ref();\n      palette.end(Buffer.from(this.image.palette));\n\n      // build the color space array for the image\n      this.obj.data['ColorSpace'] = ['Indexed', 'DeviceRGB', this.image.palette.length / 3 - 1, palette];\n    }\n\n    // For PNG color types 0, 2 and 3, the transparency data is stored in\n    // a dedicated PNG chunk.\n    if (this.image.transparency.grayscale != null) {\n      // Use Color Key Masking (spec section 4.8.5)\n      // An array with N elements, where N is two times the number of color components.\n      const val = this.image.transparency.grayscale;\n      this.obj.data['Mask'] = [val, val];\n    } else if (this.image.transparency.rgb) {\n      // Use Color Key Masking (spec section 4.8.5)\n      // An array with N elements, where N is two times the number of color components.\n      const {\n        rgb\n      } = this.image.transparency;\n      const mask = [];\n      for (let x of rgb) {\n        mask.push(x, x);\n      }\n      this.obj.data['Mask'] = mask;\n    } else if (this.image.transparency.indexed) {\n      // Create a transparency SMask for the image based on the data\n      // in the PLTE and tRNS sections. See below for details on SMasks.\n      dataDecoded = true;\n      return this.loadIndexedAlphaChannel();\n    } else if (hasAlphaChannel) {\n      // For PNG color types 4 and 6, the transparency data is stored as a alpha\n      // channel mixed in with the main image data. Separate this data out into an\n      // SMask object and store it separately in the PDF.\n      dataDecoded = true;\n      return this.splitAlphaChannel();\n    }\n    if (isInterlaced && !dataDecoded) {\n      return this.decodeData();\n    }\n    this.finalize();\n  }\n  finalize() {\n    if (this.alphaChannel) {\n      const sMask = this.document.ref({\n        Type: 'XObject',\n        Subtype: 'Image',\n        Height: this.height,\n        Width: this.width,\n        BitsPerComponent: 8,\n        Filter: 'FlateDecode',\n        ColorSpace: 'DeviceGray',\n        Decode: [0, 1]\n      });\n      sMask.end(this.alphaChannel);\n      this.obj.data['SMask'] = sMask;\n    }\n\n    // add the actual image data\n    this.obj.end(this.imgData);\n\n    // free memory\n    this.image = null;\n    return this.imgData = null;\n  }\n  splitAlphaChannel() {\n    return this.image.decodePixels(pixels => {\n      let a, p;\n      const colorCount = this.image.colors;\n      const pixelCount = this.width * this.height;\n      const imgData = Buffer.alloc(pixelCount * colorCount);\n      const alphaChannel = Buffer.alloc(pixelCount);\n      let i = p = a = 0;\n      const len = pixels.length;\n      // For 16bit images copy only most significant byte (MSB) - PNG data is always stored in network byte order (MSB first)\n      const skipByteCount = this.image.bits === 16 ? 1 : 0;\n      while (i < len) {\n        for (let colorIndex = 0; colorIndex < colorCount; colorIndex++) {\n          imgData[p++] = pixels[i++];\n          i += skipByteCount;\n        }\n        alphaChannel[a++] = pixels[i++];\n        i += skipByteCount;\n      }\n      this.imgData = zlib__WEBPACK_IMPORTED_MODULE_1___default().deflateSync(imgData);\n      this.alphaChannel = zlib__WEBPACK_IMPORTED_MODULE_1___default().deflateSync(alphaChannel);\n      return this.finalize();\n    });\n  }\n  loadIndexedAlphaChannel() {\n    const transparency = this.image.transparency.indexed;\n    return this.image.decodePixels(pixels => {\n      const alphaChannel = Buffer.alloc(this.width * this.height);\n      let i = 0;\n      for (let j = 0, end = pixels.length; j < end; j++) {\n        alphaChannel[i++] = transparency[pixels[j]];\n      }\n      this.alphaChannel = zlib__WEBPACK_IMPORTED_MODULE_1___default().deflateSync(alphaChannel);\n      return this.finalize();\n    });\n  }\n  decodeData() {\n    this.image.decodePixels(pixels => {\n      this.imgData = zlib__WEBPACK_IMPORTED_MODULE_1___default().deflateSync(pixels);\n      this.finalize();\n    });\n  }\n}\n\n/*\r\nPDFImage - embeds images in PDF documents\r\nBy Devon Govett\r\n*/\nclass PDFImage {\n  static open(src, label) {\n    let data;\n    if (Buffer.isBuffer(src)) {\n      data = src;\n    } else if (src instanceof ArrayBuffer) {\n      data = Buffer.from(new Uint8Array(src));\n    } else {\n      let match;\n      if (match = /^data:.+?;base64,(.*)$/.exec(src)) {\n        data = Buffer.from(match[1], 'base64');\n      } else {\n        data = fs__WEBPACK_IMPORTED_MODULE_3___default().readFileSync(src);\n        if (!data) {\n          return;\n        }\n      }\n    }\n    if (data[0] === 0xff && data[1] === 0xd8) {\n      return new JPEG(data, label);\n    } else if (data[0] === 0x89 && data.toString('ascii', 1, 4) === 'PNG') {\n      return new PNGImage(data, label);\n    } else {\n      throw new Error('Unknown image format.');\n    }\n  }\n}\n\nvar ImagesMixin = {\n  initImages() {\n    this._imageRegistry = {};\n    return this._imageCount = 0;\n  },\n  image(src, x, y) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let bh, bp, bw, image, ip, left, left1, rotateAngle, originX, originY;\n    if (typeof x === 'object') {\n      options = x;\n      x = null;\n    }\n\n    // Ignore orientation based on document options or image options\n    const ignoreOrientation = options.ignoreOrientation || options.ignoreOrientation !== false && this.options.ignoreOrientation;\n    x = (left = x != null ? x : options.x) != null ? left : this.x;\n    y = (left1 = y != null ? y : options.y) != null ? left1 : this.y;\n    if (typeof src === 'string') {\n      image = this._imageRegistry[src];\n    }\n    if (!image) {\n      if (src.width && src.height) {\n        image = src;\n      } else {\n        image = this.openImage(src);\n      }\n    }\n    if (!image.obj) {\n      image.embed(this);\n    }\n    if (this.page.xobjects[image.label] == null) {\n      this.page.xobjects[image.label] = image.obj;\n    }\n    let {\n      width,\n      height\n    } = image;\n\n    // If EXIF orientation calls for it, swap width and height\n    if (!ignoreOrientation && image.orientation > 4) {\n      [width, height] = [height, width];\n    }\n    let w = options.width || width;\n    let h = options.height || height;\n    if (options.width && !options.height) {\n      const wp = w / width;\n      w = width * wp;\n      h = height * wp;\n    } else if (options.height && !options.width) {\n      const hp = h / height;\n      w = width * hp;\n      h = height * hp;\n    } else if (options.scale) {\n      w = width * options.scale;\n      h = height * options.scale;\n    } else if (options.fit) {\n      [bw, bh] = options.fit;\n      bp = bw / bh;\n      ip = width / height;\n      if (ip > bp) {\n        w = bw;\n        h = bw / ip;\n      } else {\n        h = bh;\n        w = bh * ip;\n      }\n    } else if (options.cover) {\n      [bw, bh] = options.cover;\n      bp = bw / bh;\n      ip = width / height;\n      if (ip > bp) {\n        h = bh;\n        w = bh * ip;\n      } else {\n        w = bw;\n        h = bw / ip;\n      }\n    }\n    if (options.fit || options.cover) {\n      if (options.align === 'center') {\n        x = x + bw / 2 - w / 2;\n      } else if (options.align === 'right') {\n        x = x + bw - w;\n      }\n      if (options.valign === 'center') {\n        y = y + bh / 2 - h / 2;\n      } else if (options.valign === 'bottom') {\n        y = y + bh - h;\n      }\n    }\n    if (!ignoreOrientation) {\n      switch (image.orientation) {\n        // No orientation (need to flip image, though, because of the default transform matrix on the document)\n        default:\n        case 1:\n          h = -h;\n          y -= h;\n          rotateAngle = 0;\n          break;\n        // Flip Horizontal\n        case 2:\n          w = -w;\n          h = -h;\n          x -= w;\n          y -= h;\n          rotateAngle = 0;\n          break;\n        // Rotate 180 degrees\n        case 3:\n          originX = x;\n          originY = y;\n          h = -h;\n          x -= w;\n          rotateAngle = 180;\n          break;\n        // Flip vertical\n        case 4:\n          // Do nothing, image will be flipped\n\n          break;\n        // Flip horizontally and rotate 270 degrees CW\n        case 5:\n          originX = x;\n          originY = y;\n          [w, h] = [h, w];\n          y -= h;\n          rotateAngle = 90;\n          break;\n        // Rotate 90 degrees CW\n        case 6:\n          originX = x;\n          originY = y;\n          [w, h] = [h, w];\n          h = -h;\n          rotateAngle = 90;\n          break;\n        // Flip horizontally and rotate 90 degrees CW\n        case 7:\n          originX = x;\n          originY = y;\n          [w, h] = [h, w];\n          h = -h;\n          w = -w;\n          x -= w;\n          rotateAngle = 90;\n          break;\n        // Rotate 270 degrees CW\n        case 8:\n          originX = x;\n          originY = y;\n          [w, h] = [h, w];\n          h = -h;\n          x -= w;\n          y -= h;\n          rotateAngle = -90;\n          break;\n      }\n    } else {\n      h = -h;\n      y -= h;\n      rotateAngle = 0;\n    }\n\n    // create link annotations if the link option is given\n    if (options.link != null) {\n      this.link(x, y, w, h, options.link);\n    }\n    if (options.goTo != null) {\n      this.goTo(x, y, w, h, options.goTo);\n    }\n    if (options.destination != null) {\n      this.addNamedDestination(options.destination, 'XYZ', x, y, null);\n    }\n\n    // Set the current y position to below the image if it is in the document flow\n    if (this.y === y) {\n      this.y += h;\n    }\n    this.save();\n    if (rotateAngle) {\n      this.rotate(rotateAngle, {\n        origin: [originX, originY]\n      });\n    }\n    this.transform(w, 0, 0, h, x, y);\n    this.addContent(`/${image.label} Do`);\n    this.restore();\n    return this;\n  },\n  openImage(src) {\n    let image;\n    if (typeof src === 'string') {\n      image = this._imageRegistry[src];\n    }\n    if (!image) {\n      image = PDFImage.open(src, `I${++this._imageCount}`);\n      if (typeof src === 'string') {\n        this._imageRegistry[src] = image;\n      }\n    }\n    return image;\n  }\n};\n\nvar AnnotationsMixin = {\n  annotate(x, y, w, h, options) {\n    options.Type = 'Annot';\n    options.Rect = this._convertRect(x, y, w, h);\n    options.Border = [0, 0, 0];\n    if (options.Subtype === 'Link' && typeof options.F === 'undefined') {\n      options.F = 1 << 2; // Print Annotation Flag\n    }\n    if (options.Subtype !== 'Link') {\n      if (options.C == null) {\n        options.C = this._normalizeColor(options.color || [0, 0, 0]);\n      }\n    } // convert colors\n    delete options.color;\n    if (typeof options.Dest === 'string') {\n      options.Dest = new String(options.Dest);\n    }\n\n    // Capitalize keys\n    for (let key in options) {\n      const val = options[key];\n      options[key[0].toUpperCase() + key.slice(1)] = val;\n    }\n    const ref = this.ref(options);\n    this.page.annotations.push(ref);\n    ref.end();\n    return this;\n  },\n  note(x, y, w, h, contents) {\n    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    options.Subtype = 'Text';\n    options.Contents = new String(contents);\n    if (options.Name == null) {\n      options.Name = 'Comment';\n    }\n    if (options.color == null) {\n      options.color = [243, 223, 92];\n    }\n    return this.annotate(x, y, w, h, options);\n  },\n  goTo(x, y, w, h, name) {\n    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    options.Subtype = 'Link';\n    options.A = this.ref({\n      S: 'GoTo',\n      D: new String(name)\n    });\n    options.A.end();\n    return this.annotate(x, y, w, h, options);\n  },\n  link(x, y, w, h, url) {\n    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    options.Subtype = 'Link';\n    if (typeof url === 'number') {\n      // Link to a page in the document (the page must already exist)\n      const pages = this._root.data.Pages.data;\n      if (url >= 0 && url < pages.Kids.length) {\n        options.A = this.ref({\n          S: 'GoTo',\n          D: [pages.Kids[url], 'XYZ', null, null, null]\n        });\n        options.A.end();\n      } else {\n        throw new Error(`The document has no page ${url}`);\n      }\n    } else {\n      // Link to an external url\n      options.A = this.ref({\n        S: 'URI',\n        URI: new String(url)\n      });\n      options.A.end();\n    }\n    return this.annotate(x, y, w, h, options);\n  },\n  _markup(x, y, w, h) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    const [x1, y1, x2, y2] = this._convertRect(x, y, w, h);\n    options.QuadPoints = [x1, y2, x2, y2, x1, y1, x2, y1];\n    options.Contents = new String();\n    return this.annotate(x, y, w, h, options);\n  },\n  highlight(x, y, w, h) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    options.Subtype = 'Highlight';\n    if (options.color == null) {\n      options.color = [241, 238, 148];\n    }\n    return this._markup(x, y, w, h, options);\n  },\n  underline(x, y, w, h) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    options.Subtype = 'Underline';\n    return this._markup(x, y, w, h, options);\n  },\n  strike(x, y, w, h) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    options.Subtype = 'StrikeOut';\n    return this._markup(x, y, w, h, options);\n  },\n  lineAnnotation(x1, y1, x2, y2) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    options.Subtype = 'Line';\n    options.Contents = new String();\n    options.L = [x1, this.page.height - y1, x2, this.page.height - y2];\n    return this.annotate(x1, y1, x2, y2, options);\n  },\n  rectAnnotation(x, y, w, h) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    options.Subtype = 'Square';\n    options.Contents = new String();\n    return this.annotate(x, y, w, h, options);\n  },\n  ellipseAnnotation(x, y, w, h) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    options.Subtype = 'Circle';\n    options.Contents = new String();\n    return this.annotate(x, y, w, h, options);\n  },\n  textAnnotation(x, y, w, h, text) {\n    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    options.Subtype = 'FreeText';\n    options.Contents = new String(text);\n    options.DA = new String();\n    return this.annotate(x, y, w, h, options);\n  },\n  fileAnnotation(x, y, w, h) {\n    let file = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    // create hidden file\n    const filespec = this.file(file.src, Object.assign({\n      hidden: true\n    }, file));\n    options.Subtype = 'FileAttachment';\n    options.FS = filespec;\n\n    // add description from filespec unless description (Contents) has already been set\n    if (options.Contents) {\n      options.Contents = new String(options.Contents);\n    } else if (filespec.data.Desc) {\n      options.Contents = filespec.data.Desc;\n    }\n    return this.annotate(x, y, w, h, options);\n  },\n  _convertRect(x1, y1, w, h) {\n    // flip y1 and y2\n    let y2 = y1;\n    y1 += h;\n\n    // make x2\n    let x2 = x1 + w;\n\n    // apply current transformation matrix to points\n    const [m0, m1, m2, m3, m4, m5] = this._ctm;\n    x1 = m0 * x1 + m2 * y1 + m4;\n    y1 = m1 * x1 + m3 * y1 + m5;\n    x2 = m0 * x2 + m2 * y2 + m4;\n    y2 = m1 * x2 + m3 * y2 + m5;\n    return [x1, y1, x2, y2];\n  }\n};\n\nclass PDFOutline {\n  constructor(document, parent, title, dest) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n      expanded: false\n    };\n    this.document = document;\n    this.options = options;\n    this.outlineData = {};\n    if (dest !== null) {\n      this.outlineData['Dest'] = [dest.dictionary, 'Fit'];\n    }\n    if (parent !== null) {\n      this.outlineData['Parent'] = parent;\n    }\n    if (title !== null) {\n      this.outlineData['Title'] = new String(title);\n    }\n    this.dictionary = this.document.ref(this.outlineData);\n    this.children = [];\n  }\n  addItem(title) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      expanded: false\n    };\n    const result = new PDFOutline(this.document, this.dictionary, title, this.document.page, options);\n    this.children.push(result);\n    return result;\n  }\n  endOutline() {\n    if (this.children.length > 0) {\n      if (this.options.expanded) {\n        this.outlineData.Count = this.children.length;\n      }\n      const first = this.children[0],\n        last = this.children[this.children.length - 1];\n      this.outlineData.First = first.dictionary;\n      this.outlineData.Last = last.dictionary;\n      for (let i = 0, len = this.children.length; i < len; i++) {\n        const child = this.children[i];\n        if (i > 0) {\n          child.outlineData.Prev = this.children[i - 1].dictionary;\n        }\n        if (i < this.children.length - 1) {\n          child.outlineData.Next = this.children[i + 1].dictionary;\n        }\n        child.endOutline();\n      }\n    }\n    return this.dictionary.end();\n  }\n}\n\nvar OutlineMixin = {\n  initOutline() {\n    return this.outline = new PDFOutline(this, null, null, null);\n  },\n  endOutline() {\n    this.outline.endOutline();\n    if (this.outline.children.length > 0) {\n      this._root.data.Outlines = this.outline.dictionary;\n      return this._root.data.PageMode = 'UseOutlines';\n    }\n  }\n};\n\n/*\r\nPDFStructureContent - a reference to a marked structure content\r\nBy Ben Schmidt\r\n*/\n\nclass PDFStructureContent {\n  constructor(pageRef, mcid) {\n    this.refs = [{\n      pageRef,\n      mcid\n    }];\n  }\n  push(structContent) {\n    structContent.refs.forEach(ref => this.refs.push(ref));\n  }\n}\n\n/*\r\nPDFStructureElement - represents an element in the PDF logical structure tree\r\nBy Ben Schmidt\r\n*/\nclass PDFStructureElement {\n  constructor(document, type) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    this.document = document;\n    this._attached = false;\n    this._ended = false;\n    this._flushed = false;\n    this.dictionary = document.ref({\n      // Type: \"StructElem\",\n      S: type\n    });\n    const data = this.dictionary.data;\n    if (Array.isArray(options) || this._isValidChild(options)) {\n      children = options;\n      options = {};\n    }\n    if (typeof options.title !== 'undefined') {\n      data.T = new String(options.title);\n    }\n    if (typeof options.lang !== 'undefined') {\n      data.Lang = new String(options.lang);\n    }\n    if (typeof options.alt !== 'undefined') {\n      data.Alt = new String(options.alt);\n    }\n    if (typeof options.expanded !== 'undefined') {\n      data.E = new String(options.expanded);\n    }\n    if (typeof options.actual !== 'undefined') {\n      data.ActualText = new String(options.actual);\n    }\n    this._children = [];\n    if (children) {\n      if (!Array.isArray(children)) {\n        children = [children];\n      }\n      children.forEach(child => this.add(child));\n      this.end();\n    }\n  }\n  add(child) {\n    if (this._ended) {\n      throw new Error(`Cannot add child to already-ended structure element`);\n    }\n    if (!this._isValidChild(child)) {\n      throw new Error(`Invalid structure element child`);\n    }\n    if (child instanceof PDFStructureElement) {\n      child.setParent(this.dictionary);\n      if (this._attached) {\n        child.setAttached();\n      }\n    }\n    if (child instanceof PDFStructureContent) {\n      this._addContentToParentTree(child);\n    }\n    if (typeof child === 'function' && this._attached) {\n      // _contentForClosure() adds the content to the parent tree\n      child = this._contentForClosure(child);\n    }\n    this._children.push(child);\n    return this;\n  }\n  _addContentToParentTree(content) {\n    content.refs.forEach(_ref => {\n      let {\n        pageRef,\n        mcid\n      } = _ref;\n      const pageStructParents = this.document.getStructParentTree().get(pageRef.data.StructParents);\n      pageStructParents[mcid] = this.dictionary;\n    });\n  }\n  setParent(parentRef) {\n    if (this.dictionary.data.P) {\n      throw new Error(`Structure element added to more than one parent`);\n    }\n    this.dictionary.data.P = parentRef;\n    this._flush();\n  }\n  setAttached() {\n    if (this._attached) {\n      return;\n    }\n    this._children.forEach((child, index) => {\n      if (child instanceof PDFStructureElement) {\n        child.setAttached();\n      }\n      if (typeof child === 'function') {\n        this._children[index] = this._contentForClosure(child);\n      }\n    });\n    this._attached = true;\n    this._flush();\n  }\n  end() {\n    if (this._ended) {\n      return;\n    }\n    this._children.filter(child => child instanceof PDFStructureElement).forEach(child => child.end());\n    this._ended = true;\n    this._flush();\n  }\n  _isValidChild(child) {\n    return child instanceof PDFStructureElement || child instanceof PDFStructureContent || typeof child === 'function';\n  }\n  _contentForClosure(closure) {\n    const content = this.document.markStructureContent(this.dictionary.data.S);\n    closure();\n    this.document.endMarkedContent();\n    this._addContentToParentTree(content);\n    return content;\n  }\n  _isFlushable() {\n    if (!this.dictionary.data.P || !this._ended) {\n      return false;\n    }\n    return this._children.every(child => {\n      if (typeof child === 'function') {\n        return false;\n      }\n      if (child instanceof PDFStructureElement) {\n        return child._isFlushable();\n      }\n      return true;\n    });\n  }\n  _flush() {\n    if (this._flushed || !this._isFlushable()) {\n      return;\n    }\n    this.dictionary.data.K = [];\n    this._children.forEach(child => this._flushChild(child));\n    this.dictionary.end();\n\n    // free memory used by children; the dictionary itself may still be\n    // referenced by a parent structure element or root, but we can\n    // at least trim the tree here\n    this._children = [];\n    this.dictionary.data.K = null;\n    this._flushed = true;\n  }\n  _flushChild(child) {\n    if (child instanceof PDFStructureElement) {\n      this.dictionary.data.K.push(child.dictionary);\n    }\n    if (child instanceof PDFStructureContent) {\n      child.refs.forEach(_ref2 => {\n        let {\n          pageRef,\n          mcid\n        } = _ref2;\n        if (!this.dictionary.data.Pg) {\n          this.dictionary.data.Pg = pageRef;\n        }\n        if (this.dictionary.data.Pg === pageRef) {\n          this.dictionary.data.K.push(mcid);\n        } else {\n          this.dictionary.data.K.push({\n            Type: \"MCR\",\n            Pg: pageRef,\n            MCID: mcid\n          });\n        }\n      });\n    }\n  }\n}\n\n/*\r\nPDFNumberTree - represents a number tree object\r\n*/\nclass PDFNumberTree extends PDFTree {\n  _compareKeys(a, b) {\n    return parseInt(a) - parseInt(b);\n  }\n  _keysName() {\n    return \"Nums\";\n  }\n  _dataForKey(k) {\n    return parseInt(k);\n  }\n}\n\n/*\r\nMarkings mixin - support marked content sequences in content streams\r\nBy Ben Schmidt\r\n*/\nvar MarkingsMixin = {\n  initMarkings(options) {\n    this.structChildren = [];\n    if (options.tagged) {\n      this.getMarkInfoDictionary().data.Marked = true;\n      this.getStructTreeRoot();\n    }\n  },\n  markContent(tag) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (tag === 'Artifact' || options && options.mcid) {\n      let toClose = 0;\n      this.page.markings.forEach(marking => {\n        if (toClose || marking.structContent || marking.tag === 'Artifact') {\n          toClose++;\n        }\n      });\n      while (toClose--) {\n        this.endMarkedContent();\n      }\n    }\n    if (!options) {\n      this.page.markings.push({\n        tag\n      });\n      this.addContent(`/${tag} BMC`);\n      return this;\n    }\n    this.page.markings.push({\n      tag,\n      options\n    });\n    const dictionary = {};\n    if (typeof options.mcid !== 'undefined') {\n      dictionary.MCID = options.mcid;\n    }\n    if (tag === 'Artifact') {\n      if (typeof options.type === 'string') {\n        dictionary.Type = options.type;\n      }\n      if (Array.isArray(options.bbox)) {\n        dictionary.BBox = [options.bbox[0], this.page.height - options.bbox[3], options.bbox[2], this.page.height - options.bbox[1]];\n      }\n      if (Array.isArray(options.attached) && options.attached.every(val => typeof val === 'string')) {\n        dictionary.Attached = options.attached;\n      }\n    }\n    if (tag === 'Span') {\n      if (options.lang) {\n        dictionary.Lang = new String(options.lang);\n      }\n      if (options.alt) {\n        dictionary.Alt = new String(options.alt);\n      }\n      if (options.expanded) {\n        dictionary.E = new String(options.expanded);\n      }\n      if (options.actual) {\n        dictionary.ActualText = new String(options.actual);\n      }\n    }\n    this.addContent(`/${tag} ${PDFObject.convert(dictionary)} BDC`);\n    return this;\n  },\n  markStructureContent(tag) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const pageStructParents = this.getStructParentTree().get(this.page.structParentTreeKey);\n    const mcid = pageStructParents.length;\n    pageStructParents.push(null);\n    this.markContent(tag, {\n      ...options,\n      mcid\n    });\n    const structContent = new PDFStructureContent(this.page.dictionary, mcid);\n    this.page.markings.slice(-1)[0].structContent = structContent;\n    return structContent;\n  },\n  endMarkedContent() {\n    this.page.markings.pop();\n    this.addContent('EMC');\n    return this;\n  },\n  struct(type) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return new PDFStructureElement(this, type, options, children);\n  },\n  addStructure(structElem) {\n    const structTreeRoot = this.getStructTreeRoot();\n    structElem.setParent(structTreeRoot);\n    structElem.setAttached();\n    this.structChildren.push(structElem);\n    if (!structTreeRoot.data.K) {\n      structTreeRoot.data.K = [];\n    }\n    structTreeRoot.data.K.push(structElem.dictionary);\n    return this;\n  },\n  initPageMarkings(pageMarkings) {\n    pageMarkings.forEach(marking => {\n      if (marking.structContent) {\n        const structContent = marking.structContent;\n        const newStructContent = this.markStructureContent(marking.tag, marking.options);\n        structContent.push(newStructContent);\n        this.page.markings.slice(-1)[0].structContent = structContent;\n      } else {\n        this.markContent(marking.tag, marking.options);\n      }\n    });\n  },\n  endPageMarkings(page) {\n    const pageMarkings = page.markings;\n    pageMarkings.forEach(() => page.write('EMC'));\n    page.markings = [];\n    return pageMarkings;\n  },\n  getMarkInfoDictionary() {\n    if (!this._root.data.MarkInfo) {\n      this._root.data.MarkInfo = this.ref({});\n    }\n    return this._root.data.MarkInfo;\n  },\n  hasMarkInfoDictionary() {\n    return !!this._root.data.MarkInfo;\n  },\n  getStructTreeRoot() {\n    if (!this._root.data.StructTreeRoot) {\n      this._root.data.StructTreeRoot = this.ref({\n        Type: 'StructTreeRoot',\n        ParentTree: new PDFNumberTree(),\n        ParentTreeNextKey: 0\n      });\n    }\n    return this._root.data.StructTreeRoot;\n  },\n  getStructParentTree() {\n    return this.getStructTreeRoot().data.ParentTree;\n  },\n  createStructParentTreeNextKey() {\n    // initialise the MarkInfo dictionary\n    this.getMarkInfoDictionary();\n    const structTreeRoot = this.getStructTreeRoot();\n    const key = structTreeRoot.data.ParentTreeNextKey++;\n    structTreeRoot.data.ParentTree.add(key, []);\n    return key;\n  },\n  endMarkings() {\n    const structTreeRoot = this._root.data.StructTreeRoot;\n    if (structTreeRoot) {\n      structTreeRoot.end();\n      this.structChildren.forEach(structElem => structElem.end());\n    }\n    if (this._root.data.MarkInfo) {\n      this._root.data.MarkInfo.end();\n    }\n  }\n};\n\nconst FIELD_FLAGS = {\n  readOnly: 1,\n  required: 2,\n  noExport: 4,\n  multiline: 0x1000,\n  password: 0x2000,\n  toggleToOffButton: 0x4000,\n  radioButton: 0x8000,\n  pushButton: 0x10000,\n  combo: 0x20000,\n  edit: 0x40000,\n  sort: 0x80000,\n  multiSelect: 0x200000,\n  noSpell: 0x400000\n};\nconst FIELD_JUSTIFY = {\n  left: 0,\n  center: 1,\n  right: 2\n};\nconst VALUE_MAP = {\n  value: 'V',\n  defaultValue: 'DV'\n};\nconst FORMAT_SPECIAL = {\n  zip: '0',\n  zipPlus4: '1',\n  zip4: '1',\n  phone: '2',\n  ssn: '3'\n};\nconst FORMAT_DEFAULT = {\n  number: {\n    nDec: 0,\n    sepComma: false,\n    negStyle: 'MinusBlack',\n    currency: '',\n    currencyPrepend: true\n  },\n  percent: {\n    nDec: 0,\n    sepComma: false\n  }\n};\nvar AcroFormMixin = {\n  /**\r\n   * Must call if adding AcroForms to a document. Must also call font() before\r\n   * this method to set the default font.\r\n   */\n  initForm() {\n    if (!this._font) {\n      throw new Error('Must set a font before calling initForm method');\n    }\n    this._acroform = {\n      fonts: {},\n      defaultFont: this._font.name\n    };\n    this._acroform.fonts[this._font.id] = this._font.ref();\n    let data = {\n      Fields: [],\n      NeedAppearances: true,\n      DA: new String(`/${this._font.id} 0 Tf 0 g`),\n      DR: {\n        Font: {}\n      }\n    };\n    data.DR.Font[this._font.id] = this._font.ref();\n    const AcroForm = this.ref(data);\n    this._root.data.AcroForm = AcroForm;\n    return this;\n  },\n  /**\r\n   * Called automatically by document.js\r\n   */\n  endAcroForm() {\n    if (this._root.data.AcroForm) {\n      if (!Object.keys(this._acroform.fonts).length && !this._acroform.defaultFont) {\n        throw new Error('No fonts specified for PDF form');\n      }\n      let fontDict = this._root.data.AcroForm.data.DR.Font;\n      Object.keys(this._acroform.fonts).forEach(name => {\n        fontDict[name] = this._acroform.fonts[name];\n      });\n      this._root.data.AcroForm.data.Fields.forEach(fieldRef => {\n        this._endChild(fieldRef);\n      });\n      this._root.data.AcroForm.end();\n    }\n    return this;\n  },\n  _endChild(ref) {\n    if (Array.isArray(ref.data.Kids)) {\n      ref.data.Kids.forEach(childRef => {\n        this._endChild(childRef);\n      });\n      ref.end();\n    }\n    return this;\n  },\n  /**\r\n   * Creates and adds a form field to the document. Form fields are intermediate\r\n   * nodes in a PDF form that are used to specify form name heirarchy and form\r\n   * value defaults.\r\n   * @param {string} name - field name (T attribute in field dictionary)\r\n   * @param {object} options  - other attributes to include in field dictionary\r\n   */\n  formField(name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let fieldDict = this._fieldDict(name, null, options);\n    let fieldRef = this.ref(fieldDict);\n    this._addToParent(fieldRef);\n    return fieldRef;\n  },\n  /**\r\n   * Creates and adds a Form Annotation to the document. Form annotations are\r\n   * called Widget annotations internally within a PDF file.\r\n   * @param {string} name - form field name (T attribute of widget annotation\r\n   * dictionary)\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} w\r\n   * @param {number} h\r\n   * @param {object} options\r\n   */\n  formAnnotation(name, type, x, y, w, h) {\n    let options = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n    let fieldDict = this._fieldDict(name, type, options);\n    fieldDict.Subtype = 'Widget';\n    if (fieldDict.F === undefined) {\n      fieldDict.F = 4; // print the annotation\n    }\n\n    // Add Field annot to page, and get it's ref\n    this.annotate(x, y, w, h, fieldDict);\n    let annotRef = this.page.annotations[this.page.annotations.length - 1];\n    return this._addToParent(annotRef);\n  },\n  formText(name, x, y, w, h) {\n    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    return this.formAnnotation(name, 'text', x, y, w, h, options);\n  },\n  formPushButton(name, x, y, w, h) {\n    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    return this.formAnnotation(name, 'pushButton', x, y, w, h, options);\n  },\n  formCombo(name, x, y, w, h) {\n    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    return this.formAnnotation(name, 'combo', x, y, w, h, options);\n  },\n  formList(name, x, y, w, h) {\n    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    return this.formAnnotation(name, 'list', x, y, w, h, options);\n  },\n  formRadioButton(name, x, y, w, h) {\n    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    return this.formAnnotation(name, 'radioButton', x, y, w, h, options);\n  },\n  formCheckbox(name, x, y, w, h) {\n    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    return this.formAnnotation(name, 'checkbox', x, y, w, h, options);\n  },\n  _addToParent(fieldRef) {\n    let parent = fieldRef.data.Parent;\n    if (parent) {\n      if (!parent.data.Kids) {\n        parent.data.Kids = [];\n      }\n      parent.data.Kids.push(fieldRef);\n    } else {\n      this._root.data.AcroForm.data.Fields.push(fieldRef);\n    }\n    return this;\n  },\n  _fieldDict(name, type) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (!this._acroform) {\n      throw new Error('Call document.initForm() method before adding form elements to document');\n    }\n    let opts = Object.assign({}, options);\n    if (type !== null) {\n      opts = this._resolveType(type, options);\n    }\n    opts = this._resolveFlags(opts);\n    opts = this._resolveJustify(opts);\n    opts = this._resolveFont(opts);\n    opts = this._resolveStrings(opts);\n    opts = this._resolveColors(opts);\n    opts = this._resolveFormat(opts);\n    opts.T = new String(name);\n    if (opts.parent) {\n      opts.Parent = opts.parent;\n      delete opts.parent;\n    }\n    return opts;\n  },\n  _resolveType(type, opts) {\n    if (type === 'text') {\n      opts.FT = 'Tx';\n    } else if (type === 'pushButton') {\n      opts.FT = 'Btn';\n      opts.pushButton = true;\n    } else if (type === 'radioButton') {\n      opts.FT = 'Btn';\n      opts.radioButton = true;\n    } else if (type === 'checkbox') {\n      opts.FT = 'Btn';\n    } else if (type === 'combo') {\n      opts.FT = 'Ch';\n      opts.combo = true;\n    } else if (type === 'list') {\n      opts.FT = 'Ch';\n    } else {\n      throw new Error(`Invalid form annotation type '${type}'`);\n    }\n    return opts;\n  },\n  _resolveFormat(opts) {\n    const f = opts.format;\n    if (f && f.type) {\n      let fnKeystroke;\n      let fnFormat;\n      let params = '';\n      if (FORMAT_SPECIAL[f.type] !== undefined) {\n        fnKeystroke = `AFSpecial_Keystroke`;\n        fnFormat = `AFSpecial_Format`;\n        params = FORMAT_SPECIAL[f.type];\n      } else {\n        let format = f.type.charAt(0).toUpperCase() + f.type.slice(1);\n        fnKeystroke = `AF${format}_Keystroke`;\n        fnFormat = `AF${format}_Format`;\n        if (f.type === 'date') {\n          fnKeystroke += 'Ex';\n          params = String(f.param);\n        } else if (f.type === 'time') {\n          params = String(f.param);\n        } else if (f.type === 'number') {\n          let p = Object.assign({}, FORMAT_DEFAULT.number, f);\n          params = String([String(p.nDec), p.sepComma ? '0' : '1', '\"' + p.negStyle + '\"', 'null', '\"' + p.currency + '\"', String(p.currencyPrepend)].join(','));\n        } else if (f.type === 'percent') {\n          let p = Object.assign({}, FORMAT_DEFAULT.percent, f);\n          params = String([String(p.nDec), p.sepComma ? '0' : '1'].join(','));\n        }\n      }\n      opts.AA = opts.AA ? opts.AA : {};\n      opts.AA.K = {\n        S: 'JavaScript',\n        JS: new String(`${fnKeystroke}(${params});`)\n      };\n      opts.AA.F = {\n        S: 'JavaScript',\n        JS: new String(`${fnFormat}(${params});`)\n      };\n    }\n    delete opts.format;\n    return opts;\n  },\n  _resolveColors(opts) {\n    let color = this._normalizeColor(opts.backgroundColor);\n    if (color) {\n      if (!opts.MK) {\n        opts.MK = {};\n      }\n      opts.MK.BG = color;\n    }\n    color = this._normalizeColor(opts.borderColor);\n    if (color) {\n      if (!opts.MK) {\n        opts.MK = {};\n      }\n      opts.MK.BC = color;\n    }\n    delete opts.backgroundColor;\n    delete opts.borderColor;\n    return opts;\n  },\n  _resolveFlags(options) {\n    let result = 0;\n    Object.keys(options).forEach(key => {\n      if (FIELD_FLAGS[key]) {\n        if (options[key]) {\n          result |= FIELD_FLAGS[key];\n        }\n        delete options[key];\n      }\n    });\n    if (result !== 0) {\n      options.Ff = options.Ff ? options.Ff : 0;\n      options.Ff |= result;\n    }\n    return options;\n  },\n  _resolveJustify(options) {\n    let result = 0;\n    if (options.align !== undefined) {\n      if (typeof FIELD_JUSTIFY[options.align] === 'number') {\n        result = FIELD_JUSTIFY[options.align];\n      }\n      delete options.align;\n    }\n    if (result !== 0) {\n      options.Q = result; // default\n    }\n    return options;\n  },\n  _resolveFont(options) {\n    // add current font to document-level AcroForm dict if necessary\n    if (this._acroform.fonts[this._font.id] == null) {\n      this._acroform.fonts[this._font.id] = this._font.ref();\n    }\n\n    // add current font to field's resource dict (RD) if not the default acroform font\n    if (this._acroform.defaultFont !== this._font.name) {\n      options.DR = {\n        Font: {}\n      };\n\n      // Get the fontSize option. If not set use auto sizing\n      const fontSize = options.fontSize || 0;\n      options.DR.Font[this._font.id] = this._font.ref();\n      options.DA = new String(`/${this._font.id} ${fontSize} Tf 0 g`);\n    }\n    return options;\n  },\n  _resolveStrings(options) {\n    let select = [];\n    function appendChoices(a) {\n      if (Array.isArray(a)) {\n        for (let idx = 0; idx < a.length; idx++) {\n          if (typeof a[idx] === 'string') {\n            select.push(new String(a[idx]));\n          } else {\n            select.push(a[idx]);\n          }\n        }\n      }\n    }\n    appendChoices(options.Opt);\n    if (options.select) {\n      appendChoices(options.select);\n      delete options.select;\n    }\n    if (select.length) {\n      options.Opt = select;\n    }\n    Object.keys(VALUE_MAP).forEach(key => {\n      if (options[key] !== undefined) {\n        options[VALUE_MAP[key]] = options[key];\n        delete options[key];\n      }\n    });\n    ['V', 'DV'].forEach(key => {\n      if (typeof options[key] === 'string') {\n        options[key] = new String(options[key]);\n      }\n    });\n    if (options.MK && options.MK.CA) {\n      options.MK.CA = new String(options.MK.CA);\n    }\n    if (options.label) {\n      options.MK = options.MK ? options.MK : {};\n      options.MK.CA = new String(options.label);\n      delete options.label;\n    }\n    return options;\n  }\n};\n\nvar AttachmentsMixin = {\n  /**\r\n   * Embed contents of `src` in PDF\r\n   * @param {Buffer | ArrayBuffer | string} src input Buffer, ArrayBuffer, base64 encoded string or path to file\r\n   * @param {object} options\r\n   *  * options.name: filename to be shown in PDF, will use `src` if none set\r\n   *  * options.type: filetype to be shown in PDF\r\n   *  * options.description: description to be shown in PDF\r\n   *  * options.hidden: if true, do not add attachment to EmbeddedFiles dictionary. Useful for file attachment annotations\r\n   *  * options.creationDate: override creation date\r\n   *  * options.modifiedDate: override modified date\r\n   *  * options.relationship: Relationship between the PDF document and its attached file. Can be 'Alternative', 'Data', 'Source', 'Supplement' or 'Unspecified'.\r\n   * @returns filespec reference\r\n   */\n  file(src) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    options.name = options.name || src;\n    options.relationship = options.relationship || 'Unspecified';\n    const refBody = {\n      Type: 'EmbeddedFile',\n      Params: {}\n    };\n    let data;\n    if (!src) {\n      throw new Error('No src specified');\n    }\n    if (Buffer.isBuffer(src)) {\n      data = src;\n    } else if (src instanceof ArrayBuffer) {\n      data = Buffer.from(new Uint8Array(src));\n    } else {\n      let match;\n      if (match = /^data:(.*?);base64,(.*)$/.exec(src)) {\n        if (match[1]) {\n          refBody.Subtype = match[1].replace('/', '#2F');\n        }\n        data = Buffer.from(match[2], 'base64');\n      } else {\n        data = fs__WEBPACK_IMPORTED_MODULE_3___default().readFileSync(src);\n        if (!data) {\n          throw new Error(`Could not read contents of file at filepath ${src}`);\n        }\n\n        // update CreationDate and ModDate\n        const {\n          birthtime,\n          ctime\n        } = fs__WEBPACK_IMPORTED_MODULE_3___default().statSync(src);\n        refBody.Params.CreationDate = birthtime;\n        refBody.Params.ModDate = ctime;\n      }\n    }\n\n    // override creation date and modified date\n    if (options.creationDate instanceof Date) {\n      refBody.Params.CreationDate = options.creationDate;\n    }\n    if (options.modifiedDate instanceof Date) {\n      refBody.Params.ModDate = options.modifiedDate;\n    }\n    // add optional subtype\n    if (options.type) {\n      refBody.Subtype = options.type.replace('/', '#2F');\n    }\n\n    // add checksum and size information\n    const checksum = crypto_js__WEBPACK_IMPORTED_MODULE_2___default().MD5(crypto_js__WEBPACK_IMPORTED_MODULE_2___default().lib.WordArray.create(new Uint8Array(data)));\n    refBody.Params.CheckSum = new String(checksum);\n    refBody.Params.Size = data.byteLength;\n\n    // save some space when embedding the same file again\n    // if a file with the same name and metadata exists, reuse its reference\n    let ref;\n    if (!this._fileRegistry) this._fileRegistry = {};\n    let file = this._fileRegistry[options.name];\n    if (file && isEqual(refBody, file)) {\n      ref = file.ref;\n    } else {\n      ref = this.ref(refBody);\n      ref.end(data);\n      this._fileRegistry[options.name] = {\n        ...refBody,\n        ref\n      };\n    }\n    // add filespec for embedded file\n    const fileSpecBody = {\n      Type: 'Filespec',\n      AFRelationship: options.relationship,\n      F: new String(options.name),\n      EF: {\n        F: ref\n      },\n      UF: new String(options.name)\n    };\n    if (options.description) {\n      fileSpecBody.Desc = new String(options.description);\n    }\n    const filespec = this.ref(fileSpecBody);\n    filespec.end();\n    if (!options.hidden) {\n      this.addNamedEmbeddedFile(options.name, filespec);\n    }\n\n    // Add file to the catalogue to be PDF/A3 compliant\n    if (this._root.data.AF) {\n      this._root.data.AF.push(filespec);\n    } else {\n      this._root.data.AF = [filespec];\n    }\n    return filespec;\n  }\n};\n\n/** check two embedded file metadata objects for equality */\nfunction isEqual(a, b) {\n  return a.Subtype === b.Subtype && a.Params.CheckSum.toString() === b.Params.CheckSum.toString() && a.Params.Size === b.Params.Size && a.Params.CreationDate.getTime() === b.Params.CreationDate.getTime() && (a.Params.ModDate === undefined && b.Params.ModDate === undefined || a.Params.ModDate.getTime() === b.Params.ModDate.getTime());\n}\n\nvar PDFA = {\n  initPDFA(pSubset) {\n    if (pSubset.charAt(pSubset.length - 3) === '-') {\n      this.subset_conformance = pSubset.charAt(pSubset.length - 1).toUpperCase();\n      this.subset = parseInt(pSubset.charAt(pSubset.length - 2));\n    } else {\n      // Default to Basic conformance when user doesn't specify\n      this.subset_conformance = 'B';\n      this.subset = parseInt(pSubset.charAt(pSubset.length - 1));\n    }\n  },\n  endSubset() {\n    this._addPdfaMetadata();\n    this._addColorOutputIntent();\n  },\n  _addColorOutputIntent() {\n    const iccProfile = fs__WEBPACK_IMPORTED_MODULE_3___default().readFileSync(`${__dirname}/data/sRGB_IEC61966_2_1.icc`);\n    const colorProfileRef = this.ref({\n      Length: iccProfile.length,\n      N: 3\n    });\n    colorProfileRef.write(iccProfile);\n    colorProfileRef.end();\n    const intentRef = this.ref({\n      Type: 'OutputIntent',\n      S: 'GTS_PDFA1',\n      Info: new String('sRGB IEC61966-2.1'),\n      OutputConditionIdentifier: new String('sRGB IEC61966-2.1'),\n      DestOutputProfile: colorProfileRef\n    });\n    intentRef.end();\n    this._root.data.OutputIntents = [intentRef];\n  },\n  _getPdfaid() {\n    return `\n        <rdf:Description xmlns:pdfaid=\"http://www.aiim.org/pdfa/ns/id/\" rdf:about=\"\">\n            <pdfaid:part>${this.subset}</pdfaid:part>\n            <pdfaid:conformance>${this.subset_conformance}</pdfaid:conformance>\n        </rdf:Description>\n        `;\n  },\n  _addPdfaMetadata() {\n    this.appendXML(this._getPdfaid());\n  }\n};\n\nvar PDFUA = {\n  initPDFUA() {\n    this.subset = 1;\n  },\n  endSubset() {\n    this._addPdfuaMetadata();\n  },\n  _addPdfuaMetadata() {\n    this.appendXML(this._getPdfuaid());\n  },\n  _getPdfuaid() {\n    return `\n        <rdf:Description xmlns:pdfuaid=\"http://www.aiim.org/pdfua/ns/id/\" rdf:about=\"\">\n            <pdfuaid:part>${this.subset}</pdfuaid:part>\n        </rdf:Description>\n        `;\n  }\n};\n\nvar SubsetMixin = {\n  _importSubset(subset) {\n    Object.assign(this, subset);\n  },\n  initSubset(options) {\n    switch (options.subset) {\n      case 'PDF/A-1':\n      case 'PDF/A-1a':\n      case 'PDF/A-1b':\n      case 'PDF/A-2':\n      case 'PDF/A-2a':\n      case 'PDF/A-2b':\n      case 'PDF/A-3':\n      case 'PDF/A-3a':\n      case 'PDF/A-3b':\n        this._importSubset(PDFA);\n        this.initPDFA(options.subset);\n        break;\n      case 'PDF/UA':\n        this._importSubset(PDFUA);\n        this.initPDFUA();\n        break;\n    }\n  }\n};\n\nclass PDFMetadata {\n  constructor() {\n    this._metadata = `\n        <?xpacket begin=\"\\ufeff\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>\n            <x:xmpmeta xmlns:x=\"adobe:ns:meta/\">\n                <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n        `;\n  }\n  _closeTags() {\n    this._metadata = this._metadata.concat(`\n                </rdf:RDF>\n            </x:xmpmeta>\n        <?xpacket end=\"w\"?>\n        `);\n  }\n  append(xml) {\n    let newline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this._metadata = this._metadata.concat(xml);\n    if (newline) this._metadata = this._metadata.concat('\\n');\n  }\n  getXML() {\n    return this._metadata;\n  }\n  getLength() {\n    return this._metadata.length;\n  }\n  end() {\n    this._closeTags();\n    this._metadata = this._metadata.trim();\n  }\n}\n\nvar MetadataMixin = {\n  initMetadata() {\n    this.metadata = new PDFMetadata();\n  },\n  appendXML(xml) {\n    let newline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.metadata.append(xml, newline);\n  },\n  _addInfo() {\n    this.appendXML(`\n        <rdf:Description rdf:about=\"\" xmlns:xmp=\"http://ns.adobe.com/xap/1.0/\">\n            <xmp:CreateDate>${this.info.CreationDate.toISOString().split('.')[0] + \"Z\"}</xmp:CreateDate>\n            <xmp:CreatorTool>${this.info.Creator}</xmp:CreatorTool>\n        </rdf:Description>\n        `);\n    if (this.info.Title || this.info.Author || this.info.Subject) {\n      this.appendXML(`\n            <rdf:Description rdf:about=\"\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n            `);\n      if (this.info.Title) {\n        this.appendXML(`\n                <dc:title>\n                    <rdf:Alt>\n                        <rdf:li xml:lang=\"x-default\">${this.info.Title}</rdf:li>\n                    </rdf:Alt>\n                </dc:title>\n                `);\n      }\n      if (this.info.Author) {\n        this.appendXML(`\n                <dc:creator>\n                    <rdf:Seq>\n                        <rdf:li>${this.info.Author}</rdf:li>\n                    </rdf:Seq>\n                </dc:creator>\n                `);\n      }\n      if (this.info.Subject) {\n        this.appendXML(`\n                <dc:description>\n                    <rdf:Alt>\n                        <rdf:li xml:lang=\"x-default\">${this.info.Subject}</rdf:li>\n                    </rdf:Alt>\n                </dc:description>\n                `);\n      }\n      this.appendXML(`\n            </rdf:Description>\n            `);\n    }\n    this.appendXML(`\n        <rdf:Description rdf:about=\"\" xmlns:pdf=\"http://ns.adobe.com/pdf/1.3/\">\n            <pdf:Producer>${this.info.Creator}</pdf:Producer>`, false);\n    if (this.info.Keywords) {\n      this.appendXML(`\n            <pdf:Keywords>${this.info.Keywords}</pdf:Keywords>`, false);\n    }\n    this.appendXML(`\n        </rdf:Description>\n        `);\n  },\n  endMetadata() {\n    this._addInfo();\n    this.metadata.end();\n\n    /*\r\n    Metadata was introduced in PDF 1.4, so adding it to 1.3 \r\n    will likely only take up more space.\r\n    */\n    if (this.version != 1.3) {\n      this.metadataRef = this.ref({\n        length: this.metadata.getLength(),\n        Type: 'Metadata',\n        Subtype: 'XML'\n      });\n      this.metadataRef.compress = false;\n      this.metadataRef.write(Buffer.from(this.metadata.getXML(), 'utf-8'));\n      this.metadataRef.end();\n      this._root.data.Metadata = this.metadataRef;\n    }\n  }\n};\n\n/*\r\nPDFDocument - represents an entire PDF document\r\nBy Devon Govett\r\n*/\nclass PDFDocument extends (stream__WEBPACK_IMPORTED_MODULE_0___default().Readable) {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(options);\n    this.options = options;\n\n    // PDF version\n    switch (options.pdfVersion) {\n      case '1.4':\n        this.version = 1.4;\n        break;\n      case '1.5':\n        this.version = 1.5;\n        break;\n      case '1.6':\n        this.version = 1.6;\n        break;\n      case '1.7':\n      case '1.7ext3':\n        this.version = 1.7;\n        break;\n      default:\n        this.version = 1.3;\n        break;\n    }\n\n    // Whether streams should be compressed\n    this.compress = this.options.compress != null ? this.options.compress : true;\n    this._pageBuffer = [];\n    this._pageBufferStart = 0;\n\n    // The PDF object store\n    this._offsets = [];\n    this._waiting = 0;\n    this._ended = false;\n    this._offset = 0;\n    const Pages = this.ref({\n      Type: 'Pages',\n      Count: 0,\n      Kids: []\n    });\n    const Names = this.ref({\n      Dests: new PDFNameTree()\n    });\n    this._root = this.ref({\n      Type: 'Catalog',\n      Pages,\n      Names\n    });\n    if (this.options.lang) {\n      this._root.data.Lang = new String(this.options.lang);\n    }\n\n    // The current page\n    this.page = null;\n\n    // Initialize mixins\n    this.initMetadata();\n    this.initColor();\n    this.initVector();\n    this.initFonts(options.font);\n    this.initText();\n    this.initImages();\n    this.initOutline();\n    this.initMarkings(options);\n    this.initSubset(options);\n\n    // Initialize the metadata\n    this.info = {\n      Producer: 'PDFKit',\n      Creator: 'PDFKit',\n      CreationDate: new Date()\n    };\n    if (this.options.info) {\n      for (let key in this.options.info) {\n        const val = this.options.info[key];\n        this.info[key] = val;\n      }\n    }\n    if (this.options.displayTitle) {\n      this._root.data.ViewerPreferences = this.ref({\n        DisplayDocTitle: true\n      });\n    }\n\n    // Generate file ID\n    this._id = PDFSecurity.generateFileID(this.info);\n\n    // Initialize security settings\n    this._security = PDFSecurity.create(this, options);\n\n    // Write the header\n    // PDF version\n    this._write(`%PDF-${this.version}`);\n\n    // 4 binary chars, as recommended by the spec\n    this._write('%\\xFF\\xFF\\xFF\\xFF');\n\n    // Add the first page\n    if (this.options.autoFirstPage !== false) {\n      this.addPage();\n    }\n  }\n  addPage(options) {\n    if (options == null) {\n      ({\n        options\n      } = this);\n    }\n\n    // end the current page if needed\n    if (!this.options.bufferPages) {\n      this.flushPages();\n    }\n\n    // create a page object\n    this.page = new PDFPage(this, options);\n    this._pageBuffer.push(this.page);\n\n    // add the page to the object store\n    const pages = this._root.data.Pages.data;\n    pages.Kids.push(this.page.dictionary);\n    pages.Count++;\n\n    // reset x and y coordinates\n    this.x = this.page.margins.left;\n    this.y = this.page.margins.top;\n\n    // flip PDF coordinate system so that the origin is in\n    // the top left rather than the bottom left\n    this._ctm = [1, 0, 0, 1, 0, 0];\n    this.transform(1, 0, 0, -1, 0, this.page.height);\n    this.emit('pageAdded');\n    return this;\n  }\n  continueOnNewPage(options) {\n    const pageMarkings = this.endPageMarkings(this.page);\n    this.addPage(options);\n    this.initPageMarkings(pageMarkings);\n    return this;\n  }\n  bufferedPageRange() {\n    return {\n      start: this._pageBufferStart,\n      count: this._pageBuffer.length\n    };\n  }\n  switchToPage(n) {\n    let page;\n    if (!(page = this._pageBuffer[n - this._pageBufferStart])) {\n      throw new Error(`switchToPage(${n}) out of bounds, current buffer covers pages ${this._pageBufferStart} to ${this._pageBufferStart + this._pageBuffer.length - 1}`);\n    }\n    return this.page = page;\n  }\n  flushPages() {\n    // this local variable exists so we're future-proof against\n    // reentrant calls to flushPages.\n    const pages = this._pageBuffer;\n    this._pageBuffer = [];\n    this._pageBufferStart += pages.length;\n    for (let page of pages) {\n      this.endPageMarkings(page);\n      page.end();\n    }\n  }\n  addNamedDestination(name) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    if (args.length === 0) {\n      args = ['XYZ', null, null, null];\n    }\n    if (args[0] === 'XYZ' && args[2] !== null) {\n      args[2] = this.page.height - args[2];\n    }\n    args.unshift(this.page.dictionary);\n    this._root.data.Names.data.Dests.add(name, args);\n  }\n  addNamedEmbeddedFile(name, ref) {\n    if (!this._root.data.Names.data.EmbeddedFiles) {\n      // disabling /Limits for this tree fixes attachments not showing in Adobe Reader\n      this._root.data.Names.data.EmbeddedFiles = new PDFNameTree({\n        limits: false\n      });\n    }\n\n    // add filespec to EmbeddedFiles\n    this._root.data.Names.data.EmbeddedFiles.add(name, ref);\n  }\n  addNamedJavaScript(name, js) {\n    if (!this._root.data.Names.data.JavaScript) {\n      this._root.data.Names.data.JavaScript = new PDFNameTree();\n    }\n    let data = {\n      JS: new String(js),\n      S: 'JavaScript'\n    };\n    this._root.data.Names.data.JavaScript.add(name, data);\n  }\n  ref(data) {\n    const ref = new PDFReference(this, this._offsets.length + 1, data);\n    this._offsets.push(null); // placeholder for this object's offset once it is finalized\n    this._waiting++;\n    return ref;\n  }\n  _read() {}\n  // do nothing, but this method is required by node\n\n  _write(data) {\n    if (!Buffer.isBuffer(data)) {\n      data = Buffer.from(data + '\\n', 'binary');\n    }\n    this.push(data);\n    return this._offset += data.length;\n  }\n  addContent(data) {\n    this.page.write(data);\n    return this;\n  }\n  _refEnd(ref) {\n    this._offsets[ref.id - 1] = ref.offset;\n    if (--this._waiting === 0 && this._ended) {\n      this._finalize();\n      return this._ended = false;\n    }\n  }\n  end() {\n    this.flushPages();\n    this._info = this.ref();\n    for (let key in this.info) {\n      let val = this.info[key];\n      if (typeof val === 'string') {\n        val = new String(val);\n      }\n      let entry = this.ref(val);\n      entry.end();\n      this._info.data[key] = entry;\n    }\n    this._info.end();\n    for (let name in this._fontFamilies) {\n      const font = this._fontFamilies[name];\n      font.finalize();\n    }\n    this.endOutline();\n    this.endMarkings();\n    if (this.subset) {\n      this.endSubset();\n    }\n    this.endMetadata();\n    this._root.end();\n    this._root.data.Pages.end();\n    this._root.data.Names.end();\n    this.endAcroForm();\n    if (this._root.data.ViewerPreferences) {\n      this._root.data.ViewerPreferences.end();\n    }\n    if (this._security) {\n      this._security.end();\n    }\n    if (this._waiting === 0) {\n      return this._finalize();\n    } else {\n      return this._ended = true;\n    }\n  }\n  _finalize() {\n    // generate xref\n    const xRefOffset = this._offset;\n    this._write('xref');\n    this._write(`0 ${this._offsets.length + 1}`);\n    this._write('0000000000 65535 f ');\n    for (let offset of this._offsets) {\n      offset = `0000000000${offset}`.slice(-10);\n      this._write(offset + ' 00000 n ');\n    }\n\n    // trailer\n    const trailer = {\n      Size: this._offsets.length + 1,\n      Root: this._root,\n      Info: this._info,\n      ID: [this._id, this._id]\n    };\n    if (this._security) {\n      trailer.Encrypt = this._security.dictionary;\n    }\n    this._write('trailer');\n    this._write(PDFObject.convert(trailer));\n    this._write('startxref');\n    this._write(`${xRefOffset}`);\n    this._write('%%EOF');\n\n    // end the stream\n    return this.push(null);\n  }\n  toString() {\n    return '[object PDFDocument]';\n  }\n}\nconst mixin = methods => {\n  Object.assign(PDFDocument.prototype, methods);\n};\nmixin(MetadataMixin);\nmixin(ColorMixin);\nmixin(VectorMixin);\nmixin(FontsMixin);\nmixin(TextMixin);\nmixin(ImagesMixin);\nmixin(AnnotationsMixin);\nmixin(OutlineMixin);\nmixin(MarkingsMixin);\nmixin(AcroFormMixin);\nmixin(AttachmentsMixin);\nmixin(SubsetMixin);\nPDFDocument.LineWrapper = LineWrapper;\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PDFDocument);\n//# sourceMappingURL=pdfkit.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/pdfkit/js/pdfkit.es.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/restructure/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@foliojs-fork/restructure/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.EncodeStream = __webpack_require__(/*! ./src/EncodeStream */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/EncodeStream.js\");\r\nexports.DecodeStream = __webpack_require__(/*! ./src/DecodeStream */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/DecodeStream.js\");\r\nexports.Array = __webpack_require__(/*! ./src/Array */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/Array.js\");\r\nexports.LazyArray = __webpack_require__(/*! ./src/LazyArray */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/LazyArray.js\");\r\nexports.Bitfield = __webpack_require__(/*! ./src/Bitfield */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/Bitfield.js\");\r\nexports.Boolean = __webpack_require__(/*! ./src/Boolean */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/Boolean.js\");\r\nexports.Buffer = __webpack_require__(/*! ./src/Buffer */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/Buffer.js\");\r\nexports.Enum = __webpack_require__(/*! ./src/Enum */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/Enum.js\");\r\nexports.Optional = __webpack_require__(/*! ./src/Optional */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/Optional.js\");\r\nexports.Reserved = __webpack_require__(/*! ./src/Reserved */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/Reserved.js\");\r\nexports.String = __webpack_require__(/*! ./src/String */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/String.js\");\r\nexports.Struct = __webpack_require__(/*! ./src/Struct */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/Struct.js\");\r\nexports.VersionedStruct = __webpack_require__(/*! ./src/VersionedStruct */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/VersionedStruct.js\");\r\n\r\nconst utils             = __webpack_require__(/*! ./src/utils */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/utils.js\");\r\nconst NumberT           = __webpack_require__(/*! ./src/Number */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/Number.js\");\r\nconst Pointer           = __webpack_require__(/*! ./src/Pointer */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/Pointer.js\");\r\n\r\nObject.assign(exports, utils, NumberT, Pointer);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSwwSUFBdUQ7QUFDdkQsMElBQXVEO0FBQ3ZELHFIQUFnRDtBQUNoRCxpSUFBb0Q7QUFDcEQsOEhBQW1EO0FBQ25ELDJIQUFrRDtBQUNsRCx3SEFBaUQ7QUFDakQsa0hBQStDO0FBQy9DLDhIQUFtRDtBQUNuRCw4SEFBbUQ7QUFDbkQsd0hBQWlEO0FBQ2pELHdIQUFpRDtBQUNqRCxtSkFBMEQ7QUFDMUQ7QUFDQSwwQkFBMEIsbUJBQU8sQ0FBQyxnRkFBYTtBQUMvQywwQkFBMEIsbUJBQU8sQ0FBQyxrRkFBYztBQUNoRCwwQkFBMEIsbUJBQU8sQ0FBQyxvRkFBZTtBQUNqRDtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9nYXNjYXQvcHJpc21hcXVhbnQvcHJpc21hLXF1YW50dW0vbm9kZV9tb2R1bGVzL0Bmb2xpb2pzLWZvcmsvcmVzdHJ1Y3R1cmUvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5FbmNvZGVTdHJlYW0gICAgPSByZXF1aXJlKCcuL3NyYy9FbmNvZGVTdHJlYW0nKTtcclxuZXhwb3J0cy5EZWNvZGVTdHJlYW0gICAgPSByZXF1aXJlKCcuL3NyYy9EZWNvZGVTdHJlYW0nKTtcclxuZXhwb3J0cy5BcnJheSAgICAgICAgICAgPSByZXF1aXJlKCcuL3NyYy9BcnJheScpO1xyXG5leHBvcnRzLkxhenlBcnJheSAgICAgICA9IHJlcXVpcmUoJy4vc3JjL0xhenlBcnJheScpO1xyXG5leHBvcnRzLkJpdGZpZWxkICAgICAgICA9IHJlcXVpcmUoJy4vc3JjL0JpdGZpZWxkJyk7XHJcbmV4cG9ydHMuQm9vbGVhbiAgICAgICAgID0gcmVxdWlyZSgnLi9zcmMvQm9vbGVhbicpO1xyXG5leHBvcnRzLkJ1ZmZlciAgICAgICAgICA9IHJlcXVpcmUoJy4vc3JjL0J1ZmZlcicpO1xyXG5leHBvcnRzLkVudW0gICAgICAgICAgICA9IHJlcXVpcmUoJy4vc3JjL0VudW0nKTtcclxuZXhwb3J0cy5PcHRpb25hbCAgICAgICAgPSByZXF1aXJlKCcuL3NyYy9PcHRpb25hbCcpO1xyXG5leHBvcnRzLlJlc2VydmVkICAgICAgICA9IHJlcXVpcmUoJy4vc3JjL1Jlc2VydmVkJyk7XHJcbmV4cG9ydHMuU3RyaW5nICAgICAgICAgID0gcmVxdWlyZSgnLi9zcmMvU3RyaW5nJyk7XHJcbmV4cG9ydHMuU3RydWN0ICAgICAgICAgID0gcmVxdWlyZSgnLi9zcmMvU3RydWN0Jyk7XHJcbmV4cG9ydHMuVmVyc2lvbmVkU3RydWN0ID0gcmVxdWlyZSgnLi9zcmMvVmVyc2lvbmVkU3RydWN0Jyk7XHJcblxyXG5jb25zdCB1dGlscyAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vc3JjL3V0aWxzJyk7XHJcbmNvbnN0IE51bWJlclQgICAgICAgICAgID0gcmVxdWlyZSgnLi9zcmMvTnVtYmVyJyk7XHJcbmNvbnN0IFBvaW50ZXIgICAgICAgICAgID0gcmVxdWlyZSgnLi9zcmMvUG9pbnRlcicpO1xyXG5cclxuT2JqZWN0LmFzc2lnbihleHBvcnRzLCB1dGlscywgTnVtYmVyVCwgUG9pbnRlcik7XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/restructure/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/restructure/src/Array.js":
/*!*************************************************************!*\
  !*** ./node_modules/@foliojs-fork/restructure/src/Array.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {Number:NumberT} = __webpack_require__(/*! ./Number */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/Number.js\");\r\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/utils.js\");\r\n\r\nclass ArrayT {\r\n  constructor(type, length, lengthType = 'count') {\r\n    this.type = type;\r\n    this.length = length;\r\n    this.lengthType = lengthType;\r\n  }\r\n\r\n  decode(stream, parent) {\r\n    let length;\r\n    const { pos } = stream;\r\n\r\n    const res = [];\r\n    let ctx = parent;\r\n\r\n    if (this.length != null) {\r\n      length = utils.resolveLength(this.length, stream, parent);\r\n    }\r\n\r\n    if (this.length instanceof NumberT) {\r\n      // define hidden properties\r\n      Object.defineProperties(res, {\r\n        parent:         { value: parent },\r\n        _startOffset:   { value: pos },\r\n        _currentOffset: { value: 0, writable: true },\r\n        _length:        { value: length }\r\n      });\r\n\r\n      ctx = res;\r\n    }\r\n\r\n    if ((length == null) || (this.lengthType === 'bytes')) {\r\n      const target = (length != null) ?\r\n        stream.pos + length\r\n      : (parent != null ? parent._length : undefined) ?\r\n        parent._startOffset + parent._length\r\n      :\r\n        stream.length;\r\n\r\n      while (stream.pos < target) {\r\n        res.push(this.type.decode(stream, ctx));\r\n      }\r\n\r\n    } else {\r\n      for (let i = 0, end = length; i < end; i++) {\r\n        res.push(this.type.decode(stream, ctx));\r\n      }\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  size(array, ctx) {\r\n    if (!array) {\r\n      return this.type.size(null, ctx) * utils.resolveLength(this.length, null, ctx);\r\n    }\r\n\r\n    let size = 0;\r\n    if (this.length instanceof NumberT) {\r\n      size += this.length.size();\r\n      ctx = {parent: ctx};\r\n    }\r\n\r\n    for (let item of array) {\r\n      size += this.type.size(item, ctx);\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  encode(stream, array, parent) {\r\n    let ctx = parent;\r\n    if (this.length instanceof NumberT) {\r\n      ctx = {\r\n        pointers: [],\r\n        startOffset: stream.pos,\r\n        parent\r\n      };\r\n\r\n      ctx.pointerOffset = stream.pos + this.size(array, ctx);\r\n      this.length.encode(stream, array.length);\r\n    }\r\n\r\n    for (let item of array) {\r\n      this.type.encode(stream, item, ctx);\r\n    }\r\n\r\n    if (this.length instanceof NumberT) {\r\n      let i = 0;\r\n      while (i < ctx.pointers.length) {\r\n        const ptr = ctx.pointers[i++];\r\n        ptr.type.encode(stream, ptr.val);\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n\r\nmodule.exports = ArrayT;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9zcmMvQXJyYXkuanMiLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxnQkFBZ0IsRUFBRSxtQkFBTyxDQUFDLDhFQUFVO0FBQzNDLGNBQWMsbUJBQU8sQ0FBQyw0RUFBUztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksTUFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGVBQWU7QUFDekMsMEJBQTBCLFlBQVk7QUFDdEMsMEJBQTBCLDBCQUEwQjtBQUNwRCwwQkFBMEI7QUFDMUIsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLG9DQUFvQyxTQUFTO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9nYXNjYXQvcHJpc21hcXVhbnQvcHJpc21hLXF1YW50dW0vbm9kZV9tb2R1bGVzL0Bmb2xpb2pzLWZvcmsvcmVzdHJ1Y3R1cmUvc3JjL0FycmF5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtOdW1iZXI6TnVtYmVyVH0gPSByZXF1aXJlKCcuL051bWJlcicpO1xyXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcclxuXHJcbmNsYXNzIEFycmF5VCB7XHJcbiAgY29uc3RydWN0b3IodHlwZSwgbGVuZ3RoLCBsZW5ndGhUeXBlID0gJ2NvdW50Jykge1xyXG4gICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xyXG4gICAgdGhpcy5sZW5ndGhUeXBlID0gbGVuZ3RoVHlwZTtcclxuICB9XHJcblxyXG4gIGRlY29kZShzdHJlYW0sIHBhcmVudCkge1xyXG4gICAgbGV0IGxlbmd0aDtcclxuICAgIGNvbnN0IHsgcG9zIH0gPSBzdHJlYW07XHJcblxyXG4gICAgY29uc3QgcmVzID0gW107XHJcbiAgICBsZXQgY3R4ID0gcGFyZW50O1xyXG5cclxuICAgIGlmICh0aGlzLmxlbmd0aCAhPSBudWxsKSB7XHJcbiAgICAgIGxlbmd0aCA9IHV0aWxzLnJlc29sdmVMZW5ndGgodGhpcy5sZW5ndGgsIHN0cmVhbSwgcGFyZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5sZW5ndGggaW5zdGFuY2VvZiBOdW1iZXJUKSB7XHJcbiAgICAgIC8vIGRlZmluZSBoaWRkZW4gcHJvcGVydGllc1xyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhyZXMsIHtcclxuICAgICAgICBwYXJlbnQ6ICAgICAgICAgeyB2YWx1ZTogcGFyZW50IH0sXHJcbiAgICAgICAgX3N0YXJ0T2Zmc2V0OiAgIHsgdmFsdWU6IHBvcyB9LFxyXG4gICAgICAgIF9jdXJyZW50T2Zmc2V0OiB7IHZhbHVlOiAwLCB3cml0YWJsZTogdHJ1ZSB9LFxyXG4gICAgICAgIF9sZW5ndGg6ICAgICAgICB7IHZhbHVlOiBsZW5ndGggfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGN0eCA9IHJlcztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoKGxlbmd0aCA9PSBudWxsKSB8fCAodGhpcy5sZW5ndGhUeXBlID09PSAnYnl0ZXMnKSkge1xyXG4gICAgICBjb25zdCB0YXJnZXQgPSAobGVuZ3RoICE9IG51bGwpID9cclxuICAgICAgICBzdHJlYW0ucG9zICsgbGVuZ3RoXHJcbiAgICAgIDogKHBhcmVudCAhPSBudWxsID8gcGFyZW50Ll9sZW5ndGggOiB1bmRlZmluZWQpID9cclxuICAgICAgICBwYXJlbnQuX3N0YXJ0T2Zmc2V0ICsgcGFyZW50Ll9sZW5ndGhcclxuICAgICAgOlxyXG4gICAgICAgIHN0cmVhbS5sZW5ndGg7XHJcblxyXG4gICAgICB3aGlsZSAoc3RyZWFtLnBvcyA8IHRhcmdldCkge1xyXG4gICAgICAgIHJlcy5wdXNoKHRoaXMudHlwZS5kZWNvZGUoc3RyZWFtLCBjdHgpKTtcclxuICAgICAgfVxyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwLCBlbmQgPSBsZW5ndGg7IGkgPCBlbmQ7IGkrKykge1xyXG4gICAgICAgIHJlcy5wdXNoKHRoaXMudHlwZS5kZWNvZGUoc3RyZWFtLCBjdHgpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBzaXplKGFycmF5LCBjdHgpIHtcclxuICAgIGlmICghYXJyYXkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMudHlwZS5zaXplKG51bGwsIGN0eCkgKiB1dGlscy5yZXNvbHZlTGVuZ3RoKHRoaXMubGVuZ3RoLCBudWxsLCBjdHgpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBzaXplID0gMDtcclxuICAgIGlmICh0aGlzLmxlbmd0aCBpbnN0YW5jZW9mIE51bWJlclQpIHtcclxuICAgICAgc2l6ZSArPSB0aGlzLmxlbmd0aC5zaXplKCk7XHJcbiAgICAgIGN0eCA9IHtwYXJlbnQ6IGN0eH07XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaXRlbSBvZiBhcnJheSkge1xyXG4gICAgICBzaXplICs9IHRoaXMudHlwZS5zaXplKGl0ZW0sIGN0eCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHNpemU7XHJcbiAgfVxyXG5cclxuICBlbmNvZGUoc3RyZWFtLCBhcnJheSwgcGFyZW50KSB7XHJcbiAgICBsZXQgY3R4ID0gcGFyZW50O1xyXG4gICAgaWYgKHRoaXMubGVuZ3RoIGluc3RhbmNlb2YgTnVtYmVyVCkge1xyXG4gICAgICBjdHggPSB7XHJcbiAgICAgICAgcG9pbnRlcnM6IFtdLFxyXG4gICAgICAgIHN0YXJ0T2Zmc2V0OiBzdHJlYW0ucG9zLFxyXG4gICAgICAgIHBhcmVudFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgY3R4LnBvaW50ZXJPZmZzZXQgPSBzdHJlYW0ucG9zICsgdGhpcy5zaXplKGFycmF5LCBjdHgpO1xyXG4gICAgICB0aGlzLmxlbmd0aC5lbmNvZGUoc3RyZWFtLCBhcnJheS5sZW5ndGgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGl0ZW0gb2YgYXJyYXkpIHtcclxuICAgICAgdGhpcy50eXBlLmVuY29kZShzdHJlYW0sIGl0ZW0sIGN0eCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMubGVuZ3RoIGluc3RhbmNlb2YgTnVtYmVyVCkge1xyXG4gICAgICBsZXQgaSA9IDA7XHJcbiAgICAgIHdoaWxlIChpIDwgY3R4LnBvaW50ZXJzLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IHB0ciA9IGN0eC5wb2ludGVyc1tpKytdO1xyXG4gICAgICAgIHB0ci50eXBlLmVuY29kZShzdHJlYW0sIHB0ci52YWwpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBBcnJheVQ7XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/restructure/src/Array.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/restructure/src/Bitfield.js":
/*!****************************************************************!*\
  !*** ./node_modules/@foliojs-fork/restructure/src/Bitfield.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("class Bitfield {\r\n  constructor(type, flags = []) {\r\n    this.type = type;\r\n    this.flags = flags;\r\n  }\r\n  decode(stream) {\r\n    const val = this.type.decode(stream);\r\n\r\n    const res = {};\r\n    for (let i = 0; i < this.flags.length; i++) {\r\n      const flag = this.flags[i];\r\n      if (flag != null) {\r\n        res[flag] = !!(val & (1 << i));\r\n      }\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  size() {\r\n    return this.type.size();\r\n  }\r\n\r\n  encode(stream, keys) {\r\n    let val = 0;\r\n    for (let i = 0; i < this.flags.length; i++) {\r\n      const flag = this.flags[i];\r\n      if (flag != null) {\r\n        if (keys[flag]) { val |= (1 << i); }\r\n      }\r\n    }\r\n\r\n    return this.type.encode(stream, val);\r\n  }\r\n}\r\n\r\nmodule.exports = Bitfield;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9zcmMvQml0ZmllbGQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHVCQUF1QjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsdUJBQXVCO0FBQzNDO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvZ2FzY2F0L3ByaXNtYXF1YW50L3ByaXNtYS1xdWFudHVtL25vZGVfbW9kdWxlcy9AZm9saW9qcy1mb3JrL3Jlc3RydWN0dXJlL3NyYy9CaXRmaWVsZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBCaXRmaWVsZCB7XHJcbiAgY29uc3RydWN0b3IodHlwZSwgZmxhZ3MgPSBbXSkge1xyXG4gICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgIHRoaXMuZmxhZ3MgPSBmbGFncztcclxuICB9XHJcbiAgZGVjb2RlKHN0cmVhbSkge1xyXG4gICAgY29uc3QgdmFsID0gdGhpcy50eXBlLmRlY29kZShzdHJlYW0pO1xyXG5cclxuICAgIGNvbnN0IHJlcyA9IHt9O1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmZsYWdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGZsYWcgPSB0aGlzLmZsYWdzW2ldO1xyXG4gICAgICBpZiAoZmxhZyAhPSBudWxsKSB7XHJcbiAgICAgICAgcmVzW2ZsYWddID0gISEodmFsICYgKDEgPDwgaSkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIHNpemUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy50eXBlLnNpemUoKTtcclxuICB9XHJcblxyXG4gIGVuY29kZShzdHJlYW0sIGtleXMpIHtcclxuICAgIGxldCB2YWwgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmZsYWdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGZsYWcgPSB0aGlzLmZsYWdzW2ldO1xyXG4gICAgICBpZiAoZmxhZyAhPSBudWxsKSB7XHJcbiAgICAgICAgaWYgKGtleXNbZmxhZ10pIHsgdmFsIHw9ICgxIDw8IGkpOyB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy50eXBlLmVuY29kZShzdHJlYW0sIHZhbCk7XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEJpdGZpZWxkO1xyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/restructure/src/Bitfield.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/restructure/src/Boolean.js":
/*!***************************************************************!*\
  !*** ./node_modules/@foliojs-fork/restructure/src/Boolean.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("class BooleanT {\r\n  constructor(type) {\r\n    this.type = type;\r\n  }\r\n\r\n  decode(stream, parent) {\r\n    return !!this.type.decode(stream, parent);\r\n  }\r\n\r\n  size(val, parent) {\r\n    return this.type.size(val, parent);\r\n  }\r\n\r\n  encode(stream, val, parent) {\r\n    return this.type.encode(stream, +val, parent);\r\n  }\r\n}\r\n\r\nmodule.exports = BooleanT;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9zcmMvQm9vbGVhbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvZ2FzY2F0L3ByaXNtYXF1YW50L3ByaXNtYS1xdWFudHVtL25vZGVfbW9kdWxlcy9AZm9saW9qcy1mb3JrL3Jlc3RydWN0dXJlL3NyYy9Cb29sZWFuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEJvb2xlYW5UIHtcclxuICBjb25zdHJ1Y3Rvcih0eXBlKSB7XHJcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gIH1cclxuXHJcbiAgZGVjb2RlKHN0cmVhbSwgcGFyZW50KSB7XHJcbiAgICByZXR1cm4gISF0aGlzLnR5cGUuZGVjb2RlKHN0cmVhbSwgcGFyZW50KTtcclxuICB9XHJcblxyXG4gIHNpemUodmFsLCBwYXJlbnQpIHtcclxuICAgIHJldHVybiB0aGlzLnR5cGUuc2l6ZSh2YWwsIHBhcmVudCk7XHJcbiAgfVxyXG5cclxuICBlbmNvZGUoc3RyZWFtLCB2YWwsIHBhcmVudCkge1xyXG4gICAgcmV0dXJuIHRoaXMudHlwZS5lbmNvZGUoc3RyZWFtLCArdmFsLCBwYXJlbnQpO1xyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBCb29sZWFuVDtcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/restructure/src/Boolean.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/restructure/src/Buffer.js":
/*!**************************************************************!*\
  !*** ./node_modules/@foliojs-fork/restructure/src/Buffer.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/utils.js\");\r\nconst {Number:NumberT} = __webpack_require__(/*! ./Number */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/Number.js\");\r\n\r\nclass BufferT {\r\n  constructor(length) {\r\n    this.length = length;\r\n  }\r\n  decode(stream, parent) {\r\n    const length = utils.resolveLength(this.length, stream, parent);\r\n    return stream.readBuffer(length);\r\n  }\r\n\r\n  size(val, parent) {\r\n    if (!val) {\r\n      return utils.resolveLength(this.length, null, parent);\r\n    }\r\n\r\n    return val.length;\r\n  }\r\n\r\n  encode(stream, buf, parent) {\r\n    if (this.length instanceof NumberT) {\r\n      this.length.encode(stream, buf.length);\r\n    }\r\n\r\n    return stream.writeBuffer(buf);\r\n  }\r\n}\r\n\r\nmodule.exports = BufferT;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9zcmMvQnVmZmVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLGNBQWMsbUJBQU8sQ0FBQyw0RUFBUztBQUMvQixPQUFPLGdCQUFnQixFQUFFLG1CQUFPLENBQUMsOEVBQVU7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2dhc2NhdC9wcmlzbWFxdWFudC9wcmlzbWEtcXVhbnR1bS9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9zcmMvQnVmZmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xyXG5jb25zdCB7TnVtYmVyOk51bWJlclR9ID0gcmVxdWlyZSgnLi9OdW1iZXInKTtcclxuXHJcbmNsYXNzIEJ1ZmZlclQge1xyXG4gIGNvbnN0cnVjdG9yKGxlbmd0aCkge1xyXG4gICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XHJcbiAgfVxyXG4gIGRlY29kZShzdHJlYW0sIHBhcmVudCkge1xyXG4gICAgY29uc3QgbGVuZ3RoID0gdXRpbHMucmVzb2x2ZUxlbmd0aCh0aGlzLmxlbmd0aCwgc3RyZWFtLCBwYXJlbnQpO1xyXG4gICAgcmV0dXJuIHN0cmVhbS5yZWFkQnVmZmVyKGxlbmd0aCk7XHJcbiAgfVxyXG5cclxuICBzaXplKHZhbCwgcGFyZW50KSB7XHJcbiAgICBpZiAoIXZhbCkge1xyXG4gICAgICByZXR1cm4gdXRpbHMucmVzb2x2ZUxlbmd0aCh0aGlzLmxlbmd0aCwgbnVsbCwgcGFyZW50KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdmFsLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIGVuY29kZShzdHJlYW0sIGJ1ZiwgcGFyZW50KSB7XHJcbiAgICBpZiAodGhpcy5sZW5ndGggaW5zdGFuY2VvZiBOdW1iZXJUKSB7XHJcbiAgICAgIHRoaXMubGVuZ3RoLmVuY29kZShzdHJlYW0sIGJ1Zi5sZW5ndGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzdHJlYW0ud3JpdGVCdWZmZXIoYnVmKTtcclxuICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQnVmZmVyVDtcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/restructure/src/Buffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/restructure/src/DecodeStream.js":
/*!********************************************************************!*\
  !*** ./node_modules/@foliojs-fork/restructure/src/DecodeStream.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("let iconv;\r\ntry { iconv = __webpack_require__(/*! iconv-lite */ \"(rsc)/./node_modules/iconv-lite/lib/index.js\"); } catch (error) {}\r\n\r\nclass DecodeStream {\r\n  constructor(buffer) {\r\n    this.buffer = buffer;\r\n    this.pos = 0;\r\n    this.length = this.buffer.length;\r\n  }\r\n\r\n  readString(length, encoding = 'ascii') {\r\n    switch (encoding) {\r\n      case 'utf16le': case 'ucs2': case 'utf8': case 'ascii':\r\n        return this.buffer.toString(encoding, this.pos, (this.pos += length));\r\n\r\n      case 'utf16be':\r\n        var buf = Buffer.from(this.readBuffer(length));\r\n\r\n        // swap the bytes\r\n        for (let i = 0, end = buf.length - 1; i < end; i += 2) {\r\n          const byte = buf[i];\r\n          buf[i] = buf[i + 1];\r\n          buf[i + 1] = byte;\r\n        }\r\n\r\n        return buf.toString('utf16le');\r\n\r\n      default:\r\n        buf = this.readBuffer(length);\r\n        if (iconv) {\r\n          try {\r\n            return iconv.decode(buf, encoding);\r\n          } catch (error1) {}\r\n        }\r\n\r\n        return buf;\r\n    }\r\n  }\r\n\r\n  readBuffer(length) {\r\n    return this.buffer.slice(this.pos, (this.pos += length));\r\n  }\r\n\r\n  readUInt24BE() {\r\n    return (this.readUInt16BE() << 8) + this.readUInt8();\r\n  }\r\n\r\n  readUInt24LE() {\r\n    return this.readUInt16LE() + (this.readUInt8() << 16);\r\n  }\r\n\r\n  readInt24BE() {\r\n    return (this.readInt16BE() << 8) + this.readUInt8();\r\n  }\r\n\r\n  readInt24LE() {\r\n    return this.readUInt16LE() + (this.readInt8() << 16);\r\n  }\r\n}\r\n\r\nDecodeStream.TYPES = {\r\n  UInt8: 1,\r\n  UInt16: 2,\r\n  UInt24: 3,\r\n  UInt32: 4,\r\n  Int8: 1,\r\n  Int16: 2,\r\n  Int24: 3,\r\n  Int32: 4,\r\n  Float: 4,\r\n  Double: 8\r\n};\r\n\r\nfor (let key in Buffer.prototype) {\r\n  if (key.slice(0, 4) === 'read') {\r\n    const bytes = DecodeStream.TYPES[key.replace(/read|[BL]E/g, '')];\r\n    DecodeStream.prototype[key] = function() {\r\n      const ret = this.buffer[key](this.pos);\r\n      this.pos += bytes;\r\n      return ret;\r\n    };\r\n  }\r\n}\r\n\r\nmodule.exports = DecodeStream;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9zcmMvRGVjb2RlU3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTSxRQUFRLG1CQUFPLENBQUMsZ0VBQVksS0FBSztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLFNBQVM7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9nYXNjYXQvcHJpc21hcXVhbnQvcHJpc21hLXF1YW50dW0vbm9kZV9tb2R1bGVzL0Bmb2xpb2pzLWZvcmsvcmVzdHJ1Y3R1cmUvc3JjL0RlY29kZVN0cmVhbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgaWNvbnY7XHJcbnRyeSB7IGljb252ID0gcmVxdWlyZSgnaWNvbnYtbGl0ZScpOyB9IGNhdGNoIChlcnJvcikge31cclxuXHJcbmNsYXNzIERlY29kZVN0cmVhbSB7XHJcbiAgY29uc3RydWN0b3IoYnVmZmVyKSB7XHJcbiAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcclxuICAgIHRoaXMucG9zID0gMDtcclxuICAgIHRoaXMubGVuZ3RoID0gdGhpcy5idWZmZXIubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgcmVhZFN0cmluZyhsZW5ndGgsIGVuY29kaW5nID0gJ2FzY2lpJykge1xyXG4gICAgc3dpdGNoIChlbmNvZGluZykge1xyXG4gICAgICBjYXNlICd1dGYxNmxlJzogY2FzZSAndWNzMic6IGNhc2UgJ3V0ZjgnOiBjYXNlICdhc2NpaSc6XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLnRvU3RyaW5nKGVuY29kaW5nLCB0aGlzLnBvcywgKHRoaXMucG9zICs9IGxlbmd0aCkpO1xyXG5cclxuICAgICAgY2FzZSAndXRmMTZiZSc6XHJcbiAgICAgICAgdmFyIGJ1ZiA9IEJ1ZmZlci5mcm9tKHRoaXMucmVhZEJ1ZmZlcihsZW5ndGgpKTtcclxuXHJcbiAgICAgICAgLy8gc3dhcCB0aGUgYnl0ZXNcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgZW5kID0gYnVmLmxlbmd0aCAtIDE7IGkgPCBlbmQ7IGkgKz0gMikge1xyXG4gICAgICAgICAgY29uc3QgYnl0ZSA9IGJ1ZltpXTtcclxuICAgICAgICAgIGJ1ZltpXSA9IGJ1ZltpICsgMV07XHJcbiAgICAgICAgICBidWZbaSArIDFdID0gYnl0ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnKTtcclxuXHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgYnVmID0gdGhpcy5yZWFkQnVmZmVyKGxlbmd0aCk7XHJcbiAgICAgICAgaWYgKGljb252KSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gaWNvbnYuZGVjb2RlKGJ1ZiwgZW5jb2RpbmcpO1xyXG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IxKSB7fVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGJ1ZjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlYWRCdWZmZXIobGVuZ3RoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5idWZmZXIuc2xpY2UodGhpcy5wb3MsICh0aGlzLnBvcyArPSBsZW5ndGgpKTtcclxuICB9XHJcblxyXG4gIHJlYWRVSW50MjRCRSgpIHtcclxuICAgIHJldHVybiAodGhpcy5yZWFkVUludDE2QkUoKSA8PCA4KSArIHRoaXMucmVhZFVJbnQ4KCk7XHJcbiAgfVxyXG5cclxuICByZWFkVUludDI0TEUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5yZWFkVUludDE2TEUoKSArICh0aGlzLnJlYWRVSW50OCgpIDw8IDE2KTtcclxuICB9XHJcblxyXG4gIHJlYWRJbnQyNEJFKCkge1xyXG4gICAgcmV0dXJuICh0aGlzLnJlYWRJbnQxNkJFKCkgPDwgOCkgKyB0aGlzLnJlYWRVSW50OCgpO1xyXG4gIH1cclxuXHJcbiAgcmVhZEludDI0TEUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5yZWFkVUludDE2TEUoKSArICh0aGlzLnJlYWRJbnQ4KCkgPDwgMTYpO1xyXG4gIH1cclxufVxyXG5cclxuRGVjb2RlU3RyZWFtLlRZUEVTID0ge1xyXG4gIFVJbnQ4OiAxLFxyXG4gIFVJbnQxNjogMixcclxuICBVSW50MjQ6IDMsXHJcbiAgVUludDMyOiA0LFxyXG4gIEludDg6IDEsXHJcbiAgSW50MTY6IDIsXHJcbiAgSW50MjQ6IDMsXHJcbiAgSW50MzI6IDQsXHJcbiAgRmxvYXQ6IDQsXHJcbiAgRG91YmxlOiA4XHJcbn07XHJcblxyXG5mb3IgKGxldCBrZXkgaW4gQnVmZmVyLnByb3RvdHlwZSkge1xyXG4gIGlmIChrZXkuc2xpY2UoMCwgNCkgPT09ICdyZWFkJykge1xyXG4gICAgY29uc3QgYnl0ZXMgPSBEZWNvZGVTdHJlYW0uVFlQRVNba2V5LnJlcGxhY2UoL3JlYWR8W0JMXUUvZywgJycpXTtcclxuICAgIERlY29kZVN0cmVhbS5wcm90b3R5cGVba2V5XSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBjb25zdCByZXQgPSB0aGlzLmJ1ZmZlcltrZXldKHRoaXMucG9zKTtcclxuICAgICAgdGhpcy5wb3MgKz0gYnl0ZXM7XHJcbiAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBEZWNvZGVTdHJlYW07XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/restructure/src/DecodeStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/restructure/src/EncodeStream.js":
/*!********************************************************************!*\
  !*** ./node_modules/@foliojs-fork/restructure/src/EncodeStream.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("let iconv;\r\nconst stream = __webpack_require__(/*! stream */ \"stream\");\r\nconst DecodeStream = __webpack_require__(/*! ./DecodeStream */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/DecodeStream.js\");\r\ntry { iconv = __webpack_require__(/*! iconv-lite */ \"(rsc)/./node_modules/iconv-lite/lib/index.js\"); } catch (error) {}\r\n\r\nclass EncodeStream extends stream.Readable {\r\n  constructor(bufferSize =  65536) {\r\n    super(...arguments);\r\n    this.buffer = Buffer.alloc(bufferSize);\r\n    this.bufferOffset = 0;\r\n    this.pos = 0;\r\n  }\r\n\r\n  // do nothing, required by node\r\n  _read() {}\r\n\r\n  ensure(bytes) {\r\n    if ((this.bufferOffset + bytes) > this.buffer.length) {\r\n      return this.flush();\r\n    }\r\n  }\r\n\r\n  flush() {\r\n    if (this.bufferOffset > 0) {\r\n      this.push(Buffer.from(this.buffer.slice(0, this.bufferOffset)));\r\n      return this.bufferOffset = 0;\r\n    }\r\n  }\r\n\r\n  writeBuffer(buffer) {\r\n    this.flush();\r\n    this.push(buffer);\r\n    return this.pos += buffer.length;\r\n  }\r\n\r\n  writeString(string, encoding = 'ascii') {\r\n    switch (encoding) {\r\n      case 'utf16le': case 'ucs2': case 'utf8': case 'ascii':\r\n        return this.writeBuffer(Buffer.from(string, encoding));\r\n\r\n      case 'utf16be':\r\n        var buf = Buffer.from(string, 'utf16le');\r\n\r\n        // swap the bytes\r\n        for (let i = 0, end = buf.length - 1; i < end; i += 2) {\r\n          const byte = buf[i];\r\n          buf[i] = buf[i + 1];\r\n          buf[i + 1] = byte;\r\n        }\r\n\r\n        return this.writeBuffer(buf);\r\n\r\n      default:\r\n        if (iconv) {\r\n          return this.writeBuffer(iconv.encode(string, encoding));\r\n        } else {\r\n          throw new Error('Install iconv-lite to enable additional string encodings.');\r\n        }\r\n    }\r\n  }\r\n\r\n  writeUInt24BE(val) {\r\n    this.ensure(3);\r\n    this.buffer[this.bufferOffset++] = (val >>> 16) & 0xff;\r\n    this.buffer[this.bufferOffset++] = (val >>> 8)  & 0xff;\r\n    this.buffer[this.bufferOffset++] = val & 0xff;\r\n    return this.pos += 3;\r\n  }\r\n\r\n  writeUInt24LE(val) {\r\n    this.ensure(3);\r\n    this.buffer[this.bufferOffset++] = val & 0xff;\r\n    this.buffer[this.bufferOffset++] = (val >>> 8) & 0xff;\r\n    this.buffer[this.bufferOffset++] = (val >>> 16) & 0xff;\r\n    return this.pos += 3;\r\n  }\r\n\r\n  writeInt24BE(val) {\r\n    if (val >= 0) {\r\n      return this.writeUInt24BE(val);\r\n    } else {\r\n      return this.writeUInt24BE(val + 0xffffff + 1);\r\n    }\r\n  }\r\n\r\n  writeInt24LE(val) {\r\n    if (val >= 0) {\r\n      return this.writeUInt24LE(val);\r\n    } else {\r\n      return this.writeUInt24LE(val + 0xffffff + 1);\r\n    }\r\n  }\r\n\r\n  fill(val, length) {\r\n    if (length < this.buffer.length) {\r\n      this.ensure(length);\r\n      this.buffer.fill(val, this.bufferOffset, this.bufferOffset + length);\r\n      this.bufferOffset += length;\r\n      return this.pos += length;\r\n    } else {\r\n      const buf = Buffer.alloc(length);\r\n      buf.fill(val);\r\n      return this.writeBuffer(buf);\r\n    }\r\n  }\r\n\r\n  end() {\r\n    this.flush();\r\n    return this.push(null);\r\n  }\r\n}\r\n\r\nfor (let key in Buffer.prototype) {\r\n  if (key.slice(0, 5) === 'write') {\r\n    const bytes = +DecodeStream.TYPES[key.replace(/write|[BL]E/g, '')];\r\n    EncodeStream.prototype[key] = function(value) {\r\n      this.ensure(bytes);\r\n      this.buffer[key](value, this.bufferOffset);\r\n      this.bufferOffset += bytes;\r\n      return this.pos += bytes;\r\n    };\r\n  }\r\n}\r\n\r\nmodule.exports = EncodeStream;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9zcmMvRW5jb2RlU3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLHNCQUFRO0FBQy9CLHFCQUFxQixtQkFBTyxDQUFDLDBGQUFnQjtBQUM3QyxNQUFNLFFBQVEsbUJBQU8sQ0FBQyxnRUFBWSxLQUFLO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLFNBQVM7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9nYXNjYXQvcHJpc21hcXVhbnQvcHJpc21hLXF1YW50dW0vbm9kZV9tb2R1bGVzL0Bmb2xpb2pzLWZvcmsvcmVzdHJ1Y3R1cmUvc3JjL0VuY29kZVN0cmVhbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgaWNvbnY7XHJcbmNvbnN0IHN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xyXG5jb25zdCBEZWNvZGVTdHJlYW0gPSByZXF1aXJlKCcuL0RlY29kZVN0cmVhbScpO1xyXG50cnkgeyBpY29udiA9IHJlcXVpcmUoJ2ljb252LWxpdGUnKTsgfSBjYXRjaCAoZXJyb3IpIHt9XHJcblxyXG5jbGFzcyBFbmNvZGVTdHJlYW0gZXh0ZW5kcyBzdHJlYW0uUmVhZGFibGUge1xyXG4gIGNvbnN0cnVjdG9yKGJ1ZmZlclNpemUgPSAgNjU1MzYpIHtcclxuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICB0aGlzLmJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyhidWZmZXJTaXplKTtcclxuICAgIHRoaXMuYnVmZmVyT2Zmc2V0ID0gMDtcclxuICAgIHRoaXMucG9zID0gMDtcclxuICB9XHJcblxyXG4gIC8vIGRvIG5vdGhpbmcsIHJlcXVpcmVkIGJ5IG5vZGVcclxuICBfcmVhZCgpIHt9XHJcblxyXG4gIGVuc3VyZShieXRlcykge1xyXG4gICAgaWYgKCh0aGlzLmJ1ZmZlck9mZnNldCArIGJ5dGVzKSA+IHRoaXMuYnVmZmVyLmxlbmd0aCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5mbHVzaCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZmx1c2goKSB7XHJcbiAgICBpZiAodGhpcy5idWZmZXJPZmZzZXQgPiAwKSB7XHJcbiAgICAgIHRoaXMucHVzaChCdWZmZXIuZnJvbSh0aGlzLmJ1ZmZlci5zbGljZSgwLCB0aGlzLmJ1ZmZlck9mZnNldCkpKTtcclxuICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyT2Zmc2V0ID0gMDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHdyaXRlQnVmZmVyKGJ1ZmZlcikge1xyXG4gICAgdGhpcy5mbHVzaCgpO1xyXG4gICAgdGhpcy5wdXNoKGJ1ZmZlcik7XHJcbiAgICByZXR1cm4gdGhpcy5wb3MgKz0gYnVmZmVyLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIHdyaXRlU3RyaW5nKHN0cmluZywgZW5jb2RpbmcgPSAnYXNjaWknKSB7XHJcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XHJcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOiBjYXNlICd1Y3MyJzogY2FzZSAndXRmOCc6IGNhc2UgJ2FzY2lpJzpcclxuICAgICAgICByZXR1cm4gdGhpcy53cml0ZUJ1ZmZlcihCdWZmZXIuZnJvbShzdHJpbmcsIGVuY29kaW5nKSk7XHJcblxyXG4gICAgICBjYXNlICd1dGYxNmJlJzpcclxuICAgICAgICB2YXIgYnVmID0gQnVmZmVyLmZyb20oc3RyaW5nLCAndXRmMTZsZScpO1xyXG5cclxuICAgICAgICAvLyBzd2FwIHRoZSBieXRlc1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBlbmQgPSBidWYubGVuZ3RoIC0gMTsgaSA8IGVuZDsgaSArPSAyKSB7XHJcbiAgICAgICAgICBjb25zdCBieXRlID0gYnVmW2ldO1xyXG4gICAgICAgICAgYnVmW2ldID0gYnVmW2kgKyAxXTtcclxuICAgICAgICAgIGJ1ZltpICsgMV0gPSBieXRlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVCdWZmZXIoYnVmKTtcclxuXHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgaWYgKGljb252KSB7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy53cml0ZUJ1ZmZlcihpY29udi5lbmNvZGUoc3RyaW5nLCBlbmNvZGluZykpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luc3RhbGwgaWNvbnYtbGl0ZSB0byBlbmFibGUgYWRkaXRpb25hbCBzdHJpbmcgZW5jb2RpbmdzLicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHdyaXRlVUludDI0QkUodmFsKSB7XHJcbiAgICB0aGlzLmVuc3VyZSgzKTtcclxuICAgIHRoaXMuYnVmZmVyW3RoaXMuYnVmZmVyT2Zmc2V0KytdID0gKHZhbCA+Pj4gMTYpICYgMHhmZjtcclxuICAgIHRoaXMuYnVmZmVyW3RoaXMuYnVmZmVyT2Zmc2V0KytdID0gKHZhbCA+Pj4gOCkgICYgMHhmZjtcclxuICAgIHRoaXMuYnVmZmVyW3RoaXMuYnVmZmVyT2Zmc2V0KytdID0gdmFsICYgMHhmZjtcclxuICAgIHJldHVybiB0aGlzLnBvcyArPSAzO1xyXG4gIH1cclxuXHJcbiAgd3JpdGVVSW50MjRMRSh2YWwpIHtcclxuICAgIHRoaXMuZW5zdXJlKDMpO1xyXG4gICAgdGhpcy5idWZmZXJbdGhpcy5idWZmZXJPZmZzZXQrK10gPSB2YWwgJiAweGZmO1xyXG4gICAgdGhpcy5idWZmZXJbdGhpcy5idWZmZXJPZmZzZXQrK10gPSAodmFsID4+PiA4KSAmIDB4ZmY7XHJcbiAgICB0aGlzLmJ1ZmZlclt0aGlzLmJ1ZmZlck9mZnNldCsrXSA9ICh2YWwgPj4+IDE2KSAmIDB4ZmY7XHJcbiAgICByZXR1cm4gdGhpcy5wb3MgKz0gMztcclxuICB9XHJcblxyXG4gIHdyaXRlSW50MjRCRSh2YWwpIHtcclxuICAgIGlmICh2YWwgPj0gMCkge1xyXG4gICAgICByZXR1cm4gdGhpcy53cml0ZVVJbnQyNEJFKHZhbCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy53cml0ZVVJbnQyNEJFKHZhbCArIDB4ZmZmZmZmICsgMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB3cml0ZUludDI0TEUodmFsKSB7XHJcbiAgICBpZiAodmFsID49IDApIHtcclxuICAgICAgcmV0dXJuIHRoaXMud3JpdGVVSW50MjRMRSh2YWwpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMud3JpdGVVSW50MjRMRSh2YWwgKyAweGZmZmZmZiArIDEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZmlsbCh2YWwsIGxlbmd0aCkge1xyXG4gICAgaWYgKGxlbmd0aCA8IHRoaXMuYnVmZmVyLmxlbmd0aCkge1xyXG4gICAgICB0aGlzLmVuc3VyZShsZW5ndGgpO1xyXG4gICAgICB0aGlzLmJ1ZmZlci5maWxsKHZhbCwgdGhpcy5idWZmZXJPZmZzZXQsIHRoaXMuYnVmZmVyT2Zmc2V0ICsgbGVuZ3RoKTtcclxuICAgICAgdGhpcy5idWZmZXJPZmZzZXQgKz0gbGVuZ3RoO1xyXG4gICAgICByZXR1cm4gdGhpcy5wb3MgKz0gbGVuZ3RoO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgYnVmID0gQnVmZmVyLmFsbG9jKGxlbmd0aCk7XHJcbiAgICAgIGJ1Zi5maWxsKHZhbCk7XHJcbiAgICAgIHJldHVybiB0aGlzLndyaXRlQnVmZmVyKGJ1Zik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBlbmQoKSB7XHJcbiAgICB0aGlzLmZsdXNoKCk7XHJcbiAgICByZXR1cm4gdGhpcy5wdXNoKG51bGwpO1xyXG4gIH1cclxufVxyXG5cclxuZm9yIChsZXQga2V5IGluIEJ1ZmZlci5wcm90b3R5cGUpIHtcclxuICBpZiAoa2V5LnNsaWNlKDAsIDUpID09PSAnd3JpdGUnKSB7XHJcbiAgICBjb25zdCBieXRlcyA9ICtEZWNvZGVTdHJlYW0uVFlQRVNba2V5LnJlcGxhY2UoL3dyaXRlfFtCTF1FL2csICcnKV07XHJcbiAgICBFbmNvZGVTdHJlYW0ucHJvdG90eXBlW2tleV0gPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICB0aGlzLmVuc3VyZShieXRlcyk7XHJcbiAgICAgIHRoaXMuYnVmZmVyW2tleV0odmFsdWUsIHRoaXMuYnVmZmVyT2Zmc2V0KTtcclxuICAgICAgdGhpcy5idWZmZXJPZmZzZXQgKz0gYnl0ZXM7XHJcbiAgICAgIHJldHVybiB0aGlzLnBvcyArPSBieXRlcztcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEVuY29kZVN0cmVhbTtcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/restructure/src/EncodeStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/restructure/src/Enum.js":
/*!************************************************************!*\
  !*** ./node_modules/@foliojs-fork/restructure/src/Enum.js ***!
  \************************************************************/
/***/ ((module) => {

eval("class Enum {\r\n  constructor(type, options = []) {\r\n    this.type = type;\r\n    this.options = options;\r\n  }\r\n  decode(stream) {\r\n    const index = this.type.decode(stream);\r\n    return this.options[index] || index;\r\n  }\r\n\r\n  size() {\r\n    return this.type.size();\r\n  }\r\n\r\n  encode(stream, val) {\r\n    const index = this.options.indexOf(val);\r\n    if (index === -1) {\r\n      throw new Error(`Unknown option in enum: ${val}`);\r\n    }\r\n\r\n    return this.type.encode(stream, index);\r\n  }\r\n}\r\n\r\nmodule.exports = Enum;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9zcmMvRW51bS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELElBQUk7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2dhc2NhdC9wcmlzbWFxdWFudC9wcmlzbWEtcXVhbnR1bS9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9zcmMvRW51bS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBFbnVtIHtcclxuICBjb25zdHJ1Y3Rvcih0eXBlLCBvcHRpb25zID0gW10pIHtcclxuICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gIH1cclxuICBkZWNvZGUoc3RyZWFtKSB7XHJcbiAgICBjb25zdCBpbmRleCA9IHRoaXMudHlwZS5kZWNvZGUoc3RyZWFtKTtcclxuICAgIHJldHVybiB0aGlzLm9wdGlvbnNbaW5kZXhdIHx8IGluZGV4O1xyXG4gIH1cclxuXHJcbiAgc2l6ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLnR5cGUuc2l6ZSgpO1xyXG4gIH1cclxuXHJcbiAgZW5jb2RlKHN0cmVhbSwgdmFsKSB7XHJcbiAgICBjb25zdCBpbmRleCA9IHRoaXMub3B0aW9ucy5pbmRleE9mKHZhbCk7XHJcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBvcHRpb24gaW4gZW51bTogJHt2YWx9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMudHlwZS5lbmNvZGUoc3RyZWFtLCBpbmRleCk7XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEVudW07XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/restructure/src/Enum.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/restructure/src/LazyArray.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@foliojs-fork/restructure/src/LazyArray.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const ArrayT = __webpack_require__(/*! ./Array */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/Array.js\");\r\nconst {Number:NumberT} = __webpack_require__(/*! ./Number */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/Number.js\");\r\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/utils.js\");\r\nconst {inspect} = __webpack_require__(/*! util */ \"util\");\r\n\r\nclass LazyArrayT extends ArrayT {\r\n  decode(stream, parent) {\r\n    const { pos } = stream;\r\n    const length = utils.resolveLength(this.length, stream, parent);\r\n\r\n    if (this.length instanceof NumberT) {\r\n      parent = {\r\n        parent,\r\n        _startOffset: pos,\r\n        _currentOffset: 0,\r\n        _length: length\r\n      };\r\n    }\r\n\r\n    const res = new LazyArray(this.type, length, stream, parent);\r\n\r\n    stream.pos += length * this.type.size(null, parent);\r\n    return res;\r\n  }\r\n\r\n  size(val, ctx) {\r\n    if (val instanceof LazyArray) {\r\n      val = val.toArray();\r\n    }\r\n\r\n    return super.size(val, ctx);\r\n  }\r\n\r\n  encode(stream, val, ctx) {\r\n    if (val instanceof LazyArray) {\r\n      val = val.toArray();\r\n    }\r\n\r\n    return super.encode(stream, val, ctx);\r\n  }\r\n}\r\n\r\nclass LazyArray {\r\n  constructor(type, length, stream, ctx) {\r\n    this.type = type;\r\n    this.length = length;\r\n    this.stream = stream;\r\n    this.ctx = ctx;\r\n    this.base = this.stream.pos;\r\n    this.items = [];\r\n  }\r\n\r\n  get(index) {\r\n    if ((index < 0) || (index >= this.length)) {\r\n      return undefined;\r\n    }\r\n\r\n    if (this.items[index] == null) {\r\n      const { pos } = this.stream;\r\n      this.stream.pos = this.base + (this.type.size(null, this.ctx) * index);\r\n      this.items[index] = this.type.decode(this.stream, this.ctx);\r\n      this.stream.pos = pos;\r\n    }\r\n\r\n    return this.items[index];\r\n  }\r\n\r\n  toArray() {\r\n    const result = [];\r\n    for (let i = 0, end = this.length; i < end; i++) {\r\n      result.push(this.get(i));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  inspect() {\r\n    return inspect(this.toArray());\r\n  }\r\n}\r\n\r\nmodule.exports = LazyArrayT;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9zcmMvTGF6eUFycmF5LmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyw0RUFBUztBQUNoQyxPQUFPLGdCQUFnQixFQUFFLG1CQUFPLENBQUMsOEVBQVU7QUFDM0MsY0FBYyxtQkFBTyxDQUFDLDRFQUFTO0FBQy9CLE9BQU8sU0FBUyxFQUFFLG1CQUFPLENBQUMsa0JBQU07QUFDaEM7QUFDQTtBQUNBO0FBQ0EsWUFBWSxNQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE1BQU07QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsU0FBUztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9nYXNjYXQvcHJpc21hcXVhbnQvcHJpc21hLXF1YW50dW0vbm9kZV9tb2R1bGVzL0Bmb2xpb2pzLWZvcmsvcmVzdHJ1Y3R1cmUvc3JjL0xhenlBcnJheS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBcnJheVQgPSByZXF1aXJlKCcuL0FycmF5Jyk7XHJcbmNvbnN0IHtOdW1iZXI6TnVtYmVyVH0gPSByZXF1aXJlKCcuL051bWJlcicpO1xyXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcclxuY29uc3Qge2luc3BlY3R9ID0gcmVxdWlyZSgndXRpbCcpO1xyXG5cclxuY2xhc3MgTGF6eUFycmF5VCBleHRlbmRzIEFycmF5VCB7XHJcbiAgZGVjb2RlKHN0cmVhbSwgcGFyZW50KSB7XHJcbiAgICBjb25zdCB7IHBvcyB9ID0gc3RyZWFtO1xyXG4gICAgY29uc3QgbGVuZ3RoID0gdXRpbHMucmVzb2x2ZUxlbmd0aCh0aGlzLmxlbmd0aCwgc3RyZWFtLCBwYXJlbnQpO1xyXG5cclxuICAgIGlmICh0aGlzLmxlbmd0aCBpbnN0YW5jZW9mIE51bWJlclQpIHtcclxuICAgICAgcGFyZW50ID0ge1xyXG4gICAgICAgIHBhcmVudCxcclxuICAgICAgICBfc3RhcnRPZmZzZXQ6IHBvcyxcclxuICAgICAgICBfY3VycmVudE9mZnNldDogMCxcclxuICAgICAgICBfbGVuZ3RoOiBsZW5ndGhcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByZXMgPSBuZXcgTGF6eUFycmF5KHRoaXMudHlwZSwgbGVuZ3RoLCBzdHJlYW0sIHBhcmVudCk7XHJcblxyXG4gICAgc3RyZWFtLnBvcyArPSBsZW5ndGggKiB0aGlzLnR5cGUuc2l6ZShudWxsLCBwYXJlbnQpO1xyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIHNpemUodmFsLCBjdHgpIHtcclxuICAgIGlmICh2YWwgaW5zdGFuY2VvZiBMYXp5QXJyYXkpIHtcclxuICAgICAgdmFsID0gdmFsLnRvQXJyYXkoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3VwZXIuc2l6ZSh2YWwsIGN0eCk7XHJcbiAgfVxyXG5cclxuICBlbmNvZGUoc3RyZWFtLCB2YWwsIGN0eCkge1xyXG4gICAgaWYgKHZhbCBpbnN0YW5jZW9mIExhenlBcnJheSkge1xyXG4gICAgICB2YWwgPSB2YWwudG9BcnJheSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzdXBlci5lbmNvZGUoc3RyZWFtLCB2YWwsIGN0eCk7XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBMYXp5QXJyYXkge1xyXG4gIGNvbnN0cnVjdG9yKHR5cGUsIGxlbmd0aCwgc3RyZWFtLCBjdHgpIHtcclxuICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcclxuICAgIHRoaXMuc3RyZWFtID0gc3RyZWFtO1xyXG4gICAgdGhpcy5jdHggPSBjdHg7XHJcbiAgICB0aGlzLmJhc2UgPSB0aGlzLnN0cmVhbS5wb3M7XHJcbiAgICB0aGlzLml0ZW1zID0gW107XHJcbiAgfVxyXG5cclxuICBnZXQoaW5kZXgpIHtcclxuICAgIGlmICgoaW5kZXggPCAwKSB8fCAoaW5kZXggPj0gdGhpcy5sZW5ndGgpKSB7XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuaXRlbXNbaW5kZXhdID09IG51bGwpIHtcclxuICAgICAgY29uc3QgeyBwb3MgfSA9IHRoaXMuc3RyZWFtO1xyXG4gICAgICB0aGlzLnN0cmVhbS5wb3MgPSB0aGlzLmJhc2UgKyAodGhpcy50eXBlLnNpemUobnVsbCwgdGhpcy5jdHgpICogaW5kZXgpO1xyXG4gICAgICB0aGlzLml0ZW1zW2luZGV4XSA9IHRoaXMudHlwZS5kZWNvZGUodGhpcy5zdHJlYW0sIHRoaXMuY3R4KTtcclxuICAgICAgdGhpcy5zdHJlYW0ucG9zID0gcG9zO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLml0ZW1zW2luZGV4XTtcclxuICB9XHJcblxyXG4gIHRvQXJyYXkoKSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aDsgaSA8IGVuZDsgaSsrKSB7XHJcbiAgICAgIHJlc3VsdC5wdXNoKHRoaXMuZ2V0KGkpKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBpbnNwZWN0KCkge1xyXG4gICAgcmV0dXJuIGluc3BlY3QodGhpcy50b0FycmF5KCkpO1xyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBMYXp5QXJyYXlUO1xyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/restructure/src/LazyArray.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/restructure/src/Number.js":
/*!**************************************************************!*\
  !*** ./node_modules/@foliojs-fork/restructure/src/Number.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const DecodeStream = __webpack_require__(/*! ./DecodeStream */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/DecodeStream.js\");\r\n\r\nclass NumberT {\r\n  constructor(type, endian = 'BE') {\r\n    this.type = type;\r\n    this.endian = endian;\r\n    this.fn = this.type;\r\n    if (this.type[this.type.length - 1] !== '8') {\r\n      this.fn += this.endian;\r\n    }\r\n  }\r\n\r\n  size() {\r\n    return DecodeStream.TYPES[this.type];\r\n  }\r\n\r\n  decode(stream) {\r\n    return stream[`read${this.fn}`]();\r\n  }\r\n\r\n  encode(stream, val) {\r\n    return stream[`write${this.fn}`](val);\r\n  }\r\n}\r\n\r\nexports.Number = NumberT;\r\nexports.uint8 = new NumberT('UInt8');\r\nexports.uint16be = (exports.uint16 = new NumberT('UInt16', 'BE'));\r\nexports.uint16le = new NumberT('UInt16', 'LE');\r\nexports.uint24be = (exports.uint24 = new NumberT('UInt24', 'BE'));\r\nexports.uint24le = new NumberT('UInt24', 'LE');\r\nexports.uint32be = (exports.uint32 = new NumberT('UInt32', 'BE'));\r\nexports.uint32le = new NumberT('UInt32', 'LE');\r\nexports.int8 = new NumberT('Int8');\r\nexports.int16be = (exports.int16 = new NumberT('Int16', 'BE'));\r\nexports.int16le = new NumberT('Int16', 'LE');\r\nexports.int24be = (exports.int24 = new NumberT('Int24', 'BE'));\r\nexports.int24le = new NumberT('Int24', 'LE');\r\nexports.int32be = (exports.int32 = new NumberT('Int32', 'BE'));\r\nexports.int32le = new NumberT('Int32', 'LE');\r\nexports.floatbe = (exports.float = new NumberT('Float', 'BE'));\r\nexports.floatle = new NumberT('Float', 'LE');\r\nexports.doublebe = (exports.double = new NumberT('Double', 'BE'));\r\nexports.doublele = new NumberT('Double', 'LE');\r\n\r\nclass Fixed extends NumberT {\r\n  constructor(size, endian, fracBits = size >> 1) {\r\n    super(`Int${size}`, endian);\r\n    this._point = 1 << fracBits;\r\n  }\r\n\r\n  decode(stream) {\r\n    return super.decode(stream) / this._point;\r\n  }\r\n\r\n  encode(stream, val) {\r\n    return super.encode(stream, (val * this._point) | 0);\r\n  }\r\n}\r\n\r\nexports.Fixed = Fixed;\r\nexports.fixed16be = (exports.fixed16 = new Fixed(16, 'BE'));\r\nexports.fixed16le = new Fixed(16, 'LE');\r\nexports.fixed32be = (exports.fixed32 =new Fixed(32, 'BE'));\r\nexports.fixed32le = new Fixed(32, 'LE');\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9zcmMvTnVtYmVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQixtQkFBTyxDQUFDLDBGQUFnQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixRQUFRO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixRQUFRO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCxhQUFhO0FBQ2IsZ0JBQWdCLElBQUksY0FBYztBQUNsQyxnQkFBZ0I7QUFDaEIsZ0JBQWdCLElBQUksY0FBYztBQUNsQyxnQkFBZ0I7QUFDaEIsZ0JBQWdCLElBQUksY0FBYztBQUNsQyxnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLGVBQWUsSUFBSSxhQUFhO0FBQ2hDLGVBQWU7QUFDZixlQUFlLElBQUksYUFBYTtBQUNoQyxlQUFlO0FBQ2YsZUFBZSxJQUFJLGFBQWE7QUFDaEMsZUFBZTtBQUNmLGVBQWUsSUFBSSxhQUFhO0FBQ2hDLGVBQWU7QUFDZixnQkFBZ0IsSUFBSSxjQUFjO0FBQ2xDLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsS0FBSztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsaUJBQWlCLElBQUksZUFBZTtBQUNwQyxpQkFBaUI7QUFDakIsaUJBQWlCLElBQUksZUFBZTtBQUNwQyxpQkFBaUIiLCJzb3VyY2VzIjpbIi9ob21lL2dhc2NhdC9wcmlzbWFxdWFudC9wcmlzbWEtcXVhbnR1bS9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9zcmMvTnVtYmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IERlY29kZVN0cmVhbSA9IHJlcXVpcmUoJy4vRGVjb2RlU3RyZWFtJyk7XHJcblxyXG5jbGFzcyBOdW1iZXJUIHtcclxuICBjb25zdHJ1Y3Rvcih0eXBlLCBlbmRpYW4gPSAnQkUnKSB7XHJcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgdGhpcy5lbmRpYW4gPSBlbmRpYW47XHJcbiAgICB0aGlzLmZuID0gdGhpcy50eXBlO1xyXG4gICAgaWYgKHRoaXMudHlwZVt0aGlzLnR5cGUubGVuZ3RoIC0gMV0gIT09ICc4Jykge1xyXG4gICAgICB0aGlzLmZuICs9IHRoaXMuZW5kaWFuO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2l6ZSgpIHtcclxuICAgIHJldHVybiBEZWNvZGVTdHJlYW0uVFlQRVNbdGhpcy50eXBlXTtcclxuICB9XHJcblxyXG4gIGRlY29kZShzdHJlYW0pIHtcclxuICAgIHJldHVybiBzdHJlYW1bYHJlYWQke3RoaXMuZm59YF0oKTtcclxuICB9XHJcblxyXG4gIGVuY29kZShzdHJlYW0sIHZhbCkge1xyXG4gICAgcmV0dXJuIHN0cmVhbVtgd3JpdGUke3RoaXMuZm59YF0odmFsKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydHMuTnVtYmVyID0gTnVtYmVyVDtcclxuZXhwb3J0cy51aW50OCA9IG5ldyBOdW1iZXJUKCdVSW50OCcpO1xyXG5leHBvcnRzLnVpbnQxNmJlID0gKGV4cG9ydHMudWludDE2ID0gbmV3IE51bWJlclQoJ1VJbnQxNicsICdCRScpKTtcclxuZXhwb3J0cy51aW50MTZsZSA9IG5ldyBOdW1iZXJUKCdVSW50MTYnLCAnTEUnKTtcclxuZXhwb3J0cy51aW50MjRiZSA9IChleHBvcnRzLnVpbnQyNCA9IG5ldyBOdW1iZXJUKCdVSW50MjQnLCAnQkUnKSk7XHJcbmV4cG9ydHMudWludDI0bGUgPSBuZXcgTnVtYmVyVCgnVUludDI0JywgJ0xFJyk7XHJcbmV4cG9ydHMudWludDMyYmUgPSAoZXhwb3J0cy51aW50MzIgPSBuZXcgTnVtYmVyVCgnVUludDMyJywgJ0JFJykpO1xyXG5leHBvcnRzLnVpbnQzMmxlID0gbmV3IE51bWJlclQoJ1VJbnQzMicsICdMRScpO1xyXG5leHBvcnRzLmludDggPSBuZXcgTnVtYmVyVCgnSW50OCcpO1xyXG5leHBvcnRzLmludDE2YmUgPSAoZXhwb3J0cy5pbnQxNiA9IG5ldyBOdW1iZXJUKCdJbnQxNicsICdCRScpKTtcclxuZXhwb3J0cy5pbnQxNmxlID0gbmV3IE51bWJlclQoJ0ludDE2JywgJ0xFJyk7XHJcbmV4cG9ydHMuaW50MjRiZSA9IChleHBvcnRzLmludDI0ID0gbmV3IE51bWJlclQoJ0ludDI0JywgJ0JFJykpO1xyXG5leHBvcnRzLmludDI0bGUgPSBuZXcgTnVtYmVyVCgnSW50MjQnLCAnTEUnKTtcclxuZXhwb3J0cy5pbnQzMmJlID0gKGV4cG9ydHMuaW50MzIgPSBuZXcgTnVtYmVyVCgnSW50MzInLCAnQkUnKSk7XHJcbmV4cG9ydHMuaW50MzJsZSA9IG5ldyBOdW1iZXJUKCdJbnQzMicsICdMRScpO1xyXG5leHBvcnRzLmZsb2F0YmUgPSAoZXhwb3J0cy5mbG9hdCA9IG5ldyBOdW1iZXJUKCdGbG9hdCcsICdCRScpKTtcclxuZXhwb3J0cy5mbG9hdGxlID0gbmV3IE51bWJlclQoJ0Zsb2F0JywgJ0xFJyk7XHJcbmV4cG9ydHMuZG91YmxlYmUgPSAoZXhwb3J0cy5kb3VibGUgPSBuZXcgTnVtYmVyVCgnRG91YmxlJywgJ0JFJykpO1xyXG5leHBvcnRzLmRvdWJsZWxlID0gbmV3IE51bWJlclQoJ0RvdWJsZScsICdMRScpO1xyXG5cclxuY2xhc3MgRml4ZWQgZXh0ZW5kcyBOdW1iZXJUIHtcclxuICBjb25zdHJ1Y3RvcihzaXplLCBlbmRpYW4sIGZyYWNCaXRzID0gc2l6ZSA+PiAxKSB7XHJcbiAgICBzdXBlcihgSW50JHtzaXplfWAsIGVuZGlhbik7XHJcbiAgICB0aGlzLl9wb2ludCA9IDEgPDwgZnJhY0JpdHM7XHJcbiAgfVxyXG5cclxuICBkZWNvZGUoc3RyZWFtKSB7XHJcbiAgICByZXR1cm4gc3VwZXIuZGVjb2RlKHN0cmVhbSkgLyB0aGlzLl9wb2ludDtcclxuICB9XHJcblxyXG4gIGVuY29kZShzdHJlYW0sIHZhbCkge1xyXG4gICAgcmV0dXJuIHN1cGVyLmVuY29kZShzdHJlYW0sICh2YWwgKiB0aGlzLl9wb2ludCkgfCAwKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydHMuRml4ZWQgPSBGaXhlZDtcclxuZXhwb3J0cy5maXhlZDE2YmUgPSAoZXhwb3J0cy5maXhlZDE2ID0gbmV3IEZpeGVkKDE2LCAnQkUnKSk7XHJcbmV4cG9ydHMuZml4ZWQxNmxlID0gbmV3IEZpeGVkKDE2LCAnTEUnKTtcclxuZXhwb3J0cy5maXhlZDMyYmUgPSAoZXhwb3J0cy5maXhlZDMyID1uZXcgRml4ZWQoMzIsICdCRScpKTtcclxuZXhwb3J0cy5maXhlZDMybGUgPSBuZXcgRml4ZWQoMzIsICdMRScpO1xyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/restructure/src/Number.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/restructure/src/Optional.js":
/*!****************************************************************!*\
  !*** ./node_modules/@foliojs-fork/restructure/src/Optional.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("class Optional {\r\n  constructor(type, condition = true) {\r\n    this.type = type;\r\n    this.condition = condition;\r\n  }\r\n\r\n  decode(stream, parent) {\r\n    let { condition } = this;\r\n    if (typeof condition === 'function') {\r\n      condition = condition.call(parent, parent);\r\n    }\r\n\r\n    if (condition) {\r\n      return this.type.decode(stream, parent);\r\n    }\r\n  }\r\n\r\n  size(val, parent) {\r\n    let { condition } = this;\r\n    if (typeof condition === 'function') {\r\n      condition = condition.call(parent, parent);\r\n    }\r\n\r\n    if (condition) {\r\n      return this.type.size(val, parent);\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  encode(stream, val, parent) {\r\n    let { condition } = this;\r\n    if (typeof condition === 'function') {\r\n      condition = condition.call(parent, parent);\r\n    }\r\n\r\n    if (condition) {\r\n      return this.type.encode(stream, val, parent);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Optional;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9zcmMvT3B0aW9uYWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvZ2FzY2F0L3ByaXNtYXF1YW50L3ByaXNtYS1xdWFudHVtL25vZGVfbW9kdWxlcy9AZm9saW9qcy1mb3JrL3Jlc3RydWN0dXJlL3NyYy9PcHRpb25hbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBPcHRpb25hbCB7XHJcbiAgY29uc3RydWN0b3IodHlwZSwgY29uZGl0aW9uID0gdHJ1ZSkge1xyXG4gICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uO1xyXG4gIH1cclxuXHJcbiAgZGVjb2RlKHN0cmVhbSwgcGFyZW50KSB7XHJcbiAgICBsZXQgeyBjb25kaXRpb24gfSA9IHRoaXM7XHJcbiAgICBpZiAodHlwZW9mIGNvbmRpdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBjb25kaXRpb24gPSBjb25kaXRpb24uY2FsbChwYXJlbnQsIHBhcmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbmRpdGlvbikge1xyXG4gICAgICByZXR1cm4gdGhpcy50eXBlLmRlY29kZShzdHJlYW0sIHBhcmVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzaXplKHZhbCwgcGFyZW50KSB7XHJcbiAgICBsZXQgeyBjb25kaXRpb24gfSA9IHRoaXM7XHJcbiAgICBpZiAodHlwZW9mIGNvbmRpdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBjb25kaXRpb24gPSBjb25kaXRpb24uY2FsbChwYXJlbnQsIHBhcmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbmRpdGlvbikge1xyXG4gICAgICByZXR1cm4gdGhpcy50eXBlLnNpemUodmFsLCBwYXJlbnQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBlbmNvZGUoc3RyZWFtLCB2YWwsIHBhcmVudCkge1xyXG4gICAgbGV0IHsgY29uZGl0aW9uIH0gPSB0aGlzO1xyXG4gICAgaWYgKHR5cGVvZiBjb25kaXRpb24gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgY29uZGl0aW9uID0gY29uZGl0aW9uLmNhbGwocGFyZW50LCBwYXJlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb25kaXRpb24pIHtcclxuICAgICAgcmV0dXJuIHRoaXMudHlwZS5lbmNvZGUoc3RyZWFtLCB2YWwsIHBhcmVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE9wdGlvbmFsO1xyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/restructure/src/Optional.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/restructure/src/Pointer.js":
/*!***************************************************************!*\
  !*** ./node_modules/@foliojs-fork/restructure/src/Pointer.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/utils.js\");\r\n\r\nclass Pointer {\r\n  constructor(offsetType, type, options = {}) {\r\n    this.offsetType = offsetType;\r\n    this.type = type;\r\n    this.options = options;\r\n    if (this.type === 'void') { this.type = null; }\r\n    if (this.options.type == null) { this.options.type = 'local'; }\r\n    if (this.options.allowNull == null) { this.options.allowNull = true; }\r\n    if (this.options.nullValue == null) { this.options.nullValue = 0; }\r\n    if (this.options.lazy == null) { this.options.lazy = false; }\r\n    if (this.options.relativeTo) {\r\n      if (typeof this.options.relativeTo !== 'function') {\r\n        throw new Error('relativeTo option must be a function');\r\n      }\r\n      this.relativeToGetter = options.relativeTo;\r\n    }\r\n  }\r\n\r\n  decode(stream, ctx) {\r\n    const offset = this.offsetType.decode(stream, ctx);\r\n\r\n    // handle NULL pointers\r\n    if ((offset === this.options.nullValue) && this.options.allowNull) {\r\n      return null;\r\n    }\r\n\r\n    let relative;\r\n    switch (this.options.type) {\r\n      case 'local':     relative = ctx._startOffset; break;\r\n      case 'immediate': relative = stream.pos - this.offsetType.size(); break;\r\n      case 'parent':    relative = ctx.parent._startOffset; break;\r\n      default:\r\n        var c = ctx;\r\n        while (c.parent) {\r\n          c = c.parent;\r\n        }\r\n\r\n        relative = c._startOffset || 0;\r\n    }\r\n\r\n    if (this.options.relativeTo) {\r\n      relative += this.relativeToGetter(ctx);\r\n    }\r\n\r\n    const ptr = offset + relative;\r\n\r\n    if (this.type != null) {\r\n      let val = null;\r\n      const decodeValue = () => {\r\n        if (val != null) { return val; }\r\n\r\n        const { pos } = stream;\r\n        stream.pos = ptr;\r\n        val = this.type.decode(stream, ctx);\r\n        stream.pos = pos;\r\n        return val;\r\n      };\r\n\r\n      // If this is a lazy pointer, define a getter to decode only when needed.\r\n      // This obviously only works when the pointer is contained by a Struct.\r\n      if (this.options.lazy) {\r\n        return new utils.PropertyDescriptor({\r\n          get: decodeValue});\r\n      }\r\n\r\n      return decodeValue();\r\n    } else {\r\n      return ptr;\r\n    }\r\n  }\r\n\r\n  size(val, ctx) {\r\n    const parent = ctx;\r\n    switch (this.options.type) {\r\n      case 'local': case 'immediate':\r\n        break;\r\n      case 'parent':\r\n        ctx = ctx.parent;\r\n        break;\r\n      default: // global\r\n        while (ctx.parent) {\r\n          ctx = ctx.parent;\r\n        }\r\n    }\r\n\r\n    let { type } = this;\r\n    if (type == null) {\r\n      if (!(val instanceof VoidPointer)) {\r\n        throw new Error(\"Must be a VoidPointer\");\r\n      }\r\n\r\n      ({ type } = val);\r\n      val = val.value;\r\n    }\r\n\r\n    if (val && ctx) {\r\n      ctx.pointerSize += type.size(val, parent);\r\n    }\r\n\r\n    return this.offsetType.size();\r\n  }\r\n\r\n  encode(stream, val, ctx) {\r\n    let relative;\r\n    const parent = ctx;\r\n    if ((val == null)) {\r\n      this.offsetType.encode(stream, this.options.nullValue);\r\n      return;\r\n    }\r\n\r\n    switch (this.options.type) {\r\n      case 'local':\r\n        relative = ctx.startOffset;\r\n        break;\r\n      case 'immediate':\r\n        relative = stream.pos + this.offsetType.size(val, parent);\r\n        break;\r\n      case 'parent':\r\n        ctx = ctx.parent;\r\n        relative = ctx.startOffset;\r\n        break;\r\n      default: // global\r\n        relative = 0;\r\n        while (ctx.parent) {\r\n          ctx = ctx.parent;\r\n        }\r\n    }\r\n\r\n    if (this.options.relativeTo) {\r\n      relative += this.relativeToGetter(parent.val);\r\n    }\r\n\r\n    this.offsetType.encode(stream, ctx.pointerOffset - relative);\r\n\r\n    let { type } = this;\r\n    if (type == null) {\r\n      if (!(val instanceof VoidPointer)) {\r\n        throw new Error(\"Must be a VoidPointer\");\r\n      }\r\n\r\n      ({ type } = val);\r\n      val = val.value;\r\n    }\r\n\r\n    ctx.pointers.push({\r\n      type,\r\n      val,\r\n      parent\r\n    });\r\n\r\n    return ctx.pointerOffset += type.size(val, parent);\r\n  }\r\n}\r\n\r\n// A pointer whose type is determined at decode time\r\nclass VoidPointer {\r\n  constructor(type, value) {\r\n    this.type = type;\r\n    this.value = value;\r\n  }\r\n}\r\n\r\nexports.Pointer = Pointer;\r\nexports.VoidPointer = VoidPointer;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9zcmMvUG9pbnRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxjQUFjLG1CQUFPLENBQUMsNEVBQVM7QUFDL0I7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMscUNBQXFDO0FBQ3JDLDBDQUEwQztBQUMxQywwQ0FBMEM7QUFDMUMscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRCx3RUFBd0U7QUFDeEUsNERBQTREO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBLGdCQUFnQixNQUFNO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLE9BQU87QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsT0FBTztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLE9BQU87QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsT0FBTztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixtQkFBbUIiLCJzb3VyY2VzIjpbIi9ob21lL2dhc2NhdC9wcmlzbWFxdWFudC9wcmlzbWEtcXVhbnR1bS9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9zcmMvUG9pbnRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcclxuXHJcbmNsYXNzIFBvaW50ZXIge1xyXG4gIGNvbnN0cnVjdG9yKG9mZnNldFR5cGUsIHR5cGUsIG9wdGlvbnMgPSB7fSkge1xyXG4gICAgdGhpcy5vZmZzZXRUeXBlID0gb2Zmc2V0VHlwZTtcclxuICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgaWYgKHRoaXMudHlwZSA9PT0gJ3ZvaWQnKSB7IHRoaXMudHlwZSA9IG51bGw7IH1cclxuICAgIGlmICh0aGlzLm9wdGlvbnMudHlwZSA9PSBudWxsKSB7IHRoaXMub3B0aW9ucy50eXBlID0gJ2xvY2FsJzsgfVxyXG4gICAgaWYgKHRoaXMub3B0aW9ucy5hbGxvd051bGwgPT0gbnVsbCkgeyB0aGlzLm9wdGlvbnMuYWxsb3dOdWxsID0gdHJ1ZTsgfVxyXG4gICAgaWYgKHRoaXMub3B0aW9ucy5udWxsVmFsdWUgPT0gbnVsbCkgeyB0aGlzLm9wdGlvbnMubnVsbFZhbHVlID0gMDsgfVxyXG4gICAgaWYgKHRoaXMub3B0aW9ucy5sYXp5ID09IG51bGwpIHsgdGhpcy5vcHRpb25zLmxhenkgPSBmYWxzZTsgfVxyXG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZWxhdGl2ZVRvKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLnJlbGF0aXZlVG8gIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlbGF0aXZlVG8gb3B0aW9uIG11c3QgYmUgYSBmdW5jdGlvbicpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMucmVsYXRpdmVUb0dldHRlciA9IG9wdGlvbnMucmVsYXRpdmVUbztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRlY29kZShzdHJlYW0sIGN0eCkge1xyXG4gICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5vZmZzZXRUeXBlLmRlY29kZShzdHJlYW0sIGN0eCk7XHJcblxyXG4gICAgLy8gaGFuZGxlIE5VTEwgcG9pbnRlcnNcclxuICAgIGlmICgob2Zmc2V0ID09PSB0aGlzLm9wdGlvbnMubnVsbFZhbHVlKSAmJiB0aGlzLm9wdGlvbnMuYWxsb3dOdWxsKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCByZWxhdGl2ZTtcclxuICAgIHN3aXRjaCAodGhpcy5vcHRpb25zLnR5cGUpIHtcclxuICAgICAgY2FzZSAnbG9jYWwnOiAgICAgcmVsYXRpdmUgPSBjdHguX3N0YXJ0T2Zmc2V0OyBicmVhaztcclxuICAgICAgY2FzZSAnaW1tZWRpYXRlJzogcmVsYXRpdmUgPSBzdHJlYW0ucG9zIC0gdGhpcy5vZmZzZXRUeXBlLnNpemUoKTsgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3BhcmVudCc6ICAgIHJlbGF0aXZlID0gY3R4LnBhcmVudC5fc3RhcnRPZmZzZXQ7IGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHZhciBjID0gY3R4O1xyXG4gICAgICAgIHdoaWxlIChjLnBhcmVudCkge1xyXG4gICAgICAgICAgYyA9IGMucGFyZW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVsYXRpdmUgPSBjLl9zdGFydE9mZnNldCB8fCAwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLm9wdGlvbnMucmVsYXRpdmVUbykge1xyXG4gICAgICByZWxhdGl2ZSArPSB0aGlzLnJlbGF0aXZlVG9HZXR0ZXIoY3R4KTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwdHIgPSBvZmZzZXQgKyByZWxhdGl2ZTtcclxuXHJcbiAgICBpZiAodGhpcy50eXBlICE9IG51bGwpIHtcclxuICAgICAgbGV0IHZhbCA9IG51bGw7XHJcbiAgICAgIGNvbnN0IGRlY29kZVZhbHVlID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh2YWwgIT0gbnVsbCkgeyByZXR1cm4gdmFsOyB9XHJcblxyXG4gICAgICAgIGNvbnN0IHsgcG9zIH0gPSBzdHJlYW07XHJcbiAgICAgICAgc3RyZWFtLnBvcyA9IHB0cjtcclxuICAgICAgICB2YWwgPSB0aGlzLnR5cGUuZGVjb2RlKHN0cmVhbSwgY3R4KTtcclxuICAgICAgICBzdHJlYW0ucG9zID0gcG9zO1xyXG4gICAgICAgIHJldHVybiB2YWw7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvLyBJZiB0aGlzIGlzIGEgbGF6eSBwb2ludGVyLCBkZWZpbmUgYSBnZXR0ZXIgdG8gZGVjb2RlIG9ubHkgd2hlbiBuZWVkZWQuXHJcbiAgICAgIC8vIFRoaXMgb2J2aW91c2x5IG9ubHkgd29ya3Mgd2hlbiB0aGUgcG9pbnRlciBpcyBjb250YWluZWQgYnkgYSBTdHJ1Y3QuXHJcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubGF6eSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgdXRpbHMuUHJvcGVydHlEZXNjcmlwdG9yKHtcclxuICAgICAgICAgIGdldDogZGVjb2RlVmFsdWV9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGRlY29kZVZhbHVlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gcHRyO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2l6ZSh2YWwsIGN0eCkge1xyXG4gICAgY29uc3QgcGFyZW50ID0gY3R4O1xyXG4gICAgc3dpdGNoICh0aGlzLm9wdGlvbnMudHlwZSkge1xyXG4gICAgICBjYXNlICdsb2NhbCc6IGNhc2UgJ2ltbWVkaWF0ZSc6XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3BhcmVudCc6XHJcbiAgICAgICAgY3R4ID0gY3R4LnBhcmVudDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDogLy8gZ2xvYmFsXHJcbiAgICAgICAgd2hpbGUgKGN0eC5wYXJlbnQpIHtcclxuICAgICAgICAgIGN0eCA9IGN0eC5wYXJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxldCB7IHR5cGUgfSA9IHRoaXM7XHJcbiAgICBpZiAodHlwZSA9PSBudWxsKSB7XHJcbiAgICAgIGlmICghKHZhbCBpbnN0YW5jZW9mIFZvaWRQb2ludGVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk11c3QgYmUgYSBWb2lkUG9pbnRlclwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgKHsgdHlwZSB9ID0gdmFsKTtcclxuICAgICAgdmFsID0gdmFsLnZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh2YWwgJiYgY3R4KSB7XHJcbiAgICAgIGN0eC5wb2ludGVyU2l6ZSArPSB0eXBlLnNpemUodmFsLCBwYXJlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLm9mZnNldFR5cGUuc2l6ZSgpO1xyXG4gIH1cclxuXHJcbiAgZW5jb2RlKHN0cmVhbSwgdmFsLCBjdHgpIHtcclxuICAgIGxldCByZWxhdGl2ZTtcclxuICAgIGNvbnN0IHBhcmVudCA9IGN0eDtcclxuICAgIGlmICgodmFsID09IG51bGwpKSB7XHJcbiAgICAgIHRoaXMub2Zmc2V0VHlwZS5lbmNvZGUoc3RyZWFtLCB0aGlzLm9wdGlvbnMubnVsbFZhbHVlKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHN3aXRjaCAodGhpcy5vcHRpb25zLnR5cGUpIHtcclxuICAgICAgY2FzZSAnbG9jYWwnOlxyXG4gICAgICAgIHJlbGF0aXZlID0gY3R4LnN0YXJ0T2Zmc2V0O1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdpbW1lZGlhdGUnOlxyXG4gICAgICAgIHJlbGF0aXZlID0gc3RyZWFtLnBvcyArIHRoaXMub2Zmc2V0VHlwZS5zaXplKHZhbCwgcGFyZW50KTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAncGFyZW50JzpcclxuICAgICAgICBjdHggPSBjdHgucGFyZW50O1xyXG4gICAgICAgIHJlbGF0aXZlID0gY3R4LnN0YXJ0T2Zmc2V0O1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OiAvLyBnbG9iYWxcclxuICAgICAgICByZWxhdGl2ZSA9IDA7XHJcbiAgICAgICAgd2hpbGUgKGN0eC5wYXJlbnQpIHtcclxuICAgICAgICAgIGN0eCA9IGN0eC5wYXJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLm9wdGlvbnMucmVsYXRpdmVUbykge1xyXG4gICAgICByZWxhdGl2ZSArPSB0aGlzLnJlbGF0aXZlVG9HZXR0ZXIocGFyZW50LnZhbCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5vZmZzZXRUeXBlLmVuY29kZShzdHJlYW0sIGN0eC5wb2ludGVyT2Zmc2V0IC0gcmVsYXRpdmUpO1xyXG5cclxuICAgIGxldCB7IHR5cGUgfSA9IHRoaXM7XHJcbiAgICBpZiAodHlwZSA9PSBudWxsKSB7XHJcbiAgICAgIGlmICghKHZhbCBpbnN0YW5jZW9mIFZvaWRQb2ludGVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk11c3QgYmUgYSBWb2lkUG9pbnRlclwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgKHsgdHlwZSB9ID0gdmFsKTtcclxuICAgICAgdmFsID0gdmFsLnZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGN0eC5wb2ludGVycy5wdXNoKHtcclxuICAgICAgdHlwZSxcclxuICAgICAgdmFsLFxyXG4gICAgICBwYXJlbnRcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBjdHgucG9pbnRlck9mZnNldCArPSB0eXBlLnNpemUodmFsLCBwYXJlbnQpO1xyXG4gIH1cclxufVxyXG5cclxuLy8gQSBwb2ludGVyIHdob3NlIHR5cGUgaXMgZGV0ZXJtaW5lZCBhdCBkZWNvZGUgdGltZVxyXG5jbGFzcyBWb2lkUG9pbnRlciB7XHJcbiAgY29uc3RydWN0b3IodHlwZSwgdmFsdWUpIHtcclxuICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnRzLlBvaW50ZXIgPSBQb2ludGVyO1xyXG5leHBvcnRzLlZvaWRQb2ludGVyID0gVm9pZFBvaW50ZXI7XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/restructure/src/Pointer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/restructure/src/Reserved.js":
/*!****************************************************************!*\
  !*** ./node_modules/@foliojs-fork/restructure/src/Reserved.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/utils.js\");\r\n\r\nclass Reserved {\r\n  constructor(type, count = 1) {\r\n    this.type = type;\r\n    this.count = count;\r\n  }\r\n  decode(stream, parent) {\r\n    stream.pos += this.size(null, parent);\r\n    return undefined;\r\n  }\r\n\r\n  size(data, parent) {\r\n    const count = utils.resolveLength(this.count, null, parent);\r\n    return this.type.size() * count;\r\n  }\r\n\r\n  encode(stream, val, parent) {\r\n    return stream.fill(0, this.size(val, parent));\r\n  }\r\n}\r\n\r\nmodule.exports = Reserved;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9zcmMvUmVzZXJ2ZWQuanMiLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxtQkFBTyxDQUFDLDRFQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9nYXNjYXQvcHJpc21hcXVhbnQvcHJpc21hLXF1YW50dW0vbm9kZV9tb2R1bGVzL0Bmb2xpb2pzLWZvcmsvcmVzdHJ1Y3R1cmUvc3JjL1Jlc2VydmVkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xyXG5cclxuY2xhc3MgUmVzZXJ2ZWQge1xyXG4gIGNvbnN0cnVjdG9yKHR5cGUsIGNvdW50ID0gMSkge1xyXG4gICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgIHRoaXMuY291bnQgPSBjb3VudDtcclxuICB9XHJcbiAgZGVjb2RlKHN0cmVhbSwgcGFyZW50KSB7XHJcbiAgICBzdHJlYW0ucG9zICs9IHRoaXMuc2l6ZShudWxsLCBwYXJlbnQpO1xyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG4gIHNpemUoZGF0YSwgcGFyZW50KSB7XHJcbiAgICBjb25zdCBjb3VudCA9IHV0aWxzLnJlc29sdmVMZW5ndGgodGhpcy5jb3VudCwgbnVsbCwgcGFyZW50KTtcclxuICAgIHJldHVybiB0aGlzLnR5cGUuc2l6ZSgpICogY291bnQ7XHJcbiAgfVxyXG5cclxuICBlbmNvZGUoc3RyZWFtLCB2YWwsIHBhcmVudCkge1xyXG4gICAgcmV0dXJuIHN0cmVhbS5maWxsKDAsIHRoaXMuc2l6ZSh2YWwsIHBhcmVudCkpO1xyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBSZXNlcnZlZDtcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/restructure/src/Reserved.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/restructure/src/String.js":
/*!**************************************************************!*\
  !*** ./node_modules/@foliojs-fork/restructure/src/String.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {Number:NumberT} = __webpack_require__(/*! ./Number */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/Number.js\");\r\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/utils.js\");\r\n\r\nclass StringT {\r\n  constructor(length, encoding = 'ascii') {\r\n    this.length = length;\r\n    this.encoding = encoding;\r\n  }\r\n\r\n  decode(stream, parent) {\r\n    let length, pos;\r\n\r\n    if (this.length != null) {\r\n      length = utils.resolveLength(this.length, stream, parent);\r\n    } else {\r\n      let buffer;\r\n      ({buffer, length, pos} = stream);\r\n\r\n      while ((pos < length) && (buffer[pos] !== 0x00)) {\r\n        ++pos;\r\n      }\r\n\r\n      length = pos - stream.pos;\r\n    }\r\n\r\n    let { encoding } = this;\r\n    if (typeof encoding === 'function') {\r\n      encoding = encoding.call(parent, parent) || 'ascii';\r\n    }\r\n\r\n    const string = stream.readString(length, encoding);\r\n\r\n    if ((this.length == null) && (stream.pos < stream.length)) {\r\n      stream.pos++;\r\n    }\r\n\r\n    return string;\r\n  }\r\n\r\n  size(val, parent) {\r\n    // Use the defined value if no value was given\r\n    if (!val) {\r\n      return utils.resolveLength(this.length, null, parent);\r\n    }\r\n\r\n    let { encoding } = this;\r\n    if (typeof encoding === 'function') {\r\n      encoding = encoding.call(parent != null ? parent.val : undefined, parent != null ? parent.val : undefined) || 'ascii';\r\n    }\r\n\r\n    if (encoding === 'utf16be') {\r\n      encoding = 'utf16le';\r\n    }\r\n\r\n    let size = Buffer.byteLength(val, encoding);\r\n    if (this.length instanceof NumberT) {\r\n      size += this.length.size();\r\n    }\r\n\r\n    if ((this.length == null)) {\r\n      size++;\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  encode(stream, val, parent) {\r\n    let { encoding } = this;\r\n    if (typeof encoding === 'function') {\r\n      encoding = encoding.call(parent != null ? parent.val : undefined, parent != null ? parent.val : undefined) || 'ascii';\r\n    }\r\n\r\n    if (this.length instanceof NumberT) {\r\n      this.length.encode(stream, Buffer.byteLength(val, encoding));\r\n    }\r\n\r\n    stream.writeString(val, encoding);\r\n\r\n    if ((this.length == null)) {\r\n      return stream.writeUInt8(0x00);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = StringT;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9zcmMvU3RyaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sZ0JBQWdCLEVBQUUsbUJBQU8sQ0FBQyw4RUFBVTtBQUMzQyxjQUFjLG1CQUFPLENBQUMsNEVBQVM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsUUFBUSxxQkFBcUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsV0FBVztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsV0FBVztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFdBQVc7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvZ2FzY2F0L3ByaXNtYXF1YW50L3ByaXNtYS1xdWFudHVtL25vZGVfbW9kdWxlcy9AZm9saW9qcy1mb3JrL3Jlc3RydWN0dXJlL3NyYy9TdHJpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge051bWJlcjpOdW1iZXJUfSA9IHJlcXVpcmUoJy4vTnVtYmVyJyk7XHJcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xyXG5cclxuY2xhc3MgU3RyaW5nVCB7XHJcbiAgY29uc3RydWN0b3IobGVuZ3RoLCBlbmNvZGluZyA9ICdhc2NpaScpIHtcclxuICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xyXG4gICAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xyXG4gIH1cclxuXHJcbiAgZGVjb2RlKHN0cmVhbSwgcGFyZW50KSB7XHJcbiAgICBsZXQgbGVuZ3RoLCBwb3M7XHJcblxyXG4gICAgaWYgKHRoaXMubGVuZ3RoICE9IG51bGwpIHtcclxuICAgICAgbGVuZ3RoID0gdXRpbHMucmVzb2x2ZUxlbmd0aCh0aGlzLmxlbmd0aCwgc3RyZWFtLCBwYXJlbnQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGV0IGJ1ZmZlcjtcclxuICAgICAgKHtidWZmZXIsIGxlbmd0aCwgcG9zfSA9IHN0cmVhbSk7XHJcblxyXG4gICAgICB3aGlsZSAoKHBvcyA8IGxlbmd0aCkgJiYgKGJ1ZmZlcltwb3NdICE9PSAweDAwKSkge1xyXG4gICAgICAgICsrcG9zO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZW5ndGggPSBwb3MgLSBzdHJlYW0ucG9zO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB7IGVuY29kaW5nIH0gPSB0aGlzO1xyXG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBlbmNvZGluZyA9IGVuY29kaW5nLmNhbGwocGFyZW50LCBwYXJlbnQpIHx8ICdhc2NpaSc7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc3RyaW5nID0gc3RyZWFtLnJlYWRTdHJpbmcobGVuZ3RoLCBlbmNvZGluZyk7XHJcblxyXG4gICAgaWYgKCh0aGlzLmxlbmd0aCA9PSBudWxsKSAmJiAoc3RyZWFtLnBvcyA8IHN0cmVhbS5sZW5ndGgpKSB7XHJcbiAgICAgIHN0cmVhbS5wb3MrKztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3RyaW5nO1xyXG4gIH1cclxuXHJcbiAgc2l6ZSh2YWwsIHBhcmVudCkge1xyXG4gICAgLy8gVXNlIHRoZSBkZWZpbmVkIHZhbHVlIGlmIG5vIHZhbHVlIHdhcyBnaXZlblxyXG4gICAgaWYgKCF2YWwpIHtcclxuICAgICAgcmV0dXJuIHV0aWxzLnJlc29sdmVMZW5ndGgodGhpcy5sZW5ndGgsIG51bGwsIHBhcmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHsgZW5jb2RpbmcgfSA9IHRoaXM7XHJcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIGVuY29kaW5nID0gZW5jb2RpbmcuY2FsbChwYXJlbnQgIT0gbnVsbCA/IHBhcmVudC52YWwgOiB1bmRlZmluZWQsIHBhcmVudCAhPSBudWxsID8gcGFyZW50LnZhbCA6IHVuZGVmaW5lZCkgfHwgJ2FzY2lpJztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1dGYxNmJlJykge1xyXG4gICAgICBlbmNvZGluZyA9ICd1dGYxNmxlJztcclxuICAgIH1cclxuXHJcbiAgICBsZXQgc2l6ZSA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHZhbCwgZW5jb2RpbmcpO1xyXG4gICAgaWYgKHRoaXMubGVuZ3RoIGluc3RhbmNlb2YgTnVtYmVyVCkge1xyXG4gICAgICBzaXplICs9IHRoaXMubGVuZ3RoLnNpemUoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoKHRoaXMubGVuZ3RoID09IG51bGwpKSB7XHJcbiAgICAgIHNpemUrKztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc2l6ZTtcclxuICB9XHJcblxyXG4gIGVuY29kZShzdHJlYW0sIHZhbCwgcGFyZW50KSB7XHJcbiAgICBsZXQgeyBlbmNvZGluZyB9ID0gdGhpcztcclxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgZW5jb2RpbmcgPSBlbmNvZGluZy5jYWxsKHBhcmVudCAhPSBudWxsID8gcGFyZW50LnZhbCA6IHVuZGVmaW5lZCwgcGFyZW50ICE9IG51bGwgPyBwYXJlbnQudmFsIDogdW5kZWZpbmVkKSB8fCAnYXNjaWknO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmxlbmd0aCBpbnN0YW5jZW9mIE51bWJlclQpIHtcclxuICAgICAgdGhpcy5sZW5ndGguZW5jb2RlKHN0cmVhbSwgQnVmZmVyLmJ5dGVMZW5ndGgodmFsLCBlbmNvZGluZykpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0cmVhbS53cml0ZVN0cmluZyh2YWwsIGVuY29kaW5nKTtcclxuXHJcbiAgICBpZiAoKHRoaXMubGVuZ3RoID09IG51bGwpKSB7XHJcbiAgICAgIHJldHVybiBzdHJlYW0ud3JpdGVVSW50OCgweDAwKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gU3RyaW5nVDtcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/restructure/src/String.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/restructure/src/Struct.js":
/*!**************************************************************!*\
  !*** ./node_modules/@foliojs-fork/restructure/src/Struct.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/utils.js\");\r\n\r\nclass Struct {\r\n  constructor(fields = {}) {\r\n    this.fields = fields;\r\n  }\r\n\r\n  decode(stream, parent, length = 0) {\r\n    const res = this._setup(stream, parent, length);\r\n    this._parseFields(stream, res, this.fields);\r\n\r\n    if (this.process != null) {\r\n      this.process.call(res, stream);\r\n    }\r\n    return res;\r\n  }\r\n\r\n  _setup(stream, parent, length) {\r\n    const res = {};\r\n\r\n    // define hidden properties\r\n    Object.defineProperties(res, {\r\n      parent:         { value: parent },\r\n      _startOffset:   { value: stream.pos },\r\n      _currentOffset: { value: 0, writable: true },\r\n      _length:        { value: length }\r\n    });\r\n\r\n    return res;\r\n  }\r\n\r\n  _parseFields(stream, res, fields) {\r\n    for (let key in fields) {\r\n      var val;\r\n      const type = fields[key];\r\n      if (typeof type === 'function') {\r\n        val = type.call(res, res);\r\n      } else {\r\n        val = type.decode(stream, res);\r\n      }\r\n\r\n      if (val !== undefined) {\r\n        if (val instanceof utils.PropertyDescriptor) {\r\n          Object.defineProperty(res, key, val);\r\n        } else {\r\n          res[key] = val;\r\n        }\r\n      }\r\n\r\n      res._currentOffset = stream.pos - res._startOffset;\r\n    }\r\n\r\n  }\r\n\r\n  size(val, parent, includePointers) {\r\n    if (val == null) { val = {}; }\r\n    if (includePointers == null) { includePointers = true; }\r\n    const ctx = {\r\n      parent,\r\n      val,\r\n      pointerSize: 0\r\n    };\r\n\r\n    let size = 0;\r\n    for (let key in this.fields) {\r\n      const type = this.fields[key];\r\n      if (type.size != null) {\r\n        size += type.size(val[key], ctx);\r\n      }\r\n    }\r\n\r\n    if (includePointers) {\r\n      size += ctx.pointerSize;\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  encode(stream, val, parent) {\r\n    let type;\r\n    if (this.preEncode != null) {\r\n      this.preEncode.call(val, stream);\r\n    }\r\n\r\n    const ctx = {\r\n      pointers: [],\r\n      startOffset: stream.pos,\r\n      parent,\r\n      val,\r\n      pointerSize: 0\r\n    };\r\n\r\n    ctx.pointerOffset = stream.pos + this.size(val, ctx, false);\r\n\r\n    for (let key in this.fields) {\r\n      type = this.fields[key];\r\n      if (type.encode != null) {\r\n        type.encode(stream, val[key], ctx);\r\n      }\r\n    }\r\n\r\n    let i = 0;\r\n    while (i < ctx.pointers.length) {\r\n      const ptr = ctx.pointers[i++];\r\n      ptr.type.encode(stream, ptr.val, ptr.parent);\r\n    }\r\n\r\n  }\r\n}\r\n\r\nmodule.exports = Struct;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9zcmMvU3RydWN0LmpzIiwibWFwcGluZ3MiOiJBQUFBLGNBQWMsbUJBQU8sQ0FBQyw0RUFBUztBQUMvQjtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixlQUFlO0FBQ3ZDLHdCQUF3QixtQkFBbUI7QUFDM0Msd0JBQXdCLDBCQUEwQjtBQUNsRCx3QkFBd0I7QUFDeEIsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QixtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9nYXNjYXQvcHJpc21hcXVhbnQvcHJpc21hLXF1YW50dW0vbm9kZV9tb2R1bGVzL0Bmb2xpb2pzLWZvcmsvcmVzdHJ1Y3R1cmUvc3JjL1N0cnVjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcclxuXHJcbmNsYXNzIFN0cnVjdCB7XHJcbiAgY29uc3RydWN0b3IoZmllbGRzID0ge30pIHtcclxuICAgIHRoaXMuZmllbGRzID0gZmllbGRzO1xyXG4gIH1cclxuXHJcbiAgZGVjb2RlKHN0cmVhbSwgcGFyZW50LCBsZW5ndGggPSAwKSB7XHJcbiAgICBjb25zdCByZXMgPSB0aGlzLl9zZXR1cChzdHJlYW0sIHBhcmVudCwgbGVuZ3RoKTtcclxuICAgIHRoaXMuX3BhcnNlRmllbGRzKHN0cmVhbSwgcmVzLCB0aGlzLmZpZWxkcyk7XHJcblxyXG4gICAgaWYgKHRoaXMucHJvY2VzcyAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMucHJvY2Vzcy5jYWxsKHJlcywgc3RyZWFtKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBfc2V0dXAoc3RyZWFtLCBwYXJlbnQsIGxlbmd0aCkge1xyXG4gICAgY29uc3QgcmVzID0ge307XHJcblxyXG4gICAgLy8gZGVmaW5lIGhpZGRlbiBwcm9wZXJ0aWVzXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhyZXMsIHtcclxuICAgICAgcGFyZW50OiAgICAgICAgIHsgdmFsdWU6IHBhcmVudCB9LFxyXG4gICAgICBfc3RhcnRPZmZzZXQ6ICAgeyB2YWx1ZTogc3RyZWFtLnBvcyB9LFxyXG4gICAgICBfY3VycmVudE9mZnNldDogeyB2YWx1ZTogMCwgd3JpdGFibGU6IHRydWUgfSxcclxuICAgICAgX2xlbmd0aDogICAgICAgIHsgdmFsdWU6IGxlbmd0aCB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgX3BhcnNlRmllbGRzKHN0cmVhbSwgcmVzLCBmaWVsZHMpIHtcclxuICAgIGZvciAobGV0IGtleSBpbiBmaWVsZHMpIHtcclxuICAgICAgdmFyIHZhbDtcclxuICAgICAgY29uc3QgdHlwZSA9IGZpZWxkc1trZXldO1xyXG4gICAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICB2YWwgPSB0eXBlLmNhbGwocmVzLCByZXMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhbCA9IHR5cGUuZGVjb2RlKHN0cmVhbSwgcmVzKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHZhbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKHZhbCBpbnN0YW5jZW9mIHV0aWxzLlByb3BlcnR5RGVzY3JpcHRvcikge1xyXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcywga2V5LCB2YWwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXNba2V5XSA9IHZhbDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJlcy5fY3VycmVudE9mZnNldCA9IHN0cmVhbS5wb3MgLSByZXMuX3N0YXJ0T2Zmc2V0O1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4gIHNpemUodmFsLCBwYXJlbnQsIGluY2x1ZGVQb2ludGVycykge1xyXG4gICAgaWYgKHZhbCA9PSBudWxsKSB7IHZhbCA9IHt9OyB9XHJcbiAgICBpZiAoaW5jbHVkZVBvaW50ZXJzID09IG51bGwpIHsgaW5jbHVkZVBvaW50ZXJzID0gdHJ1ZTsgfVxyXG4gICAgY29uc3QgY3R4ID0ge1xyXG4gICAgICBwYXJlbnQsXHJcbiAgICAgIHZhbCxcclxuICAgICAgcG9pbnRlclNpemU6IDBcclxuICAgIH07XHJcblxyXG4gICAgbGV0IHNpemUgPSAwO1xyXG4gICAgZm9yIChsZXQga2V5IGluIHRoaXMuZmllbGRzKSB7XHJcbiAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLmZpZWxkc1trZXldO1xyXG4gICAgICBpZiAodHlwZS5zaXplICE9IG51bGwpIHtcclxuICAgICAgICBzaXplICs9IHR5cGUuc2l6ZSh2YWxba2V5XSwgY3R4KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChpbmNsdWRlUG9pbnRlcnMpIHtcclxuICAgICAgc2l6ZSArPSBjdHgucG9pbnRlclNpemU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHNpemU7XHJcbiAgfVxyXG5cclxuICBlbmNvZGUoc3RyZWFtLCB2YWwsIHBhcmVudCkge1xyXG4gICAgbGV0IHR5cGU7XHJcbiAgICBpZiAodGhpcy5wcmVFbmNvZGUgIT0gbnVsbCkge1xyXG4gICAgICB0aGlzLnByZUVuY29kZS5jYWxsKHZhbCwgc3RyZWFtKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjdHggPSB7XHJcbiAgICAgIHBvaW50ZXJzOiBbXSxcclxuICAgICAgc3RhcnRPZmZzZXQ6IHN0cmVhbS5wb3MsXHJcbiAgICAgIHBhcmVudCxcclxuICAgICAgdmFsLFxyXG4gICAgICBwb2ludGVyU2l6ZTogMFxyXG4gICAgfTtcclxuXHJcbiAgICBjdHgucG9pbnRlck9mZnNldCA9IHN0cmVhbS5wb3MgKyB0aGlzLnNpemUodmFsLCBjdHgsIGZhbHNlKTtcclxuXHJcbiAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5maWVsZHMpIHtcclxuICAgICAgdHlwZSA9IHRoaXMuZmllbGRzW2tleV07XHJcbiAgICAgIGlmICh0eXBlLmVuY29kZSAhPSBudWxsKSB7XHJcbiAgICAgICAgdHlwZS5lbmNvZGUoc3RyZWFtLCB2YWxba2V5XSwgY3R4KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxldCBpID0gMDtcclxuICAgIHdoaWxlIChpIDwgY3R4LnBvaW50ZXJzLmxlbmd0aCkge1xyXG4gICAgICBjb25zdCBwdHIgPSBjdHgucG9pbnRlcnNbaSsrXTtcclxuICAgICAgcHRyLnR5cGUuZW5jb2RlKHN0cmVhbSwgcHRyLnZhbCwgcHRyLnBhcmVudCk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBTdHJ1Y3Q7XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/restructure/src/Struct.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/restructure/src/VersionedStruct.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@foliojs-fork/restructure/src/VersionedStruct.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Struct = __webpack_require__(/*! ./Struct */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/Struct.js\");\r\n\r\nconst getPath = (object, pathArray) => {\r\n  return pathArray.reduce((prevObj, key) => prevObj && prevObj[key], object);\r\n};\r\n\r\nclass VersionedStruct extends Struct {\r\n  constructor(type, versions = {}) {\r\n    super();\r\n    this.type = type;\r\n    this.versions = versions;\r\n    if (typeof type === 'string') {\r\n      this.versionPath = type.split('.');\r\n    }\r\n  }\r\n\r\n  decode(stream, parent, length = 0) {\r\n    const res = this._setup(stream, parent, length);\r\n\r\n    if (typeof this.type === 'string') {\r\n      res.version = getPath(parent, this.versionPath);\r\n    } else {\r\n      res.version = this.type.decode(stream);\r\n    }\r\n\r\n    if (this.versions.header) {\r\n      this._parseFields(stream, res, this.versions.header);\r\n    }\r\n\r\n    const fields = this.versions[res.version];\r\n    if ((fields == null)) {\r\n      throw new Error(`Unknown version ${res.version}`);\r\n    }\r\n\r\n    if (fields instanceof VersionedStruct) {\r\n      return fields.decode(stream, parent);\r\n    }\r\n\r\n    this._parseFields(stream, res, fields);\r\n\r\n    if (this.process != null) {\r\n      this.process.call(res, stream);\r\n    }\r\n    return res;\r\n  }\r\n\r\n  size(val, parent, includePointers = true) {\r\n    let key, type;\r\n    if (!val) {\r\n      throw new Error('Not a fixed size');\r\n    }\r\n\r\n    const ctx = {\r\n      parent,\r\n      val,\r\n      pointerSize: 0\r\n    };\r\n\r\n    let size = 0;\r\n    if (typeof this.type !== 'string') {\r\n      size += this.type.size(val.version, ctx);\r\n    }\r\n\r\n    if (this.versions.header) {\r\n      for (key in this.versions.header) {\r\n        type = this.versions.header[key];\r\n        if (type.size != null) {\r\n          size += type.size(val[key], ctx);\r\n        }\r\n      }\r\n    }\r\n\r\n    const fields = this.versions[val.version];\r\n    if ((fields == null)) {\r\n      throw new Error(`Unknown version ${val.version}`);\r\n    }\r\n\r\n    for (key in fields) {\r\n      type = fields[key];\r\n      if (type.size != null) {\r\n        size += type.size(val[key], ctx);\r\n      }\r\n    }\r\n\r\n    if (includePointers) {\r\n      size += ctx.pointerSize;\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  encode(stream, val, parent) {\r\n    let key, type;\r\n    if (this.preEncode != null) {\r\n      this.preEncode.call(val, stream);\r\n    }\r\n\r\n    const ctx = {\r\n      pointers: [],\r\n      startOffset: stream.pos,\r\n      parent,\r\n      val,\r\n      pointerSize: 0\r\n    };\r\n\r\n    ctx.pointerOffset = stream.pos + this.size(val, ctx, false);\r\n\r\n    if (typeof this.type !== 'string') {\r\n      this.type.encode(stream, val.version);\r\n    }\r\n\r\n    if (this.versions.header) {\r\n      for (key in this.versions.header) {\r\n        type = this.versions.header[key];\r\n        if (type.encode != null) {\r\n          type.encode(stream, val[key], ctx);\r\n        }\r\n      }\r\n    }\r\n\r\n    const fields = this.versions[val.version];\r\n    for (key in fields) {\r\n      type = fields[key];\r\n      if (type.encode != null) {\r\n        type.encode(stream, val[key], ctx);\r\n      }\r\n    }\r\n\r\n    let i = 0;\r\n    while (i < ctx.pointers.length) {\r\n      const ptr = ctx.pointers[i++];\r\n      ptr.type.encode(stream, ptr.val, ptr.parent);\r\n    }\r\n\r\n  }\r\n}\r\n\r\nmodule.exports = VersionedStruct;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9zcmMvVmVyc2lvbmVkU3RydWN0LmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyw4RUFBVTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLFlBQVk7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLFlBQVk7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9nYXNjYXQvcHJpc21hcXVhbnQvcHJpc21hLXF1YW50dW0vbm9kZV9tb2R1bGVzL0Bmb2xpb2pzLWZvcmsvcmVzdHJ1Y3R1cmUvc3JjL1ZlcnNpb25lZFN0cnVjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTdHJ1Y3QgPSByZXF1aXJlKCcuL1N0cnVjdCcpO1xyXG5cclxuY29uc3QgZ2V0UGF0aCA9IChvYmplY3QsIHBhdGhBcnJheSkgPT4ge1xyXG4gIHJldHVybiBwYXRoQXJyYXkucmVkdWNlKChwcmV2T2JqLCBrZXkpID0+IHByZXZPYmogJiYgcHJldk9ialtrZXldLCBvYmplY3QpO1xyXG59O1xyXG5cclxuY2xhc3MgVmVyc2lvbmVkU3RydWN0IGV4dGVuZHMgU3RydWN0IHtcclxuICBjb25zdHJ1Y3Rvcih0eXBlLCB2ZXJzaW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgIHRoaXMudmVyc2lvbnMgPSB2ZXJzaW9ucztcclxuICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgdGhpcy52ZXJzaW9uUGF0aCA9IHR5cGUuc3BsaXQoJy4nKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRlY29kZShzdHJlYW0sIHBhcmVudCwgbGVuZ3RoID0gMCkge1xyXG4gICAgY29uc3QgcmVzID0gdGhpcy5fc2V0dXAoc3RyZWFtLCBwYXJlbnQsIGxlbmd0aCk7XHJcblxyXG4gICAgaWYgKHR5cGVvZiB0aGlzLnR5cGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHJlcy52ZXJzaW9uID0gZ2V0UGF0aChwYXJlbnQsIHRoaXMudmVyc2lvblBhdGgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmVzLnZlcnNpb24gPSB0aGlzLnR5cGUuZGVjb2RlKHN0cmVhbSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMudmVyc2lvbnMuaGVhZGVyKSB7XHJcbiAgICAgIHRoaXMuX3BhcnNlRmllbGRzKHN0cmVhbSwgcmVzLCB0aGlzLnZlcnNpb25zLmhlYWRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZmllbGRzID0gdGhpcy52ZXJzaW9uc1tyZXMudmVyc2lvbl07XHJcbiAgICBpZiAoKGZpZWxkcyA9PSBudWxsKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gdmVyc2lvbiAke3Jlcy52ZXJzaW9ufWApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChmaWVsZHMgaW5zdGFuY2VvZiBWZXJzaW9uZWRTdHJ1Y3QpIHtcclxuICAgICAgcmV0dXJuIGZpZWxkcy5kZWNvZGUoc3RyZWFtLCBwYXJlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX3BhcnNlRmllbGRzKHN0cmVhbSwgcmVzLCBmaWVsZHMpO1xyXG5cclxuICAgIGlmICh0aGlzLnByb2Nlc3MgIT0gbnVsbCkge1xyXG4gICAgICB0aGlzLnByb2Nlc3MuY2FsbChyZXMsIHN0cmVhbSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgc2l6ZSh2YWwsIHBhcmVudCwgaW5jbHVkZVBvaW50ZXJzID0gdHJ1ZSkge1xyXG4gICAgbGV0IGtleSwgdHlwZTtcclxuICAgIGlmICghdmFsKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGEgZml4ZWQgc2l6ZScpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGN0eCA9IHtcclxuICAgICAgcGFyZW50LFxyXG4gICAgICB2YWwsXHJcbiAgICAgIHBvaW50ZXJTaXplOiAwXHJcbiAgICB9O1xyXG5cclxuICAgIGxldCBzaXplID0gMDtcclxuICAgIGlmICh0eXBlb2YgdGhpcy50eXBlICE9PSAnc3RyaW5nJykge1xyXG4gICAgICBzaXplICs9IHRoaXMudHlwZS5zaXplKHZhbC52ZXJzaW9uLCBjdHgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLnZlcnNpb25zLmhlYWRlcikge1xyXG4gICAgICBmb3IgKGtleSBpbiB0aGlzLnZlcnNpb25zLmhlYWRlcikge1xyXG4gICAgICAgIHR5cGUgPSB0aGlzLnZlcnNpb25zLmhlYWRlcltrZXldO1xyXG4gICAgICAgIGlmICh0eXBlLnNpemUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgc2l6ZSArPSB0eXBlLnNpemUodmFsW2tleV0sIGN0eCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZmllbGRzID0gdGhpcy52ZXJzaW9uc1t2YWwudmVyc2lvbl07XHJcbiAgICBpZiAoKGZpZWxkcyA9PSBudWxsKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gdmVyc2lvbiAke3ZhbC52ZXJzaW9ufWApO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAoa2V5IGluIGZpZWxkcykge1xyXG4gICAgICB0eXBlID0gZmllbGRzW2tleV07XHJcbiAgICAgIGlmICh0eXBlLnNpemUgIT0gbnVsbCkge1xyXG4gICAgICAgIHNpemUgKz0gdHlwZS5zaXplKHZhbFtrZXldLCBjdHgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGluY2x1ZGVQb2ludGVycykge1xyXG4gICAgICBzaXplICs9IGN0eC5wb2ludGVyU2l6ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc2l6ZTtcclxuICB9XHJcblxyXG4gIGVuY29kZShzdHJlYW0sIHZhbCwgcGFyZW50KSB7XHJcbiAgICBsZXQga2V5LCB0eXBlO1xyXG4gICAgaWYgKHRoaXMucHJlRW5jb2RlICE9IG51bGwpIHtcclxuICAgICAgdGhpcy5wcmVFbmNvZGUuY2FsbCh2YWwsIHN0cmVhbSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY3R4ID0ge1xyXG4gICAgICBwb2ludGVyczogW10sXHJcbiAgICAgIHN0YXJ0T2Zmc2V0OiBzdHJlYW0ucG9zLFxyXG4gICAgICBwYXJlbnQsXHJcbiAgICAgIHZhbCxcclxuICAgICAgcG9pbnRlclNpemU6IDBcclxuICAgIH07XHJcblxyXG4gICAgY3R4LnBvaW50ZXJPZmZzZXQgPSBzdHJlYW0ucG9zICsgdGhpcy5zaXplKHZhbCwgY3R4LCBmYWxzZSk7XHJcblxyXG4gICAgaWYgKHR5cGVvZiB0aGlzLnR5cGUgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHRoaXMudHlwZS5lbmNvZGUoc3RyZWFtLCB2YWwudmVyc2lvbik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMudmVyc2lvbnMuaGVhZGVyKSB7XHJcbiAgICAgIGZvciAoa2V5IGluIHRoaXMudmVyc2lvbnMuaGVhZGVyKSB7XHJcbiAgICAgICAgdHlwZSA9IHRoaXMudmVyc2lvbnMuaGVhZGVyW2tleV07XHJcbiAgICAgICAgaWYgKHR5cGUuZW5jb2RlICE9IG51bGwpIHtcclxuICAgICAgICAgIHR5cGUuZW5jb2RlKHN0cmVhbSwgdmFsW2tleV0sIGN0eCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZmllbGRzID0gdGhpcy52ZXJzaW9uc1t2YWwudmVyc2lvbl07XHJcbiAgICBmb3IgKGtleSBpbiBmaWVsZHMpIHtcclxuICAgICAgdHlwZSA9IGZpZWxkc1trZXldO1xyXG4gICAgICBpZiAodHlwZS5lbmNvZGUgIT0gbnVsbCkge1xyXG4gICAgICAgIHR5cGUuZW5jb2RlKHN0cmVhbSwgdmFsW2tleV0sIGN0eCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICB3aGlsZSAoaSA8IGN0eC5wb2ludGVycy5sZW5ndGgpIHtcclxuICAgICAgY29uc3QgcHRyID0gY3R4LnBvaW50ZXJzW2krK107XHJcbiAgICAgIHB0ci50eXBlLmVuY29kZShzdHJlYW0sIHB0ci52YWwsIHB0ci5wYXJlbnQpO1xyXG4gICAgfVxyXG5cclxuICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gVmVyc2lvbmVkU3RydWN0O1xyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/restructure/src/VersionedStruct.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@foliojs-fork/restructure/src/utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/@foliojs-fork/restructure/src/utils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const {Number:NumberT} = __webpack_require__(/*! ./Number */ \"(rsc)/./node_modules/@foliojs-fork/restructure/src/Number.js\");\r\n\r\nexports.resolveLength = function(length, stream, parent) {\r\n  let res;\r\n  if (typeof length === 'number') {\r\n    res = length;\r\n\r\n  } else if (typeof length === 'function') {\r\n    res = length.call(parent, parent);\r\n\r\n  } else if (parent && (typeof length === 'string')) {\r\n    res = parent[length];\r\n\r\n  } else if (stream && length instanceof NumberT) {\r\n    res = length.decode(stream);\r\n  }\r\n\r\n  if (isNaN(res)) {\r\n    throw new Error('Not a fixed size');\r\n  }\r\n\r\n  return res;\r\n};\r\n\r\nclass PropertyDescriptor {\r\n  constructor(opts = {}) {\r\n    this.enumerable = true;\r\n    this.configurable = true;\r\n\r\n    for (let key in opts) {\r\n      const val = opts[key];\r\n      this[key] = val;\r\n    }\r\n  }\r\n}\r\n\r\nexports.PropertyDescriptor = PropertyDescriptor;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvbGlvanMtZm9yay9yZXN0cnVjdHVyZS9zcmMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxnQkFBZ0IsRUFBRSxtQkFBTyxDQUFDLDhFQUFVO0FBQzNDO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCIiwic291cmNlcyI6WyIvaG9tZS9nYXNjYXQvcHJpc21hcXVhbnQvcHJpc21hLXF1YW50dW0vbm9kZV9tb2R1bGVzL0Bmb2xpb2pzLWZvcmsvcmVzdHJ1Y3R1cmUvc3JjL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtOdW1iZXI6TnVtYmVyVH0gPSByZXF1aXJlKCcuL051bWJlcicpO1xyXG5cclxuZXhwb3J0cy5yZXNvbHZlTGVuZ3RoID0gZnVuY3Rpb24obGVuZ3RoLCBzdHJlYW0sIHBhcmVudCkge1xyXG4gIGxldCByZXM7XHJcbiAgaWYgKHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInKSB7XHJcbiAgICByZXMgPSBsZW5ndGg7XHJcblxyXG4gIH0gZWxzZSBpZiAodHlwZW9mIGxlbmd0aCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgcmVzID0gbGVuZ3RoLmNhbGwocGFyZW50LCBwYXJlbnQpO1xyXG5cclxuICB9IGVsc2UgaWYgKHBhcmVudCAmJiAodHlwZW9mIGxlbmd0aCA9PT0gJ3N0cmluZycpKSB7XHJcbiAgICByZXMgPSBwYXJlbnRbbGVuZ3RoXTtcclxuXHJcbiAgfSBlbHNlIGlmIChzdHJlYW0gJiYgbGVuZ3RoIGluc3RhbmNlb2YgTnVtYmVyVCkge1xyXG4gICAgcmVzID0gbGVuZ3RoLmRlY29kZShzdHJlYW0pO1xyXG4gIH1cclxuXHJcbiAgaWYgKGlzTmFOKHJlcykpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignTm90IGEgZml4ZWQgc2l6ZScpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJlcztcclxufTtcclxuXHJcbmNsYXNzIFByb3BlcnR5RGVzY3JpcHRvciB7XHJcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XHJcbiAgICB0aGlzLmVudW1lcmFibGUgPSB0cnVlO1xyXG4gICAgdGhpcy5jb25maWd1cmFibGUgPSB0cnVlO1xyXG5cclxuICAgIGZvciAobGV0IGtleSBpbiBvcHRzKSB7XHJcbiAgICAgIGNvbnN0IHZhbCA9IG9wdHNba2V5XTtcclxuICAgICAgdGhpc1trZXldID0gdmFsO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0cy5Qcm9wZXJ0eURlc2NyaXB0b3IgPSBQcm9wZXJ0eURlc2NyaXB0b3I7XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@foliojs-fork/restructure/src/utils.js\n");

/***/ })

};
;