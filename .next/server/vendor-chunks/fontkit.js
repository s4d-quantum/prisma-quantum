/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fontkit";
exports.ids = ["vendor-chunks/fontkit"];
exports.modules = {

/***/ "(rsc)/./node_modules/fontkit/dist/module.mjs":
/*!**********************************************!*\
  !*** ./node_modules/fontkit/dist/module.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ $d636bc798e7178db$export$185802fd694ee1f5),\n/* harmony export */   defaultLanguage: () => (/* binding */ $d636bc798e7178db$export$42940898df819940),\n/* harmony export */   logErrors: () => (/* binding */ $d636bc798e7178db$export$bd5c5d8b8dcafd78),\n/* harmony export */   open: () => (/* binding */ $b422b1e013cd6010$export$3ce6949f20cea765),\n/* harmony export */   openSync: () => (/* binding */ $b422b1e013cd6010$export$fa5499edb1ab414a),\n/* harmony export */   registerFormat: () => (/* binding */ $d636bc798e7178db$export$36b2f24e97d43be),\n/* harmony export */   setDefaultLanguage: () => (/* binding */ $d636bc798e7178db$export$5157e7780d44cc36)\n/* harmony export */ });\n/* harmony import */ var restructure__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! restructure */ \"(rsc)/./node_modules/restructure/index.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var _swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @swc/helpers/_/_define_property */ \"(rsc)/./node_modules/@swc/helpers/esm/_define_property.js\");\n/* harmony import */ var _swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @swc/helpers/_/_ts_decorate */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fast-deep-equal */ \"(rsc)/./node_modules/fast-deep-equal/index.js\");\n/* harmony import */ var unicode_properties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! unicode-properties */ \"(rsc)/./node_modules/unicode-properties/dist/module.mjs\");\n/* harmony import */ var unicode_trie__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! unicode-trie */ \"(rsc)/./node_modules/unicode-trie/index.js\");\n/* harmony import */ var dfa__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! dfa */ \"(rsc)/./node_modules/dfa/index.js\");\n/* harmony import */ var clone__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! clone */ \"(rsc)/./node_modules/fontkit/node_modules/clone/clone.js\");\n/* harmony import */ var tiny_inflate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tiny-inflate */ \"(rsc)/./node_modules/tiny-inflate/index.js\");\n/* harmony import */ var brotli_decompress_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! brotli/decompress.js */ \"(rsc)/./node_modules/brotli/decompress.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $d636bc798e7178db$exports = {};\n\n$parcel$export($d636bc798e7178db$exports, \"logErrors\", () => $d636bc798e7178db$export$bd5c5d8b8dcafd78);\n$parcel$export($d636bc798e7178db$exports, \"registerFormat\", () => $d636bc798e7178db$export$36b2f24e97d43be);\n$parcel$export($d636bc798e7178db$exports, \"create\", () => $d636bc798e7178db$export$185802fd694ee1f5);\n$parcel$export($d636bc798e7178db$exports, \"defaultLanguage\", () => $d636bc798e7178db$export$42940898df819940);\n$parcel$export($d636bc798e7178db$exports, \"setDefaultLanguage\", () => $d636bc798e7178db$export$5157e7780d44cc36);\n\nlet $d636bc798e7178db$export$bd5c5d8b8dcafd78 = false;\nlet $d636bc798e7178db$var$formats = [];\nfunction $d636bc798e7178db$export$36b2f24e97d43be(format) {\n    $d636bc798e7178db$var$formats.push(format);\n}\nfunction $d636bc798e7178db$export$185802fd694ee1f5(buffer, postscriptName) {\n    for(let i = 0; i < $d636bc798e7178db$var$formats.length; i++){\n        let format = $d636bc798e7178db$var$formats[i];\n        if (format.probe(buffer)) {\n            let font = new format(new (0, restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream)(buffer));\n            if (postscriptName) return font.getFont(postscriptName);\n            return font;\n        }\n    }\n    throw new Error('Unknown font format');\n}\nlet $d636bc798e7178db$export$42940898df819940 = 'en';\nfunction $d636bc798e7178db$export$5157e7780d44cc36(lang = 'en') {\n    $d636bc798e7178db$export$42940898df819940 = lang;\n}\n\n\nvar $b422b1e013cd6010$exports = {};\n\n$parcel$export($b422b1e013cd6010$exports, \"openSync\", () => $b422b1e013cd6010$export$fa5499edb1ab414a);\n$parcel$export($b422b1e013cd6010$exports, \"open\", () => $b422b1e013cd6010$export$3ce6949f20cea765);\n\n\nfunction $b422b1e013cd6010$export$fa5499edb1ab414a(filename, postscriptName) {\n    let buffer = (0, fs__WEBPACK_IMPORTED_MODULE_1__).readFileSync(filename);\n    return (0, $d636bc798e7178db$export$185802fd694ee1f5)(buffer, postscriptName);\n}\nasync function $b422b1e013cd6010$export$3ce6949f20cea765(filename, postscriptName, callback) {\n    if (typeof postscriptName === 'function') {\n        callback = postscriptName;\n        postscriptName = null;\n    }\n    let buffer = await (0, fs__WEBPACK_IMPORTED_MODULE_1__).promises.readFile(filename);\n    return (0, $d636bc798e7178db$export$185802fd694ee1f5)(buffer, postscriptName);\n}\n\n\n\n\n\n/**\n * This decorator caches the results of a getter or method such that\n * the results are lazily computed once, and then cached.\n * @private\n */ function $e71565f2ce09cb6b$export$69a3209f1a06c04d(target, key, descriptor) {\n    if (descriptor.get) {\n        let get = descriptor.get;\n        descriptor.get = function() {\n            let value = get.call(this);\n            Object.defineProperty(this, key, {\n                value: value\n            });\n            return value;\n        };\n    } else if (typeof descriptor.value === 'function') {\n        let fn = descriptor.value;\n        return {\n            get () {\n                let cache = new Map;\n                function memoized(...args) {\n                    let key = args.length > 0 ? args[0] : 'value';\n                    if (cache.has(key)) return cache.get(key);\n                    let result = fn.apply(this, args);\n                    cache.set(key, result);\n                    return result;\n                }\n                Object.defineProperty(this, key, {\n                    value: memoized\n                });\n                return memoized;\n            }\n        };\n    }\n}\n\n\n\n\n\nlet $26a62205ad06574e$var$SubHeader = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    firstCode: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    entryCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    idDelta: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    idRangeOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $26a62205ad06574e$var$CmapGroup = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    startCharCode: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    endCharCode: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    glyphID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nlet $26a62205ad06574e$var$UnicodeValueRange = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    startUnicodeValue: restructure__WEBPACK_IMPORTED_MODULE_0__.uint24,\n    additionalCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8\n});\nlet $26a62205ad06574e$var$UVSMapping = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    unicodeValue: restructure__WEBPACK_IMPORTED_MODULE_0__.uint24,\n    glyphID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $26a62205ad06574e$var$DefaultUVS = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($26a62205ad06574e$var$UnicodeValueRange, restructure__WEBPACK_IMPORTED_MODULE_0__.uint32);\nlet $26a62205ad06574e$var$NonDefaultUVS = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($26a62205ad06574e$var$UVSMapping, restructure__WEBPACK_IMPORTED_MODULE_0__.uint32);\nlet $26a62205ad06574e$var$VarSelectorRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    varSelector: restructure__WEBPACK_IMPORTED_MODULE_0__.uint24,\n    defaultUVS: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $26a62205ad06574e$var$DefaultUVS, {\n        type: 'parent'\n    }),\n    nonDefaultUVS: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $26a62205ad06574e$var$NonDefaultUVS, {\n        type: 'parent'\n    })\n});\nlet $26a62205ad06574e$var$CmapSubtable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    0: {\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        codeMap: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, 256)\n    },\n    2: {\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        subHeaderKeys: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 256),\n        subHeaderCount: (t)=>Math.max.apply(Math, t.subHeaderKeys),\n        subHeaders: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($26a62205ad06574e$var$SubHeader, 'subHeaderCount'),\n        glyphIndexArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'subHeaderCount')\n    },\n    4: {\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        segCountX2: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        segCount: (t)=>t.segCountX2 >> 1,\n        searchRange: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        entrySelector: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        rangeShift: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        endCode: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'segCount'),\n        reservedPad: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n        startCode: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'segCount'),\n        idDelta: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, 'segCount'),\n        idRangeOffset: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'segCount'),\n        glyphIndexArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>(t.length - t._currentOffset) / 2)\n    },\n    6: {\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        firstCode: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        entryCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        glyphIndices: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'entryCount')\n    },\n    8: {\n        reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        is32: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, 8192),\n        nGroups: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        groups: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($26a62205ad06574e$var$CmapGroup, 'nGroups')\n    },\n    10: {\n        reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        firstCode: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        entryCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        glyphIndices: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'numChars')\n    },\n    12: {\n        reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        nGroups: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        groups: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($26a62205ad06574e$var$CmapGroup, 'nGroups')\n    },\n    13: {\n        reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        nGroups: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        groups: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($26a62205ad06574e$var$CmapGroup, 'nGroups')\n    },\n    14: {\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        numRecords: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        varSelectors: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($26a62205ad06574e$var$VarSelectorRecord, 'numRecords')\n    }\n});\nlet $26a62205ad06574e$var$CmapEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    platformID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    encodingID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    table: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $26a62205ad06574e$var$CmapSubtable, {\n        type: 'parent',\n        lazy: true\n    })\n});\nvar // character to glyph mapping\n$26a62205ad06574e$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numSubtables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    tables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($26a62205ad06574e$var$CmapEntry, 'numSubtables')\n});\n\n\n\nvar // font header\n$f2612a29f92ac062$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.int32,\n    revision: restructure__WEBPACK_IMPORTED_MODULE_0__.int32,\n    checkSumAdjustment: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    magicNumber: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    unitsPerEm: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    created: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int32, 2),\n    modified: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int32, 2),\n    xMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    macStyle: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, [\n        'bold',\n        'italic',\n        'underline',\n        'outline',\n        'shadow',\n        'condensed',\n        'extended'\n    ]),\n    lowestRecPPEM: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    fontDirectionHint: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    indexToLocFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    glyphDataFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.int16 // 0 for current format\n});\n\n\n\nvar // horizontal header\n$2c179dd593583073$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.int32,\n    ascent: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    descent: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    lineGap: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    advanceWidthMax: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    minLeftSideBearing: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    minRightSideBearing: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xMaxExtent: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    caretSlopeRise: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    caretSlopeRun: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    caretOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, 4),\n    metricDataFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    numberOfMetrics: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16 // Number of advance widths in 'hmtx' table\n});\n\n\n\nlet $bdc9060542264b85$var$HmtxEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    advance: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    bearing: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n});\nvar $bdc9060542264b85$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    metrics: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($bdc9060542264b85$var$HmtxEntry, (t)=>t.parent.hhea.numberOfMetrics),\n    bearings: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, (t)=>t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics)\n});\n\n\n\nvar // maxiumum profile\n$dbf51cb3d3fe409d$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.int32,\n    numGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxPoints: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxContours: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxComponentPoints: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxComponentContours: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxZones: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxTwilightPoints: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxStorage: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxFunctionDefs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxInstructionDefs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxStackElements: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxSizeOfInstructions: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxComponentElements: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxComponentDepth: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16 // Maximum levels of recursion; 1 for simple components\n});\n\n\n\n/**\n * Gets an encoding name from platform, encoding, and language ids.\n * Returned encoding names can be used in iconv-lite to decode text.\n */ function $e449ad78d50845fe$export$badc544e0651b6b1(platformID, encodingID, languageID = 0) {\n    if (platformID === 1 && $e449ad78d50845fe$export$479e671907f486d1[languageID]) return $e449ad78d50845fe$export$479e671907f486d1[languageID];\n    return $e449ad78d50845fe$export$6fef87b7618bdf0b[platformID][encodingID];\n}\nconst $e449ad78d50845fe$var$SINGLE_BYTE_ENCODINGS = new Set([\n    'x-mac-roman',\n    'x-mac-cyrillic',\n    'iso-8859-6',\n    'iso-8859-8'\n]);\nconst $e449ad78d50845fe$var$MAC_ENCODINGS = {\n    'x-mac-croatian': \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc\\u2020\\xb0\\xa2\\xa3\\xa7\\u2022\\xb6\\xdf\\xae\\u0160\\u2122\\xb4\\xa8\\u2260\\u017D\\xd8\\u221E\\xb1\\u2264\\u2265\\u2206\\xb5\\u2202\\u2211\\u220F\\u0161\\u222B\\xaa\\xba\\u03A9\\u017E\\xf8\\xbf\\xa1\\xac\\u221A\\u0192\\u2248\\u0106\\xab\\u010C\\u2026 \\xc0\\xc3\\xd5\\u0152\\u0153\\u0110\\u2014\\u201C\\u201D\\u2018\\u2019\\xf7\\u25CA\\uF8FF\\xa9\\u2044\\u20AC\\u2039\\u203A\\xc6\\xbb\\u2013\\xb7\\u201A\\u201E\\u2030\\xc2\\u0107\\xc1\\u010D\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\u0111\\xd2\\xda\\xdb\\xd9\\u0131\\u02C6\\u02DC\\xaf\\u03C0\\xcb\\u02DA\\xb8\\xca\\xe6\\u02C7\",\n    'x-mac-gaelic': \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc\\u2020\\xb0\\xa2\\xa3\\xa7\\u2022\\xb6\\xdf\\xae\\xa9\\u2122\\xb4\\xa8\\u2260\\xc6\\xd8\\u1E02\\xb1\\u2264\\u2265\\u1E03\\u010A\\u010B\\u1E0A\\u1E0B\\u1E1E\\u1E1F\\u0120\\u0121\\u1E40\\xe6\\xf8\\u1E41\\u1E56\\u1E57\\u027C\\u0192\\u017F\\u1E60\\xab\\xbb\\u2026 \\xc0\\xc3\\xd5\\u0152\\u0153\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\u1E61\\u1E9B\\xff\\u0178\\u1E6A\\u20AC\\u2039\\u203A\\u0176\\u0177\\u1E6B\\xb7\\u1EF2\\u1EF3\\u204A\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\u2663\\xd2\\xda\\xdb\\xd9\\u0131\\xdd\\xfd\\u0174\\u0175\\u1E84\\u1E85\\u1E80\\u1E81\\u1E82\\u1E83\",\n    'x-mac-greek': \"\\xc4\\xb9\\xb2\\xc9\\xb3\\xd6\\xdc\\u0385\\xe0\\xe2\\xe4\\u0384\\xa8\\xe7\\xe9\\xe8\\xea\\xeb\\xa3\\u2122\\xee\\xef\\u2022\\xbd\\u2030\\xf4\\xf6\\xa6\\u20AC\\xf9\\xfb\\xfc\\u2020\\u0393\\u0394\\u0398\\u039B\\u039E\\u03A0\\xdf\\xae\\xa9\\u03A3\\u03AA\\xa7\\u2260\\xb0\\xb7\\u0391\\xb1\\u2264\\u2265\\xa5\\u0392\\u0395\\u0396\\u0397\\u0399\\u039A\\u039C\\u03A6\\u03AB\\u03A8\\u03A9\\u03AC\\u039D\\xac\\u039F\\u03A1\\u2248\\u03A4\\xab\\xbb\\u2026 \\u03A5\\u03A7\\u0386\\u0388\\u0153\\u2013\\u2015\\u201C\\u201D\\u2018\\u2019\\xf7\\u0389\\u038A\\u038C\\u038E\\u03AD\\u03AE\\u03AF\\u03CC\\u038F\\u03CD\\u03B1\\u03B2\\u03C8\\u03B4\\u03B5\\u03C6\\u03B3\\u03B7\\u03B9\\u03BE\\u03BA\\u03BB\\u03BC\\u03BD\\u03BF\\u03C0\\u03CE\\u03C1\\u03C3\\u03C4\\u03B8\\u03C9\\u03C2\\u03C7\\u03C5\\u03B6\\u03CA\\u03CB\\u0390\\u03B0\\xad\",\n    'x-mac-icelandic': \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc\\xdd\\xb0\\xa2\\xa3\\xa7\\u2022\\xb6\\xdf\\xae\\xa9\\u2122\\xb4\\xa8\\u2260\\xc6\\xd8\\u221E\\xb1\\u2264\\u2265\\xa5\\xb5\\u2202\\u2211\\u220F\\u03C0\\u222B\\xaa\\xba\\u03A9\\xe6\\xf8\\xbf\\xa1\\xac\\u221A\\u0192\\u2248\\u2206\\xab\\xbb\\u2026 \\xc0\\xc3\\xd5\\u0152\\u0153\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\xf7\\u25CA\\xff\\u0178\\u2044\\u20AC\\xd0\\xf0\\xde\\xfe\\xfd\\xb7\\u201A\\u201E\\u2030\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\uF8FF\\xd2\\xda\\xdb\\xd9\\u0131\\u02C6\\u02DC\\xaf\\u02D8\\u02D9\\u02DA\\xb8\\u02DD\\u02DB\\u02C7\",\n    'x-mac-inuit': \"\\u1403\\u1404\\u1405\\u1406\\u140A\\u140B\\u1431\\u1432\\u1433\\u1434\\u1438\\u1439\\u1449\\u144E\\u144F\\u1450\\u1451\\u1455\\u1456\\u1466\\u146D\\u146E\\u146F\\u1470\\u1472\\u1473\\u1483\\u148B\\u148C\\u148D\\u148E\\u1490\\u1491\\xb0\\u14A1\\u14A5\\u14A6\\u2022\\xb6\\u14A7\\xae\\xa9\\u2122\\u14A8\\u14AA\\u14AB\\u14BB\\u14C2\\u14C3\\u14C4\\u14C5\\u14C7\\u14C8\\u14D0\\u14EF\\u14F0\\u14F1\\u14F2\\u14F4\\u14F5\\u1505\\u14D5\\u14D6\\u14D7\\u14D8\\u14DA\\u14DB\\u14EA\\u1528\\u1529\\u152A\\u152B\\u152D\\u2026 \\u152E\\u153E\\u1555\\u1556\\u1557\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\u1558\\u1559\\u155A\\u155D\\u1546\\u1547\\u1548\\u1549\\u154B\\u154C\\u1550\\u157F\\u1580\\u1581\\u1582\\u1583\\u1584\\u1585\\u158F\\u1590\\u1591\\u1592\\u1593\\u1594\\u1595\\u1671\\u1672\\u1673\\u1674\\u1675\\u1676\\u1596\\u15A0\\u15A1\\u15A2\\u15A3\\u15A4\\u15A5\\u15A6\\u157C\\u0141\\u0142\",\n    'x-mac-ce': \"\\xc4\\u0100\\u0101\\xc9\\u0104\\xd6\\xdc\\xe1\\u0105\\u010C\\xe4\\u010D\\u0106\\u0107\\xe9\\u0179\\u017A\\u010E\\xed\\u010F\\u0112\\u0113\\u0116\\xf3\\u0117\\xf4\\xf6\\xf5\\xfa\\u011A\\u011B\\xfc\\u2020\\xb0\\u0118\\xa3\\xa7\\u2022\\xb6\\xdf\\xae\\xa9\\u2122\\u0119\\xa8\\u2260\\u0123\\u012E\\u012F\\u012A\\u2264\\u2265\\u012B\\u0136\\u2202\\u2211\\u0142\\u013B\\u013C\\u013D\\u013E\\u0139\\u013A\\u0145\\u0146\\u0143\\xac\\u221A\\u0144\\u0147\\u2206\\xab\\xbb\\u2026 \\u0148\\u0150\\xd5\\u0151\\u014C\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\xf7\\u25CA\\u014D\\u0154\\u0155\\u0158\\u2039\\u203A\\u0159\\u0156\\u0157\\u0160\\u201A\\u201E\\u0161\\u015A\\u015B\\xc1\\u0164\\u0165\\xcd\\u017D\\u017E\\u016A\\xd3\\xd4\\u016B\\u016E\\xda\\u016F\\u0170\\u0171\\u0172\\u0173\\xdd\\xfd\\u0137\\u017B\\u0141\\u017C\\u0122\\u02C7\",\n    'x-mac-romanian': \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc\\u2020\\xb0\\xa2\\xa3\\xa7\\u2022\\xb6\\xdf\\xae\\xa9\\u2122\\xb4\\xa8\\u2260\\u0102\\u0218\\u221E\\xb1\\u2264\\u2265\\xa5\\xb5\\u2202\\u2211\\u220F\\u03C0\\u222B\\xaa\\xba\\u03A9\\u0103\\u0219\\xbf\\xa1\\xac\\u221A\\u0192\\u2248\\u2206\\xab\\xbb\\u2026 \\xc0\\xc3\\xd5\\u0152\\u0153\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\xf7\\u25CA\\xff\\u0178\\u2044\\u20AC\\u2039\\u203A\\u021A\\u021B\\u2021\\xb7\\u201A\\u201E\\u2030\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\uF8FF\\xd2\\xda\\xdb\\xd9\\u0131\\u02C6\\u02DC\\xaf\\u02D8\\u02D9\\u02DA\\xb8\\u02DD\\u02DB\\u02C7\",\n    'x-mac-turkish': \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc\\u2020\\xb0\\xa2\\xa3\\xa7\\u2022\\xb6\\xdf\\xae\\xa9\\u2122\\xb4\\xa8\\u2260\\xc6\\xd8\\u221E\\xb1\\u2264\\u2265\\xa5\\xb5\\u2202\\u2211\\u220F\\u03C0\\u222B\\xaa\\xba\\u03A9\\xe6\\xf8\\xbf\\xa1\\xac\\u221A\\u0192\\u2248\\u2206\\xab\\xbb\\u2026 \\xc0\\xc3\\xd5\\u0152\\u0153\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\xf7\\u25CA\\xff\\u0178\\u011E\\u011F\\u0130\\u0131\\u015E\\u015F\\u2021\\xb7\\u201A\\u201E\\u2030\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\uF8FF\\xd2\\xda\\xdb\\xd9\\uF8A0\\u02C6\\u02DC\\xaf\\u02D8\\u02D9\\u02DA\\xb8\\u02DD\\u02DB\\u02C7\"\n};\nconst $e449ad78d50845fe$var$encodingCache = new Map();\nfunction $e449ad78d50845fe$export$1dceb3c14ed68bee(encoding) {\n    let cached = $e449ad78d50845fe$var$encodingCache.get(encoding);\n    if (cached) return cached;\n    // These encodings aren't supported by TextDecoder.\n    let mapping = $e449ad78d50845fe$var$MAC_ENCODINGS[encoding];\n    if (mapping) {\n        let res = new Map();\n        for(let i = 0; i < mapping.length; i++)res.set(mapping.charCodeAt(i), 0x80 + i);\n        $e449ad78d50845fe$var$encodingCache.set(encoding, res);\n        return res;\n    }\n    // Only single byte encodings can be mapped 1:1.\n    if ($e449ad78d50845fe$var$SINGLE_BYTE_ENCODINGS.has(encoding)) {\n        // TextEncoder only supports utf8, whereas TextDecoder supports legacy encodings.\n        // Use this to create a mapping of code points.\n        let decoder = new TextDecoder(encoding);\n        let mapping = new Uint8Array(0x80);\n        for(let i = 0; i < 0x80; i++)mapping[i] = 0x80 + i;\n        let res = new Map();\n        let s = decoder.decode(mapping);\n        for(let i = 0; i < 0x80; i++)res.set(s.charCodeAt(i), 0x80 + i);\n        $e449ad78d50845fe$var$encodingCache.set(encoding, res);\n        return res;\n    }\n}\nconst $e449ad78d50845fe$export$6fef87b7618bdf0b = [\n    // unicode\n    [\n        'utf-16be',\n        'utf-16be',\n        'utf-16be',\n        'utf-16be',\n        'utf-16be',\n        'utf-16be',\n        'utf-16be'\n    ],\n    // macintosh\n    // Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/\n    // 0\tRoman                 17\tMalayalam\n    // 1\tJapanese\t            18\tSinhalese\n    // 2\tTraditional Chinese\t  19\tBurmese\n    // 3\tKorean\t              20\tKhmer\n    // 4\tArabic\t              21\tThai\n    // 5\tHebrew\t              22\tLaotian\n    // 6\tGreek\t                23\tGeorgian\n    // 7\tRussian\t              24\tArmenian\n    // 8\tRSymbol\t              25\tSimplified Chinese\n    // 9\tDevanagari\t          26\tTibetan\n    // 10\tGurmukhi\t            27\tMongolian\n    // 11\tGujarati\t            28\tGeez\n    // 12\tOriya\t                29\tSlavic\n    // 13\tBengali\t              30\tVietnamese\n    // 14\tTamil\t                31\tSindhi\n    // 15\tTelugu\t              32\t(Uninterpreted)\n    // 16\tKannada\n    [\n        'x-mac-roman',\n        'shift-jis',\n        'big5',\n        'euc-kr',\n        'iso-8859-6',\n        'iso-8859-8',\n        'x-mac-greek',\n        'x-mac-cyrillic',\n        'x-mac-symbol',\n        'x-mac-devanagari',\n        'x-mac-gurmukhi',\n        'x-mac-gujarati',\n        'Oriya',\n        'Bengali',\n        'Tamil',\n        'Telugu',\n        'Kannada',\n        'Malayalam',\n        'Sinhalese',\n        'Burmese',\n        'Khmer',\n        'iso-8859-11',\n        'Laotian',\n        'Georgian',\n        'Armenian',\n        'gbk',\n        'Tibetan',\n        'Mongolian',\n        'Geez',\n        'x-mac-ce',\n        'Vietnamese',\n        'Sindhi'\n    ],\n    // ISO (deprecated)\n    [\n        'ascii',\n        null,\n        'iso-8859-1'\n    ],\n    // windows\n    // Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx\n    [\n        'symbol',\n        'utf-16be',\n        'shift-jis',\n        'gb18030',\n        'big5',\n        'euc-kr',\n        'johab',\n        null,\n        null,\n        null,\n        'utf-16be'\n    ]\n];\nconst $e449ad78d50845fe$export$479e671907f486d1 = {\n    15: 'x-mac-icelandic',\n    17: 'x-mac-turkish',\n    18: 'x-mac-croatian',\n    24: 'x-mac-ce',\n    25: 'x-mac-ce',\n    26: 'x-mac-ce',\n    27: 'x-mac-ce',\n    28: 'x-mac-ce',\n    30: 'x-mac-icelandic',\n    37: 'x-mac-romanian',\n    38: 'x-mac-ce',\n    39: 'x-mac-ce',\n    40: 'x-mac-ce',\n    143: 'x-mac-inuit',\n    146: 'x-mac-gaelic'\n};\nconst $e449ad78d50845fe$export$2092376fd002e13 = [\n    // unicode\n    [],\n    {\n        0: 'en',\n        30: 'fo',\n        60: 'ks',\n        90: 'rw',\n        1: 'fr',\n        31: 'fa',\n        61: 'ku',\n        91: 'rn',\n        2: 'de',\n        32: 'ru',\n        62: 'sd',\n        92: 'ny',\n        3: 'it',\n        33: 'zh',\n        63: 'bo',\n        93: 'mg',\n        4: 'nl',\n        34: 'nl-BE',\n        64: 'ne',\n        94: 'eo',\n        5: 'sv',\n        35: 'ga',\n        65: 'sa',\n        128: 'cy',\n        6: 'es',\n        36: 'sq',\n        66: 'mr',\n        129: 'eu',\n        7: 'da',\n        37: 'ro',\n        67: 'bn',\n        130: 'ca',\n        8: 'pt',\n        38: 'cz',\n        68: 'as',\n        131: 'la',\n        9: 'no',\n        39: 'sk',\n        69: 'gu',\n        132: 'qu',\n        10: 'he',\n        40: 'si',\n        70: 'pa',\n        133: 'gn',\n        11: 'ja',\n        41: 'yi',\n        71: 'or',\n        134: 'ay',\n        12: 'ar',\n        42: 'sr',\n        72: 'ml',\n        135: 'tt',\n        13: 'fi',\n        43: 'mk',\n        73: 'kn',\n        136: 'ug',\n        14: 'el',\n        44: 'bg',\n        74: 'ta',\n        137: 'dz',\n        15: 'is',\n        45: 'uk',\n        75: 'te',\n        138: 'jv',\n        16: 'mt',\n        46: 'be',\n        76: 'si',\n        139: 'su',\n        17: 'tr',\n        47: 'uz',\n        77: 'my',\n        140: 'gl',\n        18: 'hr',\n        48: 'kk',\n        78: 'km',\n        141: 'af',\n        19: 'zh-Hant',\n        49: 'az-Cyrl',\n        79: 'lo',\n        142: 'br',\n        20: 'ur',\n        50: 'az-Arab',\n        80: 'vi',\n        143: 'iu',\n        21: 'hi',\n        51: 'hy',\n        81: 'id',\n        144: 'gd',\n        22: 'th',\n        52: 'ka',\n        82: 'tl',\n        145: 'gv',\n        23: 'ko',\n        53: 'mo',\n        83: 'ms',\n        146: 'ga',\n        24: 'lt',\n        54: 'ky',\n        84: 'ms-Arab',\n        147: 'to',\n        25: 'pl',\n        55: 'tg',\n        85: 'am',\n        148: 'el-polyton',\n        26: 'hu',\n        56: 'tk',\n        86: 'ti',\n        149: 'kl',\n        27: 'es',\n        57: 'mn-CN',\n        87: 'om',\n        150: 'az',\n        28: 'lv',\n        58: 'mn',\n        88: 'so',\n        151: 'nn',\n        29: 'se',\n        59: 'ps',\n        89: 'sw'\n    },\n    // ISO (deprecated)\n    [],\n    {\n        0x0436: 'af',\n        0x4009: 'en-IN',\n        0x0487: 'rw',\n        0x0432: 'tn',\n        0x041C: 'sq',\n        0x1809: 'en-IE',\n        0x0441: 'sw',\n        0x045B: 'si',\n        0x0484: 'gsw',\n        0x2009: 'en-JM',\n        0x0457: 'kok',\n        0x041B: 'sk',\n        0x045E: 'am',\n        0x4409: 'en-MY',\n        0x0412: 'ko',\n        0x0424: 'sl',\n        0x1401: 'ar-DZ',\n        0x1409: 'en-NZ',\n        0x0440: 'ky',\n        0x2C0A: 'es-AR',\n        0x3C01: 'ar-BH',\n        0x3409: 'en-PH',\n        0x0454: 'lo',\n        0x400A: 'es-BO',\n        0x0C01: 'ar',\n        0x4809: 'en-SG',\n        0x0426: 'lv',\n        0x340A: 'es-CL',\n        0x0801: 'ar-IQ',\n        0x1C09: 'en-ZA',\n        0x0427: 'lt',\n        0x240A: 'es-CO',\n        0x2C01: 'ar-JO',\n        0x2C09: 'en-TT',\n        0x082E: 'dsb',\n        0x140A: 'es-CR',\n        0x3401: 'ar-KW',\n        0x0809: 'en-GB',\n        0x046E: 'lb',\n        0x1C0A: 'es-DO',\n        0x3001: 'ar-LB',\n        0x0409: 'en',\n        0x042F: 'mk',\n        0x300A: 'es-EC',\n        0x1001: 'ar-LY',\n        0x3009: 'en-ZW',\n        0x083E: 'ms-BN',\n        0x440A: 'es-SV',\n        0x1801: 'ary',\n        0x0425: 'et',\n        0x043E: 'ms',\n        0x100A: 'es-GT',\n        0x2001: 'ar-OM',\n        0x0438: 'fo',\n        0x044C: 'ml',\n        0x480A: 'es-HN',\n        0x4001: 'ar-QA',\n        0x0464: 'fil',\n        0x043A: 'mt',\n        0x080A: 'es-MX',\n        0x0401: 'ar-SA',\n        0x040B: 'fi',\n        0x0481: 'mi',\n        0x4C0A: 'es-NI',\n        0x2801: 'ar-SY',\n        0x080C: 'fr-BE',\n        0x047A: 'arn',\n        0x180A: 'es-PA',\n        0x1C01: 'aeb',\n        0x0C0C: 'fr-CA',\n        0x044E: 'mr',\n        0x3C0A: 'es-PY',\n        0x3801: 'ar-AE',\n        0x040C: 'fr',\n        0x047C: 'moh',\n        0x280A: 'es-PE',\n        0x2401: 'ar-YE',\n        0x140C: 'fr-LU',\n        0x0450: 'mn',\n        0x500A: 'es-PR',\n        0x042B: 'hy',\n        0x180C: 'fr-MC',\n        0x0850: 'mn-CN',\n        0x0C0A: 'es',\n        0x044D: 'as',\n        0x100C: 'fr-CH',\n        0x0461: 'ne',\n        0x040A: 'es',\n        0x082C: 'az-Cyrl',\n        0x0462: 'fy',\n        0x0414: 'nb',\n        0x540A: 'es-US',\n        0x042C: 'az',\n        0x0456: 'gl',\n        0x0814: 'nn',\n        0x380A: 'es-UY',\n        0x046D: 'ba',\n        0x0437: 'ka',\n        0x0482: 'oc',\n        0x200A: 'es-VE',\n        0x042D: 'eu',\n        0x0C07: 'de-AT',\n        0x0448: 'or',\n        0x081D: 'sv-FI',\n        0x0423: 'be',\n        0x0407: 'de',\n        0x0463: 'ps',\n        0x041D: 'sv',\n        0x0845: 'bn',\n        0x1407: 'de-LI',\n        0x0415: 'pl',\n        0x045A: 'syr',\n        0x0445: 'bn-IN',\n        0x1007: 'de-LU',\n        0x0416: 'pt',\n        0x0428: 'tg',\n        0x201A: 'bs-Cyrl',\n        0x0807: 'de-CH',\n        0x0816: 'pt-PT',\n        0x085F: 'tzm',\n        0x141A: 'bs',\n        0x0408: 'el',\n        0x0446: 'pa',\n        0x0449: 'ta',\n        0x047E: 'br',\n        0x046F: 'kl',\n        0x046B: 'qu-BO',\n        0x0444: 'tt',\n        0x0402: 'bg',\n        0x0447: 'gu',\n        0x086B: 'qu-EC',\n        0x044A: 'te',\n        0x0403: 'ca',\n        0x0468: 'ha',\n        0x0C6B: 'qu',\n        0x041E: 'th',\n        0x0C04: 'zh-HK',\n        0x040D: 'he',\n        0x0418: 'ro',\n        0x0451: 'bo',\n        0x1404: 'zh-MO',\n        0x0439: 'hi',\n        0x0417: 'rm',\n        0x041F: 'tr',\n        0x0804: 'zh',\n        0x040E: 'hu',\n        0x0419: 'ru',\n        0x0442: 'tk',\n        0x1004: 'zh-SG',\n        0x040F: 'is',\n        0x243B: 'smn',\n        0x0480: 'ug',\n        0x0404: 'zh-TW',\n        0x0470: 'ig',\n        0x103B: 'smj-NO',\n        0x0422: 'uk',\n        0x0483: 'co',\n        0x0421: 'id',\n        0x143B: 'smj',\n        0x042E: 'hsb',\n        0x041A: 'hr',\n        0x045D: 'iu',\n        0x0C3B: 'se-FI',\n        0x0420: 'ur',\n        0x101A: 'hr-BA',\n        0x085D: 'iu-Latn',\n        0x043B: 'se',\n        0x0843: 'uz-Cyrl',\n        0x0405: 'cs',\n        0x083C: 'ga',\n        0x083B: 'se-SE',\n        0x0443: 'uz',\n        0x0406: 'da',\n        0x0434: 'xh',\n        0x203B: 'sms',\n        0x042A: 'vi',\n        0x048C: 'prs',\n        0x0435: 'zu',\n        0x183B: 'sma-NO',\n        0x0452: 'cy',\n        0x0465: 'dv',\n        0x0410: 'it',\n        0x1C3B: 'sms',\n        0x0488: 'wo',\n        0x0813: 'nl-BE',\n        0x0810: 'it-CH',\n        0x044F: 'sa',\n        0x0485: 'sah',\n        0x0413: 'nl',\n        0x0411: 'ja',\n        0x1C1A: 'sr-Cyrl-BA',\n        0x0478: 'ii',\n        0x0C09: 'en-AU',\n        0x044B: 'kn',\n        0x0C1A: 'sr',\n        0x046A: 'yo',\n        0x2809: 'en-BZ',\n        0x043F: 'kk',\n        0x181A: 'sr-Latn-BA',\n        0x1009: 'en-CA',\n        0x0453: 'km',\n        0x081A: 'sr-Latn',\n        0x2409: 'en-029',\n        0x0486: 'quc',\n        0x046C: 'nso'\n    }\n];\n\n\nlet $2bcf221753ec8e32$var$NameRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    platformID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    encodingID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    languageID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nameID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    string: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new restructure__WEBPACK_IMPORTED_MODULE_0__.String('length', (t)=>(0, $e449ad78d50845fe$export$badc544e0651b6b1)(t.platformID, t.encodingID, t.languageID)), {\n        type: 'parent',\n        relativeTo: (ctx)=>ctx.parent.stringOffset,\n        allowNull: false\n    })\n});\nlet $2bcf221753ec8e32$var$LangTagRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new restructure__WEBPACK_IMPORTED_MODULE_0__.String('length', 'utf16be'), {\n        type: 'parent',\n        relativeTo: (ctx)=>ctx.stringOffset\n    })\n});\nvar $2bcf221753ec8e32$var$NameTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    0: {\n        count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        stringOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        records: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($2bcf221753ec8e32$var$NameRecord, 'count')\n    },\n    1: {\n        count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        stringOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        records: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($2bcf221753ec8e32$var$NameRecord, 'count'),\n        langTagCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        langTags: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($2bcf221753ec8e32$var$LangTagRecord, 'langTagCount')\n    }\n});\nvar $2bcf221753ec8e32$export$2e2bcd8739ae039 = $2bcf221753ec8e32$var$NameTable;\nconst $2bcf221753ec8e32$var$NAMES = [\n    'copyright',\n    'fontFamily',\n    'fontSubfamily',\n    'uniqueSubfamily',\n    'fullName',\n    'version',\n    'postscriptName',\n    'trademark',\n    'manufacturer',\n    'designer',\n    'description',\n    'vendorURL',\n    'designerURL',\n    'license',\n    'licenseURL',\n    null,\n    'preferredFamily',\n    'preferredSubfamily',\n    'compatibleFull',\n    'sampleText',\n    'postscriptCIDFontName',\n    'wwsFamilyName',\n    'wwsSubfamilyName'\n];\n$2bcf221753ec8e32$var$NameTable.process = function(stream) {\n    var records = {};\n    for (let record of this.records){\n        // find out what language this is for\n        let language = (0, $e449ad78d50845fe$export$2092376fd002e13)[record.platformID][record.languageID];\n        if (language == null && this.langTags != null && record.languageID >= 0x8000) language = this.langTags[record.languageID - 0x8000].tag;\n        if (language == null) language = record.platformID + '-' + record.languageID;\n        // if the nameID is >= 256, it is a font feature record (AAT)\n        let key = record.nameID >= 256 ? 'fontFeatures' : $2bcf221753ec8e32$var$NAMES[record.nameID] || record.nameID;\n        if (records[key] == null) records[key] = {};\n        let obj = records[key];\n        if (record.nameID >= 256) obj = obj[record.nameID] || (obj[record.nameID] = {});\n        if (typeof record.string === 'string' || typeof obj[language] !== 'string') obj[language] = record.string;\n    }\n    this.records = records;\n};\n$2bcf221753ec8e32$var$NameTable.preEncode = function() {\n    if (Array.isArray(this.records)) return;\n    this.version = 0;\n    let records = [];\n    for(let key in this.records){\n        let val = this.records[key];\n        if (key === 'fontFeatures') continue;\n        records.push({\n            platformID: 3,\n            encodingID: 1,\n            languageID: 0x409,\n            nameID: $2bcf221753ec8e32$var$NAMES.indexOf(key),\n            length: val.en.length * 2,\n            string: val.en\n        });\n        if (key === 'postscriptName') records.push({\n            platformID: 1,\n            encodingID: 0,\n            languageID: 0,\n            nameID: $2bcf221753ec8e32$var$NAMES.indexOf(key),\n            length: val.en.length,\n            string: val.en\n        });\n    }\n    this.records = records;\n    this.count = records.length;\n    this.stringOffset = $2bcf221753ec8e32$var$NameTable.size(this, null, false);\n};\n\n\n\nvar $84b272aa31b70606$var$OS2 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    header: {\n        xAvgCharWidth: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        usWeightClass: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        usWidthClass: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        fsType: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, [\n            null,\n            'noEmbedding',\n            'viewOnly',\n            'editable',\n            null,\n            null,\n            null,\n            null,\n            'noSubsetting',\n            'bitmapOnly'\n        ]),\n        ySubscriptXSize: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySubscriptYSize: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySubscriptXOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySubscriptYOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySuperscriptXSize: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySuperscriptYSize: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySuperscriptXOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySuperscriptYOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        yStrikeoutSize: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        yStrikeoutPosition: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        sFamilyClass: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        panose: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, 10),\n        ulCharRange: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, 4),\n        vendorID: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n        fsSelection: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, [\n            'italic',\n            'underscore',\n            'negative',\n            'outlined',\n            'strikeout',\n            'bold',\n            'regular',\n            'useTypoMetrics',\n            'wws',\n            'oblique'\n        ]),\n        usFirstCharIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        usLastCharIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16 // The maximum Unicode index in this font\n    },\n    // The Apple version of this table ends here, but the Microsoft one continues on...\n    0: {},\n    1: {\n        typoAscender: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        typoDescender: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        typoLineGap: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        winAscent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        winDescent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        codePageRange: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, 2)\n    },\n    2: {\n        // these should be common with version 1 somehow\n        typoAscender: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        typoDescender: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        typoLineGap: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        winAscent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        winDescent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        codePageRange: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, 2),\n        xHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        capHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        defaultChar: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        breakChar: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        maxContent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    },\n    5: {\n        typoAscender: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        typoDescender: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        typoLineGap: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        winAscent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        winDescent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        codePageRange: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, 2),\n        xHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        capHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        defaultChar: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        breakChar: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        maxContent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        usLowerOpticalPointSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        usUpperOpticalPointSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    }\n});\nlet $84b272aa31b70606$var$versions = $84b272aa31b70606$var$OS2.versions;\n$84b272aa31b70606$var$versions[3] = $84b272aa31b70606$var$versions[4] = $84b272aa31b70606$var$versions[2];\nvar $84b272aa31b70606$export$2e2bcd8739ae039 = $84b272aa31b70606$var$OS2;\n\n\n\nvar // PostScript information\n$32d9e2eb9565d93c$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32, {\n    header: {\n        italicAngle: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n        underlinePosition: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        underlineThickness: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        isFixedPitch: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        minMemType42: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        maxMemType42: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        minMemType1: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        maxMemType1: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32 // Maximum memory usage when a TrueType font is downloaded as a Type 1 font\n    },\n    1: {},\n    2: {\n        numberOfGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        glyphNameIndex: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'numberOfGlyphs'),\n        names: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.String(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8))\n    },\n    2.5: {\n        numberOfGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, 'numberOfGlyphs')\n    },\n    3: {},\n    4: {\n        map: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, (t)=>t.parent.maxp.numGlyphs)\n    }\n});\n\n\n\nvar // An array of predefined values accessible by instructions\n$5202bd9d9ad8eaac$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    controlValues: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int16)\n});\n\n\n\nvar // A list of instructions that are executed once when a font is first used.\n// These instructions are known as the font program. The main use of this table\n// is for the definition of functions that are used in many different glyph programs.\n$5c0f37ca5ffb1850$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    instructions: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8)\n});\n\n\n\nlet $2b2b260902b1c57e$var$loca = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct('head.indexToLocFormat', {\n    0: {\n        offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)\n    },\n    1: {\n        offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32)\n    }\n});\n$2b2b260902b1c57e$var$loca.process = function() {\n    if (this.version === 0 && !this._processed) {\n        for(let i = 0; i < this.offsets.length; i++)this.offsets[i] <<= 1;\n        this._processed = true;\n    }\n};\n$2b2b260902b1c57e$var$loca.preEncode = function() {\n    if (this.version === 0 && this._processed !== false) {\n        for(let i = 0; i < this.offsets.length; i++)this.offsets[i] >>>= 1;\n        this._processed = false;\n    }\n};\nvar $2b2b260902b1c57e$export$2e2bcd8739ae039 = $2b2b260902b1c57e$var$loca;\n\n\n\nvar // Set of instructions executed whenever the point size or font transformation change\n$7afb878c7bea4f66$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    controlValueProgram: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8)\n});\n\n\n\nvar // only used for encoding\n$6c92b6371bce8bd9$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer);\n\n\n\n\nclass $43e9821ef3717eec$export$2e2bcd8739ae039 {\n    getCFFVersion(ctx) {\n        while(ctx && !ctx.hdrSize)ctx = ctx.parent;\n        return ctx ? ctx.version : -1;\n    }\n    decode(stream, parent) {\n        let version = this.getCFFVersion(parent);\n        let count = version >= 2 ? stream.readUInt32BE() : stream.readUInt16BE();\n        if (count === 0) return [];\n        let offSize = stream.readUInt8();\n        let offsetType;\n        if (offSize === 1) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint8;\n        else if (offSize === 2) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint16;\n        else if (offSize === 3) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint24;\n        else if (offSize === 4) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint32;\n        else throw new Error(`Bad offset size in CFFIndex: ${offSize} ${stream.pos}`);\n        let ret = [];\n        let startPos = stream.pos + (count + 1) * offSize - 1;\n        let start = offsetType.decode(stream);\n        for(let i = 0; i < count; i++){\n            let end = offsetType.decode(stream);\n            if (this.type != null) {\n                let pos = stream.pos;\n                stream.pos = startPos + start;\n                parent.length = end - start;\n                ret.push(this.type.decode(stream, parent));\n                stream.pos = pos;\n            } else ret.push({\n                offset: startPos + start,\n                length: end - start\n            });\n            start = end;\n        }\n        stream.pos = startPos + start;\n        return ret;\n    }\n    size(arr, parent) {\n        let size = 2;\n        if (arr.length === 0) return size;\n        let type = this.type || new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer;\n        // find maximum offset to detminine offset type\n        let offset = 1;\n        for(let i = 0; i < arr.length; i++){\n            let item = arr[i];\n            offset += type.size(item, parent);\n        }\n        let offsetType;\n        if (offset <= 0xff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint8;\n        else if (offset <= 0xffff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint16;\n        else if (offset <= 0xffffff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint24;\n        else if (offset <= 0xffffffff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint32;\n        else throw new Error(\"Bad offset in CFFIndex\");\n        size += 1 + offsetType.size() * (arr.length + 1);\n        size += offset - 1;\n        return size;\n    }\n    encode(stream, arr, parent) {\n        stream.writeUInt16BE(arr.length);\n        if (arr.length === 0) return;\n        let type = this.type || new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer;\n        // find maximum offset to detminine offset type\n        let sizes = [];\n        let offset = 1;\n        for (let item of arr){\n            let s = type.size(item, parent);\n            sizes.push(s);\n            offset += s;\n        }\n        let offsetType;\n        if (offset <= 0xff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint8;\n        else if (offset <= 0xffff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint16;\n        else if (offset <= 0xffffff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint24;\n        else if (offset <= 0xffffffff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint32;\n        else throw new Error(\"Bad offset in CFFIndex\");\n        // write offset size\n        stream.writeUInt8(offsetType.size());\n        // write elements\n        offset = 1;\n        offsetType.encode(stream, offset);\n        for (let size of sizes){\n            offset += size;\n            offsetType.encode(stream, offset);\n        }\n        for (let item of arr)type.encode(stream, item, parent);\n        return;\n    }\n    constructor(type){\n        this.type = type;\n    }\n}\n\n\n\n\n\nconst $c2d28e92708f99da$var$FLOAT_EOF = 0xf;\nconst $c2d28e92708f99da$var$FLOAT_LOOKUP = [\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    '.',\n    'E',\n    'E-',\n    null,\n    '-'\n];\nconst $c2d28e92708f99da$var$FLOAT_ENCODE_LOOKUP = {\n    '.': 10,\n    'E': 11,\n    'E-': 12,\n    '-': 14\n};\nclass $c2d28e92708f99da$export$2e2bcd8739ae039 {\n    static decode(stream, value) {\n        if (32 <= value && value <= 246) return value - 139;\n        if (247 <= value && value <= 250) return (value - 247) * 256 + stream.readUInt8() + 108;\n        if (251 <= value && value <= 254) return -(value - 251) * 256 - stream.readUInt8() - 108;\n        if (value === 28) return stream.readInt16BE();\n        if (value === 29) return stream.readInt32BE();\n        if (value === 30) {\n            let str = '';\n            while(true){\n                let b = stream.readUInt8();\n                let n1 = b >> 4;\n                if (n1 === $c2d28e92708f99da$var$FLOAT_EOF) break;\n                str += $c2d28e92708f99da$var$FLOAT_LOOKUP[n1];\n                let n2 = b & 15;\n                if (n2 === $c2d28e92708f99da$var$FLOAT_EOF) break;\n                str += $c2d28e92708f99da$var$FLOAT_LOOKUP[n2];\n            }\n            return parseFloat(str);\n        }\n        return null;\n    }\n    static size(value) {\n        // if the value needs to be forced to the largest size (32 bit)\n        // e.g. for unknown pointers, set to 32768\n        if (value.forceLarge) value = 32768;\n        if ((value | 0) !== value) {\n            let str = '' + value;\n            return 1 + Math.ceil((str.length + 1) / 2);\n        } else if (-107 <= value && value <= 107) return 1;\n        else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) return 2;\n        else if (-32768 <= value && value <= 32767) return 3;\n        else return 5;\n    }\n    static encode(stream, value) {\n        // if the value needs to be forced to the largest size (32 bit)\n        // e.g. for unknown pointers, save the old value and set to 32768\n        let val = Number(value);\n        if (value.forceLarge) {\n            stream.writeUInt8(29);\n            return stream.writeInt32BE(val);\n        } else if ((val | 0) !== val) {\n            stream.writeUInt8(30);\n            let str = '' + val;\n            for(let i = 0; i < str.length; i += 2){\n                let c1 = str[i];\n                let n1 = $c2d28e92708f99da$var$FLOAT_ENCODE_LOOKUP[c1] || +c1;\n                if (i === str.length - 1) var n2 = $c2d28e92708f99da$var$FLOAT_EOF;\n                else {\n                    let c2 = str[i + 1];\n                    var n2 = $c2d28e92708f99da$var$FLOAT_ENCODE_LOOKUP[c2] || +c2;\n                }\n                stream.writeUInt8(n1 << 4 | n2 & 15);\n            }\n            if (n2 !== $c2d28e92708f99da$var$FLOAT_EOF) return stream.writeUInt8($c2d28e92708f99da$var$FLOAT_EOF << 4);\n        } else if (-107 <= val && val <= 107) return stream.writeUInt8(val + 139);\n        else if (108 <= val && val <= 1131) {\n            val -= 108;\n            stream.writeUInt8((val >> 8) + 247);\n            return stream.writeUInt8(val & 0xff);\n        } else if (-1131 <= val && val <= -108) {\n            val = -val - 108;\n            stream.writeUInt8((val >> 8) + 251);\n            return stream.writeUInt8(val & 0xff);\n        } else if (-32768 <= val && val <= 32767) {\n            stream.writeUInt8(28);\n            return stream.writeInt16BE(val);\n        } else {\n            stream.writeUInt8(29);\n            return stream.writeInt32BE(val);\n        }\n    }\n}\n\n\nclass $61aa549f16d58b9b$export$2e2bcd8739ae039 {\n    decodeOperands(type, stream, ret, operands) {\n        if (Array.isArray(type)) return operands.map((op, i)=>this.decodeOperands(type[i], stream, ret, [\n                op\n            ]));\n        else if (type.decode != null) return type.decode(stream, ret, operands);\n        else switch(type){\n            case 'number':\n            case 'offset':\n            case 'sid':\n                return operands[0];\n            case 'boolean':\n                return !!operands[0];\n            default:\n                return operands;\n        }\n    }\n    encodeOperands(type, stream, ctx, operands) {\n        if (Array.isArray(type)) return operands.map((op, i)=>this.encodeOperands(type[i], stream, ctx, op)[0]);\n        else if (type.encode != null) return type.encode(stream, operands, ctx);\n        else if (typeof operands === 'number') return [\n            operands\n        ];\n        else if (typeof operands === 'boolean') return [\n            +operands\n        ];\n        else if (Array.isArray(operands)) return operands;\n        else return [\n            operands\n        ];\n    }\n    decode(stream, parent) {\n        let end = stream.pos + parent.length;\n        let ret = {};\n        let operands = [];\n        // define hidden properties\n        Object.defineProperties(ret, {\n            parent: {\n                value: parent\n            },\n            _startOffset: {\n                value: stream.pos\n            }\n        });\n        // fill in defaults\n        for(let key in this.fields){\n            let field = this.fields[key];\n            ret[field[1]] = field[3];\n        }\n        while(stream.pos < end){\n            let b = stream.readUInt8();\n            if (b < 28) {\n                if (b === 12) b = b << 8 | stream.readUInt8();\n                let field = this.fields[b];\n                if (!field) throw new Error(`Unknown operator ${b}`);\n                let val = this.decodeOperands(field[2], stream, ret, operands);\n                if (val != null) {\n                    if (val instanceof (0, restructure__WEBPACK_IMPORTED_MODULE_0__.PropertyDescriptor)) Object.defineProperty(ret, field[1], val);\n                    else ret[field[1]] = val;\n                }\n                operands = [];\n            } else operands.push((0, $c2d28e92708f99da$export$2e2bcd8739ae039).decode(stream, b));\n        }\n        return ret;\n    }\n    size(dict, parent, includePointers = true) {\n        let ctx = {\n            parent: parent,\n            val: dict,\n            pointerSize: 0,\n            startOffset: parent.startOffset || 0\n        };\n        let len = 0;\n        for(let k in this.fields){\n            let field = this.fields[k];\n            let val = dict[field[1]];\n            if (val == null || (0, fast_deep_equal__WEBPACK_IMPORTED_MODULE_2__)(val, field[3])) continue;\n            let operands = this.encodeOperands(field[2], null, ctx, val);\n            for (let op of operands)len += (0, $c2d28e92708f99da$export$2e2bcd8739ae039).size(op);\n            let key = Array.isArray(field[0]) ? field[0] : [\n                field[0]\n            ];\n            len += key.length;\n        }\n        if (includePointers) len += ctx.pointerSize;\n        return len;\n    }\n    encode(stream, dict, parent) {\n        let ctx = {\n            pointers: [],\n            startOffset: stream.pos,\n            parent: parent,\n            val: dict,\n            pointerSize: 0\n        };\n        ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);\n        for (let field of this.ops){\n            let val = dict[field[1]];\n            if (val == null || (0, fast_deep_equal__WEBPACK_IMPORTED_MODULE_2__)(val, field[3])) continue;\n            let operands = this.encodeOperands(field[2], stream, ctx, val);\n            for (let op of operands)(0, $c2d28e92708f99da$export$2e2bcd8739ae039).encode(stream, op);\n            let key = Array.isArray(field[0]) ? field[0] : [\n                field[0]\n            ];\n            for (let op of key)stream.writeUInt8(op);\n        }\n        let i = 0;\n        while(i < ctx.pointers.length){\n            let ptr = ctx.pointers[i++];\n            ptr.type.encode(stream, ptr.val, ptr.parent);\n        }\n        return;\n    }\n    constructor(ops = []){\n        this.ops = ops;\n        this.fields = {};\n        for (let field of ops){\n            let key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];\n            this.fields[key] = field;\n        }\n    }\n}\n\n\n\n\nclass $0e34a43d05bde82c$export$2e2bcd8739ae039 extends restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer {\n    decode(stream, parent, operands) {\n        this.offsetType = {\n            decode: ()=>operands[0]\n        };\n        return super.decode(stream, parent, operands);\n    }\n    encode(stream, value, ctx) {\n        if (!stream) {\n            // compute the size (so ctx.pointerSize is correct)\n            this.offsetType = {\n                size: ()=>0\n            };\n            this.size(value, ctx);\n            return [\n                new $0e34a43d05bde82c$var$Ptr(0)\n            ];\n        }\n        let ptr = null;\n        this.offsetType = {\n            encode: (stream, val)=>ptr = val\n        };\n        super.encode(stream, value, ctx);\n        return [\n            new $0e34a43d05bde82c$var$Ptr(ptr)\n        ];\n    }\n    constructor(type, options = {}){\n        if (options.type == null) options.type = 'global';\n        super(null, type, options);\n    }\n}\nclass $0e34a43d05bde82c$var$Ptr {\n    valueOf() {\n        return this.val;\n    }\n    constructor(val){\n        this.val = val;\n        this.forceLarge = true;\n    }\n}\n\n\n\n\n\nclass $6d59db2e29cc77b3$var$CFFBlendOp {\n    static decode(stream, parent, operands) {\n        let numBlends = operands.pop();\n        // TODO: actually blend. For now just consume the deltas\n        // since we don't use any of the values anyway.\n        while(operands.length > numBlends)operands.pop();\n    }\n}\nvar $6d59db2e29cc77b3$export$2e2bcd8739ae039 = new (0, $61aa549f16d58b9b$export$2e2bcd8739ae039)([\n    // key       name                    type                                          default\n    [\n        6,\n        'BlueValues',\n        'delta',\n        null\n    ],\n    [\n        7,\n        'OtherBlues',\n        'delta',\n        null\n    ],\n    [\n        8,\n        'FamilyBlues',\n        'delta',\n        null\n    ],\n    [\n        9,\n        'FamilyOtherBlues',\n        'delta',\n        null\n    ],\n    [\n        [\n            12,\n            9\n        ],\n        'BlueScale',\n        'number',\n        0.039625\n    ],\n    [\n        [\n            12,\n            10\n        ],\n        'BlueShift',\n        'number',\n        7\n    ],\n    [\n        [\n            12,\n            11\n        ],\n        'BlueFuzz',\n        'number',\n        1\n    ],\n    [\n        10,\n        'StdHW',\n        'number',\n        null\n    ],\n    [\n        11,\n        'StdVW',\n        'number',\n        null\n    ],\n    [\n        [\n            12,\n            12\n        ],\n        'StemSnapH',\n        'delta',\n        null\n    ],\n    [\n        [\n            12,\n            13\n        ],\n        'StemSnapV',\n        'delta',\n        null\n    ],\n    [\n        [\n            12,\n            14\n        ],\n        'ForceBold',\n        'boolean',\n        false\n    ],\n    [\n        [\n            12,\n            17\n        ],\n        'LanguageGroup',\n        'number',\n        0\n    ],\n    [\n        [\n            12,\n            18\n        ],\n        'ExpansionFactor',\n        'number',\n        0.06\n    ],\n    [\n        [\n            12,\n            19\n        ],\n        'initialRandomSeed',\n        'number',\n        0\n    ],\n    [\n        20,\n        'defaultWidthX',\n        'number',\n        0\n    ],\n    [\n        21,\n        'nominalWidthX',\n        'number',\n        0\n    ],\n    [\n        22,\n        'vsindex',\n        'number',\n        0\n    ],\n    [\n        23,\n        'blend',\n        $6d59db2e29cc77b3$var$CFFBlendOp,\n        null\n    ],\n    [\n        19,\n        'Subrs',\n        new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)(new (0, $43e9821ef3717eec$export$2e2bcd8739ae039), {\n            type: 'local'\n        }),\n        null\n    ]\n]);\n\n\n// Automatically generated from Appendix A of the CFF specification; do\n// not edit. Length should be 391.\nvar $229224aec43783c5$export$2e2bcd8739ae039 = [\n    \".notdef\",\n    \"space\",\n    \"exclam\",\n    \"quotedbl\",\n    \"numbersign\",\n    \"dollar\",\n    \"percent\",\n    \"ampersand\",\n    \"quoteright\",\n    \"parenleft\",\n    \"parenright\",\n    \"asterisk\",\n    \"plus\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"slash\",\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"colon\",\n    \"semicolon\",\n    \"less\",\n    \"equal\",\n    \"greater\",\n    \"question\",\n    \"at\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"bracketleft\",\n    \"backslash\",\n    \"bracketright\",\n    \"asciicircum\",\n    \"underscore\",\n    \"quoteleft\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"braceleft\",\n    \"bar\",\n    \"braceright\",\n    \"asciitilde\",\n    \"exclamdown\",\n    \"cent\",\n    \"sterling\",\n    \"fraction\",\n    \"yen\",\n    \"florin\",\n    \"section\",\n    \"currency\",\n    \"quotesingle\",\n    \"quotedblleft\",\n    \"guillemotleft\",\n    \"guilsinglleft\",\n    \"guilsinglright\",\n    \"fi\",\n    \"fl\",\n    \"endash\",\n    \"dagger\",\n    \"daggerdbl\",\n    \"periodcentered\",\n    \"paragraph\",\n    \"bullet\",\n    \"quotesinglbase\",\n    \"quotedblbase\",\n    \"quotedblright\",\n    \"guillemotright\",\n    \"ellipsis\",\n    \"perthousand\",\n    \"questiondown\",\n    \"grave\",\n    \"acute\",\n    \"circumflex\",\n    \"tilde\",\n    \"macron\",\n    \"breve\",\n    \"dotaccent\",\n    \"dieresis\",\n    \"ring\",\n    \"cedilla\",\n    \"hungarumlaut\",\n    \"ogonek\",\n    \"caron\",\n    \"emdash\",\n    \"AE\",\n    \"ordfeminine\",\n    \"Lslash\",\n    \"Oslash\",\n    \"OE\",\n    \"ordmasculine\",\n    \"ae\",\n    \"dotlessi\",\n    \"lslash\",\n    \"oslash\",\n    \"oe\",\n    \"germandbls\",\n    \"onesuperior\",\n    \"logicalnot\",\n    \"mu\",\n    \"trademark\",\n    \"Eth\",\n    \"onehalf\",\n    \"plusminus\",\n    \"Thorn\",\n    \"onequarter\",\n    \"divide\",\n    \"brokenbar\",\n    \"degree\",\n    \"thorn\",\n    \"threequarters\",\n    \"twosuperior\",\n    \"registered\",\n    \"minus\",\n    \"eth\",\n    \"multiply\",\n    \"threesuperior\",\n    \"copyright\",\n    \"Aacute\",\n    \"Acircumflex\",\n    \"Adieresis\",\n    \"Agrave\",\n    \"Aring\",\n    \"Atilde\",\n    \"Ccedilla\",\n    \"Eacute\",\n    \"Ecircumflex\",\n    \"Edieresis\",\n    \"Egrave\",\n    \"Iacute\",\n    \"Icircumflex\",\n    \"Idieresis\",\n    \"Igrave\",\n    \"Ntilde\",\n    \"Oacute\",\n    \"Ocircumflex\",\n    \"Odieresis\",\n    \"Ograve\",\n    \"Otilde\",\n    \"Scaron\",\n    \"Uacute\",\n    \"Ucircumflex\",\n    \"Udieresis\",\n    \"Ugrave\",\n    \"Yacute\",\n    \"Ydieresis\",\n    \"Zcaron\",\n    \"aacute\",\n    \"acircumflex\",\n    \"adieresis\",\n    \"agrave\",\n    \"aring\",\n    \"atilde\",\n    \"ccedilla\",\n    \"eacute\",\n    \"ecircumflex\",\n    \"edieresis\",\n    \"egrave\",\n    \"iacute\",\n    \"icircumflex\",\n    \"idieresis\",\n    \"igrave\",\n    \"ntilde\",\n    \"oacute\",\n    \"ocircumflex\",\n    \"odieresis\",\n    \"ograve\",\n    \"otilde\",\n    \"scaron\",\n    \"uacute\",\n    \"ucircumflex\",\n    \"udieresis\",\n    \"ugrave\",\n    \"yacute\",\n    \"ydieresis\",\n    \"zcaron\",\n    \"exclamsmall\",\n    \"Hungarumlautsmall\",\n    \"dollaroldstyle\",\n    \"dollarsuperior\",\n    \"ampersandsmall\",\n    \"Acutesmall\",\n    \"parenleftsuperior\",\n    \"parenrightsuperior\",\n    \"twodotenleader\",\n    \"onedotenleader\",\n    \"zerooldstyle\",\n    \"oneoldstyle\",\n    \"twooldstyle\",\n    \"threeoldstyle\",\n    \"fouroldstyle\",\n    \"fiveoldstyle\",\n    \"sixoldstyle\",\n    \"sevenoldstyle\",\n    \"eightoldstyle\",\n    \"nineoldstyle\",\n    \"commasuperior\",\n    \"threequartersemdash\",\n    \"periodsuperior\",\n    \"questionsmall\",\n    \"asuperior\",\n    \"bsuperior\",\n    \"centsuperior\",\n    \"dsuperior\",\n    \"esuperior\",\n    \"isuperior\",\n    \"lsuperior\",\n    \"msuperior\",\n    \"nsuperior\",\n    \"osuperior\",\n    \"rsuperior\",\n    \"ssuperior\",\n    \"tsuperior\",\n    \"ff\",\n    \"ffi\",\n    \"ffl\",\n    \"parenleftinferior\",\n    \"parenrightinferior\",\n    \"Circumflexsmall\",\n    \"hyphensuperior\",\n    \"Gravesmall\",\n    \"Asmall\",\n    \"Bsmall\",\n    \"Csmall\",\n    \"Dsmall\",\n    \"Esmall\",\n    \"Fsmall\",\n    \"Gsmall\",\n    \"Hsmall\",\n    \"Ismall\",\n    \"Jsmall\",\n    \"Ksmall\",\n    \"Lsmall\",\n    \"Msmall\",\n    \"Nsmall\",\n    \"Osmall\",\n    \"Psmall\",\n    \"Qsmall\",\n    \"Rsmall\",\n    \"Ssmall\",\n    \"Tsmall\",\n    \"Usmall\",\n    \"Vsmall\",\n    \"Wsmall\",\n    \"Xsmall\",\n    \"Ysmall\",\n    \"Zsmall\",\n    \"colonmonetary\",\n    \"onefitted\",\n    \"rupiah\",\n    \"Tildesmall\",\n    \"exclamdownsmall\",\n    \"centoldstyle\",\n    \"Lslashsmall\",\n    \"Scaronsmall\",\n    \"Zcaronsmall\",\n    \"Dieresissmall\",\n    \"Brevesmall\",\n    \"Caronsmall\",\n    \"Dotaccentsmall\",\n    \"Macronsmall\",\n    \"figuredash\",\n    \"hypheninferior\",\n    \"Ogoneksmall\",\n    \"Ringsmall\",\n    \"Cedillasmall\",\n    \"questiondownsmall\",\n    \"oneeighth\",\n    \"threeeighths\",\n    \"fiveeighths\",\n    \"seveneighths\",\n    \"onethird\",\n    \"twothirds\",\n    \"zerosuperior\",\n    \"foursuperior\",\n    \"fivesuperior\",\n    \"sixsuperior\",\n    \"sevensuperior\",\n    \"eightsuperior\",\n    \"ninesuperior\",\n    \"zeroinferior\",\n    \"oneinferior\",\n    \"twoinferior\",\n    \"threeinferior\",\n    \"fourinferior\",\n    \"fiveinferior\",\n    \"sixinferior\",\n    \"seveninferior\",\n    \"eightinferior\",\n    \"nineinferior\",\n    \"centinferior\",\n    \"dollarinferior\",\n    \"periodinferior\",\n    \"commainferior\",\n    \"Agravesmall\",\n    \"Aacutesmall\",\n    \"Acircumflexsmall\",\n    \"Atildesmall\",\n    \"Adieresissmall\",\n    \"Aringsmall\",\n    \"AEsmall\",\n    \"Ccedillasmall\",\n    \"Egravesmall\",\n    \"Eacutesmall\",\n    \"Ecircumflexsmall\",\n    \"Edieresissmall\",\n    \"Igravesmall\",\n    \"Iacutesmall\",\n    \"Icircumflexsmall\",\n    \"Idieresissmall\",\n    \"Ethsmall\",\n    \"Ntildesmall\",\n    \"Ogravesmall\",\n    \"Oacutesmall\",\n    \"Ocircumflexsmall\",\n    \"Otildesmall\",\n    \"Odieresissmall\",\n    \"OEsmall\",\n    \"Oslashsmall\",\n    \"Ugravesmall\",\n    \"Uacutesmall\",\n    \"Ucircumflexsmall\",\n    \"Udieresissmall\",\n    \"Yacutesmall\",\n    \"Thornsmall\",\n    \"Ydieresissmall\",\n    \"001.000\",\n    \"001.001\",\n    \"001.002\",\n    \"001.003\",\n    \"Black\",\n    \"Bold\",\n    \"Book\",\n    \"Light\",\n    \"Medium\",\n    \"Regular\",\n    \"Roman\",\n    \"Semibold\"\n];\n\n\nlet $bc0433d9b7e41f5f$export$dee0027060fa13bd = [\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    'space',\n    'exclam',\n    'quotedbl',\n    'numbersign',\n    'dollar',\n    'percent',\n    'ampersand',\n    'quoteright',\n    'parenleft',\n    'parenright',\n    'asterisk',\n    'plus',\n    'comma',\n    'hyphen',\n    'period',\n    'slash',\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n    'six',\n    'seven',\n    'eight',\n    'nine',\n    'colon',\n    'semicolon',\n    'less',\n    'equal',\n    'greater',\n    'question',\n    'at',\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F',\n    'G',\n    'H',\n    'I',\n    'J',\n    'K',\n    'L',\n    'M',\n    'N',\n    'O',\n    'P',\n    'Q',\n    'R',\n    'S',\n    'T',\n    'U',\n    'V',\n    'W',\n    'X',\n    'Y',\n    'Z',\n    'bracketleft',\n    'backslash',\n    'bracketright',\n    'asciicircum',\n    'underscore',\n    'quoteleft',\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'j',\n    'k',\n    'l',\n    'm',\n    'n',\n    'o',\n    'p',\n    'q',\n    'r',\n    's',\n    't',\n    'u',\n    'v',\n    'w',\n    'x',\n    'y',\n    'z',\n    'braceleft',\n    'bar',\n    'braceright',\n    'asciitilde',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    'exclamdown',\n    'cent',\n    'sterling',\n    'fraction',\n    'yen',\n    'florin',\n    'section',\n    'currency',\n    'quotesingle',\n    'quotedblleft',\n    'guillemotleft',\n    'guilsinglleft',\n    'guilsinglright',\n    'fi',\n    'fl',\n    '',\n    'endash',\n    'dagger',\n    'daggerdbl',\n    'periodcentered',\n    '',\n    'paragraph',\n    'bullet',\n    'quotesinglbase',\n    'quotedblbase',\n    'quotedblright',\n    'guillemotright',\n    'ellipsis',\n    'perthousand',\n    '',\n    'questiondown',\n    '',\n    'grave',\n    'acute',\n    'circumflex',\n    'tilde',\n    'macron',\n    'breve',\n    'dotaccent',\n    'dieresis',\n    '',\n    'ring',\n    'cedilla',\n    '',\n    'hungarumlaut',\n    'ogonek',\n    'caron',\n    'emdash',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    'AE',\n    '',\n    'ordfeminine',\n    '',\n    '',\n    '',\n    '',\n    'Lslash',\n    'Oslash',\n    'OE',\n    'ordmasculine',\n    '',\n    '',\n    '',\n    '',\n    '',\n    'ae',\n    '',\n    '',\n    '',\n    'dotlessi',\n    '',\n    '',\n    'lslash',\n    'oslash',\n    'oe',\n    'germandbls'\n];\nlet $bc0433d9b7e41f5f$export$4f58f497e14a53c3 = [\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    'space',\n    'exclamsmall',\n    'Hungarumlautsmall',\n    '',\n    'dollaroldstyle',\n    'dollarsuperior',\n    'ampersandsmall',\n    'Acutesmall',\n    'parenleftsuperior',\n    'parenrightsuperior',\n    'twodotenleader',\n    'onedotenleader',\n    'comma',\n    'hyphen',\n    'period',\n    'fraction',\n    'zerooldstyle',\n    'oneoldstyle',\n    'twooldstyle',\n    'threeoldstyle',\n    'fouroldstyle',\n    'fiveoldstyle',\n    'sixoldstyle',\n    'sevenoldstyle',\n    'eightoldstyle',\n    'nineoldstyle',\n    'colon',\n    'semicolon',\n    'commasuperior',\n    'threequartersemdash',\n    'periodsuperior',\n    'questionsmall',\n    '',\n    'asuperior',\n    'bsuperior',\n    'centsuperior',\n    'dsuperior',\n    'esuperior',\n    '',\n    '',\n    'isuperior',\n    '',\n    '',\n    'lsuperior',\n    'msuperior',\n    'nsuperior',\n    'osuperior',\n    '',\n    '',\n    'rsuperior',\n    'ssuperior',\n    'tsuperior',\n    '',\n    'ff',\n    'fi',\n    'fl',\n    'ffi',\n    'ffl',\n    'parenleftinferior',\n    '',\n    'parenrightinferior',\n    'Circumflexsmall',\n    'hyphensuperior',\n    'Gravesmall',\n    'Asmall',\n    'Bsmall',\n    'Csmall',\n    'Dsmall',\n    'Esmall',\n    'Fsmall',\n    'Gsmall',\n    'Hsmall',\n    'Ismall',\n    'Jsmall',\n    'Ksmall',\n    'Lsmall',\n    'Msmall',\n    'Nsmall',\n    'Osmall',\n    'Psmall',\n    'Qsmall',\n    'Rsmall',\n    'Ssmall',\n    'Tsmall',\n    'Usmall',\n    'Vsmall',\n    'Wsmall',\n    'Xsmall',\n    'Ysmall',\n    'Zsmall',\n    'colonmonetary',\n    'onefitted',\n    'rupiah',\n    'Tildesmall',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    'exclamdownsmall',\n    'centoldstyle',\n    'Lslashsmall',\n    '',\n    '',\n    'Scaronsmall',\n    'Zcaronsmall',\n    'Dieresissmall',\n    'Brevesmall',\n    'Caronsmall',\n    '',\n    'Dotaccentsmall',\n    '',\n    '',\n    'Macronsmall',\n    '',\n    '',\n    'figuredash',\n    'hypheninferior',\n    '',\n    '',\n    'Ogoneksmall',\n    'Ringsmall',\n    'Cedillasmall',\n    '',\n    '',\n    '',\n    'onequarter',\n    'onehalf',\n    'threequarters',\n    'questiondownsmall',\n    'oneeighth',\n    'threeeighths',\n    'fiveeighths',\n    'seveneighths',\n    'onethird',\n    'twothirds',\n    '',\n    '',\n    'zerosuperior',\n    'onesuperior',\n    'twosuperior',\n    'threesuperior',\n    'foursuperior',\n    'fivesuperior',\n    'sixsuperior',\n    'sevensuperior',\n    'eightsuperior',\n    'ninesuperior',\n    'zeroinferior',\n    'oneinferior',\n    'twoinferior',\n    'threeinferior',\n    'fourinferior',\n    'fiveinferior',\n    'sixinferior',\n    'seveninferior',\n    'eightinferior',\n    'nineinferior',\n    'centinferior',\n    'dollarinferior',\n    'periodinferior',\n    'commainferior',\n    'Agravesmall',\n    'Aacutesmall',\n    'Acircumflexsmall',\n    'Atildesmall',\n    'Adieresissmall',\n    'Aringsmall',\n    'AEsmall',\n    'Ccedillasmall',\n    'Egravesmall',\n    'Eacutesmall',\n    'Ecircumflexsmall',\n    'Edieresissmall',\n    'Igravesmall',\n    'Iacutesmall',\n    'Icircumflexsmall',\n    'Idieresissmall',\n    'Ethsmall',\n    'Ntildesmall',\n    'Ogravesmall',\n    'Oacutesmall',\n    'Ocircumflexsmall',\n    'Otildesmall',\n    'Odieresissmall',\n    'OEsmall',\n    'Oslashsmall',\n    'Ugravesmall',\n    'Uacutesmall',\n    'Ucircumflexsmall',\n    'Udieresissmall',\n    'Yacutesmall',\n    'Thornsmall',\n    'Ydieresissmall'\n];\n\n\nlet $ef658f5c9a1488b2$export$c33b50336c234f16 = [\n    '.notdef',\n    'space',\n    'exclam',\n    'quotedbl',\n    'numbersign',\n    'dollar',\n    'percent',\n    'ampersand',\n    'quoteright',\n    'parenleft',\n    'parenright',\n    'asterisk',\n    'plus',\n    'comma',\n    'hyphen',\n    'period',\n    'slash',\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n    'six',\n    'seven',\n    'eight',\n    'nine',\n    'colon',\n    'semicolon',\n    'less',\n    'equal',\n    'greater',\n    'question',\n    'at',\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F',\n    'G',\n    'H',\n    'I',\n    'J',\n    'K',\n    'L',\n    'M',\n    'N',\n    'O',\n    'P',\n    'Q',\n    'R',\n    'S',\n    'T',\n    'U',\n    'V',\n    'W',\n    'X',\n    'Y',\n    'Z',\n    'bracketleft',\n    'backslash',\n    'bracketright',\n    'asciicircum',\n    'underscore',\n    'quoteleft',\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'j',\n    'k',\n    'l',\n    'm',\n    'n',\n    'o',\n    'p',\n    'q',\n    'r',\n    's',\n    't',\n    'u',\n    'v',\n    'w',\n    'x',\n    'y',\n    'z',\n    'braceleft',\n    'bar',\n    'braceright',\n    'asciitilde',\n    'exclamdown',\n    'cent',\n    'sterling',\n    'fraction',\n    'yen',\n    'florin',\n    'section',\n    'currency',\n    'quotesingle',\n    'quotedblleft',\n    'guillemotleft',\n    'guilsinglleft',\n    'guilsinglright',\n    'fi',\n    'fl',\n    'endash',\n    'dagger',\n    'daggerdbl',\n    'periodcentered',\n    'paragraph',\n    'bullet',\n    'quotesinglbase',\n    'quotedblbase',\n    'quotedblright',\n    'guillemotright',\n    'ellipsis',\n    'perthousand',\n    'questiondown',\n    'grave',\n    'acute',\n    'circumflex',\n    'tilde',\n    'macron',\n    'breve',\n    'dotaccent',\n    'dieresis',\n    'ring',\n    'cedilla',\n    'hungarumlaut',\n    'ogonek',\n    'caron',\n    'emdash',\n    'AE',\n    'ordfeminine',\n    'Lslash',\n    'Oslash',\n    'OE',\n    'ordmasculine',\n    'ae',\n    'dotlessi',\n    'lslash',\n    'oslash',\n    'oe',\n    'germandbls',\n    'onesuperior',\n    'logicalnot',\n    'mu',\n    'trademark',\n    'Eth',\n    'onehalf',\n    'plusminus',\n    'Thorn',\n    'onequarter',\n    'divide',\n    'brokenbar',\n    'degree',\n    'thorn',\n    'threequarters',\n    'twosuperior',\n    'registered',\n    'minus',\n    'eth',\n    'multiply',\n    'threesuperior',\n    'copyright',\n    'Aacute',\n    'Acircumflex',\n    'Adieresis',\n    'Agrave',\n    'Aring',\n    'Atilde',\n    'Ccedilla',\n    'Eacute',\n    'Ecircumflex',\n    'Edieresis',\n    'Egrave',\n    'Iacute',\n    'Icircumflex',\n    'Idieresis',\n    'Igrave',\n    'Ntilde',\n    'Oacute',\n    'Ocircumflex',\n    'Odieresis',\n    'Ograve',\n    'Otilde',\n    'Scaron',\n    'Uacute',\n    'Ucircumflex',\n    'Udieresis',\n    'Ugrave',\n    'Yacute',\n    'Ydieresis',\n    'Zcaron',\n    'aacute',\n    'acircumflex',\n    'adieresis',\n    'agrave',\n    'aring',\n    'atilde',\n    'ccedilla',\n    'eacute',\n    'ecircumflex',\n    'edieresis',\n    'egrave',\n    'iacute',\n    'icircumflex',\n    'idieresis',\n    'igrave',\n    'ntilde',\n    'oacute',\n    'ocircumflex',\n    'odieresis',\n    'ograve',\n    'otilde',\n    'scaron',\n    'uacute',\n    'ucircumflex',\n    'udieresis',\n    'ugrave',\n    'yacute',\n    'ydieresis',\n    'zcaron'\n];\nlet $ef658f5c9a1488b2$export$3ed0f9e1fee8d489 = [\n    '.notdef',\n    'space',\n    'exclamsmall',\n    'Hungarumlautsmall',\n    'dollaroldstyle',\n    'dollarsuperior',\n    'ampersandsmall',\n    'Acutesmall',\n    'parenleftsuperior',\n    'parenrightsuperior',\n    'twodotenleader',\n    'onedotenleader',\n    'comma',\n    'hyphen',\n    'period',\n    'fraction',\n    'zerooldstyle',\n    'oneoldstyle',\n    'twooldstyle',\n    'threeoldstyle',\n    'fouroldstyle',\n    'fiveoldstyle',\n    'sixoldstyle',\n    'sevenoldstyle',\n    'eightoldstyle',\n    'nineoldstyle',\n    'colon',\n    'semicolon',\n    'commasuperior',\n    'threequartersemdash',\n    'periodsuperior',\n    'questionsmall',\n    'asuperior',\n    'bsuperior',\n    'centsuperior',\n    'dsuperior',\n    'esuperior',\n    'isuperior',\n    'lsuperior',\n    'msuperior',\n    'nsuperior',\n    'osuperior',\n    'rsuperior',\n    'ssuperior',\n    'tsuperior',\n    'ff',\n    'fi',\n    'fl',\n    'ffi',\n    'ffl',\n    'parenleftinferior',\n    'parenrightinferior',\n    'Circumflexsmall',\n    'hyphensuperior',\n    'Gravesmall',\n    'Asmall',\n    'Bsmall',\n    'Csmall',\n    'Dsmall',\n    'Esmall',\n    'Fsmall',\n    'Gsmall',\n    'Hsmall',\n    'Ismall',\n    'Jsmall',\n    'Ksmall',\n    'Lsmall',\n    'Msmall',\n    'Nsmall',\n    'Osmall',\n    'Psmall',\n    'Qsmall',\n    'Rsmall',\n    'Ssmall',\n    'Tsmall',\n    'Usmall',\n    'Vsmall',\n    'Wsmall',\n    'Xsmall',\n    'Ysmall',\n    'Zsmall',\n    'colonmonetary',\n    'onefitted',\n    'rupiah',\n    'Tildesmall',\n    'exclamdownsmall',\n    'centoldstyle',\n    'Lslashsmall',\n    'Scaronsmall',\n    'Zcaronsmall',\n    'Dieresissmall',\n    'Brevesmall',\n    'Caronsmall',\n    'Dotaccentsmall',\n    'Macronsmall',\n    'figuredash',\n    'hypheninferior',\n    'Ogoneksmall',\n    'Ringsmall',\n    'Cedillasmall',\n    'onequarter',\n    'onehalf',\n    'threequarters',\n    'questiondownsmall',\n    'oneeighth',\n    'threeeighths',\n    'fiveeighths',\n    'seveneighths',\n    'onethird',\n    'twothirds',\n    'zerosuperior',\n    'onesuperior',\n    'twosuperior',\n    'threesuperior',\n    'foursuperior',\n    'fivesuperior',\n    'sixsuperior',\n    'sevensuperior',\n    'eightsuperior',\n    'ninesuperior',\n    'zeroinferior',\n    'oneinferior',\n    'twoinferior',\n    'threeinferior',\n    'fourinferior',\n    'fiveinferior',\n    'sixinferior',\n    'seveninferior',\n    'eightinferior',\n    'nineinferior',\n    'centinferior',\n    'dollarinferior',\n    'periodinferior',\n    'commainferior',\n    'Agravesmall',\n    'Aacutesmall',\n    'Acircumflexsmall',\n    'Atildesmall',\n    'Adieresissmall',\n    'Aringsmall',\n    'AEsmall',\n    'Ccedillasmall',\n    'Egravesmall',\n    'Eacutesmall',\n    'Ecircumflexsmall',\n    'Edieresissmall',\n    'Igravesmall',\n    'Iacutesmall',\n    'Icircumflexsmall',\n    'Idieresissmall',\n    'Ethsmall',\n    'Ntildesmall',\n    'Ogravesmall',\n    'Oacutesmall',\n    'Ocircumflexsmall',\n    'Otildesmall',\n    'Odieresissmall',\n    'OEsmall',\n    'Oslashsmall',\n    'Ugravesmall',\n    'Uacutesmall',\n    'Ucircumflexsmall',\n    'Udieresissmall',\n    'Yacutesmall',\n    'Thornsmall',\n    'Ydieresissmall'\n];\nlet $ef658f5c9a1488b2$export$dc28be11139d4120 = [\n    '.notdef',\n    'space',\n    'dollaroldstyle',\n    'dollarsuperior',\n    'parenleftsuperior',\n    'parenrightsuperior',\n    'twodotenleader',\n    'onedotenleader',\n    'comma',\n    'hyphen',\n    'period',\n    'fraction',\n    'zerooldstyle',\n    'oneoldstyle',\n    'twooldstyle',\n    'threeoldstyle',\n    'fouroldstyle',\n    'fiveoldstyle',\n    'sixoldstyle',\n    'sevenoldstyle',\n    'eightoldstyle',\n    'nineoldstyle',\n    'colon',\n    'semicolon',\n    'commasuperior',\n    'threequartersemdash',\n    'periodsuperior',\n    'asuperior',\n    'bsuperior',\n    'centsuperior',\n    'dsuperior',\n    'esuperior',\n    'isuperior',\n    'lsuperior',\n    'msuperior',\n    'nsuperior',\n    'osuperior',\n    'rsuperior',\n    'ssuperior',\n    'tsuperior',\n    'ff',\n    'fi',\n    'fl',\n    'ffi',\n    'ffl',\n    'parenleftinferior',\n    'parenrightinferior',\n    'hyphensuperior',\n    'colonmonetary',\n    'onefitted',\n    'rupiah',\n    'centoldstyle',\n    'figuredash',\n    'hypheninferior',\n    'onequarter',\n    'onehalf',\n    'threequarters',\n    'oneeighth',\n    'threeeighths',\n    'fiveeighths',\n    'seveneighths',\n    'onethird',\n    'twothirds',\n    'zerosuperior',\n    'onesuperior',\n    'twosuperior',\n    'threesuperior',\n    'foursuperior',\n    'fivesuperior',\n    'sixsuperior',\n    'sevensuperior',\n    'eightsuperior',\n    'ninesuperior',\n    'zeroinferior',\n    'oneinferior',\n    'twoinferior',\n    'threeinferior',\n    'fourinferior',\n    'fiveinferior',\n    'sixinferior',\n    'seveninferior',\n    'eightinferior',\n    'nineinferior',\n    'centinferior',\n    'dollarinferior',\n    'periodinferior',\n    'commainferior'\n];\n\n\n\n//########################\n// Scripts and Languages #\n//########################\nlet $7cbbe4e24ef3cb75$var$LangSysTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    reqFeatureIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    featureCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    featureIndexes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'featureCount')\n});\nlet $7cbbe4e24ef3cb75$var$LangSysRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    langSys: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$LangSysTable, {\n        type: 'parent'\n    })\n});\nlet $7cbbe4e24ef3cb75$var$Script = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    defaultLangSys: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$LangSysTable),\n    count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    langSysRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7cbbe4e24ef3cb75$var$LangSysRecord, 'count')\n});\nlet $7cbbe4e24ef3cb75$var$ScriptRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    script: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$Script, {\n        type: 'parent'\n    })\n});\nlet $7cbbe4e24ef3cb75$export$3e15fc05ce864229 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7cbbe4e24ef3cb75$var$ScriptRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\n//#######################\n// Features and Lookups #\n//#######################\nlet $7cbbe4e24ef3cb75$var$FeatureParams = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nameID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $7cbbe4e24ef3cb75$export$6e91cf7616333d5 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    featureParams: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$FeatureParams),\n    lookupCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookupListIndexes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'lookupCount')\n});\nlet $7cbbe4e24ef3cb75$var$FeatureRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    feature: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$6e91cf7616333d5, {\n        type: 'parent'\n    })\n});\nlet $7cbbe4e24ef3cb75$export$aa18130def4b6cb4 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7cbbe4e24ef3cb75$var$FeatureRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $7cbbe4e24ef3cb75$var$LookupFlags = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    markAttachmentType: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    flags: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, [\n        'rightToLeft',\n        'ignoreBaseGlyphs',\n        'ignoreLigatures',\n        'ignoreMarks',\n        'useMarkFilteringSet'\n    ])\n});\nfunction $7cbbe4e24ef3cb75$export$df0008c6ff2da22a(SubTable) {\n    let Lookup = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        lookupType: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        flags: $7cbbe4e24ef3cb75$var$LookupFlags,\n        subTableCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        subTables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, SubTable), 'subTableCount'),\n        markFilteringSet: new restructure__WEBPACK_IMPORTED_MODULE_0__.Optional(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.flags.flags.useMarkFilteringSet)\n    });\n    return new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, Lookup), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\n}\n//#################\n// Coverage Table #\n//#################\nlet $7cbbe4e24ef3cb75$var$RangeRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    start: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    end: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    startCoverageIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $7cbbe4e24ef3cb75$export$17608c3f81a6111 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        glyphs: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'glyphCount')\n    },\n    2: {\n        rangeCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        rangeRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7cbbe4e24ef3cb75$var$RangeRecord, 'rangeCount')\n    }\n});\n//#########################\n// Class Definition Table #\n//#########################\nlet $7cbbe4e24ef3cb75$var$ClassRangeRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    start: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    end: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    class: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $7cbbe4e24ef3cb75$export$843d551fbbafef71 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        startGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        classValueArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'glyphCount')\n    },\n    2: {\n        classRangeCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        classRangeRecord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7cbbe4e24ef3cb75$var$ClassRangeRecord, 'classRangeCount')\n    }\n});\nlet $7cbbe4e24ef3cb75$export$8215d14a63d9fb10 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    a: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    b: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    deltaFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\n//#############################################\n// Contextual Substitution/Positioning Tables #\n//#############################################\nlet $7cbbe4e24ef3cb75$var$LookupRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    sequenceIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookupListIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $7cbbe4e24ef3cb75$var$Rule = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookupCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    input: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.glyphCount - 1),\n    lookupRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7cbbe4e24ef3cb75$var$LookupRecord, 'lookupCount')\n});\nlet $7cbbe4e24ef3cb75$var$RuleSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$Rule), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $7cbbe4e24ef3cb75$var$ClassRule = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookupCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    classes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.glyphCount - 1),\n    lookupRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7cbbe4e24ef3cb75$var$LookupRecord, 'lookupCount')\n});\nlet $7cbbe4e24ef3cb75$var$ClassSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$ClassRule), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $7cbbe4e24ef3cb75$export$841858b892ce1f4c = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111),\n        ruleSetCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        ruleSets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$RuleSet), 'ruleSetCount')\n    },\n    2: {\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111),\n        classDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$843d551fbbafef71),\n        classSetCnt: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        classSet: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$ClassSet), 'classSetCnt')\n    },\n    3: {\n        glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        lookupCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        coverages: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111), 'glyphCount'),\n        lookupRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7cbbe4e24ef3cb75$var$LookupRecord, 'lookupCount')\n    }\n});\n//######################################################\n// Chaining Contextual Substitution/Positioning Tables #\n//######################################################\nlet $7cbbe4e24ef3cb75$var$ChainRule = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    backtrackGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    backtrack: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'backtrackGlyphCount'),\n    inputGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    input: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.inputGlyphCount - 1),\n    lookaheadGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookahead: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'lookaheadGlyphCount'),\n    lookupCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookupRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7cbbe4e24ef3cb75$var$LookupRecord, 'lookupCount')\n});\nlet $7cbbe4e24ef3cb75$var$ChainRuleSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$ChainRule), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $7cbbe4e24ef3cb75$export$5e6d09e6861162f6 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111),\n        chainCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        chainRuleSets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$ChainRuleSet), 'chainCount')\n    },\n    2: {\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111),\n        backtrackClassDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$843d551fbbafef71),\n        inputClassDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$843d551fbbafef71),\n        lookaheadClassDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$843d551fbbafef71),\n        chainCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        chainClassSet: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$ChainRuleSet), 'chainCount')\n    },\n    3: {\n        backtrackGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        backtrackCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111), 'backtrackGlyphCount'),\n        inputGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        inputCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111), 'inputGlyphCount'),\n        lookaheadGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        lookaheadCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111), 'lookaheadGlyphCount'),\n        lookupCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        lookupRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7cbbe4e24ef3cb75$var$LookupRecord, 'lookupCount')\n    }\n});\n\n\n\n/*******************\n * Variation Store *\n *******************/ let $1a47b0c45c1c22fe$var$F2DOT14 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Fixed(16, 'BE', 14);\nlet $1a47b0c45c1c22fe$var$RegionAxisCoordinates = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    startCoord: $1a47b0c45c1c22fe$var$F2DOT14,\n    peakCoord: $1a47b0c45c1c22fe$var$F2DOT14,\n    endCoord: $1a47b0c45c1c22fe$var$F2DOT14\n});\nlet $1a47b0c45c1c22fe$var$VariationRegionList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    axisCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    regionCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    variationRegions: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($1a47b0c45c1c22fe$var$RegionAxisCoordinates, 'axisCount'), 'regionCount')\n});\nlet $1a47b0c45c1c22fe$var$DeltaSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    shortDeltas: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, (t)=>t.parent.shortDeltaCount),\n    regionDeltas: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int8, (t)=>t.parent.regionIndexCount - t.parent.shortDeltaCount),\n    deltas: (t)=>t.shortDeltas.concat(t.regionDeltas)\n});\nlet $1a47b0c45c1c22fe$var$ItemVariationData = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    itemCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    shortDeltaCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    regionIndexCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    regionIndexes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'regionIndexCount'),\n    deltaSets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($1a47b0c45c1c22fe$var$DeltaSet, 'itemCount')\n});\nlet $1a47b0c45c1c22fe$export$fe1b122a2710f241 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    variationRegionList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $1a47b0c45c1c22fe$var$VariationRegionList),\n    variationDataCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    itemVariationData: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $1a47b0c45c1c22fe$var$ItemVariationData), 'variationDataCount')\n});\n/**********************\n * Feature Variations *\n **********************/ let $1a47b0c45c1c22fe$var$ConditionTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        axisIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        axisIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        filterRangeMinValue: $1a47b0c45c1c22fe$var$F2DOT14,\n        filterRangeMaxValue: $1a47b0c45c1c22fe$var$F2DOT14\n    }\n});\nlet $1a47b0c45c1c22fe$var$ConditionSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    conditionCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    conditionTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $1a47b0c45c1c22fe$var$ConditionTable), 'conditionCount')\n});\nlet $1a47b0c45c1c22fe$var$FeatureTableSubstitutionRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    featureIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    alternateFeatureTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, (0, $7cbbe4e24ef3cb75$export$6e91cf7616333d5), {\n        type: 'parent'\n    })\n});\nlet $1a47b0c45c1c22fe$var$FeatureTableSubstitution = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    substitutionCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    substitutions: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($1a47b0c45c1c22fe$var$FeatureTableSubstitutionRecord, 'substitutionCount')\n});\nlet $1a47b0c45c1c22fe$var$FeatureVariationRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    conditionSet: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $1a47b0c45c1c22fe$var$ConditionSet, {\n        type: 'parent'\n    }),\n    featureTableSubstitution: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $1a47b0c45c1c22fe$var$FeatureTableSubstitution, {\n        type: 'parent'\n    })\n});\nlet $1a47b0c45c1c22fe$export$441b70b7971dd419 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    majorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    minorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    featureVariationRecordCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    featureVariationRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($1a47b0c45c1c22fe$var$FeatureVariationRecord, 'featureVariationRecordCount')\n});\n\n\n// Checks if an operand is an index of a predefined value,\n// otherwise delegates to the provided type.\nclass $b84fd3dd9d8eddb2$var$PredefinedOp {\n    decode(stream, parent, operands) {\n        if (this.predefinedOps[operands[0]]) return this.predefinedOps[operands[0]];\n        return this.type.decode(stream, parent, operands);\n    }\n    size(value, ctx) {\n        return this.type.size(value, ctx);\n    }\n    encode(stream, value, ctx) {\n        let index = this.predefinedOps.indexOf(value);\n        if (index !== -1) return index;\n        return this.type.encode(stream, value, ctx);\n    }\n    constructor(predefinedOps, type){\n        this.predefinedOps = predefinedOps;\n        this.type = type;\n    }\n}\nclass $b84fd3dd9d8eddb2$var$CFFEncodingVersion extends restructure__WEBPACK_IMPORTED_MODULE_0__.Number {\n    decode(stream) {\n        return restructure__WEBPACK_IMPORTED_MODULE_0__.uint8.decode(stream) & 0x7f;\n    }\n    constructor(){\n        super('UInt8');\n    }\n}\nlet $b84fd3dd9d8eddb2$var$Range1 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    first: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nLeft: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8\n});\nlet $b84fd3dd9d8eddb2$var$Range2 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    first: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nLeft: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $b84fd3dd9d8eddb2$var$CFFCustomEncoding = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(new $b84fd3dd9d8eddb2$var$CFFEncodingVersion(), {\n    0: {\n        nCodes: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        codes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, 'nCodes')\n    },\n    1: {\n        nRanges: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        ranges: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($b84fd3dd9d8eddb2$var$Range1, 'nRanges')\n    }\n});\nlet $b84fd3dd9d8eddb2$var$CFFEncoding = new $b84fd3dd9d8eddb2$var$PredefinedOp([\n    (0, $bc0433d9b7e41f5f$export$dee0027060fa13bd),\n    (0, $bc0433d9b7e41f5f$export$4f58f497e14a53c3)\n], new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$CFFCustomEncoding, {\n    lazy: true\n}));\n// Decodes an array of ranges until the total\n// length is equal to the provided length.\nclass $b84fd3dd9d8eddb2$var$RangeArray extends restructure__WEBPACK_IMPORTED_MODULE_0__.Array {\n    decode(stream, parent) {\n        let length = (0, restructure__WEBPACK_IMPORTED_MODULE_0__.resolveLength)(this.length, stream, parent);\n        let count = 0;\n        let res = [];\n        while(count < length){\n            let range = this.type.decode(stream, parent);\n            range.offset = count;\n            count += range.nLeft + 1;\n            res.push(range);\n        }\n        return res;\n    }\n}\nlet $b84fd3dd9d8eddb2$var$CFFCustomCharset = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, {\n    0: {\n        glyphs: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.parent.CharStrings.length - 1)\n    },\n    1: {\n        ranges: new $b84fd3dd9d8eddb2$var$RangeArray($b84fd3dd9d8eddb2$var$Range1, (t)=>t.parent.CharStrings.length - 1)\n    },\n    2: {\n        ranges: new $b84fd3dd9d8eddb2$var$RangeArray($b84fd3dd9d8eddb2$var$Range2, (t)=>t.parent.CharStrings.length - 1)\n    }\n});\nlet $b84fd3dd9d8eddb2$var$CFFCharset = new $b84fd3dd9d8eddb2$var$PredefinedOp([\n    (0, $ef658f5c9a1488b2$export$c33b50336c234f16),\n    (0, $ef658f5c9a1488b2$export$3ed0f9e1fee8d489),\n    (0, $ef658f5c9a1488b2$export$dc28be11139d4120)\n], new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$CFFCustomCharset, {\n    lazy: true\n}));\nlet $b84fd3dd9d8eddb2$var$FDRange3 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    first: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    fd: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8\n});\nlet $b84fd3dd9d8eddb2$var$FDRange4 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    first: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    fd: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $b84fd3dd9d8eddb2$var$FDSelect = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, {\n    0: {\n        fds: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.parent.CharStrings.length)\n    },\n    3: {\n        nRanges: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        ranges: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($b84fd3dd9d8eddb2$var$FDRange3, 'nRanges'),\n        sentinel: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    },\n    4: {\n        nRanges: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        ranges: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($b84fd3dd9d8eddb2$var$FDRange4, 'nRanges'),\n        sentinel: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n    }\n});\nlet $b84fd3dd9d8eddb2$var$ptr = new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)((0, $6d59db2e29cc77b3$export$2e2bcd8739ae039));\nclass $b84fd3dd9d8eddb2$var$CFFPrivateOp {\n    decode(stream, parent, operands) {\n        parent.length = operands[0];\n        return $b84fd3dd9d8eddb2$var$ptr.decode(stream, parent, [\n            operands[1]\n        ]);\n    }\n    size(dict, ctx) {\n        return [\n            (0, $6d59db2e29cc77b3$export$2e2bcd8739ae039).size(dict, ctx, false),\n            $b84fd3dd9d8eddb2$var$ptr.size(dict, ctx)[0]\n        ];\n    }\n    encode(stream, dict, ctx) {\n        return [\n            (0, $6d59db2e29cc77b3$export$2e2bcd8739ae039).size(dict, ctx, false),\n            $b84fd3dd9d8eddb2$var$ptr.encode(stream, dict, ctx)[0]\n        ];\n    }\n}\nlet $b84fd3dd9d8eddb2$var$FontDict = new (0, $61aa549f16d58b9b$export$2e2bcd8739ae039)([\n    // key       name                   type(s)                                 default\n    [\n        18,\n        'Private',\n        new $b84fd3dd9d8eddb2$var$CFFPrivateOp,\n        null\n    ],\n    [\n        [\n            12,\n            38\n        ],\n        'FontName',\n        'sid',\n        null\n    ],\n    [\n        [\n            12,\n            7\n        ],\n        'FontMatrix',\n        'array',\n        [\n            0.001,\n            0,\n            0,\n            0.001,\n            0,\n            0\n        ]\n    ],\n    [\n        [\n            12,\n            5\n        ],\n        'PaintType',\n        'number',\n        0\n    ]\n]);\nlet $b84fd3dd9d8eddb2$var$CFFTopDict = new (0, $61aa549f16d58b9b$export$2e2bcd8739ae039)([\n    // key       name                   type(s)                                 default\n    [\n        [\n            12,\n            30\n        ],\n        'ROS',\n        [\n            'sid',\n            'sid',\n            'number'\n        ],\n        null\n    ],\n    [\n        0,\n        'version',\n        'sid',\n        null\n    ],\n    [\n        1,\n        'Notice',\n        'sid',\n        null\n    ],\n    [\n        [\n            12,\n            0\n        ],\n        'Copyright',\n        'sid',\n        null\n    ],\n    [\n        2,\n        'FullName',\n        'sid',\n        null\n    ],\n    [\n        3,\n        'FamilyName',\n        'sid',\n        null\n    ],\n    [\n        4,\n        'Weight',\n        'sid',\n        null\n    ],\n    [\n        [\n            12,\n            1\n        ],\n        'isFixedPitch',\n        'boolean',\n        false\n    ],\n    [\n        [\n            12,\n            2\n        ],\n        'ItalicAngle',\n        'number',\n        0\n    ],\n    [\n        [\n            12,\n            3\n        ],\n        'UnderlinePosition',\n        'number',\n        -100\n    ],\n    [\n        [\n            12,\n            4\n        ],\n        'UnderlineThickness',\n        'number',\n        50\n    ],\n    [\n        [\n            12,\n            5\n        ],\n        'PaintType',\n        'number',\n        0\n    ],\n    [\n        [\n            12,\n            6\n        ],\n        'CharstringType',\n        'number',\n        2\n    ],\n    [\n        [\n            12,\n            7\n        ],\n        'FontMatrix',\n        'array',\n        [\n            0.001,\n            0,\n            0,\n            0.001,\n            0,\n            0\n        ]\n    ],\n    [\n        13,\n        'UniqueID',\n        'number',\n        null\n    ],\n    [\n        5,\n        'FontBBox',\n        'array',\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ],\n    [\n        [\n            12,\n            8\n        ],\n        'StrokeWidth',\n        'number',\n        0\n    ],\n    [\n        14,\n        'XUID',\n        'array',\n        null\n    ],\n    [\n        15,\n        'charset',\n        $b84fd3dd9d8eddb2$var$CFFCharset,\n        (0, $ef658f5c9a1488b2$export$c33b50336c234f16)\n    ],\n    [\n        16,\n        'Encoding',\n        $b84fd3dd9d8eddb2$var$CFFEncoding,\n        (0, $bc0433d9b7e41f5f$export$dee0027060fa13bd)\n    ],\n    [\n        17,\n        'CharStrings',\n        new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)(new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)),\n        null\n    ],\n    [\n        18,\n        'Private',\n        new $b84fd3dd9d8eddb2$var$CFFPrivateOp,\n        null\n    ],\n    [\n        [\n            12,\n            20\n        ],\n        'SyntheticBase',\n        'number',\n        null\n    ],\n    [\n        [\n            12,\n            21\n        ],\n        'PostScript',\n        'sid',\n        null\n    ],\n    [\n        [\n            12,\n            22\n        ],\n        'BaseFontName',\n        'sid',\n        null\n    ],\n    [\n        [\n            12,\n            23\n        ],\n        'BaseFontBlend',\n        'delta',\n        null\n    ],\n    // CID font specific\n    [\n        [\n            12,\n            31\n        ],\n        'CIDFontVersion',\n        'number',\n        0\n    ],\n    [\n        [\n            12,\n            32\n        ],\n        'CIDFontRevision',\n        'number',\n        0\n    ],\n    [\n        [\n            12,\n            33\n        ],\n        'CIDFontType',\n        'number',\n        0\n    ],\n    [\n        [\n            12,\n            34\n        ],\n        'CIDCount',\n        'number',\n        8720\n    ],\n    [\n        [\n            12,\n            35\n        ],\n        'UIDBase',\n        'number',\n        null\n    ],\n    [\n        [\n            12,\n            37\n        ],\n        'FDSelect',\n        new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$FDSelect),\n        null\n    ],\n    [\n        [\n            12,\n            36\n        ],\n        'FDArray',\n        new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)(new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$FontDict)),\n        null\n    ],\n    [\n        [\n            12,\n            38\n        ],\n        'FontName',\n        'sid',\n        null\n    ]\n]);\nlet $b84fd3dd9d8eddb2$var$VariationStore = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    itemVariationStore: (0, $1a47b0c45c1c22fe$export$fe1b122a2710f241)\n});\nlet $b84fd3dd9d8eddb2$var$CFF2TopDict = new (0, $61aa549f16d58b9b$export$2e2bcd8739ae039)([\n    [\n        [\n            12,\n            7\n        ],\n        'FontMatrix',\n        'array',\n        [\n            0.001,\n            0,\n            0,\n            0.001,\n            0,\n            0\n        ]\n    ],\n    [\n        17,\n        'CharStrings',\n        new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)(new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)),\n        null\n    ],\n    [\n        [\n            12,\n            37\n        ],\n        'FDSelect',\n        new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$FDSelect),\n        null\n    ],\n    [\n        [\n            12,\n            36\n        ],\n        'FDArray',\n        new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)(new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$FontDict)),\n        null\n    ],\n    [\n        24,\n        'vstore',\n        new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$VariationStore),\n        null\n    ],\n    [\n        25,\n        'maxstack',\n        'number',\n        193\n    ]\n]);\nlet $b84fd3dd9d8eddb2$var$CFFTop = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.fixed16, {\n    1: {\n        hdrSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        offSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        nameIndex: new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)(new restructure__WEBPACK_IMPORTED_MODULE_0__.String('length')),\n        topDictIndex: new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$CFFTopDict),\n        stringIndex: new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)(new restructure__WEBPACK_IMPORTED_MODULE_0__.String('length')),\n        globalSubrIndex: new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)\n    },\n    2: {\n        hdrSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        topDict: $b84fd3dd9d8eddb2$var$CFF2TopDict,\n        globalSubrIndex: new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)\n    }\n});\nvar $b84fd3dd9d8eddb2$export$2e2bcd8739ae039 = $b84fd3dd9d8eddb2$var$CFFTop;\n\n\n\n\nclass $822ac0d589e4e237$var$CFFFont {\n    static decode(stream) {\n        return new $822ac0d589e4e237$var$CFFFont(stream);\n    }\n    decode() {\n        let start = this.stream.pos;\n        let top = (0, $b84fd3dd9d8eddb2$export$2e2bcd8739ae039).decode(this.stream);\n        for(let key in top){\n            let val = top[key];\n            this[key] = val;\n        }\n        if (this.version < 2) {\n            if (this.topDictIndex.length !== 1) throw new Error(\"Only a single font is allowed in CFF\");\n            this.topDict = this.topDictIndex[0];\n        }\n        this.isCIDFont = this.topDict.ROS != null;\n        return this;\n    }\n    string(sid) {\n        if (this.version >= 2) return null;\n        if (sid < (0, $229224aec43783c5$export$2e2bcd8739ae039).length) return (0, $229224aec43783c5$export$2e2bcd8739ae039)[sid];\n        return this.stringIndex[sid - (0, $229224aec43783c5$export$2e2bcd8739ae039).length];\n    }\n    get postscriptName() {\n        if (this.version < 2) return this.nameIndex[0];\n        return null;\n    }\n    get fullName() {\n        return this.string(this.topDict.FullName);\n    }\n    get familyName() {\n        return this.string(this.topDict.FamilyName);\n    }\n    getCharString(glyph) {\n        this.stream.pos = this.topDict.CharStrings[glyph].offset;\n        return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);\n    }\n    getGlyphName(gid) {\n        // CFF2 glyph names are in the post table.\n        if (this.version >= 2) return null;\n        // CID-keyed fonts don't have glyph names\n        if (this.isCIDFont) return null;\n        let { charset: charset } = this.topDict;\n        if (Array.isArray(charset)) return charset[gid];\n        if (gid === 0) return '.notdef';\n        gid -= 1;\n        switch(charset.version){\n            case 0:\n                return this.string(charset.glyphs[gid]);\n            case 1:\n            case 2:\n                for(let i = 0; i < charset.ranges.length; i++){\n                    let range = charset.ranges[i];\n                    if (range.offset <= gid && gid <= range.offset + range.nLeft) return this.string(range.first + (gid - range.offset));\n                }\n                break;\n        }\n        return null;\n    }\n    fdForGlyph(gid) {\n        if (!this.topDict.FDSelect) return null;\n        switch(this.topDict.FDSelect.version){\n            case 0:\n                return this.topDict.FDSelect.fds[gid];\n            case 3:\n            case 4:\n                let { ranges: ranges } = this.topDict.FDSelect;\n                let low = 0;\n                let high = ranges.length - 1;\n                while(low <= high){\n                    let mid = low + high >> 1;\n                    if (gid < ranges[mid].first) high = mid - 1;\n                    else if (mid < high && gid >= ranges[mid + 1].first) low = mid + 1;\n                    else return ranges[mid].fd;\n                }\n            default:\n                throw new Error(`Unknown FDSelect version: ${this.topDict.FDSelect.version}`);\n        }\n    }\n    privateDictForGlyph(gid) {\n        if (this.topDict.FDSelect) {\n            let fd = this.fdForGlyph(gid);\n            if (this.topDict.FDArray[fd]) return this.topDict.FDArray[fd].Private;\n            return null;\n        }\n        if (this.version < 2) return this.topDict.Private;\n        return this.topDict.FDArray[0].Private;\n    }\n    constructor(stream){\n        this.stream = stream;\n        this.decode();\n    }\n}\nvar $822ac0d589e4e237$export$2e2bcd8739ae039 = $822ac0d589e4e237$var$CFFFont;\n\n\n\nlet $2bbf2bc1ce37cd8f$var$VerticalOrigin = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    glyphIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    vertOriginY: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n});\nvar $2bbf2bc1ce37cd8f$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    majorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    minorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    defaultVertOriginY: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    numVertOriginYMetrics: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    metrics: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($2bbf2bc1ce37cd8f$var$VerticalOrigin, 'numVertOriginYMetrics')\n});\n\n\n\n\nlet $0941618dc22a946d$export$16b227cb15d716a0 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    height: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    width: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    horiBearingX: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    horiBearingY: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    horiAdvance: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    vertBearingX: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    vertBearingY: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    vertAdvance: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8\n});\nlet $0941618dc22a946d$export$62c53e75f69bfe12 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    height: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    width: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    bearingX: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    bearingY: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    advance: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8\n});\nlet $0941618dc22a946d$var$EBDTComponent = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    glyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    xOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    yOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int8\n});\nclass $0941618dc22a946d$var$ByteAligned {\n}\nclass $0941618dc22a946d$var$BitAligned {\n}\nlet $0941618dc22a946d$export$f1f5ddeb20d14f = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct('version', {\n    1: {\n        metrics: $0941618dc22a946d$export$62c53e75f69bfe12,\n        data: $0941618dc22a946d$var$ByteAligned\n    },\n    2: {\n        metrics: $0941618dc22a946d$export$62c53e75f69bfe12,\n        data: $0941618dc22a946d$var$BitAligned\n    },\n    // format 3 is deprecated\n    // format 4 is not supported by Microsoft\n    5: {\n        data: $0941618dc22a946d$var$BitAligned\n    },\n    6: {\n        metrics: $0941618dc22a946d$export$16b227cb15d716a0,\n        data: $0941618dc22a946d$var$ByteAligned\n    },\n    7: {\n        metrics: $0941618dc22a946d$export$16b227cb15d716a0,\n        data: $0941618dc22a946d$var$BitAligned\n    },\n    8: {\n        metrics: $0941618dc22a946d$export$62c53e75f69bfe12,\n        pad: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8),\n        numComponents: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        components: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($0941618dc22a946d$var$EBDTComponent, 'numComponents')\n    },\n    9: {\n        metrics: $0941618dc22a946d$export$16b227cb15d716a0,\n        pad: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8),\n        numComponents: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        components: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($0941618dc22a946d$var$EBDTComponent, 'numComponents')\n    },\n    17: {\n        metrics: $0941618dc22a946d$export$62c53e75f69bfe12,\n        dataLen: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        data: new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer('dataLen')\n    },\n    18: {\n        metrics: $0941618dc22a946d$export$16b227cb15d716a0,\n        dataLen: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        data: new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer('dataLen')\n    },\n    19: {\n        dataLen: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        data: new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer('dataLen')\n    }\n});\n\n\nlet $9911c4c7201c13de$var$SBitLineMetrics = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    ascender: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    descender: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    widthMax: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    caretSlopeNumerator: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    caretSlopeDenominator: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    caretOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    minOriginSB: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    minAdvanceSB: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    maxBeforeBL: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    minAfterBL: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    pad: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.int8, 2)\n});\nlet $9911c4c7201c13de$var$CodeOffsetPair = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    glyphCode: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    offset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $9911c4c7201c13de$var$IndexSubtable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    header: {\n        imageFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        imageDataOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n    },\n    1: {\n        offsetArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, (t)=>t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)\n    },\n    2: {\n        imageSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        bigMetrics: (0, $0941618dc22a946d$export$16b227cb15d716a0)\n    },\n    3: {\n        offsetArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)\n    },\n    4: {\n        numGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        glyphArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($9911c4c7201c13de$var$CodeOffsetPair, (t)=>t.numGlyphs + 1)\n    },\n    5: {\n        imageSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        bigMetrics: (0, $0941618dc22a946d$export$16b227cb15d716a0),\n        numGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        glyphCodeArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'numGlyphs')\n    }\n});\nlet $9911c4c7201c13de$var$IndexSubtableArray = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    firstGlyphIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lastGlyphIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    subtable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $9911c4c7201c13de$var$IndexSubtable)\n});\nlet $9911c4c7201c13de$var$BitmapSizeTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    indexSubTableArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($9911c4c7201c13de$var$IndexSubtableArray, 1), {\n        type: 'parent'\n    }),\n    indexTablesSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    numberOfIndexSubTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    colorRef: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    hori: $9911c4c7201c13de$var$SBitLineMetrics,\n    vert: $9911c4c7201c13de$var$SBitLineMetrics,\n    startGlyphIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    endGlyphIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    ppemX: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    ppemY: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    bitDepth: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    flags: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, [\n        'horizontal',\n        'vertical'\n    ])\n});\nvar $9911c4c7201c13de$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    numSizes: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    sizes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($9911c4c7201c13de$var$BitmapSizeTable, 'numSizes')\n});\n\n\n\nlet $abb847051efd51b1$var$ImageTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    ppem: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    resolution: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    imageOffsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, 'void'), (t)=>t.parent.parent.maxp.numGlyphs + 1)\n});\nvar // This is the Apple sbix table, used by the \"Apple Color Emoji\" font.\n// It includes several image tables with images for each bitmap glyph\n// of several different sizes.\n$abb847051efd51b1$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    flags: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, [\n        'renderOutlines'\n    ]),\n    numImgTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    imageTables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $abb847051efd51b1$var$ImageTable), 'numImgTables')\n});\n\n\n\nlet $eb629188f3dfefdd$var$LayerRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    gid: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    paletteIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16 // Index value to use in the appropriate palette. This value must\n}); // be less than numPaletteEntries in the CPAL table, except for\n// the special case noted below. Each palette entry is 16 bits.\n// A palette index of 0xFFFF is a special case indicating that\n// the text foreground color should be used.\nlet $eb629188f3dfefdd$var$BaseGlyphRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    gid: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    // and is not rendered for color.\n    firstLayerIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    // There will be numLayers consecutive entries for this base glyph.\n    numLayers: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nvar $eb629188f3dfefdd$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numBaseGlyphRecords: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    baseGlyphRecord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($eb629188f3dfefdd$var$BaseGlyphRecord, 'numBaseGlyphRecords')),\n    layerRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($eb629188f3dfefdd$var$LayerRecord, 'numLayerRecords'), {\n        lazy: true\n    }),\n    numLayerRecords: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\n\n\n\nlet $08734b8e7dc64587$var$ColorRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    blue: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    green: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    red: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    alpha: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8\n});\nvar $08734b8e7dc64587$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    header: {\n        numPaletteEntries: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        numPalettes: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        numColorRecords: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        colorRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($08734b8e7dc64587$var$ColorRecord, 'numColorRecords')),\n        colorRecordIndices: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'numPalettes')\n    },\n    0: {},\n    1: {\n        offsetPaletteTypeArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, 'numPalettes')),\n        offsetPaletteLabelArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'numPalettes')),\n        offsetPaletteEntryLabelArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'numPaletteEntries'))\n    }\n});\n\n\n\n\n\nlet $497cef411d884e34$var$BaseCoord = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        coordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16 // X or Y value, in design units\n    },\n    2: {\n        coordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        referenceGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        baseCoordPoint: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16 // Index of contour point on the referenceGlyph\n    },\n    3: {\n        coordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        deviceTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10)) // Device table for X or Y value\n    }\n});\nlet $497cef411d884e34$var$BaseValues = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    defaultIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    baseCoordCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    baseCoords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$BaseCoord), 'baseCoordCount')\n});\nlet $497cef411d884e34$var$FeatMinMaxRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    minCoord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$BaseCoord, {\n        type: 'parent'\n    }),\n    maxCoord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$BaseCoord, {\n        type: 'parent'\n    }) // May be NULL\n});\nlet $497cef411d884e34$var$MinMax = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    minCoord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$BaseCoord),\n    maxCoord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$BaseCoord),\n    featMinMaxCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    featMinMaxRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($497cef411d884e34$var$FeatMinMaxRecord, 'featMinMaxCount') // In alphabetical order\n});\nlet $497cef411d884e34$var$BaseLangSysRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    minMax: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$MinMax, {\n        type: 'parent'\n    })\n});\nlet $497cef411d884e34$var$BaseScript = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    baseValues: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$BaseValues),\n    defaultMinMax: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$MinMax),\n    baseLangSysCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    baseLangSysRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($497cef411d884e34$var$BaseLangSysRecord, 'baseLangSysCount') // in alphabetical order by BaseLangSysTag\n});\nlet $497cef411d884e34$var$BaseScriptRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    script: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$BaseScript, {\n        type: 'parent'\n    })\n});\nlet $497cef411d884e34$var$BaseScriptList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($497cef411d884e34$var$BaseScriptRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\n// Array of 4-byte baseline identification tags-must be in alphabetical order\nlet $497cef411d884e34$var$BaseTagList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $497cef411d884e34$var$Axis = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    baseTagList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$BaseTagList),\n    baseScriptList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$BaseScriptList)\n});\nvar $497cef411d884e34$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, {\n    header: {\n        horizAxis: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$Axis),\n        vertAxis: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$Axis) // May be NULL\n    },\n    0x00010000: {},\n    0x00010001: {\n        itemVariationStore: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, (0, $1a47b0c45c1c22fe$export$fe1b122a2710f241))\n    }\n});\n\n\n\n\n\nlet $cf5f33c63ef209e6$var$AttachPoint = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $cf5f33c63ef209e6$var$AttachList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    attachPoints: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $cf5f33c63ef209e6$var$AttachPoint), 'glyphCount')\n});\nlet $cf5f33c63ef209e6$var$CaretValue = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        coordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n    },\n    2: {\n        caretValuePoint: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    },\n    3: {\n        coordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        deviceTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10))\n    }\n});\nlet $cf5f33c63ef209e6$var$LigGlyph = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $cf5f33c63ef209e6$var$CaretValue), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $cf5f33c63ef209e6$var$LigCaretList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    ligGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    ligGlyphs: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $cf5f33c63ef209e6$var$LigGlyph), 'ligGlyphCount')\n});\nlet $cf5f33c63ef209e6$var$MarkGlyphSetsDef = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    markSetTableFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    markSetCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)), 'markSetCount')\n});\nvar $cf5f33c63ef209e6$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, {\n    header: {\n        glyphClassDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$843d551fbbafef71)),\n        attachList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $cf5f33c63ef209e6$var$AttachList),\n        ligCaretList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $cf5f33c63ef209e6$var$LigCaretList),\n        markAttachClassDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$843d551fbbafef71))\n    },\n    0x00010000: {},\n    0x00010002: {\n        markGlyphSetsDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $cf5f33c63ef209e6$var$MarkGlyphSetsDef)\n    },\n    0x00010003: {\n        markGlyphSetsDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $cf5f33c63ef209e6$var$MarkGlyphSetsDef),\n        itemVariationStore: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, (0, $1a47b0c45c1c22fe$export$fe1b122a2710f241))\n    }\n});\n\n\n\n\n\nlet $47e0e8ef515d9903$var$ValueFormat = new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, [\n    'xPlacement',\n    'yPlacement',\n    'xAdvance',\n    'yAdvance',\n    'xPlaDevice',\n    'yPlaDevice',\n    'xAdvDevice',\n    'yAdvDevice'\n]);\nlet $47e0e8ef515d9903$var$types = {\n    xPlacement: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yPlacement: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xAdvance: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yAdvance: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xPlaDevice: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10), {\n        type: 'global',\n        relativeTo: (ctx)=>ctx.rel\n    }),\n    yPlaDevice: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10), {\n        type: 'global',\n        relativeTo: (ctx)=>ctx.rel\n    }),\n    xAdvDevice: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10), {\n        type: 'global',\n        relativeTo: (ctx)=>ctx.rel\n    }),\n    yAdvDevice: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10), {\n        type: 'global',\n        relativeTo: (ctx)=>ctx.rel\n    })\n};\nclass $47e0e8ef515d9903$var$ValueRecord {\n    buildStruct(parent) {\n        let struct = parent;\n        while(!struct[this.key] && struct.parent)struct = struct.parent;\n        if (!struct[this.key]) return;\n        let fields = {};\n        fields.rel = ()=>struct._startOffset;\n        let format = struct[this.key];\n        for(let key in format)if (format[key]) fields[key] = $47e0e8ef515d9903$var$types[key];\n        return new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct(fields);\n    }\n    size(val, ctx) {\n        return this.buildStruct(ctx).size(val, ctx);\n    }\n    decode(stream, parent) {\n        let res = this.buildStruct(parent).decode(stream, parent);\n        delete res.rel;\n        return res;\n    }\n    constructor(key = 'valueFormat'){\n        this.key = key;\n    }\n}\nlet $47e0e8ef515d9903$var$PairValueRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    secondGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    value1: new $47e0e8ef515d9903$var$ValueRecord('valueFormat1'),\n    value2: new $47e0e8ef515d9903$var$ValueRecord('valueFormat2')\n});\nlet $47e0e8ef515d9903$var$PairSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($47e0e8ef515d9903$var$PairValueRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $47e0e8ef515d9903$var$Class2Record = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    value1: new $47e0e8ef515d9903$var$ValueRecord('valueFormat1'),\n    value2: new $47e0e8ef515d9903$var$ValueRecord('valueFormat2')\n});\nlet $47e0e8ef515d9903$var$Anchor = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        xCoordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        yCoordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n    },\n    2: {\n        xCoordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        yCoordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        anchorPoint: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    },\n    3: {\n        xCoordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        yCoordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        xDeviceTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10)),\n        yDeviceTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10))\n    }\n});\nlet $47e0e8ef515d9903$var$EntryExitRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    entryAnchor: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$Anchor, {\n        type: 'parent'\n    }),\n    exitAnchor: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$Anchor, {\n        type: 'parent'\n    })\n});\nlet $47e0e8ef515d9903$var$MarkRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    class: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    markAnchor: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$Anchor, {\n        type: 'parent'\n    })\n});\nlet $47e0e8ef515d9903$var$MarkArray = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($47e0e8ef515d9903$var$MarkRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $47e0e8ef515d9903$var$BaseRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$Anchor), (t)=>t.parent.classCount);\nlet $47e0e8ef515d9903$var$BaseArray = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($47e0e8ef515d9903$var$BaseRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $47e0e8ef515d9903$var$ComponentRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$Anchor), (t)=>t.parent.parent.classCount);\nlet $47e0e8ef515d9903$var$LigatureAttach = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($47e0e8ef515d9903$var$ComponentRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $47e0e8ef515d9903$var$LigatureArray = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$LigatureAttach), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $47e0e8ef515d9903$export$73a8cfb19cd43a0f = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct('lookupType', {\n    1: new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n        1: {\n            coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n            valueFormat: $47e0e8ef515d9903$var$ValueFormat,\n            value: new $47e0e8ef515d9903$var$ValueRecord()\n        },\n        2: {\n            coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n            valueFormat: $47e0e8ef515d9903$var$ValueFormat,\n            valueCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            values: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new $47e0e8ef515d9903$var$ValueRecord(), 'valueCount')\n        }\n    }),\n    2: new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n        1: {\n            coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n            valueFormat1: $47e0e8ef515d9903$var$ValueFormat,\n            valueFormat2: $47e0e8ef515d9903$var$ValueFormat,\n            pairSetCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            pairSets: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$PairSet), 'pairSetCount')\n        },\n        2: {\n            coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n            valueFormat1: $47e0e8ef515d9903$var$ValueFormat,\n            valueFormat2: $47e0e8ef515d9903$var$ValueFormat,\n            classDef1: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$843d551fbbafef71)),\n            classDef2: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$843d551fbbafef71)),\n            class1Count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            class2Count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            classRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($47e0e8ef515d9903$var$Class2Record, 'class2Count'), 'class1Count')\n        }\n    }),\n    3: {\n        format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        entryExitCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        entryExitRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($47e0e8ef515d9903$var$EntryExitRecord, 'entryExitCount')\n    },\n    4: {\n        format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        markCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        baseCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        classCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        markArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$MarkArray),\n        baseArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$BaseArray)\n    },\n    5: {\n        format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        markCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        ligatureCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        classCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        markArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$MarkArray),\n        ligatureArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$LigatureArray)\n    },\n    6: {\n        format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        mark1Coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        mark2Coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        classCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        mark1Array: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$MarkArray),\n        mark2Array: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$BaseArray)\n    },\n    7: (0, $7cbbe4e24ef3cb75$export$841858b892ce1f4c),\n    8: (0, $7cbbe4e24ef3cb75$export$5e6d09e6861162f6),\n    9: {\n        posFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        lookupType: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        extension: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, null)\n    }\n});\n// Fix circular reference\n$47e0e8ef515d9903$export$73a8cfb19cd43a0f.versions[9].extension.type = $47e0e8ef515d9903$export$73a8cfb19cd43a0f;\nvar $47e0e8ef515d9903$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, {\n    header: {\n        scriptList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$3e15fc05ce864229)),\n        featureList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$aa18130def4b6cb4)),\n        lookupList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new (0, $7cbbe4e24ef3cb75$export$df0008c6ff2da22a)($47e0e8ef515d9903$export$73a8cfb19cd43a0f))\n    },\n    0x00010000: {},\n    0x00010001: {\n        featureVariations: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, (0, $1a47b0c45c1c22fe$export$441b70b7971dd419))\n    }\n});\n\n\n\n\n\nlet $d3f442064af66e06$var$Sequence = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $d3f442064af66e06$var$AlternateSet = $d3f442064af66e06$var$Sequence;\nlet $d3f442064af66e06$var$Ligature = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    glyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    compCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    components: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.compCount - 1)\n});\nlet $d3f442064af66e06$var$LigatureSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $d3f442064af66e06$var$Ligature), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $d3f442064af66e06$var$GSUBLookup = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct('lookupType', {\n    1: new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n        1: {\n            coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n            deltaGlyphID: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n        },\n        2: {\n            coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n            glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            substitute: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'glyphCount')\n        }\n    }),\n    2: {\n        substFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        sequences: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $d3f442064af66e06$var$Sequence), 'count')\n    },\n    3: {\n        substFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        alternateSet: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $d3f442064af66e06$var$AlternateSet), 'count')\n    },\n    4: {\n        substFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        ligatureSets: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $d3f442064af66e06$var$LigatureSet), 'count')\n    },\n    5: (0, $7cbbe4e24ef3cb75$export$841858b892ce1f4c),\n    6: (0, $7cbbe4e24ef3cb75$export$5e6d09e6861162f6),\n    7: {\n        substFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        lookupType: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        extension: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, null)\n    },\n    8: {\n        substFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        backtrackCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)), 'backtrackGlyphCount'),\n        lookaheadGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        lookaheadCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)), 'lookaheadGlyphCount'),\n        glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        substitutes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'glyphCount')\n    }\n});\n// Fix circular reference\n$d3f442064af66e06$var$GSUBLookup.versions[7].extension.type = $d3f442064af66e06$var$GSUBLookup;\nvar $d3f442064af66e06$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, {\n    header: {\n        scriptList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$3e15fc05ce864229)),\n        featureList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$aa18130def4b6cb4)),\n        lookupList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new (0, $7cbbe4e24ef3cb75$export$df0008c6ff2da22a)($d3f442064af66e06$var$GSUBLookup))\n    },\n    0x00010000: {},\n    0x00010001: {\n        featureVariations: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, (0, $1a47b0c45c1c22fe$export$441b70b7971dd419))\n    }\n});\n\n\n\n\n\nlet $71cfb3c4767fbd0c$var$JstfGSUBModList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $71cfb3c4767fbd0c$var$JstfPriority = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    shrinkageEnableGSUB: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n    shrinkageDisableGSUB: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n    shrinkageEnableGPOS: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n    shrinkageDisableGPOS: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n    shrinkageJstfMax: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new (0, $7cbbe4e24ef3cb75$export$df0008c6ff2da22a)((0, $47e0e8ef515d9903$export$73a8cfb19cd43a0f))),\n    extensionEnableGSUB: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n    extensionDisableGSUB: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n    extensionEnableGPOS: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n    extensionDisableGPOS: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n    extensionJstfMax: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new (0, $7cbbe4e24ef3cb75$export$df0008c6ff2da22a)((0, $47e0e8ef515d9903$export$73a8cfb19cd43a0f)))\n});\nlet $71cfb3c4767fbd0c$var$JstfLangSys = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfPriority), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $71cfb3c4767fbd0c$var$JstfLangSysRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    jstfLangSys: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfLangSys)\n});\nlet $71cfb3c4767fbd0c$var$JstfScript = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    extenderGlyphs: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)),\n    defaultLangSys: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfLangSys),\n    langSysCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    langSysRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($71cfb3c4767fbd0c$var$JstfLangSysRecord, 'langSysCount')\n});\nlet $71cfb3c4767fbd0c$var$JstfScriptRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    script: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfScript, {\n        type: 'parent'\n    })\n});\nvar $71cfb3c4767fbd0c$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    scriptCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    scriptList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($71cfb3c4767fbd0c$var$JstfScriptRecord, 'scriptCount')\n});\n\n\n\n\n// TODO: add this to restructure\nclass $d059a6bd2d3b5b63$var$VariableSizeNumber {\n    decode(stream, parent) {\n        switch(this.size(0, parent)){\n            case 1:\n                return stream.readUInt8();\n            case 2:\n                return stream.readUInt16BE();\n            case 3:\n                return stream.readUInt24BE();\n            case 4:\n                return stream.readUInt32BE();\n        }\n    }\n    size(val, parent) {\n        return (0, restructure__WEBPACK_IMPORTED_MODULE_0__.resolveLength)(this._size, null, parent);\n    }\n    constructor(size){\n        this._size = size;\n    }\n}\nlet $d059a6bd2d3b5b63$var$MapDataEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    entry: new $d059a6bd2d3b5b63$var$VariableSizeNumber((t)=>((t.parent.entryFormat & 0x0030) >> 4) + 1),\n    outerIndex: (t)=>t.entry >> (t.parent.entryFormat & 0x000F) + 1,\n    innerIndex: (t)=>t.entry & (1 << (t.parent.entryFormat & 0x000F) + 1) - 1\n});\nlet $d059a6bd2d3b5b63$var$DeltaSetIndexMap = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    entryFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    mapCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    mapData: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($d059a6bd2d3b5b63$var$MapDataEntry, 'mapCount')\n});\nvar $d059a6bd2d3b5b63$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    majorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    minorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    itemVariationStore: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, (0, $1a47b0c45c1c22fe$export$fe1b122a2710f241)),\n    advanceWidthMapping: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $d059a6bd2d3b5b63$var$DeltaSetIndexMap),\n    LSBMapping: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $d059a6bd2d3b5b63$var$DeltaSetIndexMap),\n    RSBMapping: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $d059a6bd2d3b5b63$var$DeltaSetIndexMap)\n});\n\n\n\nlet $dceeca3e1977ce30$var$Signature = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    offset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nlet $dceeca3e1977ce30$var$SignatureBlock = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 2),\n    cbSignature: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    signature: new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer('cbSignature')\n});\nvar $dceeca3e1977ce30$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    ulVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    usNumSigs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    usFlag: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    signatures: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($dceeca3e1977ce30$var$Signature, 'usNumSigs'),\n    signatureBlocks: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($dceeca3e1977ce30$var$SignatureBlock, 'usNumSigs')\n});\n\n\n\nlet $8acd740a9435aad0$var$GaspRange = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    rangeMaxPPEM: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    rangeGaspBehavior: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, [\n        'grayscale',\n        'gridfit',\n        'symmetricSmoothing',\n        'symmetricGridfit' // only in version 1, for ClearType\n    ])\n});\nvar $8acd740a9435aad0$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numRanges: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    gaspRanges: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($8acd740a9435aad0$var$GaspRange, 'numRanges') // Sorted by ppem\n});\n\n\n\nlet $b5f380243c34d6a0$var$DeviceRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    pixelSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    maximumWidth: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    widths: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.parent.parent.maxp.numGlyphs)\n});\nvar // The Horizontal Device Metrics table stores integer advance widths scaled to particular pixel sizes\n$b5f380243c34d6a0$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numRecords: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    sizeDeviceRecord: restructure__WEBPACK_IMPORTED_MODULE_0__.int32,\n    records: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($b5f380243c34d6a0$var$DeviceRecord, 'numRecords')\n});\n\n\n\nlet $ca2df1256966e313$var$KernPair = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    left: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    right: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    value: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n});\nlet $ca2df1256966e313$var$ClassTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    firstGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'nGlyphs'),\n    max: (t)=>t.offsets.length && Math.max.apply(Math, t.offsets)\n});\nlet $ca2df1256966e313$var$Kern2Array = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    off: (t)=>t._startOffset - t.parent.parent._startOffset,\n    len: (t)=>((t.parent.leftTable.max - t.off) / t.parent.rowWidth + 1) * (t.parent.rowWidth / 2),\n    values: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, 'len')\n});\nlet $ca2df1256966e313$var$KernSubtable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct('format', {\n    0: {\n        nPairs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        searchRange: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        entrySelector: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        rangeShift: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        pairs: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($ca2df1256966e313$var$KernPair, 'nPairs')\n    },\n    2: {\n        rowWidth: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        leftTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $ca2df1256966e313$var$ClassTable, {\n            type: 'parent'\n        }),\n        rightTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $ca2df1256966e313$var$ClassTable, {\n            type: 'parent'\n        }),\n        array: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $ca2df1256966e313$var$Kern2Array, {\n            type: 'parent'\n        })\n    },\n    3: {\n        glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        kernValueCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        leftClassCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        rightClassCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        kernValue: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, 'kernValueCount'),\n        leftClass: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, 'glyphCount'),\n        rightClass: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, 'glyphCount'),\n        kernIndex: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.leftClassCount * t.rightClassCount)\n    }\n});\nlet $ca2df1256966e313$var$KernTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct('version', {\n    0: {\n        subVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, [\n            'horizontal',\n            'minimum',\n            'crossStream',\n            'override' // If set to 1 the value in this table replaces the accumulated value\n        ]),\n        subtable: $ca2df1256966e313$var$KernSubtable,\n        padding: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.length - t._currentOffset)\n    },\n    1: {\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, [\n            null,\n            null,\n            null,\n            null,\n            null,\n            'variation',\n            'crossStream',\n            'vertical' // Set if table has vertical kerning values\n        ]),\n        format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        tupleIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        subtable: $ca2df1256966e313$var$KernSubtable,\n        padding: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.length - t._currentOffset)\n    }\n});\nvar $ca2df1256966e313$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    0: {\n        nTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        tables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($ca2df1256966e313$var$KernTable, 'nTables')\n    },\n    1: {\n        reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n        nTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        tables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($ca2df1256966e313$var$KernTable, 'nTables')\n    }\n});\n\n\n\nvar // Linear Threshold table\n// Records the ppem for each glyph at which the scaling becomes linear again,\n// despite instructions effecting the advance width\n$7a9f92b0c46ebe33$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    yPels: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, 'numGlyphs')\n});\n\n\n\nvar // PCL 5 Table\n// NOTE: The PCLT table is strongly discouraged for OpenType fonts with TrueType outlines\n$2b2ccc419d152631$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    fontNumber: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    pitch: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    xHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    style: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    typeFamily: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    capHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    symbolSet: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    typeface: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(16),\n    characterComplement: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(8),\n    fileName: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(6),\n    strokeWeight: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(1),\n    widthType: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(1),\n    serifStyle: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8)\n});\n\n\n\n// VDMX tables contain ascender/descender overrides for certain (usually small)\n// sizes. This is needed in order to match font metrics on Windows.\nlet $ca5b40b9bcda9c9b$var$Ratio = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    bCharSet: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    xRatio: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    yStartRatio: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    yEndRatio: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8 // Ending y-Ratio value\n});\nlet $ca5b40b9bcda9c9b$var$vTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    yPelHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    yMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16 // Minimum value (in pels) for this yPelHeight\n});\nlet $ca5b40b9bcda9c9b$var$VdmxGroup = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    recs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    startsz: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    endsz: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    entries: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($ca5b40b9bcda9c9b$var$vTable, 'recs') // The VDMX records\n});\nvar $ca5b40b9bcda9c9b$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numRecs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numRatios: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    ratioRanges: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($ca5b40b9bcda9c9b$var$Ratio, 'numRatios'),\n    offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'numRatios'),\n    groups: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($ca5b40b9bcda9c9b$var$VdmxGroup, 'numRecs') // The actual VDMX groupings\n});\n\n\n\nvar // Vertical Header Table\n$69530a3c40755af0$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    ascent: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    descent: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    lineGap: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    advanceHeightMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    minTopSideBearing: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    minBottomSideBearing: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMaxExtent: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    caretSlopeRise: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    caretSlopeRun: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    caretOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, 4),\n    metricDataFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    numberOfMetrics: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16 // Number of advance heights in the Vertical Metrics table\n});\n\n\n\nlet $344073dd270f0e62$var$VmtxEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    advance: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    bearing: restructure__WEBPACK_IMPORTED_MODULE_0__.int16 // The top sidebearing of the glyph\n});\nvar // Vertical Metrics Table\n$344073dd270f0e62$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    metrics: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($344073dd270f0e62$var$VmtxEntry, (t)=>t.parent.vhea.numberOfMetrics),\n    bearings: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, (t)=>t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics)\n});\n\n\n\nlet $3793b781918cfced$var$shortFrac = new restructure__WEBPACK_IMPORTED_MODULE_0__.Fixed(16, 'BE', 14);\nlet $3793b781918cfced$var$Correspondence = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    fromCoord: $3793b781918cfced$var$shortFrac,\n    toCoord: $3793b781918cfced$var$shortFrac\n});\nlet $3793b781918cfced$var$Segment = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    pairCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    correspondence: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($3793b781918cfced$var$Correspondence, 'pairCount')\n});\nvar $3793b781918cfced$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    axisCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    segment: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($3793b781918cfced$var$Segment, 'axisCount')\n});\n\n\n\n\nclass $6cb7dd5f47d82580$var$UnboundedArrayAccessor {\n    getItem(index) {\n        if (this._items[index] == null) {\n            let pos = this.stream.pos;\n            this.stream.pos = this.base + this.type.size(null, this.parent) * index;\n            this._items[index] = this.type.decode(this.stream, this.parent);\n            this.stream.pos = pos;\n        }\n        return this._items[index];\n    }\n    inspect() {\n        return `[UnboundedArray ${this.type.constructor.name}]`;\n    }\n    constructor(type, stream, parent){\n        this.type = type;\n        this.stream = stream;\n        this.parent = parent;\n        this.base = this.stream.pos;\n        this._items = [];\n    }\n}\nclass $6cb7dd5f47d82580$export$c5af1eebc882e39a extends restructure__WEBPACK_IMPORTED_MODULE_0__.Array {\n    decode(stream, parent) {\n        return new $6cb7dd5f47d82580$var$UnboundedArrayAccessor(this.type, stream, parent);\n    }\n    constructor(type){\n        super(type, 0);\n    }\n}\nlet $6cb7dd5f47d82580$export$8351f8c2ae2f103c = function(ValueType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint16) {\n    // Helper class that makes internal structures invisible to pointers\n    class Shadow {\n        decode(stream, ctx) {\n            ctx = ctx.parent.parent;\n            return this.type.decode(stream, ctx);\n        }\n        size(val, ctx) {\n            ctx = ctx.parent.parent;\n            return this.type.size(val, ctx);\n        }\n        encode(stream, val, ctx) {\n            ctx = ctx.parent.parent;\n            return this.type.encode(stream, val, ctx);\n        }\n        constructor(type){\n            this.type = type;\n        }\n    }\n    ValueType = new Shadow(ValueType);\n    let BinarySearchHeader = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        unitSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        nUnits: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        searchRange: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        entrySelector: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        rangeShift: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    });\n    let LookupSegmentSingle = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        lastGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        firstGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        value: ValueType\n    });\n    let LookupSegmentArray = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        lastGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        firstGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        values: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(ValueType, (t)=>t.lastGlyph - t.firstGlyph + 1), {\n            type: 'parent'\n        })\n    });\n    let LookupSingle = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        glyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        value: ValueType\n    });\n    return new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n        0: {\n            values: new $6cb7dd5f47d82580$export$c5af1eebc882e39a(ValueType) // length == number of glyphs maybe?\n        },\n        2: {\n            binarySearchHeader: BinarySearchHeader,\n            segments: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(LookupSegmentSingle, (t)=>t.binarySearchHeader.nUnits)\n        },\n        4: {\n            binarySearchHeader: BinarySearchHeader,\n            segments: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(LookupSegmentArray, (t)=>t.binarySearchHeader.nUnits)\n        },\n        6: {\n            binarySearchHeader: BinarySearchHeader,\n            segments: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(LookupSingle, (t)=>t.binarySearchHeader.nUnits)\n        },\n        8: {\n            firstGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            values: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(ValueType, 'count')\n        }\n    });\n};\nfunction $6cb7dd5f47d82580$export$79f7d93d790934ba(entryData = {}, lookupType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint16) {\n    let entry = Object.assign({\n        newState: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    }, entryData);\n    let Entry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct(entry);\n    let StateArray = new $6cb7dd5f47d82580$export$c5af1eebc882e39a(new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.nClasses));\n    let StateHeader = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        nClasses: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        classTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new $6cb7dd5f47d82580$export$8351f8c2ae2f103c(lookupType)),\n        stateArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, StateArray),\n        entryTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new $6cb7dd5f47d82580$export$c5af1eebc882e39a(Entry))\n    });\n    return StateHeader;\n}\nfunction $6cb7dd5f47d82580$export$105027425199cc51(entryData = {}, lookupType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint16) {\n    let ClassLookupTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        version () {\n            return 8;\n        },\n        firstGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        values: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)\n    });\n    let entry = Object.assign({\n        newStateOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        // convert offset to stateArray index\n        newState: (t)=>(t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses,\n        flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    }, entryData);\n    let Entry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct(entry);\n    let StateArray = new $6cb7dd5f47d82580$export$c5af1eebc882e39a(new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.nClasses));\n    let StateHeader1 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        nClasses: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        classTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, ClassLookupTable),\n        stateArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, StateArray),\n        entryTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new $6cb7dd5f47d82580$export$c5af1eebc882e39a(Entry))\n    });\n    return StateHeader1;\n}\n\n\nlet $6a3746e8c708f5a3$var$BslnSubtable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct('format', {\n    0: {\n        deltas: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, 32)\n    },\n    1: {\n        deltas: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, 32),\n        mappingData: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)\n    },\n    2: {\n        standardGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        controlPoints: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 32)\n    },\n    3: {\n        standardGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        controlPoints: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 32),\n        mappingData: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)\n    }\n});\nvar $6a3746e8c708f5a3$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    defaultBaseline: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    subtable: $6a3746e8c708f5a3$var$BslnSubtable\n});\n\n\n\nlet $d0c76fac617b308a$var$Setting = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    setting: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nameIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    name: (t)=>t.parent.parent.parent.name.records.fontFeatures[t.nameIndex]\n});\nlet $d0c76fac617b308a$var$FeatureName = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    feature: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nSettings: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    settingTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($d0c76fac617b308a$var$Setting, 'nSettings'), {\n        type: 'parent'\n    }),\n    featureFlags: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, [\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        'hasDefault',\n        'exclusive'\n    ]),\n    defaultSetting: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    nameIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    name: (t)=>t.parent.parent.name.records.fontFeatures[t.nameIndex]\n});\nvar $d0c76fac617b308a$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    featureNameCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    reserved1: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    reserved2: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32),\n    featureNames: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($d0c76fac617b308a$var$FeatureName, 'featureNameCount')\n});\n\n\n\nlet $e83fd065f00fcd01$var$Axis = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    axisTag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    minValue: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    defaultValue: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    maxValue: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nameID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    name: (t)=>t.parent.parent.name.records.fontFeatures[t.nameID]\n});\nlet $e83fd065f00fcd01$var$Instance = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    nameID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    name: (t)=>t.parent.parent.name.records.fontFeatures[t.nameID],\n    flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    coord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32, (t)=>t.parent.axisCount),\n    postscriptNameID: new restructure__WEBPACK_IMPORTED_MODULE_0__.Optional(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.parent.instanceSize - t._currentOffset > 0)\n});\nvar $e83fd065f00fcd01$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    offsetToData: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    countSizePairs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    axisCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    axisSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    instanceCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    instanceSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    axis: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($e83fd065f00fcd01$var$Axis, 'axisCount'),\n    instance: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($e83fd065f00fcd01$var$Instance, 'instanceCount')\n});\n\n\n\nlet $dbe33c8d3a7f131c$var$shortFrac = new restructure__WEBPACK_IMPORTED_MODULE_0__.Fixed(16, 'BE', 14);\nclass $dbe33c8d3a7f131c$var$Offset {\n    static decode(stream, parent) {\n        // In short format, offsets are multiplied by 2.\n        // This doesn't seem to be documented by Apple, but it\n        // is implemented this way in Freetype.\n        return parent.flags ? stream.readUInt32BE() : stream.readUInt16BE() * 2;\n    }\n}\nlet $dbe33c8d3a7f131c$var$gvar = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    axisCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    globalCoordCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    globalCoords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($dbe33c8d3a7f131c$var$shortFrac, 'axisCount'), 'globalCoordCount')),\n    glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    offsetToData: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer($dbe33c8d3a7f131c$var$Offset, 'void', {\n        relativeTo: (ctx)=>ctx.offsetToData,\n        allowNull: false\n    }), (t)=>t.glyphCount + 1)\n});\nvar $dbe33c8d3a7f131c$export$2e2bcd8739ae039 = $dbe33c8d3a7f131c$var$gvar;\n\n\n\n\nlet $05b01887df96c4ee$var$ClassTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    coverage: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    subFeatureFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    stateTable: new (0, $6cb7dd5f47d82580$export$105027425199cc51)\n});\nlet $05b01887df96c4ee$var$WidthDeltaRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    justClass: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    beforeGrowLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    beforeShrinkLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    afterGrowLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    afterShrinkLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    growFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    shrinkFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $05b01887df96c4ee$var$WidthDeltaCluster = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($05b01887df96c4ee$var$WidthDeltaRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint32);\nlet $05b01887df96c4ee$var$ActionData = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct('actionType', {\n    0: {\n        lowerLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n        upperLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n        order: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        glyphs: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)\n    },\n    1: {\n        addGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    },\n    2: {\n        substThreshold: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n        addGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        substGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    },\n    3: {},\n    4: {\n        variationAxis: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        minimumLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n        noStretchValue: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n        maximumLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32\n    },\n    5: {\n        flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        glyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    }\n});\nlet $05b01887df96c4ee$var$Action = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    actionClass: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    actionType: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    actionLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    actionData: $05b01887df96c4ee$var$ActionData,\n    padding: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.actionLength - t._currentOffset)\n});\nlet $05b01887df96c4ee$var$PostcompensationAction = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($05b01887df96c4ee$var$Action, restructure__WEBPACK_IMPORTED_MODULE_0__.uint32);\nlet $05b01887df96c4ee$var$PostCompensationTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    lookupTable: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $05b01887df96c4ee$var$PostcompensationAction))\n});\nlet $05b01887df96c4ee$var$JustificationTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    classTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $05b01887df96c4ee$var$ClassTable, {\n        type: 'parent'\n    }),\n    wdcOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    postCompensationTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $05b01887df96c4ee$var$PostCompensationTable, {\n        type: 'parent'\n    }),\n    widthDeltaClusters: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $05b01887df96c4ee$var$WidthDeltaCluster, {\n        type: 'parent',\n        relativeTo: (ctx)=>ctx.wdcOffset\n    }))\n});\nvar $05b01887df96c4ee$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    horizontal: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $05b01887df96c4ee$var$JustificationTable),\n    vertical: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $05b01887df96c4ee$var$JustificationTable)\n});\n\n\n\n\nlet $03ee6ebd54db1053$var$LigatureData = {\n    action: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n};\nlet $03ee6ebd54db1053$var$ContextualData = {\n    markIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    currentIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n};\nlet $03ee6ebd54db1053$var$InsertionData = {\n    currentInsertIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    markedInsertIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n};\nlet $03ee6ebd54db1053$var$SubstitutionTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    items: new (0, $6cb7dd5f47d82580$export$c5af1eebc882e39a)(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)))\n});\nlet $03ee6ebd54db1053$var$SubtableData = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct('type', {\n    0: {\n        stateTable: new (0, $6cb7dd5f47d82580$export$79f7d93d790934ba)\n    },\n    1: {\n        stateTable: new (0, $6cb7dd5f47d82580$export$79f7d93d790934ba)($03ee6ebd54db1053$var$ContextualData),\n        substitutionTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $03ee6ebd54db1053$var$SubstitutionTable)\n    },\n    2: {\n        stateTable: new (0, $6cb7dd5f47d82580$export$79f7d93d790934ba)($03ee6ebd54db1053$var$LigatureData),\n        ligatureActions: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new (0, $6cb7dd5f47d82580$export$c5af1eebc882e39a)(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32)),\n        components: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new (0, $6cb7dd5f47d82580$export$c5af1eebc882e39a)(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)),\n        ligatureList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new (0, $6cb7dd5f47d82580$export$c5af1eebc882e39a)(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16))\n    },\n    4: {\n        lookupTable: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)\n    },\n    5: {\n        stateTable: new (0, $6cb7dd5f47d82580$export$79f7d93d790934ba)($03ee6ebd54db1053$var$InsertionData),\n        insertionActions: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new (0, $6cb7dd5f47d82580$export$c5af1eebc882e39a)(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16))\n    }\n});\nlet $03ee6ebd54db1053$var$Subtable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    coverage: restructure__WEBPACK_IMPORTED_MODULE_0__.uint24,\n    type: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    subFeatureFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    table: $03ee6ebd54db1053$var$SubtableData,\n    padding: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.length - t._currentOffset)\n});\nlet $03ee6ebd54db1053$var$FeatureEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    featureType: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    featureSetting: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    enableFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    disableFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nlet $03ee6ebd54db1053$var$MorxChain = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    defaultFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    chainLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    nFeatureEntries: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    nSubtables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    features: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($03ee6ebd54db1053$var$FeatureEntry, 'nFeatureEntries'),\n    subtables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($03ee6ebd54db1053$var$Subtable, 'nSubtables')\n});\nvar $03ee6ebd54db1053$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    unused: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    nChains: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    chains: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($03ee6ebd54db1053$var$MorxChain, 'nChains')\n});\n\n\n\n\nlet $b7492a80b0d1a056$var$OpticalBounds = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    left: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    top: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    right: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    bottom: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n});\nvar $b7492a80b0d1a056$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookupTable: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)($b7492a80b0d1a056$var$OpticalBounds)\n});\n\n\nlet $c3395722bea751e2$var$tables = {};\nvar $c3395722bea751e2$export$2e2bcd8739ae039 = $c3395722bea751e2$var$tables;\n$c3395722bea751e2$var$tables.cmap = (0, $26a62205ad06574e$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.head = (0, $f2612a29f92ac062$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.hhea = (0, $2c179dd593583073$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.hmtx = (0, $bdc9060542264b85$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.maxp = (0, $dbf51cb3d3fe409d$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.name = (0, $2bcf221753ec8e32$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables['OS/2'] = (0, $84b272aa31b70606$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.post = (0, $32d9e2eb9565d93c$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.fpgm = (0, $5c0f37ca5ffb1850$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.loca = (0, $2b2b260902b1c57e$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.prep = (0, $7afb878c7bea4f66$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables['cvt '] = (0, $5202bd9d9ad8eaac$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.glyf = (0, $6c92b6371bce8bd9$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables['CFF '] = (0, $822ac0d589e4e237$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables['CFF2'] = (0, $822ac0d589e4e237$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.VORG = (0, $2bbf2bc1ce37cd8f$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.EBLC = (0, $9911c4c7201c13de$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.CBLC = $c3395722bea751e2$var$tables.EBLC;\n$c3395722bea751e2$var$tables.sbix = (0, $abb847051efd51b1$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.COLR = (0, $eb629188f3dfefdd$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.CPAL = (0, $08734b8e7dc64587$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.BASE = (0, $497cef411d884e34$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.GDEF = (0, $cf5f33c63ef209e6$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.GPOS = (0, $47e0e8ef515d9903$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.GSUB = (0, $d3f442064af66e06$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.JSTF = (0, $71cfb3c4767fbd0c$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.HVAR = (0, $d059a6bd2d3b5b63$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.DSIG = (0, $dceeca3e1977ce30$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.gasp = (0, $8acd740a9435aad0$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.hdmx = (0, $b5f380243c34d6a0$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.kern = (0, $ca2df1256966e313$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.LTSH = (0, $7a9f92b0c46ebe33$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.PCLT = (0, $2b2ccc419d152631$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.VDMX = (0, $ca5b40b9bcda9c9b$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.vhea = (0, $69530a3c40755af0$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.vmtx = (0, $344073dd270f0e62$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.avar = (0, $3793b781918cfced$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.bsln = (0, $6a3746e8c708f5a3$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.feat = (0, $d0c76fac617b308a$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.fvar = (0, $e83fd065f00fcd01$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.gvar = (0, $dbe33c8d3a7f131c$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.just = (0, $05b01887df96c4ee$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.morx = (0, $03ee6ebd54db1053$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.opbd = (0, $b7492a80b0d1a056$export$2e2bcd8739ae039);\n\n\nlet $816c07a04b6dba87$var$TableEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    checkSum: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    offset: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, 'void', {\n        type: 'global'\n    }),\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nlet $816c07a04b6dba87$var$Directory = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    numTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    searchRange: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    entrySelector: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    rangeShift: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    tables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($816c07a04b6dba87$var$TableEntry, 'numTables')\n});\n$816c07a04b6dba87$var$Directory.process = function() {\n    let tables = {};\n    for (let table of this.tables)tables[table.tag] = table;\n    this.tables = tables;\n};\n$816c07a04b6dba87$var$Directory.preEncode = function() {\n    if (!Array.isArray(this.tables)) {\n        let tables = [];\n        for(let tag in this.tables){\n            let table = this.tables[tag];\n            if (table) tables.push({\n                tag: tag,\n                checkSum: 0,\n                offset: new restructure__WEBPACK_IMPORTED_MODULE_0__.VoidPointer((0, $c3395722bea751e2$export$2e2bcd8739ae039)[tag], table),\n                length: (0, $c3395722bea751e2$export$2e2bcd8739ae039)[tag].size(table)\n            });\n        }\n        this.tables = tables;\n    }\n    this.tag = 'true';\n    this.numTables = this.tables.length;\n    let maxExponentFor2 = Math.floor(Math.log(this.numTables) / Math.LN2);\n    let maxPowerOf2 = Math.pow(2, maxExponentFor2);\n    this.searchRange = maxPowerOf2 * 16;\n    this.entrySelector = Math.log(maxPowerOf2) / Math.LN2;\n    this.rangeShift = this.numTables * 16 - this.searchRange;\n};\nvar $816c07a04b6dba87$export$2e2bcd8739ae039 = $816c07a04b6dba87$var$Directory;\n\n\n\n\nfunction $12727730ddfc8bfe$export$2e0ae67339d5f1ac(arr, cmp) {\n    let min = 0;\n    let max = arr.length - 1;\n    while(min <= max){\n        let mid = min + max >> 1;\n        let res = cmp(arr[mid]);\n        if (res < 0) max = mid - 1;\n        else if (res > 0) min = mid + 1;\n        else return mid;\n    }\n    return -1;\n}\nfunction $12727730ddfc8bfe$export$d02631cccf789723(index, end) {\n    let range = [];\n    while(index < end)range.push(index++);\n    return range;\n}\nconst $12727730ddfc8bfe$export$3d28c1996ced1f14 = new TextDecoder('ascii');\n// Based on https://github.com/niklasvh/base64-arraybuffer. MIT license.\nconst $12727730ddfc8bfe$var$CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst $12727730ddfc8bfe$var$LOOKUP = new Uint8Array(256);\nfor(let i = 0; i < $12727730ddfc8bfe$var$CHARS.length; i++)$12727730ddfc8bfe$var$LOOKUP[$12727730ddfc8bfe$var$CHARS.charCodeAt(i)] = i;\nfunction $12727730ddfc8bfe$export$94fdf11bafc8de6b(base64) {\n    let bufferLength = base64.length * 0.75;\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') bufferLength--;\n    }\n    let bytes = new Uint8Array(bufferLength);\n    let p = 0;\n    for(let i = 0, len = base64.length; i < len; i += 4){\n        let encoded1 = $12727730ddfc8bfe$var$LOOKUP[base64.charCodeAt(i)];\n        let encoded2 = $12727730ddfc8bfe$var$LOOKUP[base64.charCodeAt(i + 1)];\n        let encoded3 = $12727730ddfc8bfe$var$LOOKUP[base64.charCodeAt(i + 2)];\n        let encoded4 = $12727730ddfc8bfe$var$LOOKUP[base64.charCodeAt(i + 3)];\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return bytes;\n}\n\n\n\n\nclass $f08dd41ef10b694c$export$2e2bcd8739ae039 {\n    findSubtable(cmapTable, pairs) {\n        for (let [platformID, encodingID] of pairs)for (let cmap of cmapTable.tables){\n            if (cmap.platformID === platformID && cmap.encodingID === encodingID) return cmap.table;\n        }\n        return null;\n    }\n    lookup(codepoint, variationSelector) {\n        // If there is no Unicode cmap in this font, we need to re-encode\n        // the codepoint in the encoding that the cmap supports.\n        if (this.encoding) codepoint = this.encoding.get(codepoint) || codepoint;\n        else if (variationSelector) {\n            let gid = this.getVariationSelector(codepoint, variationSelector);\n            if (gid) return gid;\n        }\n        let cmap = this.cmap;\n        switch(cmap.version){\n            case 0:\n                return cmap.codeMap.get(codepoint) || 0;\n            case 4:\n                {\n                    let min = 0;\n                    let max = cmap.segCount - 1;\n                    while(min <= max){\n                        let mid = min + max >> 1;\n                        if (codepoint < cmap.startCode.get(mid)) max = mid - 1;\n                        else if (codepoint > cmap.endCode.get(mid)) min = mid + 1;\n                        else {\n                            let rangeOffset = cmap.idRangeOffset.get(mid);\n                            let gid;\n                            if (rangeOffset === 0) gid = codepoint + cmap.idDelta.get(mid);\n                            else {\n                                let index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);\n                                gid = cmap.glyphIndexArray.get(index) || 0;\n                                if (gid !== 0) gid += cmap.idDelta.get(mid);\n                            }\n                            return gid & 0xffff;\n                        }\n                    }\n                    return 0;\n                }\n            case 8:\n                throw new Error('TODO: cmap format 8');\n            case 6:\n            case 10:\n                return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;\n            case 12:\n            case 13:\n                {\n                    let min = 0;\n                    let max = cmap.nGroups - 1;\n                    while(min <= max){\n                        let mid = min + max >> 1;\n                        let group = cmap.groups.get(mid);\n                        if (codepoint < group.startCharCode) max = mid - 1;\n                        else if (codepoint > group.endCharCode) min = mid + 1;\n                        else {\n                            if (cmap.version === 12) return group.glyphID + (codepoint - group.startCharCode);\n                            else return group.glyphID;\n                        }\n                    }\n                    return 0;\n                }\n            case 14:\n                throw new Error('TODO: cmap format 14');\n            default:\n                throw new Error(`Unknown cmap format ${cmap.version}`);\n        }\n    }\n    getVariationSelector(codepoint, variationSelector) {\n        if (!this.uvs) return 0;\n        let selectors = this.uvs.varSelectors.toArray();\n        let i = (0, $12727730ddfc8bfe$export$2e0ae67339d5f1ac)(selectors, (x)=>variationSelector - x.varSelector);\n        let sel = selectors[i];\n        if (i !== -1 && sel.defaultUVS) i = (0, $12727730ddfc8bfe$export$2e0ae67339d5f1ac)(sel.defaultUVS, (x)=>codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? 1 : 0);\n        if (i !== -1 && sel.nonDefaultUVS) {\n            i = (0, $12727730ddfc8bfe$export$2e0ae67339d5f1ac)(sel.nonDefaultUVS, (x)=>codepoint - x.unicodeValue);\n            if (i !== -1) return sel.nonDefaultUVS[i].glyphID;\n        }\n        return 0;\n    }\n    getCharacterSet() {\n        let cmap = this.cmap;\n        switch(cmap.version){\n            case 0:\n                return (0, $12727730ddfc8bfe$export$d02631cccf789723)(0, cmap.codeMap.length);\n            case 4:\n                {\n                    let res = [];\n                    let endCodes = cmap.endCode.toArray();\n                    for(let i = 0; i < endCodes.length; i++){\n                        let tail = endCodes[i] + 1;\n                        let start = cmap.startCode.get(i);\n                        res.push(...(0, $12727730ddfc8bfe$export$d02631cccf789723)(start, tail));\n                    }\n                    return res;\n                }\n            case 8:\n                throw new Error('TODO: cmap format 8');\n            case 6:\n            case 10:\n                return (0, $12727730ddfc8bfe$export$d02631cccf789723)(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);\n            case 12:\n            case 13:\n                {\n                    let res = [];\n                    for (let group of cmap.groups.toArray())res.push(...(0, $12727730ddfc8bfe$export$d02631cccf789723)(group.startCharCode, group.endCharCode + 1));\n                    return res;\n                }\n            case 14:\n                throw new Error('TODO: cmap format 14');\n            default:\n                throw new Error(`Unknown cmap format ${cmap.version}`);\n        }\n    }\n    codePointsForGlyph(gid) {\n        let cmap = this.cmap;\n        switch(cmap.version){\n            case 0:\n                {\n                    let res = [];\n                    for(let i = 0; i < 256; i++)if (cmap.codeMap.get(i) === gid) res.push(i);\n                    return res;\n                }\n            case 4:\n                {\n                    let res = [];\n                    for(let i = 0; i < cmap.segCount; i++){\n                        let end = cmap.endCode.get(i);\n                        let start = cmap.startCode.get(i);\n                        let rangeOffset = cmap.idRangeOffset.get(i);\n                        let delta = cmap.idDelta.get(i);\n                        for(var c = start; c <= end; c++){\n                            let g = 0;\n                            if (rangeOffset === 0) g = c + delta;\n                            else {\n                                let index = rangeOffset / 2 + (c - start) - (cmap.segCount - i);\n                                g = cmap.glyphIndexArray.get(index) || 0;\n                                if (g !== 0) g += delta;\n                            }\n                            if (g === gid) res.push(c);\n                        }\n                    }\n                    return res;\n                }\n            case 12:\n                {\n                    let res = [];\n                    for (let group of cmap.groups.toArray())if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) res.push(group.startCharCode + (gid - group.glyphID));\n                    return res;\n                }\n            case 13:\n                {\n                    let res = [];\n                    for (let group of cmap.groups.toArray())if (gid === group.glyphID) res.push(...(0, $12727730ddfc8bfe$export$d02631cccf789723)(group.startCharCode, group.endCharCode + 1));\n                    return res;\n                }\n            default:\n                throw new Error(`Unknown cmap format ${cmap.version}`);\n        }\n    }\n    constructor(cmapTable){\n        // Attempt to find a Unicode cmap first\n        this.encoding = null;\n        this.cmap = this.findSubtable(cmapTable, [\n            // 32-bit subtables\n            [\n                3,\n                10\n            ],\n            [\n                0,\n                6\n            ],\n            [\n                0,\n                4\n            ],\n            // 16-bit subtables\n            [\n                3,\n                1\n            ],\n            [\n                0,\n                3\n            ],\n            [\n                0,\n                2\n            ],\n            [\n                0,\n                1\n            ],\n            [\n                0,\n                0\n            ]\n        ]);\n        // If not unicode cmap was found, take the first table with a supported encoding.\n        if (!this.cmap) for (let cmap of cmapTable.tables){\n            let encoding = (0, $e449ad78d50845fe$export$badc544e0651b6b1)(cmap.platformID, cmap.encodingID, cmap.table.language - 1);\n            let mapping = (0, $e449ad78d50845fe$export$1dceb3c14ed68bee)(encoding);\n            if (mapping) {\n                this.cmap = cmap.table;\n                this.encoding = mapping;\n            }\n        }\n        if (!this.cmap) throw new Error(\"Could not find a supported cmap table\");\n        this.uvs = this.findSubtable(cmapTable, [\n            [\n                0,\n                5\n            ]\n        ]);\n        if (this.uvs && this.uvs.version !== 14) this.uvs = null;\n    }\n}\n(0, _swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $f08dd41ef10b694c$export$2e2bcd8739ae039.prototype, \"getCharacterSet\", null);\n(0, _swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $f08dd41ef10b694c$export$2e2bcd8739ae039.prototype, \"codePointsForGlyph\", null);\n\n\n\nclass $0bba3a9db57637f3$export$2e2bcd8739ae039 {\n    process(glyphs, positions) {\n        for(let glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++){\n            let left = glyphs[glyphIndex].id;\n            let right = glyphs[glyphIndex + 1].id;\n            positions[glyphIndex].xAdvance += this.getKerning(left, right);\n        }\n    }\n    getKerning(left, right) {\n        let res = 0;\n        for (let table of this.kern.tables){\n            if (table.coverage.crossStream) continue;\n            switch(table.version){\n                case 0:\n                    if (!table.coverage.horizontal) continue;\n                    break;\n                case 1:\n                    if (table.coverage.vertical || table.coverage.variation) continue;\n                    break;\n                default:\n                    throw new Error(`Unsupported kerning table version ${table.version}`);\n            }\n            let val = 0;\n            let s = table.subtable;\n            switch(table.format){\n                case 0:\n                    let pairIdx = (0, $12727730ddfc8bfe$export$2e0ae67339d5f1ac)(s.pairs, function(pair) {\n                        return left - pair.left || right - pair.right;\n                    });\n                    if (pairIdx >= 0) val = s.pairs[pairIdx].value;\n                    break;\n                case 2:\n                    let leftOffset = 0, rightOffset = 0;\n                    if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs) leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];\n                    else leftOffset = s.array.off;\n                    if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs) rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];\n                    let index = (leftOffset + rightOffset - s.array.off) / 2;\n                    val = s.array.values.get(index);\n                    break;\n                case 3:\n                    if (left >= s.glyphCount || right >= s.glyphCount) return 0;\n                    val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];\n                    break;\n                default:\n                    throw new Error(`Unsupported kerning sub-table format ${table.format}`);\n            }\n            // Microsoft supports the override flag, which resets the result\n            // Otherwise, the sum of the results from all subtables is returned\n            if (table.coverage.override) res = val;\n            else res += val;\n        }\n        return res;\n    }\n    constructor(font){\n        this.kern = font.kern;\n    }\n}\n\n\n\nclass $0a4bdfeb6dfd6f5e$export$2e2bcd8739ae039 {\n    positionGlyphs(glyphs, positions) {\n        // find each base + mark cluster, and position the marks relative to the base\n        let clusterStart = 0;\n        let clusterEnd = 0;\n        for(let index = 0; index < glyphs.length; index++){\n            let glyph = glyphs[index];\n            if (glyph.isMark) clusterEnd = index;\n            else {\n                if (clusterStart !== clusterEnd) this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n                clusterStart = clusterEnd = index;\n            }\n        }\n        if (clusterStart !== clusterEnd) this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n        return positions;\n    }\n    positionCluster(glyphs, positions, clusterStart, clusterEnd) {\n        let base = glyphs[clusterStart];\n        let baseBox = base.cbox.copy();\n        // adjust bounding box for ligature glyphs\n        if (base.codePoints.length > 1) // LTR. TODO: RTL support.\n        baseBox.minX += (base.codePoints.length - 1) * baseBox.width / base.codePoints.length;\n        let xOffset = -positions[clusterStart].xAdvance;\n        let yOffset = 0;\n        let yGap = this.font.unitsPerEm / 16;\n        // position each of the mark glyphs relative to the base glyph\n        for(let index = clusterStart + 1; index <= clusterEnd; index++){\n            let mark = glyphs[index];\n            let markBox = mark.cbox;\n            let position = positions[index];\n            let combiningClass = this.getCombiningClass(mark.codePoints[0]);\n            if (combiningClass !== 'Not_Reordered') {\n                position.xOffset = position.yOffset = 0;\n                // x positioning\n                switch(combiningClass){\n                    case 'Double_Above':\n                    case 'Double_Below':\n                        // LTR. TODO: RTL support.\n                        position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;\n                        break;\n                    case 'Attached_Below_Left':\n                    case 'Below_Left':\n                    case 'Above_Left':\n                        // left align\n                        position.xOffset += baseBox.minX - markBox.minX;\n                        break;\n                    case 'Attached_Above_Right':\n                    case 'Below_Right':\n                    case 'Above_Right':\n                        // right align\n                        position.xOffset += baseBox.maxX - markBox.width - markBox.minX;\n                        break;\n                    default:\n                        // center align\n                        position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;\n                }\n                // y positioning\n                switch(combiningClass){\n                    case 'Double_Below':\n                    case 'Below_Left':\n                    case 'Below':\n                    case 'Below_Right':\n                    case 'Attached_Below_Left':\n                    case 'Attached_Below':\n                        // add a small gap between the glyphs if they are not attached\n                        if (combiningClass === 'Attached_Below_Left' || combiningClass === 'Attached_Below') baseBox.minY += yGap;\n                        position.yOffset = -baseBox.minY - markBox.maxY;\n                        baseBox.minY += markBox.height;\n                        break;\n                    case 'Double_Above':\n                    case 'Above_Left':\n                    case 'Above':\n                    case 'Above_Right':\n                    case 'Attached_Above':\n                    case 'Attached_Above_Right':\n                        // add a small gap between the glyphs if they are not attached\n                        if (combiningClass === 'Attached_Above' || combiningClass === 'Attached_Above_Right') baseBox.maxY += yGap;\n                        position.yOffset = baseBox.maxY - markBox.minY;\n                        baseBox.maxY += markBox.height;\n                        break;\n                }\n                position.xAdvance = position.yAdvance = 0;\n                position.xOffset += xOffset;\n                position.yOffset += yOffset;\n            } else {\n                xOffset -= position.xAdvance;\n                yOffset -= position.yAdvance;\n            }\n        }\n        return;\n    }\n    getCombiningClass(codePoint) {\n        let combiningClass = (0, unicode_properties__WEBPACK_IMPORTED_MODULE_3__.getCombiningClass)(codePoint);\n        // Thai / Lao need some per-character work\n        if ((codePoint & -256) === 0x0e00) {\n            if (combiningClass === 'Not_Reordered') switch(codePoint){\n                case 0x0e31:\n                case 0x0e34:\n                case 0x0e35:\n                case 0x0e36:\n                case 0x0e37:\n                case 0x0e47:\n                case 0x0e4c:\n                case 0x0e3d:\n                case 0x0e4e:\n                    return 'Above_Right';\n                case 0x0eb1:\n                case 0x0eb4:\n                case 0x0eb5:\n                case 0x0eb6:\n                case 0x0eb7:\n                case 0x0ebb:\n                case 0x0ecc:\n                case 0x0ecd:\n                    return 'Above';\n                case 0x0ebc:\n                    return 'Below';\n            }\n            else if (codePoint === 0x0e3a) return 'Below_Right';\n        }\n        switch(combiningClass){\n            // Hebrew\n            case 'CCC10':\n            case 'CCC11':\n            case 'CCC12':\n            case 'CCC13':\n            case 'CCC14':\n            case 'CCC15':\n            case 'CCC16':\n            case 'CCC17':\n            case 'CCC18':\n            case 'CCC20':\n            case 'CCC22':\n                return 'Below';\n            case 'CCC23':\n                return 'Attached_Above';\n            case 'CCC24':\n                return 'Above_Right';\n            case 'CCC25':\n            case 'CCC19':\n                return 'Above_Left';\n            case 'CCC26':\n                return 'Above';\n            case 'CCC21':\n                break;\n            // Arabic and Syriac\n            case 'CCC27':\n            case 'CCC28':\n            case 'CCC30':\n            case 'CCC31':\n            case 'CCC33':\n            case 'CCC34':\n            case 'CCC35':\n            case 'CCC36':\n                return 'Above';\n            case 'CCC29':\n            case 'CCC32':\n                return 'Below';\n            // Thai\n            case 'CCC103':\n                return 'Below_Right';\n            case 'CCC107':\n                return 'Above_Right';\n            // Lao\n            case 'CCC118':\n                return 'Below';\n            case 'CCC122':\n                return 'Above';\n            // Tibetan\n            case 'CCC129':\n            case 'CCC132':\n                return 'Below';\n            case 'CCC130':\n                return 'Above';\n        }\n        return combiningClass;\n    }\n    constructor(font){\n        this.font = font;\n    }\n}\n\n\n/**\n * Represents a glyph bounding box\n */ class $f34600ab9d7f70d8$export$2e2bcd8739ae039 {\n    /**\n   * The width of the bounding box\n   * @type {number}\n   */ get width() {\n        return this.maxX - this.minX;\n    }\n    /**\n   * The height of the bounding box\n   * @type {number}\n   */ get height() {\n        return this.maxY - this.minY;\n    }\n    addPoint(x, y) {\n        if (Math.abs(x) !== Infinity) {\n            if (x < this.minX) this.minX = x;\n            if (x > this.maxX) this.maxX = x;\n        }\n        if (Math.abs(y) !== Infinity) {\n            if (y < this.minY) this.minY = y;\n            if (y > this.maxY) this.maxY = y;\n        }\n    }\n    copy() {\n        return new $f34600ab9d7f70d8$export$2e2bcd8739ae039(this.minX, this.minY, this.maxX, this.maxY);\n    }\n    constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity){\n        /**\n     * The minimum X position in the bounding box\n     * @type {number}\n     */ this.minX = minX;\n        /**\n     * The minimum Y position in the bounding box\n     * @type {number}\n     */ this.minY = minY;\n        /**\n     * The maxmimum X position in the bounding box\n     * @type {number}\n     */ this.maxX = maxX;\n        /**\n     * The maxmimum Y position in the bounding box\n     * @type {number}\n     */ this.maxY = maxY;\n    }\n}\n\n\n\n// This maps the Unicode Script property to an OpenType script tag\n// Data from http://www.microsoft.com/typography/otspec/scripttags.htm\n// and http://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt.\nconst $130d1a642ebcd2b7$var$UNICODE_SCRIPTS = {\n    Caucasian_Albanian: 'aghb',\n    Arabic: 'arab',\n    Imperial_Aramaic: 'armi',\n    Armenian: 'armn',\n    Avestan: 'avst',\n    Balinese: 'bali',\n    Bamum: 'bamu',\n    Bassa_Vah: 'bass',\n    Batak: 'batk',\n    Bengali: [\n        'bng2',\n        'beng'\n    ],\n    Bopomofo: 'bopo',\n    Brahmi: 'brah',\n    Braille: 'brai',\n    Buginese: 'bugi',\n    Buhid: 'buhd',\n    Chakma: 'cakm',\n    Canadian_Aboriginal: 'cans',\n    Carian: 'cari',\n    Cham: 'cham',\n    Cherokee: 'cher',\n    Coptic: 'copt',\n    Cypriot: 'cprt',\n    Cyrillic: 'cyrl',\n    Devanagari: [\n        'dev2',\n        'deva'\n    ],\n    Deseret: 'dsrt',\n    Duployan: 'dupl',\n    Egyptian_Hieroglyphs: 'egyp',\n    Elbasan: 'elba',\n    Ethiopic: 'ethi',\n    Georgian: 'geor',\n    Glagolitic: 'glag',\n    Gothic: 'goth',\n    Grantha: 'gran',\n    Greek: 'grek',\n    Gujarati: [\n        'gjr2',\n        'gujr'\n    ],\n    Gurmukhi: [\n        'gur2',\n        'guru'\n    ],\n    Hangul: 'hang',\n    Han: 'hani',\n    Hanunoo: 'hano',\n    Hebrew: 'hebr',\n    Hiragana: 'hira',\n    Pahawh_Hmong: 'hmng',\n    Katakana_Or_Hiragana: 'hrkt',\n    Old_Italic: 'ital',\n    Javanese: 'java',\n    Kayah_Li: 'kali',\n    Katakana: 'kana',\n    Kharoshthi: 'khar',\n    Khmer: 'khmr',\n    Khojki: 'khoj',\n    Kannada: [\n        'knd2',\n        'knda'\n    ],\n    Kaithi: 'kthi',\n    Tai_Tham: 'lana',\n    Lao: 'lao ',\n    Latin: 'latn',\n    Lepcha: 'lepc',\n    Limbu: 'limb',\n    Linear_A: 'lina',\n    Linear_B: 'linb',\n    Lisu: 'lisu',\n    Lycian: 'lyci',\n    Lydian: 'lydi',\n    Mahajani: 'mahj',\n    Mandaic: 'mand',\n    Manichaean: 'mani',\n    Mende_Kikakui: 'mend',\n    Meroitic_Cursive: 'merc',\n    Meroitic_Hieroglyphs: 'mero',\n    Malayalam: [\n        'mlm2',\n        'mlym'\n    ],\n    Modi: 'modi',\n    Mongolian: 'mong',\n    Mro: 'mroo',\n    Meetei_Mayek: 'mtei',\n    Myanmar: [\n        'mym2',\n        'mymr'\n    ],\n    Old_North_Arabian: 'narb',\n    Nabataean: 'nbat',\n    Nko: 'nko ',\n    Ogham: 'ogam',\n    Ol_Chiki: 'olck',\n    Old_Turkic: 'orkh',\n    Oriya: [\n        'ory2',\n        'orya'\n    ],\n    Osmanya: 'osma',\n    Palmyrene: 'palm',\n    Pau_Cin_Hau: 'pauc',\n    Old_Permic: 'perm',\n    Phags_Pa: 'phag',\n    Inscriptional_Pahlavi: 'phli',\n    Psalter_Pahlavi: 'phlp',\n    Phoenician: 'phnx',\n    Miao: 'plrd',\n    Inscriptional_Parthian: 'prti',\n    Rejang: 'rjng',\n    Runic: 'runr',\n    Samaritan: 'samr',\n    Old_South_Arabian: 'sarb',\n    Saurashtra: 'saur',\n    Shavian: 'shaw',\n    Sharada: 'shrd',\n    Siddham: 'sidd',\n    Khudawadi: 'sind',\n    Sinhala: 'sinh',\n    Sora_Sompeng: 'sora',\n    Sundanese: 'sund',\n    Syloti_Nagri: 'sylo',\n    Syriac: 'syrc',\n    Tagbanwa: 'tagb',\n    Takri: 'takr',\n    Tai_Le: 'tale',\n    New_Tai_Lue: 'talu',\n    Tamil: [\n        'tml2',\n        'taml'\n    ],\n    Tai_Viet: 'tavt',\n    Telugu: [\n        'tel2',\n        'telu'\n    ],\n    Tifinagh: 'tfng',\n    Tagalog: 'tglg',\n    Thaana: 'thaa',\n    Thai: 'thai',\n    Tibetan: 'tibt',\n    Tirhuta: 'tirh',\n    Ugaritic: 'ugar',\n    Vai: 'vai ',\n    Warang_Citi: 'wara',\n    Old_Persian: 'xpeo',\n    Cuneiform: 'xsux',\n    Yi: 'yi  ',\n    Inherited: 'zinh',\n    Common: 'zyyy',\n    Unknown: 'zzzz'\n};\nconst $130d1a642ebcd2b7$var$OPENTYPE_SCRIPTS = {};\nfor(let script in $130d1a642ebcd2b7$var$UNICODE_SCRIPTS){\n    let tag = $130d1a642ebcd2b7$var$UNICODE_SCRIPTS[script];\n    if (Array.isArray(tag)) for (let t of tag)$130d1a642ebcd2b7$var$OPENTYPE_SCRIPTS[t] = script;\n    else $130d1a642ebcd2b7$var$OPENTYPE_SCRIPTS[tag] = script;\n}\nfunction $130d1a642ebcd2b7$export$b32f0b5f69d65e51(script) {\n    return $130d1a642ebcd2b7$var$UNICODE_SCRIPTS[script];\n}\nfunction $130d1a642ebcd2b7$export$ce50e82f12a827a4(tag) {\n    return $130d1a642ebcd2b7$var$OPENTYPE_SCRIPTS[tag];\n}\nfunction $130d1a642ebcd2b7$export$e5cb25e204fb8450(string) {\n    let len = string.length;\n    let idx = 0;\n    while(idx < len){\n        let code = string.charCodeAt(idx++);\n        // Check if this is a high surrogate\n        if (0xd800 <= code && code <= 0xdbff && idx < len) {\n            let next = string.charCodeAt(idx);\n            // Check if this is a low surrogate\n            if (0xdc00 <= next && next <= 0xdfff) {\n                idx++;\n                code = ((code & 0x3FF) << 10) + (next & 0x3FF) + 0x10000;\n            }\n        }\n        let script = (0, unicode_properties__WEBPACK_IMPORTED_MODULE_3__.getScript)(code);\n        if (script !== 'Common' && script !== 'Inherited' && script !== 'Unknown') return $130d1a642ebcd2b7$var$UNICODE_SCRIPTS[script];\n    }\n    return $130d1a642ebcd2b7$var$UNICODE_SCRIPTS.Unknown;\n}\nfunction $130d1a642ebcd2b7$export$16fab0757cfc223d(codePoints) {\n    for(let i = 0; i < codePoints.length; i++){\n        let codePoint = codePoints[i];\n        let script = (0, unicode_properties__WEBPACK_IMPORTED_MODULE_3__.getScript)(codePoint);\n        if (script !== 'Common' && script !== 'Inherited' && script !== 'Unknown') return $130d1a642ebcd2b7$var$UNICODE_SCRIPTS[script];\n    }\n    return $130d1a642ebcd2b7$var$UNICODE_SCRIPTS.Unknown;\n}\n// The scripts in this map are written from right to left\nconst $130d1a642ebcd2b7$var$RTL = {\n    arab: true,\n    hebr: true,\n    syrc: true,\n    thaa: true,\n    cprt: true,\n    khar: true,\n    phnx: true,\n    'nko ': true,\n    lydi: true,\n    avst: true,\n    armi: true,\n    phli: true,\n    prti: true,\n    sarb: true,\n    orkh: true,\n    samr: true,\n    mand: true,\n    merc: true,\n    mero: true,\n    // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)\n    mani: true,\n    mend: true,\n    nbat: true,\n    narb: true,\n    palm: true,\n    phlp: true // Psalter Pahlavi\n};\nfunction $130d1a642ebcd2b7$export$9fddb9d0dd7d8a54(script) {\n    if ($130d1a642ebcd2b7$var$RTL[script]) return 'rtl';\n    return 'ltr';\n}\n\n\nclass $be07b3e97a42687a$export$2e2bcd8739ae039 {\n    /**\n   * The total advance width of the run.\n   * @type {number}\n   */ get advanceWidth() {\n        let width = 0;\n        for (let position of this.positions)width += position.xAdvance;\n        return width;\n    }\n    /**\n  * The total advance height of the run.\n  * @type {number}\n  */ get advanceHeight() {\n        let height = 0;\n        for (let position of this.positions)height += position.yAdvance;\n        return height;\n    }\n    /**\n  * The bounding box containing all glyphs in the run.\n  * @type {BBox}\n  */ get bbox() {\n        let bbox = new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039);\n        let x = 0;\n        let y = 0;\n        for(let index = 0; index < this.glyphs.length; index++){\n            let glyph = this.glyphs[index];\n            let p = this.positions[index];\n            let b = glyph.bbox;\n            bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);\n            bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);\n            x += p.xAdvance;\n            y += p.yAdvance;\n        }\n        return bbox;\n    }\n    constructor(glyphs, features, script, language, direction){\n        /**\n     * An array of Glyph objects in the run\n     * @type {Glyph[]}\n     */ this.glyphs = glyphs;\n        /**\n     * An array of GlyphPosition objects for each glyph in the run\n     * @type {GlyphPosition[]}\n     */ this.positions = null;\n        /**\n     * The script that was requested for shaping. This was either passed in or detected automatically.\n     * @type {string}\n     */ this.script = script;\n        /**\n     * The language requested for shaping, as passed in. If `null`, the default language for the\n     * script was used.\n     * @type {string}\n     */ this.language = language || null;\n        /**\n     * The direction requested for shaping, as passed in (either ltr or rtl).\n     * If `null`, the default direction of the script is used.\n     * @type {string}\n     */ this.direction = direction || $130d1a642ebcd2b7$export$9fddb9d0dd7d8a54(script);\n        /**\n     * The features requested during shaping. This is a combination of user\n     * specified features and features chosen by the shaper.\n     * @type {object}\n     */ this.features = {};\n        // Convert features to an object\n        if (Array.isArray(features)) for (let tag of features)this.features[tag] = true;\n        else if (typeof features === 'object') this.features = features;\n    }\n}\n\n\n/**\n * Represents positioning information for a glyph in a GlyphRun.\n */ class $1ac75d9a55b67f01$export$2e2bcd8739ae039 {\n    constructor(xAdvance = 0, yAdvance = 0, xOffset = 0, yOffset = 0){\n        /**\n     * The amount to move the virtual pen in the X direction after rendering this glyph.\n     * @type {number}\n     */ this.xAdvance = xAdvance;\n        /**\n     * The amount to move the virtual pen in the Y direction after rendering this glyph.\n     * @type {number}\n     */ this.yAdvance = yAdvance;\n        /**\n     * The offset from the pen position in the X direction at which to render this glyph.\n     * @type {number}\n     */ this.xOffset = xOffset;\n        /**\n     * The offset from the pen position in the Y direction at which to render this glyph.\n     * @type {number}\n     */ this.yOffset = yOffset;\n    }\n}\n\n\n\n// see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html\n// and /System/Library/Frameworks/CoreText.framework/Versions/A/Headers/SFNTLayoutTypes.h on a Mac\nconst $3b6302b64eccc32c$var$features = {\n    allTypographicFeatures: {\n        code: 0,\n        exclusive: false,\n        allTypeFeatures: 0\n    },\n    ligatures: {\n        code: 1,\n        exclusive: false,\n        requiredLigatures: 0,\n        commonLigatures: 2,\n        rareLigatures: 4,\n        // logos: 6\n        rebusPictures: 8,\n        diphthongLigatures: 10,\n        squaredLigatures: 12,\n        abbrevSquaredLigatures: 14,\n        symbolLigatures: 16,\n        contextualLigatures: 18,\n        historicalLigatures: 20\n    },\n    cursiveConnection: {\n        code: 2,\n        exclusive: true,\n        unconnected: 0,\n        partiallyConnected: 1,\n        cursive: 2\n    },\n    letterCase: {\n        code: 3,\n        exclusive: true\n    },\n    // upperAndLowerCase: 0          # deprecated\n    // allCaps: 1                    # deprecated\n    // allLowerCase: 2               # deprecated\n    // smallCaps: 3                  # deprecated\n    // initialCaps: 4                # deprecated\n    // initialCapsAndSmallCaps: 5    # deprecated\n    verticalSubstitution: {\n        code: 4,\n        exclusive: false,\n        substituteVerticalForms: 0\n    },\n    linguisticRearrangement: {\n        code: 5,\n        exclusive: false,\n        linguisticRearrangement: 0\n    },\n    numberSpacing: {\n        code: 6,\n        exclusive: true,\n        monospacedNumbers: 0,\n        proportionalNumbers: 1,\n        thirdWidthNumbers: 2,\n        quarterWidthNumbers: 3\n    },\n    smartSwash: {\n        code: 8,\n        exclusive: false,\n        wordInitialSwashes: 0,\n        wordFinalSwashes: 2,\n        // lineInitialSwashes: 4\n        // lineFinalSwashes: 6\n        nonFinalSwashes: 8\n    },\n    diacritics: {\n        code: 9,\n        exclusive: true,\n        showDiacritics: 0,\n        hideDiacritics: 1,\n        decomposeDiacritics: 2\n    },\n    verticalPosition: {\n        code: 10,\n        exclusive: true,\n        normalPosition: 0,\n        superiors: 1,\n        inferiors: 2,\n        ordinals: 3,\n        scientificInferiors: 4\n    },\n    fractions: {\n        code: 11,\n        exclusive: true,\n        noFractions: 0,\n        verticalFractions: 1,\n        diagonalFractions: 2\n    },\n    overlappingCharacters: {\n        code: 13,\n        exclusive: false,\n        preventOverlap: 0\n    },\n    typographicExtras: {\n        code: 14,\n        exclusive: false,\n        // hyphensToEmDash: 0\n        // hyphenToEnDash: 2\n        slashedZero: 4\n    },\n    // formInterrobang: 6\n    // smartQuotes: 8\n    // periodsToEllipsis: 10\n    mathematicalExtras: {\n        code: 15,\n        exclusive: false,\n        // hyphenToMinus: 0\n        // asteristoMultiply: 2\n        // slashToDivide: 4\n        // inequalityLigatures: 6\n        // exponents: 8\n        mathematicalGreek: 10\n    },\n    ornamentSets: {\n        code: 16,\n        exclusive: true,\n        noOrnaments: 0,\n        dingbats: 1,\n        piCharacters: 2,\n        fleurons: 3,\n        decorativeBorders: 4,\n        internationalSymbols: 5,\n        mathSymbols: 6\n    },\n    characterAlternatives: {\n        code: 17,\n        exclusive: true,\n        noAlternates: 0\n    },\n    // user defined options\n    designComplexity: {\n        code: 18,\n        exclusive: true,\n        designLevel1: 0,\n        designLevel2: 1,\n        designLevel3: 2,\n        designLevel4: 3,\n        designLevel5: 4\n    },\n    styleOptions: {\n        code: 19,\n        exclusive: true,\n        noStyleOptions: 0,\n        displayText: 1,\n        engravedText: 2,\n        illuminatedCaps: 3,\n        titlingCaps: 4,\n        tallCaps: 5\n    },\n    characterShape: {\n        code: 20,\n        exclusive: true,\n        traditionalCharacters: 0,\n        simplifiedCharacters: 1,\n        JIS1978Characters: 2,\n        JIS1983Characters: 3,\n        JIS1990Characters: 4,\n        traditionalAltOne: 5,\n        traditionalAltTwo: 6,\n        traditionalAltThree: 7,\n        traditionalAltFour: 8,\n        traditionalAltFive: 9,\n        expertCharacters: 10,\n        JIS2004Characters: 11,\n        hojoCharacters: 12,\n        NLCCharacters: 13,\n        traditionalNamesCharacters: 14\n    },\n    numberCase: {\n        code: 21,\n        exclusive: true,\n        lowerCaseNumbers: 0,\n        upperCaseNumbers: 1\n    },\n    textSpacing: {\n        code: 22,\n        exclusive: true,\n        proportionalText: 0,\n        monospacedText: 1,\n        halfWidthText: 2,\n        thirdWidthText: 3,\n        quarterWidthText: 4,\n        altProportionalText: 5,\n        altHalfWidthText: 6\n    },\n    transliteration: {\n        code: 23,\n        exclusive: true,\n        noTransliteration: 0\n    },\n    // hanjaToHangul: 1\n    // hiraganaToKatakana: 2\n    // katakanaToHiragana: 3\n    // kanaToRomanization: 4\n    // romanizationToHiragana: 5\n    // romanizationToKatakana: 6\n    // hanjaToHangulAltOne: 7\n    // hanjaToHangulAltTwo: 8\n    // hanjaToHangulAltThree: 9\n    annotation: {\n        code: 24,\n        exclusive: true,\n        noAnnotation: 0,\n        boxAnnotation: 1,\n        roundedBoxAnnotation: 2,\n        circleAnnotation: 3,\n        invertedCircleAnnotation: 4,\n        parenthesisAnnotation: 5,\n        periodAnnotation: 6,\n        romanNumeralAnnotation: 7,\n        diamondAnnotation: 8,\n        invertedBoxAnnotation: 9,\n        invertedRoundedBoxAnnotation: 10\n    },\n    kanaSpacing: {\n        code: 25,\n        exclusive: true,\n        fullWidthKana: 0,\n        proportionalKana: 1\n    },\n    ideographicSpacing: {\n        code: 26,\n        exclusive: true,\n        fullWidthIdeographs: 0,\n        proportionalIdeographs: 1,\n        halfWidthIdeographs: 2\n    },\n    unicodeDecomposition: {\n        code: 27,\n        exclusive: false,\n        canonicalComposition: 0,\n        compatibilityComposition: 2,\n        transcodingComposition: 4\n    },\n    rubyKana: {\n        code: 28,\n        exclusive: false,\n        // noRubyKana: 0     # deprecated - use rubyKanaOff instead\n        // rubyKana: 1     # deprecated - use rubyKanaOn instead\n        rubyKana: 2\n    },\n    CJKSymbolAlternatives: {\n        code: 29,\n        exclusive: true,\n        noCJKSymbolAlternatives: 0,\n        CJKSymbolAltOne: 1,\n        CJKSymbolAltTwo: 2,\n        CJKSymbolAltThree: 3,\n        CJKSymbolAltFour: 4,\n        CJKSymbolAltFive: 5\n    },\n    ideographicAlternatives: {\n        code: 30,\n        exclusive: true,\n        noIdeographicAlternatives: 0,\n        ideographicAltOne: 1,\n        ideographicAltTwo: 2,\n        ideographicAltThree: 3,\n        ideographicAltFour: 4,\n        ideographicAltFive: 5\n    },\n    CJKVerticalRomanPlacement: {\n        code: 31,\n        exclusive: true,\n        CJKVerticalRomanCentered: 0,\n        CJKVerticalRomanHBaseline: 1\n    },\n    italicCJKRoman: {\n        code: 32,\n        exclusive: false,\n        // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead\n        // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead\n        CJKItalicRoman: 2\n    },\n    caseSensitiveLayout: {\n        code: 33,\n        exclusive: false,\n        caseSensitiveLayout: 0,\n        caseSensitiveSpacing: 2\n    },\n    alternateKana: {\n        code: 34,\n        exclusive: false,\n        alternateHorizKana: 0,\n        alternateVertKana: 2\n    },\n    stylisticAlternatives: {\n        code: 35,\n        exclusive: false,\n        noStylisticAlternates: 0,\n        stylisticAltOne: 2,\n        stylisticAltTwo: 4,\n        stylisticAltThree: 6,\n        stylisticAltFour: 8,\n        stylisticAltFive: 10,\n        stylisticAltSix: 12,\n        stylisticAltSeven: 14,\n        stylisticAltEight: 16,\n        stylisticAltNine: 18,\n        stylisticAltTen: 20,\n        stylisticAltEleven: 22,\n        stylisticAltTwelve: 24,\n        stylisticAltThirteen: 26,\n        stylisticAltFourteen: 28,\n        stylisticAltFifteen: 30,\n        stylisticAltSixteen: 32,\n        stylisticAltSeventeen: 34,\n        stylisticAltEighteen: 36,\n        stylisticAltNineteen: 38,\n        stylisticAltTwenty: 40\n    },\n    contextualAlternates: {\n        code: 36,\n        exclusive: false,\n        contextualAlternates: 0,\n        swashAlternates: 2,\n        contextualSwashAlternates: 4\n    },\n    lowerCase: {\n        code: 37,\n        exclusive: true,\n        defaultLowerCase: 0,\n        lowerCaseSmallCaps: 1,\n        lowerCasePetiteCaps: 2\n    },\n    upperCase: {\n        code: 38,\n        exclusive: true,\n        defaultUpperCase: 0,\n        upperCaseSmallCaps: 1,\n        upperCasePetiteCaps: 2\n    },\n    languageTag: {\n        code: 39,\n        exclusive: true\n    },\n    CJKRomanSpacing: {\n        code: 103,\n        exclusive: true,\n        halfWidthCJKRoman: 0,\n        proportionalCJKRoman: 1,\n        defaultCJKRoman: 2,\n        fullWidthCJKRoman: 3\n    }\n};\nconst $3b6302b64eccc32c$var$feature = (name, selector)=>[\n        $3b6302b64eccc32c$var$features[name].code,\n        $3b6302b64eccc32c$var$features[name][selector]\n    ];\nconst $3b6302b64eccc32c$var$OTMapping = {\n    rlig: $3b6302b64eccc32c$var$feature('ligatures', 'requiredLigatures'),\n    clig: $3b6302b64eccc32c$var$feature('ligatures', 'contextualLigatures'),\n    dlig: $3b6302b64eccc32c$var$feature('ligatures', 'rareLigatures'),\n    hlig: $3b6302b64eccc32c$var$feature('ligatures', 'historicalLigatures'),\n    liga: $3b6302b64eccc32c$var$feature('ligatures', 'commonLigatures'),\n    hist: $3b6302b64eccc32c$var$feature('ligatures', 'historicalLigatures'),\n    smcp: $3b6302b64eccc32c$var$feature('lowerCase', 'lowerCaseSmallCaps'),\n    pcap: $3b6302b64eccc32c$var$feature('lowerCase', 'lowerCasePetiteCaps'),\n    frac: $3b6302b64eccc32c$var$feature('fractions', 'diagonalFractions'),\n    dnom: $3b6302b64eccc32c$var$feature('fractions', 'diagonalFractions'),\n    numr: $3b6302b64eccc32c$var$feature('fractions', 'diagonalFractions'),\n    afrc: $3b6302b64eccc32c$var$feature('fractions', 'verticalFractions'),\n    // aalt\n    // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?\n    // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?\n    // unic, vatu, vhal, vjmo, vpal, vrt2\n    // dist -> trak table?\n    // kern, vkrn -> kern table\n    // lfbd + opbd + rtbd -> opbd table?\n    // mark, mkmk -> acnt table?\n    // locl -> languageTag + ltag table\n    case: $3b6302b64eccc32c$var$feature('caseSensitiveLayout', 'caseSensitiveLayout'),\n    ccmp: $3b6302b64eccc32c$var$feature('unicodeDecomposition', 'canonicalComposition'),\n    cpct: $3b6302b64eccc32c$var$feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),\n    valt: $3b6302b64eccc32c$var$feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),\n    swsh: $3b6302b64eccc32c$var$feature('contextualAlternates', 'swashAlternates'),\n    cswh: $3b6302b64eccc32c$var$feature('contextualAlternates', 'contextualSwashAlternates'),\n    curs: $3b6302b64eccc32c$var$feature('cursiveConnection', 'cursive'),\n    c2pc: $3b6302b64eccc32c$var$feature('upperCase', 'upperCasePetiteCaps'),\n    c2sc: $3b6302b64eccc32c$var$feature('upperCase', 'upperCaseSmallCaps'),\n    init: $3b6302b64eccc32c$var$feature('smartSwash', 'wordInitialSwashes'),\n    fin2: $3b6302b64eccc32c$var$feature('smartSwash', 'wordFinalSwashes'),\n    medi: $3b6302b64eccc32c$var$feature('smartSwash', 'nonFinalSwashes'),\n    med2: $3b6302b64eccc32c$var$feature('smartSwash', 'nonFinalSwashes'),\n    fin3: $3b6302b64eccc32c$var$feature('smartSwash', 'wordFinalSwashes'),\n    fina: $3b6302b64eccc32c$var$feature('smartSwash', 'wordFinalSwashes'),\n    pkna: $3b6302b64eccc32c$var$feature('kanaSpacing', 'proportionalKana'),\n    half: $3b6302b64eccc32c$var$feature('textSpacing', 'halfWidthText'),\n    halt: $3b6302b64eccc32c$var$feature('textSpacing', 'altHalfWidthText'),\n    hkna: $3b6302b64eccc32c$var$feature('alternateKana', 'alternateHorizKana'),\n    vkna: $3b6302b64eccc32c$var$feature('alternateKana', 'alternateVertKana'),\n    // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated\n    ital: $3b6302b64eccc32c$var$feature('italicCJKRoman', 'CJKItalicRoman'),\n    lnum: $3b6302b64eccc32c$var$feature('numberCase', 'upperCaseNumbers'),\n    onum: $3b6302b64eccc32c$var$feature('numberCase', 'lowerCaseNumbers'),\n    mgrk: $3b6302b64eccc32c$var$feature('mathematicalExtras', 'mathematicalGreek'),\n    // nalt: not enough info. what type of annotation?\n    // ornm: ditto, which ornament style?\n    calt: $3b6302b64eccc32c$var$feature('contextualAlternates', 'contextualAlternates'),\n    vrt2: $3b6302b64eccc32c$var$feature('verticalSubstitution', 'substituteVerticalForms'),\n    vert: $3b6302b64eccc32c$var$feature('verticalSubstitution', 'substituteVerticalForms'),\n    tnum: $3b6302b64eccc32c$var$feature('numberSpacing', 'monospacedNumbers'),\n    pnum: $3b6302b64eccc32c$var$feature('numberSpacing', 'proportionalNumbers'),\n    sups: $3b6302b64eccc32c$var$feature('verticalPosition', 'superiors'),\n    subs: $3b6302b64eccc32c$var$feature('verticalPosition', 'inferiors'),\n    ordn: $3b6302b64eccc32c$var$feature('verticalPosition', 'ordinals'),\n    pwid: $3b6302b64eccc32c$var$feature('textSpacing', 'proportionalText'),\n    hwid: $3b6302b64eccc32c$var$feature('textSpacing', 'halfWidthText'),\n    qwid: $3b6302b64eccc32c$var$feature('textSpacing', 'quarterWidthText'),\n    twid: $3b6302b64eccc32c$var$feature('textSpacing', 'thirdWidthText'),\n    fwid: $3b6302b64eccc32c$var$feature('textSpacing', 'proportionalText'),\n    palt: $3b6302b64eccc32c$var$feature('textSpacing', 'altProportionalText'),\n    trad: $3b6302b64eccc32c$var$feature('characterShape', 'traditionalCharacters'),\n    smpl: $3b6302b64eccc32c$var$feature('characterShape', 'simplifiedCharacters'),\n    jp78: $3b6302b64eccc32c$var$feature('characterShape', 'JIS1978Characters'),\n    jp83: $3b6302b64eccc32c$var$feature('characterShape', 'JIS1983Characters'),\n    jp90: $3b6302b64eccc32c$var$feature('characterShape', 'JIS1990Characters'),\n    jp04: $3b6302b64eccc32c$var$feature('characterShape', 'JIS2004Characters'),\n    expt: $3b6302b64eccc32c$var$feature('characterShape', 'expertCharacters'),\n    hojo: $3b6302b64eccc32c$var$feature('characterShape', 'hojoCharacters'),\n    nlck: $3b6302b64eccc32c$var$feature('characterShape', 'NLCCharacters'),\n    tnam: $3b6302b64eccc32c$var$feature('characterShape', 'traditionalNamesCharacters'),\n    ruby: $3b6302b64eccc32c$var$feature('rubyKana', 'rubyKana'),\n    titl: $3b6302b64eccc32c$var$feature('styleOptions', 'titlingCaps'),\n    zero: $3b6302b64eccc32c$var$feature('typographicExtras', 'slashedZero'),\n    ss01: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltOne'),\n    ss02: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltTwo'),\n    ss03: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltThree'),\n    ss04: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltFour'),\n    ss05: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltFive'),\n    ss06: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltSix'),\n    ss07: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltSeven'),\n    ss08: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltEight'),\n    ss09: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltNine'),\n    ss10: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltTen'),\n    ss11: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltEleven'),\n    ss12: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltTwelve'),\n    ss13: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltThirteen'),\n    ss14: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltFourteen'),\n    ss15: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltFifteen'),\n    ss16: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltSixteen'),\n    ss17: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltSeventeen'),\n    ss18: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltEighteen'),\n    ss19: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltNineteen'),\n    ss20: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltTwenty')\n};\n// salt: feature 'stylisticAlternatives', 'stylisticAltOne' # hmm, which one to choose\n// Add cv01-cv99 features\nfor(let i = 1; i <= 99; i++)$3b6302b64eccc32c$var$OTMapping[`cv${`00${i}`.slice(-2)}`] = [\n    $3b6302b64eccc32c$var$features.characterAlternatives.code,\n    i\n];\n// create inverse mapping\nlet $3b6302b64eccc32c$var$AATMapping = {};\nfor(let ot in $3b6302b64eccc32c$var$OTMapping){\n    let aat = $3b6302b64eccc32c$var$OTMapping[ot];\n    if ($3b6302b64eccc32c$var$AATMapping[aat[0]] == null) $3b6302b64eccc32c$var$AATMapping[aat[0]] = {};\n    $3b6302b64eccc32c$var$AATMapping[aat[0]][aat[1]] = ot;\n}\nfunction $3b6302b64eccc32c$export$b813f7d2a1677c16(features) {\n    let res = {};\n    for(let k in features){\n        let r;\n        if (r = $3b6302b64eccc32c$var$OTMapping[k]) {\n            if (res[r[0]] == null) res[r[0]] = {};\n            res[r[0]][r[1]] = features[k];\n        }\n    }\n    return res;\n}\n// Maps strings in a [featureType, featureSetting]\n// to their equivalent number codes\nfunction $3b6302b64eccc32c$var$mapFeatureStrings(f) {\n    let [type, setting] = f;\n    if (isNaN(type)) var typeCode = $3b6302b64eccc32c$var$features[type] && $3b6302b64eccc32c$var$features[type].code;\n    else var typeCode = type;\n    if (isNaN(setting)) var settingCode = $3b6302b64eccc32c$var$features[type] && $3b6302b64eccc32c$var$features[type][setting];\n    else var settingCode = setting;\n    return [\n        typeCode,\n        settingCode\n    ];\n}\nfunction $3b6302b64eccc32c$export$bd6df347a4f391c4(features) {\n    let res = {};\n    if (Array.isArray(features)) for(let k = 0; k < features.length; k++){\n        let r;\n        let f = $3b6302b64eccc32c$var$mapFeatureStrings(features[k]);\n        if (r = $3b6302b64eccc32c$var$AATMapping[f[0]] && $3b6302b64eccc32c$var$AATMapping[f[0]][f[1]]) res[r] = true;\n    }\n    else if (typeof features === 'object') for(let type in features){\n        let feature = features[type];\n        for(let setting in feature){\n            let r;\n            let f = $3b6302b64eccc32c$var$mapFeatureStrings([\n                type,\n                setting\n            ]);\n            if (feature[setting] && (r = $3b6302b64eccc32c$var$AATMapping[f[0]] && $3b6302b64eccc32c$var$AATMapping[f[0]][f[1]])) res[r] = true;\n        }\n    }\n    return Object.keys(res);\n}\n\n\n\n\n\n\n\nclass $ff5ce077dae0f144$export$2e2bcd8739ae039 {\n    lookup(glyph) {\n        switch(this.table.version){\n            case 0:\n                return this.table.values.getItem(glyph);\n            case 2:\n            case 4:\n                {\n                    let min = 0;\n                    let max = this.table.binarySearchHeader.nUnits - 1;\n                    while(min <= max){\n                        var mid = min + max >> 1;\n                        var seg = this.table.segments[mid];\n                        // special end of search value\n                        if (seg.firstGlyph === 0xffff) return null;\n                        if (glyph < seg.firstGlyph) max = mid - 1;\n                        else if (glyph > seg.lastGlyph) min = mid + 1;\n                        else {\n                            if (this.table.version === 2) return seg.value;\n                            else return seg.values[glyph - seg.firstGlyph];\n                        }\n                    }\n                    return null;\n                }\n            case 6:\n                {\n                    let min = 0;\n                    let max = this.table.binarySearchHeader.nUnits - 1;\n                    while(min <= max){\n                        var mid = min + max >> 1;\n                        var seg = this.table.segments[mid];\n                        // special end of search value\n                        if (seg.glyph === 0xffff) return null;\n                        if (glyph < seg.glyph) max = mid - 1;\n                        else if (glyph > seg.glyph) min = mid + 1;\n                        else return seg.value;\n                    }\n                    return null;\n                }\n            case 8:\n                return this.table.values[glyph - this.table.firstGlyph];\n            default:\n                throw new Error(`Unknown lookup table format: ${this.table.version}`);\n        }\n    }\n    glyphsForValue(classValue) {\n        let res = [];\n        switch(this.table.version){\n            case 2:\n            case 4:\n                for (let segment of this.table.segments)if (this.table.version === 2 && segment.value === classValue) res.push(...(0, $12727730ddfc8bfe$export$d02631cccf789723)(segment.firstGlyph, segment.lastGlyph + 1));\n                else {\n                    for(let index = 0; index < segment.values.length; index++)if (segment.values[index] === classValue) res.push(segment.firstGlyph + index);\n                }\n                break;\n            case 6:\n                for (let segment of this.table.segments)if (segment.value === classValue) res.push(segment.glyph);\n                break;\n            case 8:\n                for(let i = 0; i < this.table.values.length; i++)if (this.table.values[i] === classValue) res.push(this.table.firstGlyph + i);\n                break;\n            default:\n                throw new Error(`Unknown lookup table format: ${this.table.version}`);\n        }\n        return res;\n    }\n    constructor(table){\n        this.table = table;\n    }\n}\n(0, _swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $ff5ce077dae0f144$export$2e2bcd8739ae039.prototype, \"glyphsForValue\", null);\n\n\nconst $50c7aac9316f2948$var$START_OF_TEXT_STATE = 0;\nconst $50c7aac9316f2948$var$START_OF_LINE_STATE = 1;\nconst $50c7aac9316f2948$var$END_OF_TEXT_CLASS = 0;\nconst $50c7aac9316f2948$var$OUT_OF_BOUNDS_CLASS = 1;\nconst $50c7aac9316f2948$var$DELETED_GLYPH_CLASS = 2;\nconst $50c7aac9316f2948$var$END_OF_LINE_CLASS = 3;\nconst $50c7aac9316f2948$var$DONT_ADVANCE = 0x4000;\nclass $50c7aac9316f2948$export$2e2bcd8739ae039 {\n    process(glyphs, reverse, processEntry) {\n        let currentState = $50c7aac9316f2948$var$START_OF_TEXT_STATE; // START_OF_LINE_STATE is used for kashida glyph insertions sometimes I think?\n        let index = reverse ? glyphs.length - 1 : 0;\n        let dir = reverse ? -1 : 1;\n        while(dir === 1 && index <= glyphs.length || dir === -1 && index >= -1){\n            let glyph = null;\n            let classCode = $50c7aac9316f2948$var$OUT_OF_BOUNDS_CLASS;\n            let shouldAdvance = true;\n            if (index === glyphs.length || index === -1) classCode = $50c7aac9316f2948$var$END_OF_TEXT_CLASS;\n            else {\n                glyph = glyphs[index];\n                if (glyph.id === 0xffff) classCode = $50c7aac9316f2948$var$DELETED_GLYPH_CLASS;\n                else {\n                    classCode = this.lookupTable.lookup(glyph.id);\n                    if (classCode == null) classCode = $50c7aac9316f2948$var$OUT_OF_BOUNDS_CLASS;\n                }\n            }\n            let row = this.stateTable.stateArray.getItem(currentState);\n            let entryIndex = row[classCode];\n            let entry = this.stateTable.entryTable.getItem(entryIndex);\n            if (classCode !== $50c7aac9316f2948$var$END_OF_TEXT_CLASS && classCode !== $50c7aac9316f2948$var$DELETED_GLYPH_CLASS) {\n                processEntry(glyph, entry, index);\n                shouldAdvance = !(entry.flags & $50c7aac9316f2948$var$DONT_ADVANCE);\n            }\n            currentState = entry.newState;\n            if (shouldAdvance) index += dir;\n        }\n        return glyphs;\n    }\n    /**\n   * Performs a depth-first traversal of the glyph strings\n   * represented by the state machine.\n   */ traverse(opts, state = 0, visited = new Set) {\n        if (visited.has(state)) return;\n        visited.add(state);\n        let { nClasses: nClasses, stateArray: stateArray, entryTable: entryTable } = this.stateTable;\n        let row = stateArray.getItem(state);\n        // Skip predefined classes\n        for(let classCode = 4; classCode < nClasses; classCode++){\n            let entryIndex = row[classCode];\n            let entry = entryTable.getItem(entryIndex);\n            // Try all glyphs in the class\n            for (let glyph of this.lookupTable.glyphsForValue(classCode)){\n                if (opts.enter) opts.enter(glyph, entry);\n                if (entry.newState !== 0) this.traverse(opts, entry.newState, visited);\n                if (opts.exit) opts.exit(glyph, entry);\n            }\n        }\n    }\n    constructor(stateTable){\n        this.stateTable = stateTable;\n        this.lookupTable = new (0, $ff5ce077dae0f144$export$2e2bcd8739ae039)(stateTable.classTable);\n    }\n}\n\n\n\n\n// indic replacement flags\nconst $55f71433a605c87d$var$MARK_FIRST = 0x8000;\nconst $55f71433a605c87d$var$MARK_LAST = 0x2000;\nconst $55f71433a605c87d$var$VERB = 0x000F;\n// contextual substitution and glyph insertion flag\nconst $55f71433a605c87d$var$SET_MARK = 0x8000;\n// ligature entry flags\nconst $55f71433a605c87d$var$SET_COMPONENT = 0x8000;\nconst $55f71433a605c87d$var$PERFORM_ACTION = 0x2000;\n// ligature action masks\nconst $55f71433a605c87d$var$LAST_MASK = 0x80000000;\nconst $55f71433a605c87d$var$STORE_MASK = 0x40000000;\nconst $55f71433a605c87d$var$OFFSET_MASK = 0x3FFFFFFF;\nconst $55f71433a605c87d$var$VERTICAL_ONLY = 0x800000;\nconst $55f71433a605c87d$var$REVERSE_DIRECTION = 0x400000;\nconst $55f71433a605c87d$var$HORIZONTAL_AND_VERTICAL = 0x200000;\n// glyph insertion flags\nconst $55f71433a605c87d$var$CURRENT_IS_KASHIDA_LIKE = 0x2000;\nconst $55f71433a605c87d$var$MARKED_IS_KASHIDA_LIKE = 0x1000;\nconst $55f71433a605c87d$var$CURRENT_INSERT_BEFORE = 0x0800;\nconst $55f71433a605c87d$var$MARKED_INSERT_BEFORE = 0x0400;\nconst $55f71433a605c87d$var$CURRENT_INSERT_COUNT = 0x03E0;\nconst $55f71433a605c87d$var$MARKED_INSERT_COUNT = 0x001F;\nclass $55f71433a605c87d$export$2e2bcd8739ae039 {\n    // Processes an array of glyphs and applies the specified features\n    // Features should be in the form of {featureType:{featureSetting:boolean}}\n    process(glyphs, features = {}) {\n        for (let chain of this.morx.chains){\n            let flags = chain.defaultFlags;\n            // enable/disable the requested features\n            for (let feature of chain.features){\n                let f;\n                if (f = features[feature.featureType]) {\n                    if (f[feature.featureSetting]) {\n                        flags &= feature.disableFlags;\n                        flags |= feature.enableFlags;\n                    } else if (f[feature.featureSetting] === false) {\n                        flags |= ~feature.disableFlags;\n                        flags &= ~feature.enableFlags;\n                    }\n                }\n            }\n            for (let subtable of chain.subtables)if (subtable.subFeatureFlags & flags) this.processSubtable(subtable, glyphs);\n        }\n        // remove deleted glyphs\n        let index = glyphs.length - 1;\n        while(index >= 0){\n            if (glyphs[index].id === 0xffff) glyphs.splice(index, 1);\n            index--;\n        }\n        return glyphs;\n    }\n    processSubtable(subtable, glyphs) {\n        this.subtable = subtable;\n        this.glyphs = glyphs;\n        if (this.subtable.type === 4) {\n            this.processNoncontextualSubstitutions(this.subtable, this.glyphs);\n            return;\n        }\n        this.ligatureStack = [];\n        this.markedGlyph = null;\n        this.firstGlyph = null;\n        this.lastGlyph = null;\n        this.markedIndex = null;\n        let stateMachine = this.getStateMachine(subtable);\n        let process = this.getProcessor();\n        let reverse = !!(this.subtable.coverage & $55f71433a605c87d$var$REVERSE_DIRECTION);\n        return stateMachine.process(this.glyphs, reverse, process);\n    }\n    getStateMachine(subtable) {\n        return new (0, $50c7aac9316f2948$export$2e2bcd8739ae039)(subtable.table.stateTable);\n    }\n    getProcessor() {\n        switch(this.subtable.type){\n            case 0:\n                return this.processIndicRearragement;\n            case 1:\n                return this.processContextualSubstitution;\n            case 2:\n                return this.processLigature;\n            case 4:\n                return this.processNoncontextualSubstitutions;\n            case 5:\n                return this.processGlyphInsertion;\n            default:\n                throw new Error(`Invalid morx subtable type: ${this.subtable.type}`);\n        }\n    }\n    processIndicRearragement(glyph, entry, index) {\n        if (entry.flags & $55f71433a605c87d$var$MARK_FIRST) this.firstGlyph = index;\n        if (entry.flags & $55f71433a605c87d$var$MARK_LAST) this.lastGlyph = index;\n        $55f71433a605c87d$var$reorderGlyphs(this.glyphs, entry.flags & $55f71433a605c87d$var$VERB, this.firstGlyph, this.lastGlyph);\n    }\n    processContextualSubstitution(glyph, entry, index) {\n        let subsitutions = this.subtable.table.substitutionTable.items;\n        if (entry.markIndex !== 0xffff) {\n            let lookup = subsitutions.getItem(entry.markIndex);\n            let lookupTable = new (0, $ff5ce077dae0f144$export$2e2bcd8739ae039)(lookup);\n            glyph = this.glyphs[this.markedGlyph];\n            var gid = lookupTable.lookup(glyph.id);\n            if (gid) this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);\n        }\n        if (entry.currentIndex !== 0xffff) {\n            let lookup = subsitutions.getItem(entry.currentIndex);\n            let lookupTable = new (0, $ff5ce077dae0f144$export$2e2bcd8739ae039)(lookup);\n            glyph = this.glyphs[index];\n            var gid = lookupTable.lookup(glyph.id);\n            if (gid) this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n        }\n        if (entry.flags & $55f71433a605c87d$var$SET_MARK) this.markedGlyph = index;\n    }\n    processLigature(glyph, entry, index) {\n        if (entry.flags & $55f71433a605c87d$var$SET_COMPONENT) this.ligatureStack.push(index);\n        if (entry.flags & $55f71433a605c87d$var$PERFORM_ACTION) {\n            let actions = this.subtable.table.ligatureActions;\n            let components = this.subtable.table.components;\n            let ligatureList = this.subtable.table.ligatureList;\n            let actionIndex = entry.action;\n            let last = false;\n            let ligatureIndex = 0;\n            let codePoints = [];\n            let ligatureGlyphs = [];\n            while(!last){\n                let componentGlyph = this.ligatureStack.pop();\n                codePoints.unshift(...this.glyphs[componentGlyph].codePoints);\n                let action = actions.getItem(actionIndex++);\n                last = !!(action & $55f71433a605c87d$var$LAST_MASK);\n                let store = !!(action & $55f71433a605c87d$var$STORE_MASK);\n                let offset = (action & $55f71433a605c87d$var$OFFSET_MASK) << 2 >> 2; // sign extend 30 to 32 bits\n                offset += this.glyphs[componentGlyph].id;\n                let component = components.getItem(offset);\n                ligatureIndex += component;\n                if (last || store) {\n                    let ligatureEntry = ligatureList.getItem(ligatureIndex);\n                    this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);\n                    ligatureGlyphs.push(componentGlyph);\n                    ligatureIndex = 0;\n                    codePoints = [];\n                } else this.glyphs[componentGlyph] = this.font.getGlyph(0xffff);\n            }\n            // Put ligature glyph indexes back on the stack\n            this.ligatureStack.push(...ligatureGlyphs);\n        }\n    }\n    processNoncontextualSubstitutions(subtable, glyphs, index) {\n        let lookupTable = new (0, $ff5ce077dae0f144$export$2e2bcd8739ae039)(subtable.table.lookupTable);\n        for(index = 0; index < glyphs.length; index++){\n            let glyph = glyphs[index];\n            if (glyph.id !== 0xffff) {\n                let gid = lookupTable.lookup(glyph.id);\n                if (gid) glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n            }\n        }\n    }\n    _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {\n        let insertions = [];\n        while(count--){\n            let gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);\n            insertions.push(this.font.getGlyph(gid));\n        }\n        if (!isBefore) glyphIndex++;\n        this.glyphs.splice(glyphIndex, 0, ...insertions);\n    }\n    processGlyphInsertion(glyph, entry, index) {\n        if (entry.flags & $55f71433a605c87d$var$SET_MARK) this.markedIndex = index;\n        if (entry.markedInsertIndex !== 0xffff) {\n            let count = (entry.flags & $55f71433a605c87d$var$MARKED_INSERT_COUNT) >>> 5;\n            let isBefore = !!(entry.flags & $55f71433a605c87d$var$MARKED_INSERT_BEFORE);\n            this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);\n        }\n        if (entry.currentInsertIndex !== 0xffff) {\n            let count = (entry.flags & $55f71433a605c87d$var$CURRENT_INSERT_COUNT) >>> 5;\n            let isBefore = !!(entry.flags & $55f71433a605c87d$var$CURRENT_INSERT_BEFORE);\n            this._insertGlyphs(index, entry.currentInsertIndex, count, isBefore);\n        }\n    }\n    getSupportedFeatures() {\n        let features = [];\n        for (let chain of this.morx.chains)for (let feature of chain.features)features.push([\n            feature.featureType,\n            feature.featureSetting\n        ]);\n        return features;\n    }\n    generateInputs(gid) {\n        if (!this.inputCache) this.generateInputCache();\n        return this.inputCache[gid] || [];\n    }\n    generateInputCache() {\n        this.inputCache = {};\n        for (let chain of this.morx.chains){\n            let flags = chain.defaultFlags;\n            for (let subtable of chain.subtables)if (subtable.subFeatureFlags & flags) this.generateInputsForSubtable(subtable);\n        }\n    }\n    generateInputsForSubtable(subtable) {\n        // Currently, only supporting ligature subtables.\n        if (subtable.type !== 2) return;\n        let reverse = !!(subtable.coverage & $55f71433a605c87d$var$REVERSE_DIRECTION);\n        if (reverse) throw new Error('Reverse subtable, not supported.');\n        this.subtable = subtable;\n        this.ligatureStack = [];\n        let stateMachine = this.getStateMachine(subtable);\n        let process = this.getProcessor();\n        let input = [];\n        let stack = [];\n        this.glyphs = [];\n        stateMachine.traverse({\n            enter: (glyph, entry)=>{\n                let glyphs = this.glyphs;\n                stack.push({\n                    glyphs: glyphs.slice(),\n                    ligatureStack: this.ligatureStack.slice()\n                });\n                // Add glyph to input and glyphs to process.\n                let g = this.font.getGlyph(glyph);\n                input.push(g);\n                glyphs.push(input[input.length - 1]);\n                // Process ligature substitution\n                process(glyphs[glyphs.length - 1], entry, glyphs.length - 1);\n                // Add input to result if only one matching (non-deleted) glyph remains.\n                let count = 0;\n                let found = 0;\n                for(let i = 0; i < glyphs.length && count <= 1; i++)if (glyphs[i].id !== 0xffff) {\n                    count++;\n                    found = glyphs[i].id;\n                }\n                if (count === 1) {\n                    let result = input.map((g)=>g.id);\n                    let cache = this.inputCache[found];\n                    if (cache) cache.push(result);\n                    else this.inputCache[found] = [\n                        result\n                    ];\n                }\n            },\n            exit: ()=>{\n                ({ glyphs: this.glyphs, ligatureStack: this.ligatureStack } = stack.pop());\n                input.pop();\n            }\n        });\n    }\n    constructor(font){\n        this.processIndicRearragement = this.processIndicRearragement.bind(this);\n        this.processContextualSubstitution = this.processContextualSubstitution.bind(this);\n        this.processLigature = this.processLigature.bind(this);\n        this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);\n        this.processGlyphInsertion = this.processGlyphInsertion.bind(this);\n        this.font = font;\n        this.morx = font.morx;\n        this.inputCache = null;\n    }\n}\n(0, _swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $55f71433a605c87d$export$2e2bcd8739ae039.prototype, \"getStateMachine\", null);\n// swaps the glyphs in rangeA with those in rangeB\n// reverse the glyphs inside those ranges if specified\n// ranges are in [offset, length] format\nfunction $55f71433a605c87d$var$swap(glyphs, rangeA, rangeB, reverseA = false, reverseB = false) {\n    let end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);\n    if (reverseB) end.reverse();\n    let start = glyphs.splice(rangeA[0], rangeA[1], ...end);\n    if (reverseA) start.reverse();\n    glyphs.splice(rangeB[0] - (rangeA[1] - 1), 0, ...start);\n    return glyphs;\n}\nfunction $55f71433a605c87d$var$reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {\n    let length = lastGlyph - firstGlyph + 1;\n    switch(verb){\n        case 0:\n            return glyphs;\n        case 1:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                1\n            ], [\n                lastGlyph,\n                0\n            ]);\n        case 2:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                0\n            ], [\n                lastGlyph,\n                1\n            ]);\n        case 3:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                1\n            ], [\n                lastGlyph,\n                1\n            ]);\n        case 4:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                0\n            ]);\n        case 5:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                0\n            ], true, false);\n        case 6:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                0\n            ], [\n                lastGlyph,\n                2\n            ]);\n        case 7:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                0\n            ], [\n                lastGlyph,\n                2\n            ], false, true);\n        case 8:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                1\n            ], [\n                lastGlyph,\n                2\n            ]);\n        case 9:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                1\n            ], [\n                lastGlyph,\n                2\n            ], false, true);\n        case 10:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                1\n            ]);\n        case 11:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                1\n            ], true, false);\n        case 12:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                2\n            ]);\n        case 13:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                2\n            ], true, false);\n        case 14:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                2\n            ], false, true);\n        case 15:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                2\n            ], true, true);\n        default:\n            throw new Error(`Unknown verb: ${verb}`);\n    }\n}\n\n\nclass $ba6dd74203be8728$export$2e2bcd8739ae039 {\n    substitute(glyphRun) {\n        // AAT expects the glyphs to be in visual order prior to morx processing,\n        // so reverse the glyphs if the script is right-to-left.\n        if (glyphRun.direction === 'rtl') glyphRun.glyphs.reverse();\n        this.morxProcessor.process(glyphRun.glyphs, $3b6302b64eccc32c$export$b813f7d2a1677c16(glyphRun.features));\n    }\n    getAvailableFeatures(script, language) {\n        return $3b6302b64eccc32c$export$bd6df347a4f391c4(this.morxProcessor.getSupportedFeatures());\n    }\n    stringsForGlyph(gid) {\n        let glyphStrings = this.morxProcessor.generateInputs(gid);\n        let result = new Set;\n        for (let glyphs of glyphStrings)this._addStrings(glyphs, 0, result, '');\n        return result;\n    }\n    _addStrings(glyphs, index, strings, string) {\n        let codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);\n        for (let codePoint of codePoints){\n            let s = string + String.fromCodePoint(codePoint);\n            if (index < glyphs.length - 1) this._addStrings(glyphs, index + 1, strings, s);\n            else strings.add(s);\n        }\n    }\n    constructor(font){\n        this.font = font;\n        this.morxProcessor = new (0, $55f71433a605c87d$export$2e2bcd8739ae039)(font);\n        this.fallbackPosition = false;\n    }\n}\n\n\n\nclass $94d7a73bd2edfc9a$export$2e2bcd8739ae039 {\n    /**\n   * Adds the given features to the last stage.\n   * Ignores features that have already been applied.\n   */ _addFeatures(features, global) {\n        let stageIndex = this.stages.length - 1;\n        let stage = this.stages[stageIndex];\n        for (let feature of features)if (this.allFeatures[feature] == null) {\n            stage.push(feature);\n            this.allFeatures[feature] = stageIndex;\n            if (global) this.globalFeatures[feature] = true;\n        }\n    }\n    /**\n   * Add features to the last stage\n   */ add(arg, global = true) {\n        if (this.stages.length === 0) this.stages.push([]);\n        if (typeof arg === 'string') arg = [\n            arg\n        ];\n        if (Array.isArray(arg)) this._addFeatures(arg, global);\n        else if (typeof arg === 'object') {\n            this._addFeatures(arg.global || [], true);\n            this._addFeatures(arg.local || [], false);\n        } else throw new Error(\"Unsupported argument to ShapingPlan#add\");\n    }\n    /**\n   * Add a new stage\n   */ addStage(arg, global) {\n        if (typeof arg === 'function') this.stages.push(arg, []);\n        else {\n            this.stages.push([]);\n            this.add(arg, global);\n        }\n    }\n    setFeatureOverrides(features) {\n        if (Array.isArray(features)) this.add(features);\n        else if (typeof features === 'object') for(let tag in features){\n            if (features[tag]) this.add(tag);\n            else if (this.allFeatures[tag] != null) {\n                let stage = this.stages[this.allFeatures[tag]];\n                stage.splice(stage.indexOf(tag), 1);\n                delete this.allFeatures[tag];\n                delete this.globalFeatures[tag];\n            }\n        }\n    }\n    /**\n   * Assigns the global features to the given glyphs\n   */ assignGlobalFeatures(glyphs) {\n        for (let glyph of glyphs)for(let feature in this.globalFeatures)glyph.features[feature] = true;\n    }\n    /**\n   * Executes the planned stages using the given OTProcessor\n   */ process(processor, glyphs, positions) {\n        for (let stage of this.stages){\n            if (typeof stage === 'function') {\n                if (!positions) stage(this.font, glyphs, this);\n            } else if (stage.length > 0) processor.applyFeatures(stage, glyphs, positions);\n        }\n    }\n    constructor(font, script, direction){\n        this.font = font;\n        this.script = script;\n        this.direction = direction;\n        this.stages = [];\n        this.globalFeatures = {};\n        this.allFeatures = {};\n    }\n}\n\n\n\n\nconst $649970d87335b30f$var$VARIATION_FEATURES = [\n    'rvrn'\n];\nconst $649970d87335b30f$var$COMMON_FEATURES = [\n    'ccmp',\n    'locl',\n    'rlig',\n    'mark',\n    'mkmk'\n];\nconst $649970d87335b30f$var$FRACTIONAL_FEATURES = [\n    'frac',\n    'numr',\n    'dnom'\n];\nconst $649970d87335b30f$var$HORIZONTAL_FEATURES = [\n    'calt',\n    'clig',\n    'liga',\n    'rclt',\n    'curs',\n    'kern'\n];\nconst $649970d87335b30f$var$VERTICAL_FEATURES = [\n    'vert'\n];\nconst $649970d87335b30f$var$DIRECTIONAL_FEATURES = {\n    ltr: [\n        'ltra',\n        'ltrm'\n    ],\n    rtl: [\n        'rtla',\n        'rtlm'\n    ]\n};\nclass $649970d87335b30f$export$2e2bcd8739ae039 {\n    static plan(plan, glyphs, features) {\n        // Plan the features we want to apply\n        this.planPreprocessing(plan);\n        this.planFeatures(plan);\n        this.planPostprocessing(plan, features);\n        // Assign the global features to all the glyphs\n        plan.assignGlobalFeatures(glyphs);\n        // Assign local features to glyphs\n        this.assignFeatures(plan, glyphs);\n    }\n    static planPreprocessing(plan) {\n        plan.add({\n            global: [\n                ...$649970d87335b30f$var$VARIATION_FEATURES,\n                ...$649970d87335b30f$var$DIRECTIONAL_FEATURES[plan.direction]\n            ],\n            local: $649970d87335b30f$var$FRACTIONAL_FEATURES\n        });\n    }\n    static planFeatures(plan) {\n    // Do nothing by default. Let subclasses override this.\n    }\n    static planPostprocessing(plan, userFeatures) {\n        plan.add([\n            ...$649970d87335b30f$var$COMMON_FEATURES,\n            ...$649970d87335b30f$var$HORIZONTAL_FEATURES\n        ]);\n        plan.setFeatureOverrides(userFeatures);\n    }\n    static assignFeatures(plan, glyphs) {\n        // Enable contextual fractions\n        for(let i = 0; i < glyphs.length; i++){\n            let glyph = glyphs[i];\n            if (glyph.codePoints[0] === 0x2044) {\n                let start = i;\n                let end = i + 1;\n                // Apply numerator\n                while(start > 0 && (0, unicode_properties__WEBPACK_IMPORTED_MODULE_3__.isDigit)(glyphs[start - 1].codePoints[0])){\n                    glyphs[start - 1].features.numr = true;\n                    glyphs[start - 1].features.frac = true;\n                    start--;\n                }\n                // Apply denominator\n                while(end < glyphs.length && (0, unicode_properties__WEBPACK_IMPORTED_MODULE_3__.isDigit)(glyphs[end].codePoints[0])){\n                    glyphs[end].features.dnom = true;\n                    glyphs[end].features.frac = true;\n                    end++;\n                }\n                // Apply fraction slash\n                glyph.features.frac = true;\n                i = end - 1;\n            }\n        }\n    }\n}\n(0, _swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_10__._)($649970d87335b30f$export$2e2bcd8739ae039, \"zeroMarkWidths\", 'AFTER_GPOS');\n\n\n\n\n\n\nconst $764eb544bbe1ccf0$var$trie = new (0, unicode_trie__WEBPACK_IMPORTED_MODULE_4__)((0, $12727730ddfc8bfe$export$94fdf11bafc8de6b)(\"APABAAAAAAAAOAAAAf0BAv7tmi1MxDAUx7vtvjhAgcDgkEgEAnmXEBIMCYaEcygEiqBQ4FAkCE4ikUgMiiBJSAgSiUQSDMn9L9eSl6bddddug9t7yS/trevre+3r27pcNxZiG+yCfdCVv/9LeQxOwRm4AJegD27ALbgD9+ABPJF+z+BN/h7yDj5k/VOWX6SdmU5+wLWknggxDxaS8u0qiiX4uiz9XamQ3wzDMAzDMAzDMAzDVI/h959V/v7BMAzDMAzDMLlyNTNiMSdewVxbiA44B4/guz1qW58VYlMI0WsJ0W+N6kXw0spvPtdwhtkwnGM6uLaV4Xyzg3v3PM9DPfQ/sOg4xPWjipy31P8LTqbU304c/cLCUmWJLNB2Uz2U1KTeRKNmKHVMfbJC+/0loTZRH/W5cvEvBJPMbREkWt3FD1NcqXZBSpuE2Ad0PBehPtNrPtIEdYP+hiRt/V1jIiE69X4NT/uVZI3PUHE9bm5M7ePGdZWy951v7Nn6j8v1WWKP3mt6ttnsigx6VN7Vc0VomSSGqW2mGNP1muZPl7LfjNUaKNFtDGVf2fvE9O7VlBS5j333c5p/eeoOqcs1R/hIqDWLJ7TTlksirVT1SI7l8k4Yp+g3jafGcrU1RM6l9th80XOpnlN97bDNY4i4s61B0Si/ipa0uHMl6zqEjlFfCZm/TM8KmzQDjmuTAQ==\"));\nconst $764eb544bbe1ccf0$var$FEATURES = [\n    'isol',\n    'fina',\n    'fin2',\n    'fin3',\n    'medi',\n    'med2',\n    'init'\n];\nconst $764eb544bbe1ccf0$var$ShapingClasses = {\n    Non_Joining: 0,\n    Left_Joining: 1,\n    Right_Joining: 2,\n    Dual_Joining: 3,\n    Join_Causing: 3,\n    ALAPH: 4,\n    'DALATH RISH': 5,\n    Transparent: 6\n};\nconst $764eb544bbe1ccf0$var$ISOL = 'isol';\nconst $764eb544bbe1ccf0$var$FINA = 'fina';\nconst $764eb544bbe1ccf0$var$FIN2 = 'fin2';\nconst $764eb544bbe1ccf0$var$FIN3 = 'fin3';\nconst $764eb544bbe1ccf0$var$MEDI = 'medi';\nconst $764eb544bbe1ccf0$var$MED2 = 'med2';\nconst $764eb544bbe1ccf0$var$INIT = 'init';\nconst $764eb544bbe1ccf0$var$NONE = null;\n// Each entry is [prevAction, curAction, nextState]\nconst $764eb544bbe1ccf0$var$STATE_TABLE = [\n    //   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH\n    // State 0: prev was U,  not willing to join.\n    [\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$NONE,\n            0\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            1\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            1\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            6\n        ]\n    ],\n    // State 1: prev was R or ISOL/ALAPH,  not willing to join.\n    [\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$NONE,\n            0\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            1\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$FIN2,\n            5\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            6\n        ]\n    ],\n    // State 2: prev was D/L in ISOL form,  willing to join.\n    [\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$NONE,\n            0\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$INIT,\n            $764eb544bbe1ccf0$var$FINA,\n            1\n        ],\n        [\n            $764eb544bbe1ccf0$var$INIT,\n            $764eb544bbe1ccf0$var$FINA,\n            3\n        ],\n        [\n            $764eb544bbe1ccf0$var$INIT,\n            $764eb544bbe1ccf0$var$FINA,\n            4\n        ],\n        [\n            $764eb544bbe1ccf0$var$INIT,\n            $764eb544bbe1ccf0$var$FINA,\n            6\n        ]\n    ],\n    // State 3: prev was D in FINA form,  willing to join.\n    [\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$NONE,\n            0\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$MEDI,\n            $764eb544bbe1ccf0$var$FINA,\n            1\n        ],\n        [\n            $764eb544bbe1ccf0$var$MEDI,\n            $764eb544bbe1ccf0$var$FINA,\n            3\n        ],\n        [\n            $764eb544bbe1ccf0$var$MEDI,\n            $764eb544bbe1ccf0$var$FINA,\n            4\n        ],\n        [\n            $764eb544bbe1ccf0$var$MEDI,\n            $764eb544bbe1ccf0$var$FINA,\n            6\n        ]\n    ],\n    // State 4: prev was FINA ALAPH,  not willing to join.\n    [\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$NONE,\n            0\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$MED2,\n            $764eb544bbe1ccf0$var$ISOL,\n            1\n        ],\n        [\n            $764eb544bbe1ccf0$var$MED2,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$MED2,\n            $764eb544bbe1ccf0$var$FIN2,\n            5\n        ],\n        [\n            $764eb544bbe1ccf0$var$MED2,\n            $764eb544bbe1ccf0$var$ISOL,\n            6\n        ]\n    ],\n    // State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.\n    [\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$NONE,\n            0\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$ISOL,\n            $764eb544bbe1ccf0$var$ISOL,\n            1\n        ],\n        [\n            $764eb544bbe1ccf0$var$ISOL,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$ISOL,\n            $764eb544bbe1ccf0$var$FIN2,\n            5\n        ],\n        [\n            $764eb544bbe1ccf0$var$ISOL,\n            $764eb544bbe1ccf0$var$ISOL,\n            6\n        ]\n    ],\n    // State 6: prev was DALATH/RISH,  not willing to join.\n    [\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$NONE,\n            0\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            1\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$FIN3,\n            5\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            6\n        ]\n    ]\n];\nclass $764eb544bbe1ccf0$export$2e2bcd8739ae039 extends (0, $649970d87335b30f$export$2e2bcd8739ae039) {\n    static planFeatures(plan) {\n        plan.add([\n            'ccmp',\n            'locl'\n        ]);\n        for(let i = 0; i < $764eb544bbe1ccf0$var$FEATURES.length; i++){\n            let feature = $764eb544bbe1ccf0$var$FEATURES[i];\n            plan.addStage(feature, false);\n        }\n        plan.addStage('mset');\n    }\n    static assignFeatures(plan, glyphs) {\n        super.assignFeatures(plan, glyphs);\n        let prev = -1;\n        let state = 0;\n        let actions = [];\n        // Apply the state machine to map glyphs to features\n        for(let i = 0; i < glyphs.length; i++){\n            let curAction, prevAction;\n            var glyph = glyphs[i];\n            let type = $764eb544bbe1ccf0$var$getShapingClass(glyph.codePoints[0]);\n            if (type === $764eb544bbe1ccf0$var$ShapingClasses.Transparent) {\n                actions[i] = $764eb544bbe1ccf0$var$NONE;\n                continue;\n            }\n            [prevAction, curAction, state] = $764eb544bbe1ccf0$var$STATE_TABLE[state][type];\n            if (prevAction !== $764eb544bbe1ccf0$var$NONE && prev !== -1) actions[prev] = prevAction;\n            actions[i] = curAction;\n            prev = i;\n        }\n        // Apply the chosen features to their respective glyphs\n        for(let index = 0; index < glyphs.length; index++){\n            let feature;\n            var glyph = glyphs[index];\n            if (feature = actions[index]) glyph.features[feature] = true;\n        }\n    }\n}\nfunction $764eb544bbe1ccf0$var$getShapingClass(codePoint) {\n    let res = $764eb544bbe1ccf0$var$trie.get(codePoint);\n    if (res) return res - 1;\n    let category = (0, unicode_properties__WEBPACK_IMPORTED_MODULE_3__.getCategory)(codePoint);\n    if (category === 'Mn' || category === 'Me' || category === 'Cf') return $764eb544bbe1ccf0$var$ShapingClasses.Transparent;\n    return $764eb544bbe1ccf0$var$ShapingClasses.Non_Joining;\n}\n\n\n\n\n\nclass $85d408632270248b$export$2e2bcd8739ae039 {\n    reset(options = {}, index = 0) {\n        this.options = options;\n        this.flags = options.flags || {};\n        this.markAttachmentType = options.markAttachmentType || 0;\n        this.index = index;\n    }\n    get cur() {\n        return this.glyphs[this.index] || null;\n    }\n    shouldIgnore(glyph) {\n        return this.flags.ignoreMarks && glyph.isMark || this.flags.ignoreBaseGlyphs && glyph.isBase || this.flags.ignoreLigatures && glyph.isLigature || this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType;\n    }\n    move(dir) {\n        this.index += dir;\n        while(0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index]))this.index += dir;\n        if (0 > this.index || this.index >= this.glyphs.length) return null;\n        return this.glyphs[this.index];\n    }\n    next() {\n        return this.move(1);\n    }\n    prev() {\n        return this.move(-1);\n    }\n    peek(count = 1) {\n        let idx = this.index;\n        let res = this.increment(count);\n        this.index = idx;\n        return res;\n    }\n    peekIndex(count = 1) {\n        let idx = this.index;\n        this.increment(count);\n        let res = this.index;\n        this.index = idx;\n        return res;\n    }\n    increment(count = 1) {\n        let dir = count < 0 ? -1 : 1;\n        count = Math.abs(count);\n        while(count--)this.move(dir);\n        return this.glyphs[this.index];\n    }\n    constructor(glyphs, options){\n        this.glyphs = glyphs;\n        this.reset(options);\n    }\n}\n\n\n\nconst $a83b9c36aaa94fd3$var$DEFAULT_SCRIPTS = [\n    'DFLT',\n    'dflt',\n    'latn'\n];\nclass $a83b9c36aaa94fd3$export$2e2bcd8739ae039 {\n    findScript(script) {\n        if (this.table.scriptList == null) return null;\n        if (!Array.isArray(script)) script = [\n            script\n        ];\n        for (let s of script)for (let entry of this.table.scriptList){\n            if (entry.tag === s) return entry;\n        }\n        return null;\n    }\n    selectScript(script, language, direction) {\n        let changed = false;\n        let entry;\n        if (!this.script || script !== this.scriptTag) {\n            entry = this.findScript(script);\n            if (!entry) entry = this.findScript($a83b9c36aaa94fd3$var$DEFAULT_SCRIPTS);\n            if (!entry) return this.scriptTag;\n            this.scriptTag = entry.tag;\n            this.script = entry.script;\n            this.language = null;\n            this.languageTag = null;\n            changed = true;\n        }\n        if (!direction || direction !== this.direction) this.direction = direction || $130d1a642ebcd2b7$export$9fddb9d0dd7d8a54(script);\n        if (language && language.length < 4) language += ' '.repeat(4 - language.length);\n        if (!language || language !== this.languageTag) {\n            this.language = null;\n            for (let lang of this.script.langSysRecords)if (lang.tag === language) {\n                this.language = lang.langSys;\n                this.languageTag = lang.tag;\n                break;\n            }\n            if (!this.language) {\n                this.language = this.script.defaultLangSys;\n                this.languageTag = null;\n            }\n            changed = true;\n        }\n        // Build a feature lookup table\n        if (changed) {\n            this.features = {};\n            if (this.language) for (let featureIndex of this.language.featureIndexes){\n                let record = this.table.featureList[featureIndex];\n                let substituteFeature = this.substituteFeatureForVariations(featureIndex);\n                this.features[record.tag] = substituteFeature || record.feature;\n            }\n        }\n        return this.scriptTag;\n    }\n    lookupsForFeatures(userFeatures = [], exclude) {\n        let lookups = [];\n        for (let tag of userFeatures){\n            let feature = this.features[tag];\n            if (!feature) continue;\n            for (let lookupIndex of feature.lookupListIndexes){\n                if (exclude && exclude.indexOf(lookupIndex) !== -1) continue;\n                lookups.push({\n                    feature: tag,\n                    index: lookupIndex,\n                    lookup: this.table.lookupList.get(lookupIndex)\n                });\n            }\n        }\n        lookups.sort((a, b)=>a.index - b.index);\n        return lookups;\n    }\n    substituteFeatureForVariations(featureIndex) {\n        if (this.variationsIndex === -1) return null;\n        let record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];\n        let substitutions = record.featureTableSubstitution.substitutions;\n        for (let substitution of substitutions){\n            if (substitution.featureIndex === featureIndex) return substitution.alternateFeatureTable;\n        }\n        return null;\n    }\n    findVariationsIndex(coords) {\n        let variations = this.table.featureVariations;\n        if (!variations) return -1;\n        let records = variations.featureVariationRecords;\n        for(let i = 0; i < records.length; i++){\n            let conditions = records[i].conditionSet.conditionTable;\n            if (this.variationConditionsMatch(conditions, coords)) return i;\n        }\n        return -1;\n    }\n    variationConditionsMatch(conditions, coords) {\n        return conditions.every((condition)=>{\n            let coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;\n            return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;\n        });\n    }\n    applyFeatures(userFeatures, glyphs, advances) {\n        let lookups = this.lookupsForFeatures(userFeatures);\n        this.applyLookups(lookups, glyphs, advances);\n    }\n    applyLookups(lookups, glyphs, positions) {\n        this.glyphs = glyphs;\n        this.positions = positions;\n        this.glyphIterator = new (0, $85d408632270248b$export$2e2bcd8739ae039)(glyphs);\n        for (let { feature: feature, lookup: lookup } of lookups){\n            this.currentFeature = feature;\n            this.glyphIterator.reset(lookup.flags);\n            while(this.glyphIterator.index < glyphs.length){\n                if (!(feature in this.glyphIterator.cur.features)) {\n                    this.glyphIterator.next();\n                    continue;\n                }\n                for (let table of lookup.subTables){\n                    let res = this.applyLookup(lookup.lookupType, table);\n                    if (res) break;\n                }\n                this.glyphIterator.next();\n            }\n        }\n    }\n    applyLookup(lookup, table) {\n        throw new Error(\"applyLookup must be implemented by subclasses\");\n    }\n    applyLookupList(lookupRecords) {\n        let options = this.glyphIterator.options;\n        let glyphIndex = this.glyphIterator.index;\n        for (let lookupRecord of lookupRecords){\n            // Reset flags and find glyph index for this lookup record\n            this.glyphIterator.reset(options, glyphIndex);\n            this.glyphIterator.increment(lookupRecord.sequenceIndex);\n            // Get the lookup and setup flags for subtables\n            let lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);\n            this.glyphIterator.reset(lookup.flags, this.glyphIterator.index);\n            // Apply lookup subtables until one matches\n            for (let table of lookup.subTables){\n                if (this.applyLookup(lookup.lookupType, table)) break;\n            }\n        }\n        this.glyphIterator.reset(options, glyphIndex);\n        return true;\n    }\n    coverageIndex(coverage, glyph) {\n        if (glyph == null) glyph = this.glyphIterator.cur.id;\n        switch(coverage.version){\n            case 1:\n                return coverage.glyphs.indexOf(glyph);\n            case 2:\n                for (let range of coverage.rangeRecords){\n                    if (range.start <= glyph && glyph <= range.end) return range.startCoverageIndex + glyph - range.start;\n                }\n                break;\n        }\n        return -1;\n    }\n    match(sequenceIndex, sequence, fn, matched) {\n        let pos = this.glyphIterator.index;\n        let glyph = this.glyphIterator.increment(sequenceIndex);\n        let idx = 0;\n        while(idx < sequence.length && glyph && fn(sequence[idx], glyph)){\n            if (matched) matched.push(this.glyphIterator.index);\n            idx++;\n            glyph = this.glyphIterator.next();\n        }\n        this.glyphIterator.index = pos;\n        if (idx < sequence.length) return false;\n        return matched || true;\n    }\n    sequenceMatches(sequenceIndex, sequence) {\n        return this.match(sequenceIndex, sequence, (component, glyph)=>component === glyph.id);\n    }\n    sequenceMatchIndices(sequenceIndex, sequence) {\n        return this.match(sequenceIndex, sequence, (component, glyph)=>{\n            // If the current feature doesn't apply to this glyph,\n            if (!(this.currentFeature in glyph.features)) return false;\n            return component === glyph.id;\n        }, []);\n    }\n    coverageSequenceMatches(sequenceIndex, sequence) {\n        return this.match(sequenceIndex, sequence, (coverage, glyph)=>this.coverageIndex(coverage, glyph.id) >= 0);\n    }\n    getClassID(glyph, classDef) {\n        switch(classDef.version){\n            case 1:\n                let i = glyph - classDef.startGlyph;\n                if (i >= 0 && i < classDef.classValueArray.length) return classDef.classValueArray[i];\n                break;\n            case 2:\n                for (let range of classDef.classRangeRecord){\n                    if (range.start <= glyph && glyph <= range.end) return range.class;\n                }\n                break;\n        }\n        return 0;\n    }\n    classSequenceMatches(sequenceIndex, sequence, classDef) {\n        return this.match(sequenceIndex, sequence, (classID, glyph)=>classID === this.getClassID(glyph.id, classDef));\n    }\n    applyContext(table) {\n        let index, set;\n        switch(table.version){\n            case 1:\n                index = this.coverageIndex(table.coverage);\n                if (index === -1) return false;\n                set = table.ruleSets[index];\n                for (let rule of set){\n                    if (this.sequenceMatches(1, rule.input)) return this.applyLookupList(rule.lookupRecords);\n                }\n                break;\n            case 2:\n                if (this.coverageIndex(table.coverage) === -1) return false;\n                index = this.getClassID(this.glyphIterator.cur.id, table.classDef);\n                if (index === -1) return false;\n                set = table.classSet[index];\n                for (let rule of set){\n                    if (this.classSequenceMatches(1, rule.classes, table.classDef)) return this.applyLookupList(rule.lookupRecords);\n                }\n                break;\n            case 3:\n                if (this.coverageSequenceMatches(0, table.coverages)) return this.applyLookupList(table.lookupRecords);\n                break;\n        }\n        return false;\n    }\n    applyChainingContext(table) {\n        let index;\n        switch(table.version){\n            case 1:\n                index = this.coverageIndex(table.coverage);\n                if (index === -1) return false;\n                let set = table.chainRuleSets[index];\n                for (let rule of set){\n                    if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack) && this.sequenceMatches(1, rule.input) && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) return this.applyLookupList(rule.lookupRecords);\n                }\n                break;\n            case 2:\n                if (this.coverageIndex(table.coverage) === -1) return false;\n                index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);\n                let rules = table.chainClassSet[index];\n                if (!rules) return false;\n                for (let rule of rules){\n                    if (this.classSequenceMatches(-rule.backtrack.length, rule.backtrack, table.backtrackClassDef) && this.classSequenceMatches(1, rule.input, table.inputClassDef) && this.classSequenceMatches(1 + rule.input.length, rule.lookahead, table.lookaheadClassDef)) return this.applyLookupList(rule.lookupRecords);\n                }\n                break;\n            case 3:\n                if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) && this.coverageSequenceMatches(0, table.inputCoverage) && this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) return this.applyLookupList(table.lookupRecords);\n                break;\n        }\n        return false;\n    }\n    constructor(font, table){\n        this.font = font;\n        this.table = table;\n        this.script = null;\n        this.scriptTag = null;\n        this.language = null;\n        this.languageTag = null;\n        this.features = {};\n        this.lookups = {};\n        // Setup variation substitutions\n        this.variationsIndex = font._variationProcessor ? this.findVariationsIndex(font._variationProcessor.normalizedCoords) : -1;\n        // initialize to default script + language\n        this.selectScript();\n        // current context (set by applyFeatures)\n        this.glyphs = [];\n        this.positions = []; // only used by GPOS\n        this.ligatureID = 1;\n        this.currentFeature = null;\n    }\n}\n\n\nclass $10e7b257e1a9a756$export$2e2bcd8739ae039 {\n    get id() {\n        return this._id;\n    }\n    set id(id) {\n        this._id = id;\n        this.substituted = true;\n        let GDEF = this._font.GDEF;\n        if (GDEF && GDEF.glyphClassDef) {\n            // TODO: clean this up\n            let classID = (0, $a83b9c36aaa94fd3$export$2e2bcd8739ae039).prototype.getClassID(id, GDEF.glyphClassDef);\n            this.isBase = classID === 1;\n            this.isLigature = classID === 2;\n            this.isMark = classID === 3;\n            this.markAttachmentType = GDEF.markAttachClassDef ? (0, $a83b9c36aaa94fd3$export$2e2bcd8739ae039).prototype.getClassID(id, GDEF.markAttachClassDef) : 0;\n        } else {\n            this.isMark = this.codePoints.length > 0 && this.codePoints.every((0, unicode_properties__WEBPACK_IMPORTED_MODULE_3__.isMark));\n            this.isBase = !this.isMark;\n            this.isLigature = this.codePoints.length > 1;\n            this.markAttachmentType = 0;\n        }\n    }\n    copy() {\n        return new $10e7b257e1a9a756$export$2e2bcd8739ae039(this._font, this.id, this.codePoints, this.features);\n    }\n    constructor(font, id, codePoints = [], features){\n        this._font = font;\n        this.codePoints = codePoints;\n        this.id = id;\n        this.features = {};\n        if (Array.isArray(features)) for(let i = 0; i < features.length; i++){\n            let feature = features[i];\n            this.features[feature] = true;\n        }\n        else if (typeof features === 'object') Object.assign(this.features, features);\n        this.ligatureID = null;\n        this.ligatureComponent = null;\n        this.isLigated = false;\n        this.cursiveAttachment = null;\n        this.markAttachment = null;\n        this.shaperInfo = null;\n        this.substituted = false;\n        this.isMultiplied = false;\n    }\n}\n\n\nclass $e1c6bbc8cb416f8c$export$2e2bcd8739ae039 extends (0, $649970d87335b30f$export$2e2bcd8739ae039) {\n    static planFeatures(plan) {\n        plan.add([\n            'ljmo',\n            'vjmo',\n            'tjmo'\n        ], false);\n    }\n    static assignFeatures(plan, glyphs) {\n        let state = 0;\n        let i = 0;\n        while(i < glyphs.length){\n            let action;\n            let glyph = glyphs[i];\n            let code = glyph.codePoints[0];\n            let type = $e1c6bbc8cb416f8c$var$getType(code);\n            [action, state] = $e1c6bbc8cb416f8c$var$STATE_TABLE[state][type];\n            switch(action){\n                case $e1c6bbc8cb416f8c$var$DECOMPOSE:\n                    // Decompose the composed syllable if it is not supported by the font.\n                    if (!plan.font.hasGlyphForCodePoint(code)) i = $e1c6bbc8cb416f8c$var$decompose(glyphs, i, plan.font);\n                    break;\n                case $e1c6bbc8cb416f8c$var$COMPOSE:\n                    // Found a decomposed syllable. Try to compose if supported by the font.\n                    i = $e1c6bbc8cb416f8c$var$compose(glyphs, i, plan.font);\n                    break;\n                case $e1c6bbc8cb416f8c$var$TONE_MARK:\n                    // Got a valid syllable, followed by a tone mark. Move the tone mark to the beginning of the syllable.\n                    $e1c6bbc8cb416f8c$var$reorderToneMark(glyphs, i, plan.font);\n                    break;\n                case $e1c6bbc8cb416f8c$var$INVALID:\n                    // Tone mark has no valid syllable to attach to, so insert a dotted circle\n                    i = $e1c6bbc8cb416f8c$var$insertDottedCircle(glyphs, i, plan.font);\n                    break;\n            }\n            i++;\n        }\n    }\n}\n(0, _swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_10__._)($e1c6bbc8cb416f8c$export$2e2bcd8739ae039, \"zeroMarkWidths\", 'NONE');\nconst $e1c6bbc8cb416f8c$var$HANGUL_BASE = 0xac00;\nconst $e1c6bbc8cb416f8c$var$HANGUL_END = 0xd7a4;\nconst $e1c6bbc8cb416f8c$var$HANGUL_COUNT = $e1c6bbc8cb416f8c$var$HANGUL_END - $e1c6bbc8cb416f8c$var$HANGUL_BASE + 1;\nconst $e1c6bbc8cb416f8c$var$L_BASE = 0x1100; // lead\nconst $e1c6bbc8cb416f8c$var$V_BASE = 0x1161; // vowel\nconst $e1c6bbc8cb416f8c$var$T_BASE = 0x11a7; // trail\nconst $e1c6bbc8cb416f8c$var$L_COUNT = 19;\nconst $e1c6bbc8cb416f8c$var$V_COUNT = 21;\nconst $e1c6bbc8cb416f8c$var$T_COUNT = 28;\nconst $e1c6bbc8cb416f8c$var$L_END = $e1c6bbc8cb416f8c$var$L_BASE + $e1c6bbc8cb416f8c$var$L_COUNT - 1;\nconst $e1c6bbc8cb416f8c$var$V_END = $e1c6bbc8cb416f8c$var$V_BASE + $e1c6bbc8cb416f8c$var$V_COUNT - 1;\nconst $e1c6bbc8cb416f8c$var$T_END = $e1c6bbc8cb416f8c$var$T_BASE + $e1c6bbc8cb416f8c$var$T_COUNT - 1;\nconst $e1c6bbc8cb416f8c$var$DOTTED_CIRCLE = 0x25cc;\nconst $e1c6bbc8cb416f8c$var$isL = (code)=>0x1100 <= code && code <= 0x115f || 0xa960 <= code && code <= 0xa97c;\nconst $e1c6bbc8cb416f8c$var$isV = (code)=>0x1160 <= code && code <= 0x11a7 || 0xd7b0 <= code && code <= 0xd7c6;\nconst $e1c6bbc8cb416f8c$var$isT = (code)=>0x11a8 <= code && code <= 0x11ff || 0xd7cb <= code && code <= 0xd7fb;\nconst $e1c6bbc8cb416f8c$var$isTone = (code)=>0x302e <= code && code <= 0x302f;\nconst $e1c6bbc8cb416f8c$var$isLVT = (code)=>$e1c6bbc8cb416f8c$var$HANGUL_BASE <= code && code <= $e1c6bbc8cb416f8c$var$HANGUL_END;\nconst $e1c6bbc8cb416f8c$var$isLV = (code)=>code - $e1c6bbc8cb416f8c$var$HANGUL_BASE < $e1c6bbc8cb416f8c$var$HANGUL_COUNT && (code - $e1c6bbc8cb416f8c$var$HANGUL_BASE) % $e1c6bbc8cb416f8c$var$T_COUNT === 0;\nconst $e1c6bbc8cb416f8c$var$isCombiningL = (code)=>$e1c6bbc8cb416f8c$var$L_BASE <= code && code <= $e1c6bbc8cb416f8c$var$L_END;\nconst $e1c6bbc8cb416f8c$var$isCombiningV = (code)=>$e1c6bbc8cb416f8c$var$V_BASE <= code && code <= $e1c6bbc8cb416f8c$var$V_END;\nconst $e1c6bbc8cb416f8c$var$isCombiningT = (code)=>$e1c6bbc8cb416f8c$var$T_BASE + 1 && 1 <= code && code <= $e1c6bbc8cb416f8c$var$T_END;\n// Character categories\nconst $e1c6bbc8cb416f8c$var$X = 0; // Other character\nconst $e1c6bbc8cb416f8c$var$L = 1; // Leading consonant\nconst $e1c6bbc8cb416f8c$var$V = 2; // Medial vowel\nconst $e1c6bbc8cb416f8c$var$T = 3; // Trailing consonant\nconst $e1c6bbc8cb416f8c$var$LV = 4; // Composed <LV> syllable\nconst $e1c6bbc8cb416f8c$var$LVT = 5; // Composed <LVT> syllable\nconst $e1c6bbc8cb416f8c$var$M = 6; // Tone mark\n// This function classifies a character using the above categories.\nfunction $e1c6bbc8cb416f8c$var$getType(code) {\n    if ($e1c6bbc8cb416f8c$var$isL(code)) return $e1c6bbc8cb416f8c$var$L;\n    if ($e1c6bbc8cb416f8c$var$isV(code)) return $e1c6bbc8cb416f8c$var$V;\n    if ($e1c6bbc8cb416f8c$var$isT(code)) return $e1c6bbc8cb416f8c$var$T;\n    if ($e1c6bbc8cb416f8c$var$isLV(code)) return $e1c6bbc8cb416f8c$var$LV;\n    if ($e1c6bbc8cb416f8c$var$isLVT(code)) return $e1c6bbc8cb416f8c$var$LVT;\n    if ($e1c6bbc8cb416f8c$var$isTone(code)) return $e1c6bbc8cb416f8c$var$M;\n    return $e1c6bbc8cb416f8c$var$X;\n}\n// State machine actions\nconst $e1c6bbc8cb416f8c$var$NO_ACTION = 0;\nconst $e1c6bbc8cb416f8c$var$DECOMPOSE = 1;\nconst $e1c6bbc8cb416f8c$var$COMPOSE = 2;\nconst $e1c6bbc8cb416f8c$var$TONE_MARK = 4;\nconst $e1c6bbc8cb416f8c$var$INVALID = 5;\n// Build a state machine that accepts valid syllables, and applies actions along the way.\n// The logic this is implementing is documented at the top of the file.\nconst $e1c6bbc8cb416f8c$var$STATE_TABLE = [\n    //       X                 L                 V                T                  LV                LVT               M\n    // State 0: start state\n    [\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            0\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            1\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            0\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            0\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$DECOMPOSE,\n            2\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$DECOMPOSE,\n            3\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$INVALID,\n            0\n        ]\n    ],\n    // State 1: <L>\n    [\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            0\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            1\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$COMPOSE,\n            2\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            0\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$DECOMPOSE,\n            2\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$DECOMPOSE,\n            3\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$INVALID,\n            0\n        ]\n    ],\n    // State 2: <L,V> or <LV>\n    [\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            0\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            1\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            0\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$COMPOSE,\n            3\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$DECOMPOSE,\n            2\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$DECOMPOSE,\n            3\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$TONE_MARK,\n            0\n        ]\n    ],\n    // State 3: <L,V,T> or <LVT>\n    [\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            0\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            1\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            0\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            0\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$DECOMPOSE,\n            2\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$DECOMPOSE,\n            3\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$TONE_MARK,\n            0\n        ]\n    ]\n];\nfunction $e1c6bbc8cb416f8c$var$getGlyph(font, code, features) {\n    return new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(font, font.glyphForCodePoint(code).id, [\n        code\n    ], features);\n}\nfunction $e1c6bbc8cb416f8c$var$decompose(glyphs, i, font) {\n    let glyph = glyphs[i];\n    let code = glyph.codePoints[0];\n    let s = code - $e1c6bbc8cb416f8c$var$HANGUL_BASE;\n    let t = $e1c6bbc8cb416f8c$var$T_BASE + s % $e1c6bbc8cb416f8c$var$T_COUNT;\n    s = s / $e1c6bbc8cb416f8c$var$T_COUNT | 0;\n    let l = $e1c6bbc8cb416f8c$var$L_BASE + s / $e1c6bbc8cb416f8c$var$V_COUNT | 0;\n    let v = $e1c6bbc8cb416f8c$var$V_BASE + s % $e1c6bbc8cb416f8c$var$V_COUNT;\n    // Don't decompose if all of the components are not available\n    if (!font.hasGlyphForCodePoint(l) || !font.hasGlyphForCodePoint(v) || t !== $e1c6bbc8cb416f8c$var$T_BASE && !font.hasGlyphForCodePoint(t)) return i;\n    // Replace the current glyph with decomposed L, V, and T glyphs,\n    // and apply the proper OpenType features to each component.\n    let ljmo = $e1c6bbc8cb416f8c$var$getGlyph(font, l, glyph.features);\n    ljmo.features.ljmo = true;\n    let vjmo = $e1c6bbc8cb416f8c$var$getGlyph(font, v, glyph.features);\n    vjmo.features.vjmo = true;\n    let insert = [\n        ljmo,\n        vjmo\n    ];\n    if (t > $e1c6bbc8cb416f8c$var$T_BASE) {\n        let tjmo = $e1c6bbc8cb416f8c$var$getGlyph(font, t, glyph.features);\n        tjmo.features.tjmo = true;\n        insert.push(tjmo);\n    }\n    glyphs.splice(i, 1, ...insert);\n    return i + insert.length - 1;\n}\nfunction $e1c6bbc8cb416f8c$var$compose(glyphs, i, font) {\n    let glyph = glyphs[i];\n    let code = glyphs[i].codePoints[0];\n    let type = $e1c6bbc8cb416f8c$var$getType(code);\n    let prev = glyphs[i - 1].codePoints[0];\n    let prevType = $e1c6bbc8cb416f8c$var$getType(prev);\n    // Figure out what type of syllable we're dealing with\n    let lv, ljmo, vjmo, tjmo;\n    if (prevType === $e1c6bbc8cb416f8c$var$LV && type === $e1c6bbc8cb416f8c$var$T) {\n        // <LV,T>\n        lv = prev;\n        tjmo = glyph;\n    } else {\n        if (type === $e1c6bbc8cb416f8c$var$V) {\n            // <L,V>\n            ljmo = glyphs[i - 1];\n            vjmo = glyph;\n        } else {\n            // <L,V,T>\n            ljmo = glyphs[i - 2];\n            vjmo = glyphs[i - 1];\n            tjmo = glyph;\n        }\n        let l = ljmo.codePoints[0];\n        let v = vjmo.codePoints[0];\n        // Make sure L and V are combining characters\n        if ($e1c6bbc8cb416f8c$var$isCombiningL(l) && $e1c6bbc8cb416f8c$var$isCombiningV(v)) lv = $e1c6bbc8cb416f8c$var$HANGUL_BASE + ((l - $e1c6bbc8cb416f8c$var$L_BASE) * $e1c6bbc8cb416f8c$var$V_COUNT + (v - $e1c6bbc8cb416f8c$var$V_BASE)) * $e1c6bbc8cb416f8c$var$T_COUNT;\n    }\n    let t = tjmo && tjmo.codePoints[0] || $e1c6bbc8cb416f8c$var$T_BASE;\n    if (lv != null && (t === $e1c6bbc8cb416f8c$var$T_BASE || $e1c6bbc8cb416f8c$var$isCombiningT(t))) {\n        let s = lv + (t - $e1c6bbc8cb416f8c$var$T_BASE);\n        // Replace with a composed glyph if supported by the font,\n        // otherwise apply the proper OpenType features to each component.\n        if (font.hasGlyphForCodePoint(s)) {\n            let del = prevType === $e1c6bbc8cb416f8c$var$V ? 3 : 2;\n            glyphs.splice(i - del + 1, del, $e1c6bbc8cb416f8c$var$getGlyph(font, s, glyph.features));\n            return i - del + 1;\n        }\n    }\n    // Didn't compose (either a non-combining component or unsupported by font).\n    if (ljmo) ljmo.features.ljmo = true;\n    if (vjmo) vjmo.features.vjmo = true;\n    if (tjmo) tjmo.features.tjmo = true;\n    if (prevType === $e1c6bbc8cb416f8c$var$LV) {\n        // Sequence was originally <L,V>, which got combined earlier.\n        // Either the T was non-combining, or the LVT glyph wasn't supported.\n        // Decompose the glyph again and apply OT features.\n        $e1c6bbc8cb416f8c$var$decompose(glyphs, i - 1, font);\n        return i + 1;\n    }\n    return i;\n}\nfunction $e1c6bbc8cb416f8c$var$getLength(code) {\n    switch($e1c6bbc8cb416f8c$var$getType(code)){\n        case $e1c6bbc8cb416f8c$var$LV:\n        case $e1c6bbc8cb416f8c$var$LVT:\n            return 1;\n        case $e1c6bbc8cb416f8c$var$V:\n            return 2;\n        case $e1c6bbc8cb416f8c$var$T:\n            return 3;\n    }\n}\nfunction $e1c6bbc8cb416f8c$var$reorderToneMark(glyphs, i, font) {\n    let glyph = glyphs[i];\n    let code = glyphs[i].codePoints[0];\n    // Move tone mark to the beginning of the previous syllable, unless it is zero width\n    if (font.glyphForCodePoint(code).advanceWidth === 0) return;\n    let prev = glyphs[i - 1].codePoints[0];\n    let len = $e1c6bbc8cb416f8c$var$getLength(prev);\n    glyphs.splice(i, 1);\n    return glyphs.splice(i - len, 0, glyph);\n}\nfunction $e1c6bbc8cb416f8c$var$insertDottedCircle(glyphs, i, font) {\n    let glyph = glyphs[i];\n    let code = glyphs[i].codePoints[0];\n    if (font.hasGlyphForCodePoint($e1c6bbc8cb416f8c$var$DOTTED_CIRCLE)) {\n        let dottedCircle = $e1c6bbc8cb416f8c$var$getGlyph(font, $e1c6bbc8cb416f8c$var$DOTTED_CIRCLE, glyph.features);\n        // If the tone mark is zero width, insert the dotted circle before, otherwise after\n        let idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i : i + 1;\n        glyphs.splice(idx, 0, dottedCircle);\n        i++;\n    }\n    return i;\n}\n\n\n\n\n\n\n\n\n\nvar $4b0735ca6c692ea5$exports = {};\n$4b0735ca6c692ea5$exports = JSON.parse(\"{\\\"stateTable\\\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,14,15,16,17],[0,0,0,18,19,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,28,29,30,31,32,33,0,34,0,0,35,36,0,0,37,0],[0,0,0,38,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,39,0,0,0,40,41,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,12,43,0,0,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,0,43,0,0,0,0],[0,0,0,45,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,50,0,0,51,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0],[0,0,0,53,54,55,56,57,58,0,59,0,0,60,61,0,0,62,0],[0,0,0,4,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,63,64,0,0,40,41,0,9,0,10,0,0,0,42,0,63,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,0,2,16,0],[0,0,0,18,65,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,0,0],[0,0,0,69,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,73,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,75,0,0,0,76,77,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,25,79,0,0,0,0],[0,0,0,18,19,20,74,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,81,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,86,0,0,87,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0],[0,0,0,18,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,89,90,0,0,76,77,0,23,0,24,0,0,0,78,0,89,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,0,0],[0,0,0,94,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,96,0,0,0,97,98,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,35,100,0,0,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,102,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,107,0,0,108,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0],[0,0,0,28,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,110,111,0,0,97,98,0,33,0,34,0,0,0,99,0,110,0,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,0,0],[0,0,0,0,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,0,0,115,116,117,118,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,39,0,122,0,123,123,8,9,0,10,0,0,0,42,0,39,0,0],[0,124,64,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0],[0,39,0,0,0,121,125,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,126,126,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,47,47,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,128,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,129,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,50,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,134,0,0,0,0,0,0,0,0],[0,0,0,135,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,136,0,0,0,137,138,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,60,140,0,0,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,0,140,0,0,0,0],[0,0,0,142,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,147,0,0,148,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,0,0,0,0],[0,0,0,53,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,150,151,0,0,137,138,0,58,0,59,0,0,0,139,0,150,0,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,0,0],[0,0,0,155,116,156,157,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,75,3,4,5,159,160,8,161,0,162,0,11,12,163,0,75,16,0],[0,0,0,0,0,40,164,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,0,165,0,0,0,0],[0,124,64,0,0,40,164,0,9,0,10,0,0,0,42,0,124,0,0],[0,0,0,0,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,167,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,0],[0,0,0,0,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,0,79,0,0,0,0],[0,0,0,169,170,171,172,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,75,0,176,0,177,177,22,23,0,24,0,0,0,78,0,75,0,0],[0,178,90,0,0,0,0,0,0,0,0,0,0,0,0,0,178,0,0],[0,75,0,0,0,175,179,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,180,180,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,83,83,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,182,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,183,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,86,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,188,0,0,0,0,0,0,0,0],[0,0,0,189,170,190,191,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,76,193,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,0,194,0,0,0,0],[0,178,90,0,0,76,193,0,23,0,24,0,0,0,78,0,178,0,0],[0,0,0,0,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,195,196,197,198,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,96,0,202,0,203,203,32,33,0,34,0,0,0,99,0,96,0,0],[0,204,111,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0],[0,96,0,0,0,201,205,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,206,206,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,104,104,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,208,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,209,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,107,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0],[0,0,0,215,196,216,217,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,97,219,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,0,220,0,0,0,0],[0,204,111,0,0,97,219,0,33,0,34,0,0,0,99,0,204,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,223,0,0,0,40,224,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,119,225,0,0,0,0],[0,0,0,115,116,117,222,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,115,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,226,64,0,0,40,224,0,9,0,10,0,0,0,42,0,226,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,39,0,0,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,44,44,8,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,227,0,228,229,0,9,0,10,0,0,230,0,0,0,0,0],[0,39,0,122,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,231,231,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,131,131,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,234,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,235,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,0,0,240,241,242,243,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,136,0,247,0,248,248,57,58,0,59,0,0,0,139,0,136,0,0],[0,249,151,0,0,0,0,0,0,0,0,0,0,0,0,0,249,0,0],[0,136,0,0,0,246,250,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,251,251,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,144,144,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,253,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,254,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,147,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,259,0,0,0,0,0,0,0,0],[0,0,0,260,241,261,262,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,137,264,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,0,265,0,0,0,0],[0,249,151,0,0,137,264,0,58,0,59,0,0,0,139,0,249,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,158,225,0,0,0,0],[0,0,0,155,116,156,222,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,155,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,43,266,266,8,161,0,24,0,0,12,267,0,0,0,0],[0,75,0,176,43,268,268,269,161,0,24,0,0,0,267,0,75,0,0],[0,0,0,0,0,270,0,0,271,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,272,0,0,0,0,0,0,0,0],[0,273,274,0,0,40,41,0,9,0,10,0,0,0,42,0,273,0,0],[0,0,0,40,0,123,123,8,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,121,275,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,276,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,279,0,0,0,76,280,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,173,281,0,0,0,0],[0,0,0,169,170,171,278,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,169,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,282,90,0,0,76,280,0,23,0,24,0,0,0,78,0,282,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,75,0,0,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,80,80,22,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,283,0,284,285,0,23,0,24,0,0,286,0,0,0,0,0],[0,75,0,176,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,287,287,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,185,185,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,290,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,291,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,192,281,0,0,0,0],[0,0,0,189,170,190,278,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,189,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,76,0,177,177,22,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,175,296,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,299,0,0,0,97,300,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,199,301,0,0,0,0],[0,0,0,195,196,197,298,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,195,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,302,111,0,0,97,300,0,33,0,34,0,0,0,99,0,302,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,96,0,0,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,101,101,32,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,303,0,304,305,0,33,0,34,0,0,306,0,0,0,0,0],[0,96,0,202,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,307,307,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,211,211,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,310,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,311,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,218,301,0,0,0,0],[0,0,0,215,196,216,298,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,215,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,97,0,203,203,32,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,201,316,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,0,225,0,0,0,0],[0,0,0,317,318,319,320,8,9,0,10,0,0,321,322,0,0,16,0],[0,223,0,323,0,123,123,8,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,0,0,121,324,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,325,318,326,327,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,64,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,230,0,0,0,0,0],[0,0,0,227,0,228,121,0,9,0,10,0,0,230,0,0,0,0,0],[0,0,0,227,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0],[0,0,0,0,0,329,329,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,330,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,237,237,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,332,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,333,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,337,0,0,0,137,338,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,244,339,0,0,0,0],[0,0,0,240,241,242,336,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,240,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,340,151,0,0,137,338,0,58,0,59,0,0,0,139,0,340,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,136,0,0,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,141,141,57,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,341,0,342,343,0,58,0,59,0,0,344,0,0,0,0,0],[0,136,0,247,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,345,345,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,346,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,256,256,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,348,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,349,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,263,339,0,0,0,0],[0,0,0,260,241,261,336,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,260,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,137,0,248,248,57,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,246,354,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,126,126,8,23,0,0,0,0,0,0,0,0,0,0],[0,355,90,0,0,121,125,0,9,0,10,0,0,0,42,0,355,0,0],[0,0,0,0,0,356,356,269,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,357,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,270,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0],[0,0,0,364,116,365,366,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,40,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,0,281,0,0,0,0],[0,0,0,369,370,371,372,22,23,0,24,0,0,373,374,0,0,27,0],[0,279,0,375,0,177,177,22,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,0,0,175,376,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,377,370,378,379,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,90,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,286,0,0,0,0,0],[0,0,0,283,0,284,175,0,23,0,24,0,0,286,0,0,0,0,0],[0,0,0,283,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0],[0,0,0,0,0,381,381,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,382,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,293,293,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,384,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,385,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,76,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,0,301,0,0,0,0],[0,0,0,387,388,389,390,32,33,0,34,0,0,391,392,0,0,37,0],[0,299,0,393,0,203,203,32,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,0,0,201,394,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,395,388,396,397,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,111,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,306,0,0,0,0,0],[0,0,0,303,0,304,201,0,33,0,34,0,0,306,0,0,0,0,0],[0,0,0,303,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0],[0,0,0,0,0,399,399,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,400,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,313,313,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,402,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,403,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,97,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,407,0,0,0,40,408,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,321,409,0,0,0,0],[0,0,0,317,318,319,406,8,9,0,10,0,0,321,322,0,0,16,0],[0,0,0,317,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,410,64,0,0,40,408,0,9,0,10,0,0,0,42,0,410,0,0],[0,223,0,0,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,323,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,328,409,0,0,0,0],[0,0,0,325,318,326,406,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,325,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0],[0,0,0,0,0,411,411,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,412,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,413,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,0,339,0,0,0,0],[0,0,0,414,415,416,417,57,58,0,59,0,0,418,419,0,0,62,0],[0,337,0,420,0,248,248,57,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,0,0,246,421,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,422,415,423,424,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,151,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,344,0,0,0,0,0],[0,0,0,341,0,342,246,0,58,0,59,0,0,344,0,0,0,0,0],[0,0,0,341,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,0],[0,0,0,0,0,426,426,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,427,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,351,351,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,429,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,430,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,137,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,432,116,433,434,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,0,0,180,180,269,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,359,359,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,437,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,438,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,443,274,0,0,0,0,0,0,0,0,0,0,0,0,0,443,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,367,225,0,0,0,0],[0,0,0,364,116,365,445,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,364,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,448,0,0,0,76,449,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,373,450,0,0,0,0],[0,0,0,369,370,371,447,22,23,0,24,0,0,373,374,0,0,27,0],[0,0,0,369,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,451,90,0,0,76,449,0,23,0,24,0,0,0,78,0,451,0,0],[0,279,0,0,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,375,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,380,450,0,0,0,0],[0,0,0,377,370,378,447,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,377,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0],[0,0,0,0,0,452,452,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,453,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,454,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,457,0,0,0,97,458,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,391,459,0,0,0,0],[0,0,0,387,388,389,456,32,33,0,34,0,0,391,392,0,0,37,0],[0,0,0,387,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,460,111,0,0,97,458,0,33,0,34,0,0,0,99,0,460,0,0],[0,299,0,0,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,393,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,398,459,0,0,0,0],[0,0,0,395,388,396,456,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,395,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,0,0,0,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,0,0],[0,0,0,0,0,461,461,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,462,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,463,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,0,409,0,0,0,0],[0,0,0,464,465,466,467,8,9,0,10,0,0,468,469,0,0,16,0],[0,407,0,470,0,123,123,8,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,0,0,121,471,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,472,465,473,474,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,0,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,0,0],[0,0,0,0,0,0,476,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,479,0,0,0,137,480,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,418,481,0,0,0,0],[0,0,0,414,415,416,478,57,58,0,59,0,0,418,419,0,0,62,0],[0,0,0,414,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,482,151,0,0,137,480,0,58,0,59,0,0,0,139,0,482,0,0],[0,337,0,0,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,420,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,425,481,0,0,0,0],[0,0,0,422,415,423,478,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,422,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0],[0,0,0,0,0,483,483,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,484,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,485,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,435,225,0,0,0,0],[0,0,0,432,116,433,445,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,432,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,486,486,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,487,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,440,440,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,489,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,490,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,495,0,496,497,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,0,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,0,225,0,0,0,0],[0,0,0,0,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,0,450,0,0,0,0],[0,0,0,499,500,501,502,22,23,0,24,0,0,503,504,0,0,27,0],[0,448,0,505,0,177,177,22,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,0,0,175,506,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,507,500,508,509,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,292,0,0],[0,0,0,0,0,0,511,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,0,459,0,0,0,0],[0,0,0,512,513,514,515,32,33,0,34,0,0,516,517,0,0,37,0],[0,457,0,518,0,203,203,32,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,0,0,201,519,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,520,513,521,522,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,0,0,0,0,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,312,0,0],[0,0,0,0,0,0,524,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,527,0,0,0,40,528,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,468,529,0,0,0,0],[0,0,0,464,465,466,526,8,9,0,10,0,0,468,469,0,0,16,0],[0,0,0,464,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,530,64,0,0,40,528,0,9,0,10,0,0,0,42,0,530,0,0],[0,407,0,0,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,470,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,475,529,0,0,0,0],[0,0,0,472,465,473,526,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,472,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0],[0,0,0,0,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,0,481,0,0,0,0],[0,0,0,531,532,533,534,57,58,0,59,0,0,535,536,0,0,62,0],[0,479,0,537,0,248,248,57,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,0,0,246,538,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,539,532,540,541,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,0,0,0,0,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,350,0,0],[0,0,0,0,0,0,543,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,358,0,0],[0,0,0,0,0,544,544,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,545,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,492,492,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,547,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,548,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,274,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,498,0,0,0,0,0],[0,0,0,495,0,496,368,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,495,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,553,0,0,0,76,554,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,503,555,0,0,0,0],[0,0,0,499,500,501,552,22,23,0,24,0,0,503,504,0,0,27,0],[0,0,0,499,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,556,90,0,0,76,554,0,23,0,24,0,0,0,78,0,556,0,0],[0,448,0,0,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,505,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,510,555,0,0,0,0],[0,0,0,507,500,508,552,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,507,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,559,0,0,0,97,560,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,516,561,0,0,0,0],[0,0,0,512,513,514,558,32,33,0,34,0,0,516,517,0,0,37,0],[0,0,0,512,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,562,111,0,0,97,560,0,33,0,34,0,0,0,99,0,562,0,0],[0,457,0,0,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,518,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,523,561,0,0,0,0],[0,0,0,520,513,521,558,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,520,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0],[0,0,0,0,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,0,529,0,0,0,0],[0,0,0,563,66,564,565,8,9,0,10,0,0,566,68,0,0,16,0],[0,527,0,567,0,123,123,8,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,0,0,121,568,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,569,66,570,571,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,575,0,0,0,137,576,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,535,577,0,0,0,0],[0,0,0,531,532,533,574,57,58,0,59,0,0,535,536,0,0,62,0],[0,0,0,531,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,578,151,0,0,137,576,0,58,0,59,0,0,0,139,0,578,0,0],[0,479,0,0,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,537,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,542,577,0,0,0,0],[0,0,0,539,532,540,574,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,539,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,0,0],[0,0,0,0,0,0,0,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,439,0,0],[0,0,0,0,0,579,579,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,580,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,581,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,0,555,0,0,0,0],[0,0,0,582,91,583,584,22,23,0,24,0,0,585,93,0,0,27,0],[0,553,0,586,0,177,177,22,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,0,0,175,587,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,588,91,589,590,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,0,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,0,561,0,0,0,0],[0,0,0,592,112,593,594,32,33,0,34,0,0,595,114,0,0,37,0],[0,559,0,596,0,203,203,32,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,0,0,201,597,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,598,112,599,600,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,566,165,0,0,0,0],[0,0,0,563,66,564,67,8,9,0,10,0,0,566,68,0,0,16,0],[0,0,0,563,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,527,0,0,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,567,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,572,165,0,0,0,0],[0,0,0,569,66,570,67,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,569,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,0,577,0,0,0,0],[0,0,0,603,152,604,605,57,58,0,59,0,0,606,154,0,0,62,0],[0,575,0,607,0,248,248,57,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,0,0,246,608,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,609,152,610,611,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,0,0,0,0,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,491,0,0],[0,0,0,0,0,0,613,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,585,194,0,0,0,0],[0,0,0,582,91,583,92,22,23,0,24,0,0,585,93,0,0,27,0],[0,0,0,582,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,553,0,0,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,586,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,591,194,0,0,0,0],[0,0,0,588,91,589,92,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,588,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,595,220,0,0,0,0],[0,0,0,592,112,593,113,32,33,0,34,0,0,595,114,0,0,37,0],[0,0,0,592,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,559,0,0,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,596,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,601,220,0,0,0,0],[0,0,0,598,112,599,113,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,598,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,606,265,0,0,0,0],[0,0,0,603,152,604,153,57,58,0,59,0,0,606,154,0,0,62,0],[0,0,0,603,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,575,0,0,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,607,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,612,265,0,0,0,0],[0,0,0,609,152,610,153,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,609,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,549,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0]],\\\"accepting\\\":[false,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,false,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,false,false,true,false,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,false,false,true,true,false,false,true,true,true,false,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,true,true,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,false,true,true,false,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,false,true,true,true,true,true,false,true,true,false,true,true,true],\\\"tags\\\":[[],[\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\"],[\\\"broken_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"symbol_cluster\\\"],[],[\\\"symbol_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[],[],[\\\"broken_cluster\\\"],[],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[],[],[\\\"consonant_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[],[],[\\\"vowel_syllable\\\"],[],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[],[],[\\\"standalone_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[],[],[],[],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[],[],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"standalone_cluster\\\"]]}\");\n\n\nvar $aa333a9607471296$exports = {};\n$aa333a9607471296$exports = JSON.parse(\"{\\\"categories\\\":[\\\"O\\\",\\\"IND\\\",\\\"S\\\",\\\"GB\\\",\\\"B\\\",\\\"FM\\\",\\\"CGJ\\\",\\\"VMAbv\\\",\\\"VMPst\\\",\\\"VAbv\\\",\\\"VPst\\\",\\\"CMBlw\\\",\\\"VPre\\\",\\\"VBlw\\\",\\\"H\\\",\\\"VMBlw\\\",\\\"CMAbv\\\",\\\"MBlw\\\",\\\"CS\\\",\\\"R\\\",\\\"SUB\\\",\\\"MPst\\\",\\\"MPre\\\",\\\"FAbv\\\",\\\"FPst\\\",\\\"FBlw\\\",\\\"null\\\",\\\"SMAbv\\\",\\\"SMBlw\\\",\\\"VMPre\\\",\\\"ZWNJ\\\",\\\"ZWJ\\\",\\\"WJ\\\",\\\"M\\\",\\\"VS\\\",\\\"N\\\",\\\"HN\\\",\\\"MAbv\\\"],\\\"decompositions\\\":{\\\"2507\\\":[2503,2494],\\\"2508\\\":[2503,2519],\\\"2888\\\":[2887,2902],\\\"2891\\\":[2887,2878],\\\"2892\\\":[2887,2903],\\\"3018\\\":[3014,3006],\\\"3019\\\":[3015,3006],\\\"3020\\\":[3014,3031],\\\"3144\\\":[3142,3158],\\\"3264\\\":[3263,3285],\\\"3271\\\":[3270,3285],\\\"3272\\\":[3270,3286],\\\"3274\\\":[3270,3266],\\\"3275\\\":[3270,3266,3285],\\\"3402\\\":[3398,3390],\\\"3403\\\":[3399,3390],\\\"3404\\\":[3398,3415],\\\"3546\\\":[3545,3530],\\\"3548\\\":[3545,3535],\\\"3549\\\":[3545,3535,3530],\\\"3550\\\":[3545,3551],\\\"3635\\\":[3661,3634],\\\"3763\\\":[3789,3762],\\\"3955\\\":[3953,3954],\\\"3957\\\":[3953,3956],\\\"3958\\\":[4018,3968],\\\"3959\\\":[4018,3953,3968],\\\"3960\\\":[4019,3968],\\\"3961\\\":[4019,3953,3968],\\\"3969\\\":[3953,3968],\\\"6971\\\":[6970,6965],\\\"6973\\\":[6972,6965],\\\"6976\\\":[6974,6965],\\\"6977\\\":[6975,6965],\\\"6979\\\":[6978,6965],\\\"69934\\\":[69937,69927],\\\"69935\\\":[69938,69927],\\\"70475\\\":[70471,70462],\\\"70476\\\":[70471,70487],\\\"70843\\\":[70841,70842],\\\"70844\\\":[70841,70832],\\\"70846\\\":[70841,70845],\\\"71098\\\":[71096,71087],\\\"71099\\\":[71097,71087]},\\\"stateTable\\\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,3,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,17,18,11,19,20,21,22,0,0,0,23,0,0,2,0,0,24,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,27,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,39,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,11,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,49,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,35,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,53,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0]],\\\"accepting\\\":[false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],\\\"tags\\\":[[],[\\\"broken_cluster\\\"],[\\\"independent_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"numeral_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"independent_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"virama_terminated_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"numeral_cluster\\\"],[\\\"number_joiner_terminated_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"numeral_cluster\\\"]]}\");\n\n\n// Cateories used in the OpenType spec:\n// https://www.microsoft.com/typography/otfntdev/devanot/shaping.aspx\nconst $90a9d3398ee54fe5$export$a513ea61a7bee91c = {\n    X: 1,\n    C: 2,\n    V: 4,\n    N: 8,\n    H: 16,\n    ZWNJ: 32,\n    ZWJ: 64,\n    M: 128,\n    SM: 256,\n    VD: 512,\n    A: 1024,\n    Placeholder: 2048,\n    Dotted_Circle: 4096,\n    RS: 8192,\n    Coeng: 16384,\n    Repha: 32768,\n    Ra: 65536,\n    CM: 131072,\n    Symbol: 262144 // Avagraha, etc that take marks (SM,A,VD).\n};\nconst $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0 = {\n    Start: 1,\n    Ra_To_Become_Reph: 2,\n    Pre_M: 4,\n    Pre_C: 8,\n    Base_C: 16,\n    After_Main: 32,\n    Above_C: 64,\n    Before_Sub: 128,\n    Below_C: 256,\n    After_Sub: 512,\n    Before_Post: 1024,\n    Post_C: 2048,\n    After_Post: 4096,\n    Final_C: 8192,\n    SMVD: 16384,\n    End: 32768\n};\nconst $90a9d3398ee54fe5$export$8519deaa7de2b07 = $90a9d3398ee54fe5$export$a513ea61a7bee91c.C | $90a9d3398ee54fe5$export$a513ea61a7bee91c.Ra | $90a9d3398ee54fe5$export$a513ea61a7bee91c.CM | $90a9d3398ee54fe5$export$a513ea61a7bee91c.V | $90a9d3398ee54fe5$export$a513ea61a7bee91c.Placeholder | $90a9d3398ee54fe5$export$a513ea61a7bee91c.Dotted_Circle;\nconst $90a9d3398ee54fe5$export$bbcd928767338e0d = $90a9d3398ee54fe5$export$a513ea61a7bee91c.ZWJ | $90a9d3398ee54fe5$export$a513ea61a7bee91c.ZWNJ;\nconst $90a9d3398ee54fe5$export$ca9599b2a300afc = $90a9d3398ee54fe5$export$a513ea61a7bee91c.H | $90a9d3398ee54fe5$export$a513ea61a7bee91c.Coeng;\nconst $90a9d3398ee54fe5$export$e99d119da76a0fc5 = {\n    Default: {\n        hasOldSpec: false,\n        virama: 0,\n        basePos: 'Last',\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.Before_Post,\n        rephMode: 'Implicit',\n        blwfMode: 'Pre_And_Post'\n    },\n    Devanagari: {\n        hasOldSpec: true,\n        virama: 0x094D,\n        basePos: 'Last',\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.Before_Post,\n        rephMode: 'Implicit',\n        blwfMode: 'Pre_And_Post'\n    },\n    Bengali: {\n        hasOldSpec: true,\n        virama: 0x09CD,\n        basePos: 'Last',\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Sub,\n        rephMode: 'Implicit',\n        blwfMode: 'Pre_And_Post'\n    },\n    Gurmukhi: {\n        hasOldSpec: true,\n        virama: 0x0A4D,\n        basePos: 'Last',\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.Before_Sub,\n        rephMode: 'Implicit',\n        blwfMode: 'Pre_And_Post'\n    },\n    Gujarati: {\n        hasOldSpec: true,\n        virama: 0x0ACD,\n        basePos: 'Last',\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.Before_Post,\n        rephMode: 'Implicit',\n        blwfMode: 'Pre_And_Post'\n    },\n    Oriya: {\n        hasOldSpec: true,\n        virama: 0x0B4D,\n        basePos: 'Last',\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Main,\n        rephMode: 'Implicit',\n        blwfMode: 'Pre_And_Post'\n    },\n    Tamil: {\n        hasOldSpec: true,\n        virama: 0x0BCD,\n        basePos: 'Last',\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Post,\n        rephMode: 'Implicit',\n        blwfMode: 'Pre_And_Post'\n    },\n    Telugu: {\n        hasOldSpec: true,\n        virama: 0x0C4D,\n        basePos: 'Last',\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Post,\n        rephMode: 'Explicit',\n        blwfMode: 'Post_Only'\n    },\n    Kannada: {\n        hasOldSpec: true,\n        virama: 0x0CCD,\n        basePos: 'Last',\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Post,\n        rephMode: 'Implicit',\n        blwfMode: 'Post_Only'\n    },\n    Malayalam: {\n        hasOldSpec: true,\n        virama: 0x0D4D,\n        basePos: 'Last',\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Main,\n        rephMode: 'Log_Repha',\n        blwfMode: 'Pre_And_Post'\n    },\n    // Handled by UniversalShaper\n    // Sinhala: {\n    //   hasOldSpec: false,\n    //   virama: 0x0DCA,\n    //   basePos: 'Last_Sinhala',\n    //   rephPos: POSITIONS.After_Main,\n    //   rephMode: 'Explicit',\n    //   blwfMode: 'Pre_And_Post'\n    // },\n    Khmer: {\n        hasOldSpec: false,\n        virama: 0x17D2,\n        basePos: 'First',\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph,\n        rephMode: 'Vis_Repha',\n        blwfMode: 'Pre_And_Post'\n    }\n};\nconst $90a9d3398ee54fe5$export$f647c9cfdd77d95a = {\n    // Khmer\n    0x17BE: [\n        0x17C1,\n        0x17BE\n    ],\n    0x17BF: [\n        0x17C1,\n        0x17BF\n    ],\n    0x17C0: [\n        0x17C1,\n        0x17C0\n    ],\n    0x17C4: [\n        0x17C1,\n        0x17C4\n    ],\n    0x17C5: [\n        0x17C1,\n        0x17C5\n    ]\n};\n\n\n\nconst { decompositions: $7826f90f6f0cecc9$var$decompositions } = (0, (/*@__PURE__*/$parcel$interopDefault($aa333a9607471296$exports)));\nconst $7826f90f6f0cecc9$var$trie = new (0, unicode_trie__WEBPACK_IMPORTED_MODULE_4__)((0, $12727730ddfc8bfe$export$94fdf11bafc8de6b)(\"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\"));\nconst $7826f90f6f0cecc9$var$stateMachine = new (0, dfa__WEBPACK_IMPORTED_MODULE_5__)((0, (/*@__PURE__*/$parcel$interopDefault($4b0735ca6c692ea5$exports))));\nclass $7826f90f6f0cecc9$export$2e2bcd8739ae039 extends (0, $649970d87335b30f$export$2e2bcd8739ae039) {\n    static planFeatures(plan) {\n        plan.addStage($7826f90f6f0cecc9$var$setupSyllables);\n        plan.addStage([\n            'locl',\n            'ccmp'\n        ]);\n        plan.addStage($7826f90f6f0cecc9$var$initialReordering);\n        plan.addStage('nukt');\n        plan.addStage('akhn');\n        plan.addStage('rphf', false);\n        plan.addStage('rkrf');\n        plan.addStage('pref', false);\n        plan.addStage('blwf', false);\n        plan.addStage('abvf', false);\n        plan.addStage('half', false);\n        plan.addStage('pstf', false);\n        plan.addStage('vatu');\n        plan.addStage('cjct');\n        plan.addStage('cfar', false);\n        plan.addStage($7826f90f6f0cecc9$var$finalReordering);\n        plan.addStage({\n            local: [\n                'init'\n            ],\n            global: [\n                'pres',\n                'abvs',\n                'blws',\n                'psts',\n                'haln',\n                'dist',\n                'abvm',\n                'blwm',\n                'calt',\n                'clig'\n            ]\n        });\n        // Setup the indic config for the selected script\n        plan.unicodeScript = $130d1a642ebcd2b7$export$ce50e82f12a827a4(plan.script);\n        plan.indicConfig = (0, $90a9d3398ee54fe5$export$e99d119da76a0fc5)[plan.unicodeScript] || (0, $90a9d3398ee54fe5$export$e99d119da76a0fc5).Default;\n        plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== '2';\n    // TODO: turn off kern (Khmer) and liga features.\n    }\n    static assignFeatures(plan, glyphs) {\n        // Decompose split matras\n        // TODO: do this in a more general unicode normalizer\n        for(let i = glyphs.length - 1; i >= 0; i--){\n            let codepoint = glyphs[i].codePoints[0];\n            let d = (0, $90a9d3398ee54fe5$export$f647c9cfdd77d95a)[codepoint] || $7826f90f6f0cecc9$var$decompositions[codepoint];\n            if (d) {\n                let decomposed = d.map((c)=>{\n                    let g = plan.font.glyphForCodePoint(c);\n                    return new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(plan.font, g.id, [\n                        c\n                    ], glyphs[i].features);\n                });\n                glyphs.splice(i, 1, ...decomposed);\n            }\n        }\n    }\n}\n(0, _swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_10__._)($7826f90f6f0cecc9$export$2e2bcd8739ae039, \"zeroMarkWidths\", 'NONE');\nfunction $7826f90f6f0cecc9$var$indicCategory(glyph) {\n    return $7826f90f6f0cecc9$var$trie.get(glyph.codePoints[0]) >> 8;\n}\nfunction $7826f90f6f0cecc9$var$indicPosition(glyph) {\n    return 1 << ($7826f90f6f0cecc9$var$trie.get(glyph.codePoints[0]) & 0xff);\n}\nclass $7826f90f6f0cecc9$var$IndicInfo {\n    constructor(category, position, syllableType, syllable){\n        this.category = category;\n        this.position = position;\n        this.syllableType = syllableType;\n        this.syllable = syllable;\n    }\n}\nfunction $7826f90f6f0cecc9$var$setupSyllables(font, glyphs) {\n    let syllable = 0;\n    let last = 0;\n    for (let [start, end, tags] of $7826f90f6f0cecc9$var$stateMachine.match(glyphs.map($7826f90f6f0cecc9$var$indicCategory))){\n        if (start > last) {\n            ++syllable;\n            for(let i = last; i < start; i++)glyphs[i].shaperInfo = new $7826f90f6f0cecc9$var$IndicInfo((0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).X, (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).End, 'non_indic_cluster', syllable);\n        }\n        ++syllable;\n        // Create shaper info\n        for(let i = start; i <= end; i++)glyphs[i].shaperInfo = new $7826f90f6f0cecc9$var$IndicInfo(1 << $7826f90f6f0cecc9$var$indicCategory(glyphs[i]), $7826f90f6f0cecc9$var$indicPosition(glyphs[i]), tags[0], syllable);\n        last = end + 1;\n    }\n    if (last < glyphs.length) {\n        ++syllable;\n        for(let i = last; i < glyphs.length; i++)glyphs[i].shaperInfo = new $7826f90f6f0cecc9$var$IndicInfo((0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).X, (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).End, 'non_indic_cluster', syllable);\n    }\n}\nfunction $7826f90f6f0cecc9$var$isConsonant(glyph) {\n    return glyph.shaperInfo.category & (0, $90a9d3398ee54fe5$export$8519deaa7de2b07);\n}\nfunction $7826f90f6f0cecc9$var$isJoiner(glyph) {\n    return glyph.shaperInfo.category & (0, $90a9d3398ee54fe5$export$bbcd928767338e0d);\n}\nfunction $7826f90f6f0cecc9$var$isHalantOrCoeng(glyph) {\n    return glyph.shaperInfo.category & (0, $90a9d3398ee54fe5$export$ca9599b2a300afc);\n}\nfunction $7826f90f6f0cecc9$var$wouldSubstitute(glyphs, feature) {\n    for (let glyph of glyphs)glyph.features = {\n        [feature]: true\n    };\n    let GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;\n    GSUB.applyFeatures([\n        feature\n    ], glyphs);\n    return glyphs.length === 1;\n}\nfunction $7826f90f6f0cecc9$var$consonantPosition(font, consonant, virama) {\n    let glyphs = [\n        virama,\n        consonant,\n        virama\n    ];\n    if ($7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(0, 2), 'blwf') || $7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(1, 3), 'blwf')) return (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Below_C;\n    else if ($7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(0, 2), 'pstf') || $7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(1, 3), 'pstf')) return (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Post_C;\n    else if ($7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(0, 2), 'pref') || $7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(1, 3), 'pref')) return (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Post_C;\n    return (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C;\n}\nfunction $7826f90f6f0cecc9$var$initialReordering(font, glyphs, plan) {\n    let indicConfig = plan.indicConfig;\n    let features = font._layoutEngine.engine.GSUBProcessor.features;\n    let dottedCircle = font.glyphForCodePoint(0x25cc).id;\n    let virama = font.glyphForCodePoint(indicConfig.virama).id;\n    if (virama) {\n        let info = new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(font, virama, [\n            indicConfig.virama\n        ]);\n        for(let i = 0; i < glyphs.length; i++)if (glyphs[i].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C) glyphs[i].shaperInfo.position = $7826f90f6f0cecc9$var$consonantPosition(font, glyphs[i].copy(), info);\n    }\n    for(let start = 0, end = $7826f90f6f0cecc9$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $7826f90f6f0cecc9$var$nextSyllable(glyphs, start)){\n        let { category: category, syllableType: syllableType } = glyphs[start].shaperInfo;\n        if (syllableType === 'symbol_cluster' || syllableType === 'non_indic_cluster') continue;\n        if (syllableType === 'broken_cluster' && dottedCircle) {\n            let g = new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(font, dottedCircle, [\n                0x25cc\n            ]);\n            g.shaperInfo = new $7826f90f6f0cecc9$var$IndicInfo(1 << $7826f90f6f0cecc9$var$indicCategory(g), $7826f90f6f0cecc9$var$indicPosition(g), glyphs[start].shaperInfo.syllableType, glyphs[start].shaperInfo.syllable);\n            // Insert after possible Repha.\n            let i = start;\n            while(i < end && glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).Repha)i++;\n            glyphs.splice(i++, 0, g);\n            end++;\n        }\n        // 1. Find base consonant:\n        //\n        // The shaping engine finds the base consonant of the syllable, using the\n        // following algorithm: starting from the end of the syllable, move backwards\n        // until a consonant is found that does not have a below-base or post-base\n        // form (post-base forms have to follow below-base forms), or that is not a\n        // pre-base reordering Ra, or arrive at the first consonant. The consonant\n        // stopped at will be the base.\n        let base = end;\n        let limit = start;\n        let hasReph = false;\n        // If the syllable starts with Ra + Halant (in a script that has Reph)\n        // and has more than one consonant, Ra is excluded from candidates for\n        // base consonants.\n        if (indicConfig.rephPos !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph && features.rphf && start + 3 <= end && (indicConfig.rephMode === 'Implicit' && !$7826f90f6f0cecc9$var$isJoiner(glyphs[start + 2]) || indicConfig.rephMode === 'Explicit' && glyphs[start + 2].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).ZWJ)) {\n            // See if it matches the 'rphf' feature.\n            let g = [\n                glyphs[start].copy(),\n                glyphs[start + 1].copy(),\n                glyphs[start + 2].copy()\n            ];\n            if ($7826f90f6f0cecc9$var$wouldSubstitute(g.slice(0, 2), 'rphf') || indicConfig.rephMode === 'Explicit' && $7826f90f6f0cecc9$var$wouldSubstitute(g, 'rphf')) {\n                limit += 2;\n                while(limit < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[limit]))limit++;\n                base = start;\n                hasReph = true;\n            }\n        } else if (indicConfig.rephMode === 'Log_Repha' && glyphs[start].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).Repha) {\n            limit++;\n            while(limit < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[limit]))limit++;\n            base = start;\n            hasReph = true;\n        }\n        switch(indicConfig.basePos){\n            case 'Last':\n                {\n                    // starting from the end of the syllable, move backwards\n                    let i = end;\n                    let seenBelow = false;\n                    do {\n                        let info = glyphs[--i].shaperInfo;\n                        // until a consonant is found\n                        if ($7826f90f6f0cecc9$var$isConsonant(glyphs[i])) {\n                            // that does not have a below-base or post-base form\n                            // (post-base forms have to follow below-base forms),\n                            if (info.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Below_C && (info.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Post_C || seenBelow)) {\n                                base = i;\n                                break;\n                            }\n                            // or that is not a pre-base reordering Ra,\n                            //\n                            // IMPLEMENTATION NOTES:\n                            //\n                            // Our pre-base reordering Ra's are marked POS_POST_C, so will be skipped\n                            // by the logic above already.\n                            //\n                            // or arrive at the first consonant. The consonant stopped at will\n                            // be the base.\n                            if (info.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Below_C) seenBelow = true;\n                            base = i;\n                        } else if (start < i && info.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).ZWJ && glyphs[i - 1].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H) break;\n                    }while (i > limit);\n                    break;\n                }\n            case 'First':\n                // The first consonant is always the base.\n                base = start;\n                // Mark all subsequent consonants as below.\n                for(let i = base + 1; i < end; i++)if ($7826f90f6f0cecc9$var$isConsonant(glyphs[i])) glyphs[i].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Below_C;\n        }\n        // If the syllable starts with Ra + Halant (in a script that has Reph)\n        // and has more than one consonant, Ra is excluded from candidates for\n        // base consonants.\n        //\n        //  Only do this for unforced Reph. (ie. not for Ra,H,ZWJ)\n        if (hasReph && base === start && limit - base <= 2) hasReph = false;\n        // 2. Decompose and reorder Matras:\n        //\n        // Each matra and any syllable modifier sign in the cluster are moved to the\n        // appropriate position relative to the consonant(s) in the cluster. The\n        // shaping engine decomposes two- or three-part matras into their constituent\n        // parts before any repositioning. Matra characters are classified by which\n        // consonant in a conjunct they have affinity for and are reordered to the\n        // following positions:\n        //\n        //   o Before first half form in the syllable\n        //   o After subjoined consonants\n        //   o After post-form consonant\n        //   o After main consonant (for above marks)\n        //\n        // IMPLEMENTATION NOTES:\n        //\n        // The normalize() routine has already decomposed matras for us, so we don't\n        // need to worry about that.\n        // 3.  Reorder marks to canonical order:\n        //\n        // Adjacent nukta and halant or nukta and vedic sign are always repositioned\n        // if necessary, so that the nukta is first.\n        //\n        // IMPLEMENTATION NOTES:\n        //\n        // We don't need to do this: the normalize() routine already did this for us.\n        // Reorder characters\n        for(let i = start; i < base; i++){\n            let info = glyphs[i].shaperInfo;\n            info.position = Math.min((0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_C, info.position);\n        }\n        if (base < end) glyphs[base].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C;\n        // Mark final consonants.  A final consonant is one appearing after a matra,\n        // like in Khmer.\n        for(let i = base + 1; i < end; i++)if (glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M) {\n            for(let j = i + 1; j < end; j++)if ($7826f90f6f0cecc9$var$isConsonant(glyphs[j])) {\n                glyphs[j].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Final_C;\n                break;\n            }\n            break;\n        }\n        // Handle beginning Ra\n        if (hasReph) glyphs[start].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph;\n        // For old-style Indic script tags, move the first post-base Halant after\n        // last consonant.\n        //\n        // Reports suggest that in some scripts Uniscribe does this only if there\n        // is *not* a Halant after last consonant already (eg. Kannada), while it\n        // does it unconditionally in other scripts (eg. Malayalam).  We don't\n        // currently know about other scripts, so we single out Malayalam for now.\n        //\n        // Kannada test case:\n        // U+0C9A,U+0CCD,U+0C9A,U+0CCD\n        // With some versions of Lohit Kannada.\n        // https://bugs.freedesktop.org/show_bug.cgi?id=59118\n        //\n        // Malayalam test case:\n        // U+0D38,U+0D4D,U+0D31,U+0D4D,U+0D31,U+0D4D\n        // With lohit-ttf-20121122/Lohit-Malayalam.ttf\n        if (plan.isOldSpec) {\n            let disallowDoubleHalants = plan.unicodeScript !== 'Malayalam';\n            for(let i = base + 1; i < end; i++)if (glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H) {\n                let j;\n                for(j = end - 1; j > i; j--){\n                    if ($7826f90f6f0cecc9$var$isConsonant(glyphs[j]) || disallowDoubleHalants && glyphs[j].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H) break;\n                }\n                if (glyphs[j].shaperInfo.category !== (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H && j > i) {\n                    // Move Halant to after last consonant.\n                    let t = glyphs[i];\n                    glyphs.splice(i, 0, ...glyphs.splice(i + 1, j - i));\n                    glyphs[j] = t;\n                }\n                break;\n            }\n        }\n        // Attach misc marks to previous char to move with them.\n        let lastPos = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Start;\n        for(let i = start; i < end; i++){\n            let info = glyphs[i].shaperInfo;\n            if (info.category & ((0, $90a9d3398ee54fe5$export$bbcd928767338e0d) | (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).N | (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).RS | (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).CM | (0, $90a9d3398ee54fe5$export$ca9599b2a300afc) & info.category)) {\n                info.position = lastPos;\n                if (info.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H && info.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M) {\n                    // Uniscribe doesn't move the Halant with Left Matra.\n                    // TEST: U+092B,U+093F,U+094DE\n                    // We follow.  This is important for the Sinhala\n                    // U+0DDA split matra since it decomposes to U+0DD9,U+0DCA\n                    // where U+0DD9 is a left matra and U+0DCA is the virama.\n                    // We don't want to move the virama with the left matra.\n                    // TEST: U+0D9A,U+0DDA\n                    for(let j = i; j > start; j--)if (glyphs[j - 1].shaperInfo.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M) {\n                        info.position = glyphs[j - 1].shaperInfo.position;\n                        break;\n                    }\n                }\n            } else if (info.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).SMVD) lastPos = info.position;\n        }\n        // For post-base consonants let them own anything before them\n        // since the last consonant or matra.\n        let last = base;\n        for(let i = base + 1; i < end; i++){\n            if ($7826f90f6f0cecc9$var$isConsonant(glyphs[i])) {\n                for(let j = last + 1; j < i; j++)if (glyphs[j].shaperInfo.position < (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).SMVD) glyphs[j].shaperInfo.position = glyphs[i].shaperInfo.position;\n                last = i;\n            } else if (glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M) last = i;\n        }\n        let arr = glyphs.slice(start, end);\n        arr.sort((a, b)=>a.shaperInfo.position - b.shaperInfo.position);\n        glyphs.splice(start, arr.length, ...arr);\n        // Find base again\n        for(let i = start; i < end; i++)if (glyphs[i].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C) {\n            base = i;\n            break;\n        }\n        // Setup features now\n        // Reph\n        for(let i = start; i < end && glyphs[i].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph; i++)glyphs[i].features.rphf = true;\n        // Pre-base\n        let blwf = !plan.isOldSpec && indicConfig.blwfMode === 'Pre_And_Post';\n        for(let i = start; i < base; i++){\n            glyphs[i].features.half = true;\n            if (blwf) glyphs[i].features.blwf = true;\n        }\n        // Post-base\n        for(let i = base + 1; i < end; i++){\n            glyphs[i].features.abvf = true;\n            glyphs[i].features.pstf = true;\n            glyphs[i].features.blwf = true;\n        }\n        if (plan.isOldSpec && plan.unicodeScript === 'Devanagari') {\n            // Old-spec eye-lash Ra needs special handling.  From the\n            // spec:\n            //\n            // \"The feature 'below-base form' is applied to consonants\n            // having below-base forms and following the base consonant.\n            // The exception is vattu, which may appear below half forms\n            // as well as below the base glyph. The feature 'below-base\n            // form' will be applied to all such occurrences of Ra as well.\"\n            //\n            // Test case: U+0924,U+094D,U+0930,U+094d,U+0915\n            // with Sanskrit 2003 font.\n            //\n            // However, note that Ra,Halant,ZWJ is the correct way to\n            // request eyelash form of Ra, so we wouldbn't inhibit it\n            // in that sequence.\n            //\n            // Test case: U+0924,U+094D,U+0930,U+094d,U+200D,U+0915\n            for(let i = start; i + 1 < base; i++)if (glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).Ra && glyphs[i + 1].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H && (i + 1 === base || glyphs[i + 2].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).ZWJ)) {\n                glyphs[i].features.blwf = true;\n                glyphs[i + 1].features.blwf = true;\n            }\n        }\n        let prefLen = 2;\n        if (features.pref && base + prefLen < end) // Find a Halant,Ra sequence and mark it for pre-base reordering processing.\n        for(let i = base + 1; i + prefLen - 1 < end; i++){\n            let g = [\n                glyphs[i].copy(),\n                glyphs[i + 1].copy()\n            ];\n            if ($7826f90f6f0cecc9$var$wouldSubstitute(g, 'pref')) {\n                for(let j = 0; j < prefLen; j++)glyphs[i++].features.pref = true;\n                // Mark the subsequent stuff with 'cfar'.  Used in Khmer.\n                // Read the feature spec.\n                // This allows distinguishing the following cases with MS Khmer fonts:\n                // U+1784,U+17D2,U+179A,U+17D2,U+1782\n                // U+1784,U+17D2,U+1782,U+17D2,U+179A\n                if (features.cfar) for(; i < end; i++)glyphs[i].features.cfar = true;\n                break;\n            }\n        }\n        // Apply ZWJ/ZWNJ effects\n        for(let i = start + 1; i < end; i++)if ($7826f90f6f0cecc9$var$isJoiner(glyphs[i])) {\n            let nonJoiner = glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).ZWNJ;\n            let j = i;\n            do {\n                j--;\n                // ZWJ/ZWNJ should disable CJCT.  They do that by simply\n                // being there, since we don't skip them for the CJCT\n                // feature (ie. F_MANUAL_ZWJ)\n                // A ZWNJ disables HALF.\n                if (nonJoiner) delete glyphs[j].features.half;\n            }while (j > start && !$7826f90f6f0cecc9$var$isConsonant(glyphs[j]));\n        }\n    }\n}\nfunction $7826f90f6f0cecc9$var$finalReordering(font, glyphs, plan) {\n    let indicConfig = plan.indicConfig;\n    let features = font._layoutEngine.engine.GSUBProcessor.features;\n    for(let start = 0, end = $7826f90f6f0cecc9$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $7826f90f6f0cecc9$var$nextSyllable(glyphs, start)){\n        // 4. Final reordering:\n        //\n        // After the localized forms and basic shaping forms GSUB features have been\n        // applied (see below), the shaping engine performs some final glyph\n        // reordering before applying all the remaining font features to the entire\n        // cluster.\n        let tryPref = !!features.pref;\n        // Find base again\n        let base = start;\n        for(; base < end; base++)if (glyphs[base].shaperInfo.position >= (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C) {\n            if (tryPref && base + 1 < end) {\n                for(let i = base + 1; i < end; i++)if (glyphs[i].features.pref) {\n                    if (!(glyphs[i].substituted && glyphs[i].isLigated && !glyphs[i].isMultiplied)) {\n                        // Ok, this was a 'pref' candidate but didn't form any.\n                        // Base is around here...\n                        base = i;\n                        while(base < end && $7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[base]))base++;\n                        glyphs[base].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).BASE_C;\n                        tryPref = false;\n                    }\n                    break;\n                }\n            }\n            // For Malayalam, skip over unformed below- (but NOT post-) forms.\n            if (plan.unicodeScript === 'Malayalam') for(let i = base + 1; i < end; i++){\n                while(i < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[i]))i++;\n                if (i === end || !$7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[i])) break;\n                i++; // Skip halant.\n                while(i < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[i]))i++;\n                if (i < end && $7826f90f6f0cecc9$var$isConsonant(glyphs[i]) && glyphs[i].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Below_C) {\n                    base = i;\n                    glyphs[base].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C;\n                }\n            }\n            if (start < base && glyphs[base].shaperInfo.position > (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C) base--;\n            break;\n        }\n        if (base === end && start < base && glyphs[base - 1].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).ZWJ) base--;\n        if (base < end) while(start < base && glyphs[base].shaperInfo.category & ((0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).N | (0, $90a9d3398ee54fe5$export$ca9599b2a300afc)))base--;\n        // o Reorder matras:\n        //\n        // If a pre-base matra character had been reordered before applying basic\n        // features, the glyph can be moved closer to the main consonant based on\n        // whether half-forms had been formed. Actual position for the matra is\n        // defined as “after last standalone halant glyph, after initial matra\n        // position and before the main consonant”. If ZWJ or ZWNJ follow this\n        // halant, position is moved after it.\n        //\n        if (start + 1 < end && start < base) {\n            // If we lost track of base, alas, position before last thingy.\n            let newPos = base === end ? base - 2 : base - 1;\n            // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n            // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n            // We want to position matra after them.\n            if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {\n                while(newPos > start && !(glyphs[newPos].shaperInfo.category & ((0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M | (0, $90a9d3398ee54fe5$export$ca9599b2a300afc))))newPos--;\n                // If we found no Halant we are done.\n                // Otherwise only proceed if the Halant does\n                // not belong to the Matra itself!\n                if ($7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M) // If ZWJ or ZWNJ follow this halant, position is moved after it.\n                {\n                    if (newPos + 1 < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[newPos + 1])) newPos++;\n                } else newPos = start; // No move.\n            }\n            if (start < newPos && glyphs[newPos].shaperInfo.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M) {\n                // Now go see if there's actually any matras...\n                for(let i = newPos; i > start; i--)if (glyphs[i - 1].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M) {\n                    let oldPos = i - 1;\n                    if (oldPos < base && base <= newPos) base--;\n                    let tmp = glyphs[oldPos];\n                    glyphs.splice(oldPos, 0, ...glyphs.splice(oldPos + 1, newPos - oldPos));\n                    glyphs[newPos] = tmp;\n                    newPos--;\n                }\n            }\n        }\n        // o Reorder reph:\n        //\n        // Reph’s original position is always at the beginning of the syllable,\n        // (i.e. it is not reordered at the character reordering stage). However,\n        // it will be reordered according to the basic-forms shaping results.\n        // Possible positions for reph, depending on the script, are; after main,\n        // before post-base consonant forms, and after post-base consonant forms.\n        // Two cases:\n        //\n        // - If repha is encoded as a sequence of characters (Ra,H or Ra,H,ZWJ), then\n        //   we should only move it if the sequence ligated to the repha form.\n        //\n        // - If repha is encoded separately and in the logical position, we should only\n        //   move it if it did NOT ligate.  If it ligated, it's probably the font trying\n        //   to make it work without the reordering.\n        if (start + 1 < end && glyphs[start].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph && glyphs[start].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).Repha !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)) {\n            let newRephPos;\n            let rephPos = indicConfig.rephPos;\n            let found = false;\n            // 1. If reph should be positioned after post-base consonant forms,\n            //    proceed to step 5.\n            if (rephPos !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).After_Post) {\n                //  2. If the reph repositioning class is not after post-base: target\n                //     position is after the first explicit halant glyph between the\n                //     first post-reph consonant and last main consonant. If ZWJ or ZWNJ\n                //     are following this halant, position is moved after it. If such\n                //     position is found, this is the target position. Otherwise,\n                //     proceed to the next step.\n                //\n                //     Note: in old-implementation fonts, where classifications were\n                //     fixed in shaping engine, there was no case where reph position\n                //     will be found on this step.\n                newRephPos = start + 1;\n                while(newRephPos < base && !$7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newRephPos]))newRephPos++;\n                if (newRephPos < base && $7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newRephPos])) {\n                    // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n                    if (newRephPos + 1 < base && $7826f90f6f0cecc9$var$isJoiner(glyphs[newRephPos + 1])) newRephPos++;\n                    found = true;\n                }\n                // 3. If reph should be repositioned after the main consonant: find the\n                //    first consonant not ligated with main, or find the first\n                //    consonant that is not a potential pre-base reordering Ra.\n                if (!found && rephPos === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).After_Main) {\n                    newRephPos = base;\n                    while(newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).After_Main)newRephPos++;\n                    found = newRephPos < end;\n                }\n                // 4. If reph should be positioned before post-base consonant, find\n                //    first post-base classified consonant not ligated with main. If no\n                //    consonant is found, the target position should be before the\n                //    first matra, syllable modifier sign or vedic sign.\n                //\n                // This is our take on what step 4 is trying to say (and failing, BADLY).\n                if (!found && rephPos === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).After_Sub) {\n                    newRephPos = base;\n                    while(newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & ((0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Post_C | (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).After_Post | (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).SMVD)))newRephPos++;\n                    found = newRephPos < end;\n                }\n            }\n            //  5. If no consonant is found in steps 3 or 4, move reph to a position\n            //     immediately before the first post-base matra, syllable modifier\n            //     sign or vedic sign that has a reordering class after the intended\n            //     reph position. For example, if the reordering position for reph\n            //     is post-main, it will skip above-base matras that also have a\n            //     post-main position.\n            if (!found) {\n                // Copied from step 2.\n                newRephPos = start + 1;\n                while(newRephPos < base && !$7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newRephPos]))newRephPos++;\n                if (newRephPos < base && $7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newRephPos])) {\n                    // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n                    if (newRephPos + 1 < base && $7826f90f6f0cecc9$var$isJoiner(glyphs[newRephPos + 1])) newRephPos++;\n                    found = true;\n                }\n            }\n            // 6. Otherwise, reorder reph to the end of the syllable.\n            if (!found) {\n                newRephPos = end - 1;\n                while(newRephPos > start && glyphs[newRephPos].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).SMVD)newRephPos--;\n                // If the Reph is to be ending up after a Matra,Halant sequence,\n                // position it before that Halant so it can interact with the Matra.\n                // However, if it's a plain Consonant,Halant we shouldn't do that.\n                // Uniscribe doesn't do this.\n                // TEST: U+0930,U+094D,U+0915,U+094B,U+094D\n                if ($7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newRephPos])) {\n                    for(let i = base + 1; i < newRephPos; i++)if (glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M) newRephPos--;\n                }\n            }\n            let reph = glyphs[start];\n            glyphs.splice(start, 0, ...glyphs.splice(start + 1, newRephPos - start));\n            glyphs[newRephPos] = reph;\n            if (start < base && base <= newRephPos) base--;\n        }\n        // o Reorder pre-base reordering consonants:\n        //\n        // If a pre-base reordering consonant is found, reorder it according to\n        // the following rules:\n        if (tryPref && base + 1 < end) {\n            for(let i = base + 1; i < end; i++)if (glyphs[i].features.pref) {\n                // 1. Only reorder a glyph produced by substitution during application\n                //    of the <pref> feature. (Note that a font may shape a Ra consonant with\n                //    the feature generally but block it in certain contexts.)\n                // Note: We just check that something got substituted.  We don't check that\n                // the <pref> feature actually did it...\n                //\n                // Reorder pref only if it ligated.\n                if (glyphs[i].isLigated && !glyphs[i].isMultiplied) {\n                    // 2. Try to find a target position the same way as for pre-base matra.\n                    //    If it is found, reorder pre-base consonant glyph.\n                    //\n                    // 3. If position is not found, reorder immediately before main\n                    //    consonant.\n                    let newPos = base;\n                    // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n                    // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n                    // We want to position matra after them.\n                    if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {\n                        while(newPos > start && !(glyphs[newPos - 1].shaperInfo.category & ((0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M | (0, $90a9d3398ee54fe5$export$ca9599b2a300afc))))newPos--;\n                        // In Khmer coeng model, a H,Ra can go *after* matras.  If it goes after a\n                        // split matra, it should be reordered to *before* the left part of such matra.\n                        if (newPos > start && glyphs[newPos - 1].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M) {\n                            let oldPos = i;\n                            for(let j = base + 1; j < oldPos; j++)if (glyphs[j].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M) {\n                                newPos--;\n                                break;\n                            }\n                        }\n                    }\n                    if (newPos > start && $7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newPos - 1])) // -> If ZWJ or ZWNJ follow this halant, position is moved after it.\n                    {\n                        if (newPos < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[newPos])) newPos++;\n                    }\n                    let oldPos = i;\n                    let tmp = glyphs[oldPos];\n                    glyphs.splice(newPos + 1, 0, ...glyphs.splice(newPos, oldPos - newPos));\n                    glyphs[newPos] = tmp;\n                    if (newPos <= base && base < oldPos) base++;\n                }\n                break;\n            }\n        }\n        // Apply 'init' to the Left Matra if it's a word start.\n        if (glyphs[start].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M && (!start || !/Cf|Mn/.test((0, unicode_properties__WEBPACK_IMPORTED_MODULE_3__.getCategory)(glyphs[start - 1].codePoints[0])))) glyphs[start].features.init = true;\n    }\n}\nfunction $7826f90f6f0cecc9$var$nextSyllable(glyphs, start) {\n    if (start >= glyphs.length) return start;\n    let syllable = glyphs[start].shaperInfo.syllable;\n    while(++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);\n    return start;\n}\n\n\n\n\n\n\n\n\n\nconst { categories: $7ab494fe977143c6$var$categories, decompositions: $7ab494fe977143c6$var$decompositions } = (0, (/*@__PURE__*/$parcel$interopDefault($aa333a9607471296$exports)));\nconst $7ab494fe977143c6$var$trie = new (0, unicode_trie__WEBPACK_IMPORTED_MODULE_4__)((0, $12727730ddfc8bfe$export$94fdf11bafc8de6b)(\"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\"));\nconst $7ab494fe977143c6$var$stateMachine = new (0, dfa__WEBPACK_IMPORTED_MODULE_5__)((0, (/*@__PURE__*/$parcel$interopDefault($aa333a9607471296$exports))));\nclass $7ab494fe977143c6$export$2e2bcd8739ae039 extends (0, $649970d87335b30f$export$2e2bcd8739ae039) {\n    static planFeatures(plan) {\n        plan.addStage($7ab494fe977143c6$var$setupSyllables);\n        // Default glyph pre-processing group\n        plan.addStage([\n            'locl',\n            'ccmp',\n            'nukt',\n            'akhn'\n        ]);\n        // Reordering group\n        plan.addStage($7ab494fe977143c6$var$clearSubstitutionFlags);\n        plan.addStage([\n            'rphf'\n        ], false);\n        plan.addStage($7ab494fe977143c6$var$recordRphf);\n        plan.addStage($7ab494fe977143c6$var$clearSubstitutionFlags);\n        plan.addStage([\n            'pref'\n        ]);\n        plan.addStage($7ab494fe977143c6$var$recordPref);\n        // Orthographic unit shaping group\n        plan.addStage([\n            'rkrf',\n            'abvf',\n            'blwf',\n            'half',\n            'pstf',\n            'vatu',\n            'cjct'\n        ]);\n        plan.addStage($7ab494fe977143c6$var$reorder);\n        // Topographical features\n        // Scripts that need this are handled by the Arabic shaper, not implemented here for now.\n        // plan.addStage(['isol', 'init', 'medi', 'fina', 'med2', 'fin2', 'fin3'], false);\n        // Standard topographic presentation and positional feature application\n        plan.addStage([\n            'abvs',\n            'blws',\n            'pres',\n            'psts',\n            'dist',\n            'abvm',\n            'blwm'\n        ]);\n    }\n    static assignFeatures(plan, glyphs) {\n        // Decompose split vowels\n        // TODO: do this in a more general unicode normalizer\n        for(let i = glyphs.length - 1; i >= 0; i--){\n            let codepoint = glyphs[i].codePoints[0];\n            if ($7ab494fe977143c6$var$decompositions[codepoint]) {\n                let decomposed = $7ab494fe977143c6$var$decompositions[codepoint].map((c)=>{\n                    let g = plan.font.glyphForCodePoint(c);\n                    return new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(plan.font, g.id, [\n                        c\n                    ], glyphs[i].features);\n                });\n                glyphs.splice(i, 1, ...decomposed);\n            }\n        }\n    }\n}\n(0, _swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_10__._)($7ab494fe977143c6$export$2e2bcd8739ae039, \"zeroMarkWidths\", 'BEFORE_GPOS');\nfunction $7ab494fe977143c6$var$useCategory(glyph) {\n    return $7ab494fe977143c6$var$trie.get(glyph.codePoints[0]);\n}\nclass $7ab494fe977143c6$var$USEInfo {\n    constructor(category, syllableType, syllable){\n        this.category = category;\n        this.syllableType = syllableType;\n        this.syllable = syllable;\n    }\n}\nfunction $7ab494fe977143c6$var$setupSyllables(font, glyphs) {\n    let syllable = 0;\n    for (let [start, end, tags] of $7ab494fe977143c6$var$stateMachine.match(glyphs.map($7ab494fe977143c6$var$useCategory))){\n        ++syllable;\n        // Create shaper info\n        for(let i = start; i <= end; i++)glyphs[i].shaperInfo = new $7ab494fe977143c6$var$USEInfo($7ab494fe977143c6$var$categories[$7ab494fe977143c6$var$useCategory(glyphs[i])], tags[0], syllable);\n        // Assign rphf feature\n        let limit = glyphs[start].shaperInfo.category === 'R' ? 1 : Math.min(3, end - start);\n        for(let i = start; i < start + limit; i++)glyphs[i].features.rphf = true;\n    }\n}\nfunction $7ab494fe977143c6$var$clearSubstitutionFlags(font, glyphs) {\n    for (let glyph of glyphs)glyph.substituted = false;\n}\nfunction $7ab494fe977143c6$var$recordRphf(font, glyphs) {\n    for (let glyph of glyphs)if (glyph.substituted && glyph.features.rphf) // Mark a substituted repha.\n    glyph.shaperInfo.category = 'R';\n}\nfunction $7ab494fe977143c6$var$recordPref(font, glyphs) {\n    for (let glyph of glyphs)if (glyph.substituted) // Mark a substituted pref as VPre, as they behave the same way.\n    glyph.shaperInfo.category = 'VPre';\n}\nfunction $7ab494fe977143c6$var$reorder(font, glyphs) {\n    let dottedCircle = font.glyphForCodePoint(0x25cc).id;\n    for(let start = 0, end = $7ab494fe977143c6$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $7ab494fe977143c6$var$nextSyllable(glyphs, start)){\n        let i, j;\n        let info = glyphs[start].shaperInfo;\n        let type = info.syllableType;\n        // Only a few syllable types need reordering.\n        if (type !== 'virama_terminated_cluster' && type !== 'standard_cluster' && type !== 'broken_cluster') continue;\n        // Insert a dotted circle glyph in broken clusters.\n        if (type === 'broken_cluster' && dottedCircle) {\n            let g = new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(font, dottedCircle, [\n                0x25cc\n            ]);\n            g.shaperInfo = info;\n            // Insert after possible Repha.\n            for(i = start; i < end && glyphs[i].shaperInfo.category === 'R'; i++);\n            glyphs.splice(++i, 0, g);\n            end++;\n        }\n        // Move things forward.\n        if (info.category === 'R' && end - start > 1) // Got a repha. Reorder it to after first base, before first halant.\n        for(i = start + 1; i < end; i++){\n            info = glyphs[i].shaperInfo;\n            if ($7ab494fe977143c6$var$isBase(info) || $7ab494fe977143c6$var$isHalant(glyphs[i])) {\n                // If we hit a halant, move before it; otherwise it's a base: move to it's\n                // place, and shift things in between backward.\n                if ($7ab494fe977143c6$var$isHalant(glyphs[i])) i--;\n                glyphs.splice(start, 0, ...glyphs.splice(start + 1, i - start), glyphs[i]);\n                break;\n            }\n        }\n        // Move things back.\n        for(i = start, j = end; i < end; i++){\n            info = glyphs[i].shaperInfo;\n            if ($7ab494fe977143c6$var$isBase(info) || $7ab494fe977143c6$var$isHalant(glyphs[i])) // If we hit a halant, move after it; otherwise it's a base: move to it's\n            // place, and shift things in between backward.\n            j = $7ab494fe977143c6$var$isHalant(glyphs[i]) ? i + 1 : i;\n            else if ((info.category === 'VPre' || info.category === 'VMPre') && j < i) glyphs.splice(j, 1, glyphs[i], ...glyphs.splice(j, i - j));\n        }\n    }\n}\nfunction $7ab494fe977143c6$var$nextSyllable(glyphs, start) {\n    if (start >= glyphs.length) return start;\n    let syllable = glyphs[start].shaperInfo.syllable;\n    while(++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);\n    return start;\n}\nfunction $7ab494fe977143c6$var$isHalant(glyph) {\n    return glyph.shaperInfo.category === 'H' && !glyph.isLigated;\n}\nfunction $7ab494fe977143c6$var$isBase(info) {\n    return info.category === 'B' || info.category === 'GB';\n}\n\n\nconst $102b6fe50f1d50b4$var$SHAPERS = {\n    arab: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n    mong: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n    syrc: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n    'nko ': (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n    phag: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n    mand: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n    mani: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n    phlp: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n    hang: (0, $e1c6bbc8cb416f8c$export$2e2bcd8739ae039),\n    bng2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    beng: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    dev2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    deva: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    gjr2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    gujr: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    guru: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    gur2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    knda: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    knd2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    mlm2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    mlym: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    ory2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    orya: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    taml: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    tml2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    telu: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    tel2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    khmr: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    bali: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    batk: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    brah: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    bugi: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    buhd: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    cakm: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    cham: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    dupl: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    egyp: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    gran: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    hano: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    java: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    kthi: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    kali: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    khar: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    khoj: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    sind: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    lepc: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    limb: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    mahj: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    // mand: UniversalShaper, // Mandaic\n    // mani: UniversalShaper, // Manichaean\n    mtei: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    modi: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    // mong: UniversalShaper, // Mongolian\n    // 'nko ': UniversalShaper, // N’Ko\n    hmng: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    // phag: UniversalShaper, // Phags-pa\n    // phlp: UniversalShaper, // Psalter Pahlavi\n    rjng: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    saur: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    shrd: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    sidd: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    sinh: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    sund: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    sylo: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    tglg: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    tagb: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    tale: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    lana: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    tavt: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    takr: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    tibt: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    tfng: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    tirh: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    latn: (0, $649970d87335b30f$export$2e2bcd8739ae039),\n    DFLT: (0, $649970d87335b30f$export$2e2bcd8739ae039 // Default\n    )\n};\nfunction $102b6fe50f1d50b4$export$7877a478dd30fd3d(script) {\n    if (!Array.isArray(script)) script = [\n        script\n    ];\n    for (let s of script){\n        let shaper = $102b6fe50f1d50b4$var$SHAPERS[s];\n        if (shaper) return shaper;\n    }\n    return 0, $649970d87335b30f$export$2e2bcd8739ae039;\n}\n\n\n\n\n\nclass $0a876c45f1f7c41c$export$2e2bcd8739ae039 extends (0, $a83b9c36aaa94fd3$export$2e2bcd8739ae039) {\n    applyLookup(lookupType, table) {\n        switch(lookupType){\n            case 1:\n                {\n                    let index = this.coverageIndex(table.coverage);\n                    if (index === -1) return false;\n                    let glyph = this.glyphIterator.cur;\n                    switch(table.version){\n                        case 1:\n                            glyph.id = glyph.id + table.deltaGlyphID & 0xffff;\n                            break;\n                        case 2:\n                            glyph.id = table.substitute.get(index);\n                            break;\n                    }\n                    return true;\n                }\n            case 2:\n                {\n                    let index = this.coverageIndex(table.coverage);\n                    if (index !== -1) {\n                        let sequence = table.sequences.get(index);\n                        if (sequence.length === 0) {\n                            // If the sequence length is zero, delete the glyph.\n                            // The OpenType spec disallows this, but seems like Harfbuzz and Uniscribe allow it.\n                            this.glyphs.splice(this.glyphIterator.index, 1);\n                            return true;\n                        }\n                        this.glyphIterator.cur.id = sequence[0];\n                        this.glyphIterator.cur.ligatureComponent = 0;\n                        let features = this.glyphIterator.cur.features;\n                        let curGlyph = this.glyphIterator.cur;\n                        let replacement = sequence.slice(1).map((gid, i)=>{\n                            let glyph = new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(this.font, gid, undefined, features);\n                            glyph.shaperInfo = curGlyph.shaperInfo;\n                            glyph.isLigated = curGlyph.isLigated;\n                            glyph.ligatureComponent = i + 1;\n                            glyph.substituted = true;\n                            glyph.isMultiplied = true;\n                            return glyph;\n                        });\n                        this.glyphs.splice(this.glyphIterator.index + 1, 0, ...replacement);\n                        return true;\n                    }\n                    return false;\n                }\n            case 3:\n                {\n                    let index = this.coverageIndex(table.coverage);\n                    if (index !== -1) {\n                        let USER_INDEX = 0; // TODO\n                        this.glyphIterator.cur.id = table.alternateSet.get(index)[USER_INDEX];\n                        return true;\n                    }\n                    return false;\n                }\n            case 4:\n                {\n                    let index = this.coverageIndex(table.coverage);\n                    if (index === -1) return false;\n                    for (let ligature of table.ligatureSets.get(index)){\n                        let matched = this.sequenceMatchIndices(1, ligature.components);\n                        if (!matched) continue;\n                        let curGlyph = this.glyphIterator.cur;\n                        // Concatenate all of the characters the new ligature will represent\n                        let characters = curGlyph.codePoints.slice();\n                        for (let index of matched)characters.push(...this.glyphs[index].codePoints);\n                        // Create the replacement ligature glyph\n                        let ligatureGlyph = new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(this.font, ligature.glyph, characters, curGlyph.features);\n                        ligatureGlyph.shaperInfo = curGlyph.shaperInfo;\n                        ligatureGlyph.isLigated = true;\n                        ligatureGlyph.substituted = true;\n                        // From Harfbuzz:\n                        // - If it *is* a mark ligature, we don't allocate a new ligature id, and leave\n                        //   the ligature to keep its old ligature id.  This will allow it to attach to\n                        //   a base ligature in GPOS.  Eg. if the sequence is: LAM,LAM,SHADDA,FATHA,HEH,\n                        //   and LAM,LAM,HEH for a ligature, they will leave SHADDA and FATHA with a\n                        //   ligature id and component value of 2.  Then if SHADDA,FATHA form a ligature\n                        //   later, we don't want them to lose their ligature id/component, otherwise\n                        //   GPOS will fail to correctly position the mark ligature on top of the\n                        //   LAM,LAM,HEH ligature. See https://bugzilla.gnome.org/show_bug.cgi?id=676343\n                        //\n                        // - If a ligature is formed of components that some of which are also ligatures\n                        //   themselves, and those ligature components had marks attached to *their*\n                        //   components, we have to attach the marks to the new ligature component\n                        //   positions!  Now *that*'s tricky!  And these marks may be following the\n                        //   last component of the whole sequence, so we should loop forward looking\n                        //   for them and update them.\n                        //\n                        //   Eg. the sequence is LAM,LAM,SHADDA,FATHA,HEH, and the font first forms a\n                        //   'calt' ligature of LAM,HEH, leaving the SHADDA and FATHA with a ligature\n                        //   id and component == 1.  Now, during 'liga', the LAM and the LAM-HEH ligature\n                        //   form a LAM-LAM-HEH ligature.  We need to reassign the SHADDA and FATHA to\n                        //   the new ligature with a component value of 2.\n                        //\n                        //   This in fact happened to a font...  See https://bugzilla.gnome.org/show_bug.cgi?id=437633\n                        let isMarkLigature = curGlyph.isMark;\n                        for(let i = 0; i < matched.length && isMarkLigature; i++)isMarkLigature = this.glyphs[matched[i]].isMark;\n                        ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;\n                        let lastLigID = curGlyph.ligatureID;\n                        let lastNumComps = curGlyph.codePoints.length;\n                        let curComps = lastNumComps;\n                        let idx = this.glyphIterator.index + 1;\n                        // Set ligatureID and ligatureComponent on glyphs that were skipped in the matched sequence.\n                        // This allows GPOS to attach marks to the correct ligature components.\n                        for (let matchIndex of matched){\n                            // Don't assign new ligature components for mark ligatures (see above)\n                            if (isMarkLigature) idx = matchIndex;\n                            else while(idx < matchIndex){\n                                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);\n                                this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;\n                                this.glyphs[idx].ligatureComponent = ligatureComponent;\n                                idx++;\n                            }\n                            lastLigID = this.glyphs[idx].ligatureID;\n                            lastNumComps = this.glyphs[idx].codePoints.length;\n                            curComps += lastNumComps;\n                            idx++; // skip base glyph\n                        }\n                        // Adjust ligature components for any marks following\n                        if (lastLigID && !isMarkLigature) for(let i = idx; i < this.glyphs.length; i++){\n                            if (this.glyphs[i].ligatureID === lastLigID) {\n                                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[i].ligatureComponent || 1, lastNumComps);\n                                this.glyphs[i].ligatureComponent = ligatureComponent;\n                            } else break;\n                        }\n                        // Delete the matched glyphs, and replace the current glyph with the ligature glyph\n                        for(let i = matched.length - 1; i >= 0; i--)this.glyphs.splice(matched[i], 1);\n                        this.glyphs[this.glyphIterator.index] = ligatureGlyph;\n                        return true;\n                    }\n                    return false;\n                }\n            case 5:\n                return this.applyContext(table);\n            case 6:\n                return this.applyChainingContext(table);\n            case 7:\n                return this.applyLookup(table.lookupType, table.extension);\n            default:\n                throw new Error(`GSUB lookupType ${lookupType} is not supported`);\n        }\n    }\n}\n\n\n\nclass $c96c93587d49c14d$export$2e2bcd8739ae039 extends (0, $a83b9c36aaa94fd3$export$2e2bcd8739ae039) {\n    applyPositionValue(sequenceIndex, value) {\n        let position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];\n        if (value.xAdvance != null) position.xAdvance += value.xAdvance;\n        if (value.yAdvance != null) position.yAdvance += value.yAdvance;\n        if (value.xPlacement != null) position.xOffset += value.xPlacement;\n        if (value.yPlacement != null) position.yOffset += value.yPlacement;\n        // Adjustments for font variations\n        let variationProcessor = this.font._variationProcessor;\n        let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n        if (variationProcessor && variationStore) {\n            if (value.xPlaDevice) position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);\n            if (value.yPlaDevice) position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);\n            if (value.xAdvDevice) position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);\n            if (value.yAdvDevice) position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);\n        }\n    // TODO: device tables\n    }\n    applyLookup(lookupType, table) {\n        switch(lookupType){\n            case 1:\n                {\n                    let index = this.coverageIndex(table.coverage);\n                    if (index === -1) return false;\n                    switch(table.version){\n                        case 1:\n                            this.applyPositionValue(0, table.value);\n                            break;\n                        case 2:\n                            this.applyPositionValue(0, table.values.get(index));\n                            break;\n                    }\n                    return true;\n                }\n            case 2:\n                {\n                    let nextGlyph = this.glyphIterator.peek();\n                    if (!nextGlyph) return false;\n                    let index = this.coverageIndex(table.coverage);\n                    if (index === -1) return false;\n                    switch(table.version){\n                        case 1:\n                            let set = table.pairSets.get(index);\n                            for (let pair of set)if (pair.secondGlyph === nextGlyph.id) {\n                                this.applyPositionValue(0, pair.value1);\n                                this.applyPositionValue(1, pair.value2);\n                                return true;\n                            }\n                            return false;\n                        case 2:\n                            let class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);\n                            let class2 = this.getClassID(nextGlyph.id, table.classDef2);\n                            if (class1 === -1 || class2 === -1) return false;\n                            var pair = table.classRecords.get(class1).get(class2);\n                            this.applyPositionValue(0, pair.value1);\n                            this.applyPositionValue(1, pair.value2);\n                            return true;\n                    }\n                }\n            case 3:\n                {\n                    let nextIndex = this.glyphIterator.peekIndex();\n                    let nextGlyph = this.glyphs[nextIndex];\n                    if (!nextGlyph) return false;\n                    let curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];\n                    if (!curRecord || !curRecord.exitAnchor) return false;\n                    let nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, nextGlyph.id)];\n                    if (!nextRecord || !nextRecord.entryAnchor) return false;\n                    let entry = this.getAnchor(nextRecord.entryAnchor);\n                    let exit = this.getAnchor(curRecord.exitAnchor);\n                    let cur = this.positions[this.glyphIterator.index];\n                    let next = this.positions[nextIndex];\n                    let d;\n                    switch(this.direction){\n                        case 'ltr':\n                            cur.xAdvance = exit.x + cur.xOffset;\n                            d = entry.x + next.xOffset;\n                            next.xAdvance -= d;\n                            next.xOffset -= d;\n                            break;\n                        case 'rtl':\n                            d = exit.x + cur.xOffset;\n                            cur.xAdvance -= d;\n                            cur.xOffset -= d;\n                            next.xAdvance = entry.x + next.xOffset;\n                            break;\n                    }\n                    if (this.glyphIterator.flags.rightToLeft) {\n                        this.glyphIterator.cur.cursiveAttachment = nextIndex;\n                        cur.yOffset = entry.y - exit.y;\n                    } else {\n                        nextGlyph.cursiveAttachment = this.glyphIterator.index;\n                        cur.yOffset = exit.y - entry.y;\n                    }\n                    return true;\n                }\n            case 4:\n                {\n                    let markIndex = this.coverageIndex(table.markCoverage);\n                    if (markIndex === -1) return false;\n                    // search backward for a base glyph\n                    let baseGlyphIndex = this.glyphIterator.index;\n                    while(--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0));\n                    if (baseGlyphIndex < 0) return false;\n                    let baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);\n                    if (baseIndex === -1) return false;\n                    let markRecord = table.markArray[markIndex];\n                    let baseAnchor = table.baseArray[baseIndex][markRecord.class];\n                    this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n                    return true;\n                }\n            case 5:\n                {\n                    let markIndex = this.coverageIndex(table.markCoverage);\n                    if (markIndex === -1) return false;\n                    // search backward for a base glyph\n                    let baseGlyphIndex = this.glyphIterator.index;\n                    while(--baseGlyphIndex >= 0 && this.glyphs[baseGlyphIndex].isMark);\n                    if (baseGlyphIndex < 0) return false;\n                    let ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[baseGlyphIndex].id);\n                    if (ligIndex === -1) return false;\n                    let ligAttach = table.ligatureArray[ligIndex];\n                    let markGlyph = this.glyphIterator.cur;\n                    let ligGlyph = this.glyphs[baseGlyphIndex];\n                    let compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && markGlyph.ligatureComponent > 0 ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1 : ligGlyph.codePoints.length - 1;\n                    let markRecord = table.markArray[markIndex];\n                    let baseAnchor = ligAttach[compIndex][markRecord.class];\n                    this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n                    return true;\n                }\n            case 6:\n                {\n                    let mark1Index = this.coverageIndex(table.mark1Coverage);\n                    if (mark1Index === -1) return false;\n                    // get the previous mark to attach to\n                    let prevIndex = this.glyphIterator.peekIndex(-1);\n                    let prev = this.glyphs[prevIndex];\n                    if (!prev || !prev.isMark) return false;\n                    let cur = this.glyphIterator.cur;\n                    // The following logic was borrowed from Harfbuzz\n                    let good = false;\n                    if (cur.ligatureID === prev.ligatureID) {\n                        if (!cur.ligatureID) good = true;\n                        else if (cur.ligatureComponent === prev.ligatureComponent) good = true;\n                    } else // If ligature ids don't match, it may be the case that one of the marks\n                    // itself is a ligature, in which case match.\n                    if (cur.ligatureID && !cur.ligatureComponent || prev.ligatureID && !prev.ligatureComponent) good = true;\n                    if (!good) return false;\n                    let mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);\n                    if (mark2Index === -1) return false;\n                    let markRecord = table.mark1Array[mark1Index];\n                    let baseAnchor = table.mark2Array[mark2Index][markRecord.class];\n                    this.applyAnchor(markRecord, baseAnchor, prevIndex);\n                    return true;\n                }\n            case 7:\n                return this.applyContext(table);\n            case 8:\n                return this.applyChainingContext(table);\n            case 9:\n                return this.applyLookup(table.lookupType, table.extension);\n            default:\n                throw new Error(`Unsupported GPOS table: ${lookupType}`);\n        }\n    }\n    applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {\n        let baseCoords = this.getAnchor(baseAnchor);\n        let markCoords = this.getAnchor(markRecord.markAnchor);\n        let basePos = this.positions[baseGlyphIndex];\n        let markPos = this.positions[this.glyphIterator.index];\n        markPos.xOffset = baseCoords.x - markCoords.x;\n        markPos.yOffset = baseCoords.y - markCoords.y;\n        this.glyphIterator.cur.markAttachment = baseGlyphIndex;\n    }\n    getAnchor(anchor) {\n        // TODO: contour point, device tables\n        let x = anchor.xCoordinate;\n        let y = anchor.yCoordinate;\n        // Adjustments for font variations\n        let variationProcessor = this.font._variationProcessor;\n        let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n        if (variationProcessor && variationStore) {\n            if (anchor.xDeviceTable) x += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);\n            if (anchor.yDeviceTable) y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);\n        }\n        return {\n            x: x,\n            y: y\n        };\n    }\n    applyFeatures(userFeatures, glyphs, advances) {\n        super.applyFeatures(userFeatures, glyphs, advances);\n        for(var i = 0; i < this.glyphs.length; i++)this.fixCursiveAttachment(i);\n        this.fixMarkAttachment();\n    }\n    fixCursiveAttachment(i) {\n        let glyph = this.glyphs[i];\n        if (glyph.cursiveAttachment != null) {\n            let j = glyph.cursiveAttachment;\n            glyph.cursiveAttachment = null;\n            this.fixCursiveAttachment(j);\n            this.positions[i].yOffset += this.positions[j].yOffset;\n        }\n    }\n    fixMarkAttachment() {\n        for(let i = 0; i < this.glyphs.length; i++){\n            let glyph = this.glyphs[i];\n            if (glyph.markAttachment != null) {\n                let j = glyph.markAttachment;\n                this.positions[i].xOffset += this.positions[j].xOffset;\n                this.positions[i].yOffset += this.positions[j].yOffset;\n                if (this.direction === 'ltr') for(let k = j; k < i; k++){\n                    this.positions[i].xOffset -= this.positions[k].xAdvance;\n                    this.positions[i].yOffset -= this.positions[k].yAdvance;\n                }\n                else for(let k = j + 1; k < i + 1; k++){\n                    this.positions[i].xOffset += this.positions[k].xAdvance;\n                    this.positions[i].yOffset += this.positions[k].yAdvance;\n                }\n            }\n        }\n    }\n}\n\n\nclass $a62492810de27e3d$export$2e2bcd8739ae039 {\n    setup(glyphRun) {\n        // Map glyphs to GlyphInfo objects so data can be passed between\n        // GSUB and GPOS without mutating the real (shared) Glyph objects.\n        this.glyphInfos = glyphRun.glyphs.map((glyph)=>new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(this.font, glyph.id, [\n                ...glyph.codePoints\n            ]));\n        // Select a script based on what is available in GSUB/GPOS.\n        let script = null;\n        if (this.GPOSProcessor) script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n        if (this.GSUBProcessor) script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n        // Choose a shaper based on the script, and setup a shaping plan.\n        // This determines which features to apply to which glyphs.\n        this.shaper = $102b6fe50f1d50b4$export$7877a478dd30fd3d(script);\n        this.plan = new (0, $94d7a73bd2edfc9a$export$2e2bcd8739ae039)(this.font, script, glyphRun.direction);\n        this.shaper.plan(this.plan, this.glyphInfos, glyphRun.features);\n        // Assign chosen features to output glyph run\n        for(let key in this.plan.allFeatures)glyphRun.features[key] = true;\n    }\n    substitute(glyphRun) {\n        if (this.GSUBProcessor) {\n            this.plan.process(this.GSUBProcessor, this.glyphInfos);\n            // Map glyph infos back to normal Glyph objects\n            glyphRun.glyphs = this.glyphInfos.map((glyphInfo)=>this.font.getGlyph(glyphInfo.id, glyphInfo.codePoints));\n        }\n    }\n    position(glyphRun) {\n        if (this.shaper.zeroMarkWidths === 'BEFORE_GPOS') this.zeroMarkAdvances(glyphRun.positions);\n        if (this.GPOSProcessor) this.plan.process(this.GPOSProcessor, this.glyphInfos, glyphRun.positions);\n        if (this.shaper.zeroMarkWidths === 'AFTER_GPOS') this.zeroMarkAdvances(glyphRun.positions);\n        // Reverse the glyphs and positions if the script is right-to-left\n        if (glyphRun.direction === 'rtl') {\n            glyphRun.glyphs.reverse();\n            glyphRun.positions.reverse();\n        }\n        return this.GPOSProcessor && this.GPOSProcessor.features;\n    }\n    zeroMarkAdvances(positions) {\n        for(let i = 0; i < this.glyphInfos.length; i++)if (this.glyphInfos[i].isMark) {\n            positions[i].xAdvance = 0;\n            positions[i].yAdvance = 0;\n        }\n    }\n    cleanup() {\n        this.glyphInfos = null;\n        this.plan = null;\n        this.shaper = null;\n    }\n    getAvailableFeatures(script, language) {\n        let features = [];\n        if (this.GSUBProcessor) {\n            this.GSUBProcessor.selectScript(script, language);\n            features.push(...Object.keys(this.GSUBProcessor.features));\n        }\n        if (this.GPOSProcessor) {\n            this.GPOSProcessor.selectScript(script, language);\n            features.push(...Object.keys(this.GPOSProcessor.features));\n        }\n        return features;\n    }\n    constructor(font){\n        this.font = font;\n        this.glyphInfos = null;\n        this.plan = null;\n        this.GSUBProcessor = null;\n        this.GPOSProcessor = null;\n        this.fallbackPosition = true;\n        if (font.GSUB) this.GSUBProcessor = new (0, $0a876c45f1f7c41c$export$2e2bcd8739ae039)(font, font.GSUB);\n        if (font.GPOS) this.GPOSProcessor = new (0, $c96c93587d49c14d$export$2e2bcd8739ae039)(font, font.GPOS);\n    }\n}\n\n\nclass $4c0a7fa5df7a9ab1$export$2e2bcd8739ae039 {\n    layout(string, features, script, language, direction) {\n        // Make the features parameter optional\n        if (typeof features === 'string') {\n            direction = language;\n            language = script;\n            script = features;\n            features = [];\n        }\n        // Map string to glyphs if needed\n        if (typeof string === 'string') {\n            // Attempt to detect the script from the string if not provided.\n            if (script == null) script = $130d1a642ebcd2b7$export$e5cb25e204fb8450(string);\n            var glyphs = this.font.glyphsForString(string);\n        } else {\n            // Attempt to detect the script from the glyph code points if not provided.\n            if (script == null) {\n                let codePoints = [];\n                for (let glyph of string)codePoints.push(...glyph.codePoints);\n                script = $130d1a642ebcd2b7$export$16fab0757cfc223d(codePoints);\n            }\n            var glyphs = string;\n        }\n        let glyphRun = new (0, $be07b3e97a42687a$export$2e2bcd8739ae039)(glyphs, features, script, language, direction);\n        // Return early if there are no glyphs\n        if (glyphs.length === 0) {\n            glyphRun.positions = [];\n            return glyphRun;\n        }\n        // Setup the advanced layout engine\n        if (this.engine && this.engine.setup) this.engine.setup(glyphRun);\n        // Substitute and position the glyphs\n        this.substitute(glyphRun);\n        this.position(glyphRun);\n        this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions);\n        // Let the layout engine clean up any state it might have\n        if (this.engine && this.engine.cleanup) this.engine.cleanup();\n        return glyphRun;\n    }\n    substitute(glyphRun) {\n        // Call the advanced layout engine to make substitutions\n        if (this.engine && this.engine.substitute) this.engine.substitute(glyphRun);\n    }\n    position(glyphRun) {\n        // Get initial glyph positions\n        glyphRun.positions = glyphRun.glyphs.map((glyph)=>new (0, $1ac75d9a55b67f01$export$2e2bcd8739ae039)(glyph.advanceWidth));\n        let positioned = null;\n        // Call the advanced layout engine. Returns the features applied.\n        if (this.engine && this.engine.position) positioned = this.engine.position(glyphRun);\n        // if there is no GPOS table, use unicode properties to position marks.\n        if (!positioned && (!this.engine || this.engine.fallbackPosition)) {\n            if (!this.unicodeLayoutEngine) this.unicodeLayoutEngine = new (0, $0a4bdfeb6dfd6f5e$export$2e2bcd8739ae039)(this.font);\n            this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);\n        }\n        // if kerning is not supported by GPOS, do kerning with the TrueType/AAT kern table\n        if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {\n            if (!this.kernProcessor) this.kernProcessor = new (0, $0bba3a9db57637f3$export$2e2bcd8739ae039)(this.font);\n            this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);\n            glyphRun.features.kern = true;\n        }\n    }\n    hideDefaultIgnorables(glyphs, positions) {\n        let space = this.font.glyphForCodePoint(0x20);\n        for(let i = 0; i < glyphs.length; i++)if (this.isDefaultIgnorable(glyphs[i].codePoints[0])) {\n            glyphs[i] = space;\n            positions[i].xAdvance = 0;\n            positions[i].yAdvance = 0;\n        }\n    }\n    isDefaultIgnorable(ch) {\n        // From DerivedCoreProperties.txt in the Unicode database,\n        // minus U+115F, U+1160, U+3164 and U+FFA0, which is what\n        // Harfbuzz and Uniscribe do.\n        let plane = ch >> 16;\n        if (plane === 0) // BMP\n        switch(ch >> 8){\n            case 0x00:\n                return ch === 0x00AD;\n            case 0x03:\n                return ch === 0x034F;\n            case 0x06:\n                return ch === 0x061C;\n            case 0x17:\n                return 0x17B4 <= ch && ch <= 0x17B5;\n            case 0x18:\n                return 0x180B <= ch && ch <= 0x180E;\n            case 0x20:\n                return 0x200B <= ch && ch <= 0x200F || 0x202A <= ch && ch <= 0x202E || 0x2060 <= ch && ch <= 0x206F;\n            case 0xFE:\n                return 0xFE00 <= ch && ch <= 0xFE0F || ch === 0xFEFF;\n            case 0xFF:\n                return 0xFFF0 <= ch && ch <= 0xFFF8;\n            default:\n                return false;\n        }\n        else // Other planes\n        switch(plane){\n            case 0x01:\n                return 0x1BCA0 <= ch && ch <= 0x1BCA3 || 0x1D173 <= ch && ch <= 0x1D17A;\n            case 0x0E:\n                return 0xE0000 <= ch && ch <= 0xE0FFF;\n            default:\n                return false;\n        }\n    }\n    getAvailableFeatures(script, language) {\n        let features = [];\n        if (this.engine) features.push(...this.engine.getAvailableFeatures(script, language));\n        if (this.font.kern && features.indexOf('kern') === -1) features.push('kern');\n        return features;\n    }\n    stringsForGlyph(gid) {\n        let result = new Set;\n        let codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);\n        for (let codePoint of codePoints)result.add(String.fromCodePoint(codePoint));\n        if (this.engine && this.engine.stringsForGlyph) for (let string of this.engine.stringsForGlyph(gid))result.add(string);\n        return Array.from(result);\n    }\n    constructor(font){\n        this.font = font;\n        this.unicodeLayoutEngine = null;\n        this.kernProcessor = null;\n        // Choose an advanced layout engine. We try the AAT morx table first since more\n        // scripts are currently supported because the shaping logic is built into the font.\n        if (this.font.morx) this.engine = new (0, $ba6dd74203be8728$export$2e2bcd8739ae039)(this.font);\n        else if (this.font.GSUB || this.font.GPOS) this.engine = new (0, $a62492810de27e3d$export$2e2bcd8739ae039)(this.font);\n    }\n}\n\n\n\n\n\n\nconst $f43aec954cdfdf21$var$SVG_COMMANDS = {\n    moveTo: 'M',\n    lineTo: 'L',\n    quadraticCurveTo: 'Q',\n    bezierCurveTo: 'C',\n    closePath: 'Z'\n};\nclass $f43aec954cdfdf21$export$2e2bcd8739ae039 {\n    /**\n   * Compiles the path to a JavaScript function that can be applied with\n   * a graphics context in order to render the path.\n   * @return {string}\n   */ toFunction() {\n        return (ctx)=>{\n            this.commands.forEach((c)=>{\n                return ctx[c.command].apply(ctx, c.args);\n            });\n        };\n    }\n    /**\n   * Converts the path to an SVG path data string\n   * @return {string}\n   */ toSVG() {\n        let cmds = this.commands.map((c)=>{\n            let args = c.args.map((arg)=>Math.round(arg * 100) / 100);\n            return `${$f43aec954cdfdf21$var$SVG_COMMANDS[c.command]}${args.join(' ')}`;\n        });\n        return cmds.join('');\n    }\n    /**\n   * Gets the \"control box\" of a path.\n   * This is like the bounding box, but it includes all points including\n   * control points of bezier segments and is much faster to compute than\n   * the real bounding box.\n   * @type {BBox}\n   */ get cbox() {\n        if (!this._cbox) {\n            let cbox = new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039);\n            for (let command of this.commands)for(let i = 0; i < command.args.length; i += 2)cbox.addPoint(command.args[i], command.args[i + 1]);\n            this._cbox = Object.freeze(cbox);\n        }\n        return this._cbox;\n    }\n    /**\n   * Gets the exact bounding box of the path by evaluating curve segments.\n   * Slower to compute than the control box, but more accurate.\n   * @type {BBox}\n   */ get bbox() {\n        if (this._bbox) return this._bbox;\n        let bbox = new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039);\n        let cx = 0, cy = 0;\n        let f = (t)=>Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];\n        for (let c of this.commands)switch(c.command){\n            case 'moveTo':\n            case 'lineTo':\n                let [x, y] = c.args;\n                bbox.addPoint(x, y);\n                cx = x;\n                cy = y;\n                break;\n            case 'quadraticCurveTo':\n            case 'bezierCurveTo':\n                if (c.command === 'quadraticCurveTo') {\n                    // http://fontforge.org/bezier.html\n                    var [qp1x, qp1y, p3x, p3y] = c.args;\n                    var cp1x = cx + 2 / 3 * (qp1x - cx); // CP1 = QP0 + 2/3 * (QP1-QP0)\n                    var cp1y = cy + 2 / 3 * (qp1y - cy);\n                    var cp2x = p3x + 2 / 3 * (qp1x - p3x); // CP2 = QP2 + 2/3 * (QP1-QP2)\n                    var cp2y = p3y + 2 / 3 * (qp1y - p3y);\n                } else var [cp1x, cp1y, cp2x, cp2y, p3x, p3y] = c.args;\n                // http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n                bbox.addPoint(p3x, p3y);\n                var p0 = [\n                    cx,\n                    cy\n                ];\n                var p1 = [\n                    cp1x,\n                    cp1y\n                ];\n                var p2 = [\n                    cp2x,\n                    cp2y\n                ];\n                var p3 = [\n                    p3x,\n                    p3y\n                ];\n                for(var i = 0; i <= 1; i++){\n                    let b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n                    let a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n                    c = 3 * p1[i] - 3 * p0[i];\n                    if (a === 0) {\n                        if (b === 0) continue;\n                        let t = -c / b;\n                        if (0 < t && t < 1) {\n                            if (i === 0) bbox.addPoint(f(t), bbox.maxY);\n                            else if (i === 1) bbox.addPoint(bbox.maxX, f(t));\n                        }\n                        continue;\n                    }\n                    let b2ac = Math.pow(b, 2) - 4 * c * a;\n                    if (b2ac < 0) continue;\n                    let t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n                    if (0 < t1 && t1 < 1) {\n                        if (i === 0) bbox.addPoint(f(t1), bbox.maxY);\n                        else if (i === 1) bbox.addPoint(bbox.maxX, f(t1));\n                    }\n                    let t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n                    if (0 < t2 && t2 < 1) {\n                        if (i === 0) bbox.addPoint(f(t2), bbox.maxY);\n                        else if (i === 1) bbox.addPoint(bbox.maxX, f(t2));\n                    }\n                }\n                cx = p3x;\n                cy = p3y;\n                break;\n        }\n        return this._bbox = Object.freeze(bbox);\n    }\n    /**\n   * Applies a mapping function to each point in the path.\n   * @param {function} fn\n   * @return {Path}\n   */ mapPoints(fn) {\n        let path = new $f43aec954cdfdf21$export$2e2bcd8739ae039;\n        for (let c of this.commands){\n            let args = [];\n            for(let i = 0; i < c.args.length; i += 2){\n                let [x, y] = fn(c.args[i], c.args[i + 1]);\n                args.push(x, y);\n            }\n            path[c.command](...args);\n        }\n        return path;\n    }\n    /**\n   * Transforms the path by the given matrix.\n   */ transform(m0, m1, m2, m3, m4, m5) {\n        return this.mapPoints((x, y)=>{\n            const tx = m0 * x + m2 * y + m4;\n            const ty = m1 * x + m3 * y + m5;\n            return [\n                tx,\n                ty\n            ];\n        });\n    }\n    /**\n   * Translates the path by the given offset.\n   */ translate(x, y) {\n        return this.transform(1, 0, 0, 1, x, y);\n    }\n    /**\n   * Rotates the path by the given angle (in radians).\n   */ rotate(angle) {\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n        return this.transform(cos, sin, -sin, cos, 0, 0);\n    }\n    /**\n   * Scales the path.\n   */ scale(scaleX, scaleY = scaleX) {\n        return this.transform(scaleX, 0, 0, scaleY, 0, 0);\n    }\n    constructor(){\n        this.commands = [];\n        this._bbox = null;\n        this._cbox = null;\n    }\n}\nfor (let command of [\n    'moveTo',\n    'lineTo',\n    'quadraticCurveTo',\n    'bezierCurveTo',\n    'closePath'\n])$f43aec954cdfdf21$export$2e2bcd8739ae039.prototype[command] = function(...args) {\n    this._bbox = this._cbox = null;\n    this.commands.push({\n        command: command,\n        args: args\n    });\n    return this;\n};\n\n\n\nvar $7713b9b7b438dff8$export$2e2bcd8739ae039 = [\n    '.notdef',\n    '.null',\n    'nonmarkingreturn',\n    'space',\n    'exclam',\n    'quotedbl',\n    'numbersign',\n    'dollar',\n    'percent',\n    'ampersand',\n    'quotesingle',\n    'parenleft',\n    'parenright',\n    'asterisk',\n    'plus',\n    'comma',\n    'hyphen',\n    'period',\n    'slash',\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n    'six',\n    'seven',\n    'eight',\n    'nine',\n    'colon',\n    'semicolon',\n    'less',\n    'equal',\n    'greater',\n    'question',\n    'at',\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F',\n    'G',\n    'H',\n    'I',\n    'J',\n    'K',\n    'L',\n    'M',\n    'N',\n    'O',\n    'P',\n    'Q',\n    'R',\n    'S',\n    'T',\n    'U',\n    'V',\n    'W',\n    'X',\n    'Y',\n    'Z',\n    'bracketleft',\n    'backslash',\n    'bracketright',\n    'asciicircum',\n    'underscore',\n    'grave',\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'j',\n    'k',\n    'l',\n    'm',\n    'n',\n    'o',\n    'p',\n    'q',\n    'r',\n    's',\n    't',\n    'u',\n    'v',\n    'w',\n    'x',\n    'y',\n    'z',\n    'braceleft',\n    'bar',\n    'braceright',\n    'asciitilde',\n    'Adieresis',\n    'Aring',\n    'Ccedilla',\n    'Eacute',\n    'Ntilde',\n    'Odieresis',\n    'Udieresis',\n    'aacute',\n    'agrave',\n    'acircumflex',\n    'adieresis',\n    'atilde',\n    'aring',\n    'ccedilla',\n    'eacute',\n    'egrave',\n    'ecircumflex',\n    'edieresis',\n    'iacute',\n    'igrave',\n    'icircumflex',\n    'idieresis',\n    'ntilde',\n    'oacute',\n    'ograve',\n    'ocircumflex',\n    'odieresis',\n    'otilde',\n    'uacute',\n    'ugrave',\n    'ucircumflex',\n    'udieresis',\n    'dagger',\n    'degree',\n    'cent',\n    'sterling',\n    'section',\n    'bullet',\n    'paragraph',\n    'germandbls',\n    'registered',\n    'copyright',\n    'trademark',\n    'acute',\n    'dieresis',\n    'notequal',\n    'AE',\n    'Oslash',\n    'infinity',\n    'plusminus',\n    'lessequal',\n    'greaterequal',\n    'yen',\n    'mu',\n    'partialdiff',\n    'summation',\n    'product',\n    'pi',\n    'integral',\n    'ordfeminine',\n    'ordmasculine',\n    'Omega',\n    'ae',\n    'oslash',\n    'questiondown',\n    'exclamdown',\n    'logicalnot',\n    'radical',\n    'florin',\n    'approxequal',\n    'Delta',\n    'guillemotleft',\n    'guillemotright',\n    'ellipsis',\n    'nonbreakingspace',\n    'Agrave',\n    'Atilde',\n    'Otilde',\n    'OE',\n    'oe',\n    'endash',\n    'emdash',\n    'quotedblleft',\n    'quotedblright',\n    'quoteleft',\n    'quoteright',\n    'divide',\n    'lozenge',\n    'ydieresis',\n    'Ydieresis',\n    'fraction',\n    'currency',\n    'guilsinglleft',\n    'guilsinglright',\n    'fi',\n    'fl',\n    'daggerdbl',\n    'periodcentered',\n    'quotesinglbase',\n    'quotedblbase',\n    'perthousand',\n    'Acircumflex',\n    'Ecircumflex',\n    'Aacute',\n    'Edieresis',\n    'Egrave',\n    'Iacute',\n    'Icircumflex',\n    'Idieresis',\n    'Igrave',\n    'Oacute',\n    'Ocircumflex',\n    'apple',\n    'Ograve',\n    'Uacute',\n    'Ucircumflex',\n    'Ugrave',\n    'dotlessi',\n    'circumflex',\n    'tilde',\n    'macron',\n    'breve',\n    'dotaccent',\n    'ring',\n    'cedilla',\n    'hungarumlaut',\n    'ogonek',\n    'caron',\n    'Lslash',\n    'lslash',\n    'Scaron',\n    'scaron',\n    'Zcaron',\n    'zcaron',\n    'brokenbar',\n    'Eth',\n    'eth',\n    'Yacute',\n    'yacute',\n    'Thorn',\n    'thorn',\n    'minus',\n    'multiply',\n    'onesuperior',\n    'twosuperior',\n    'threesuperior',\n    'onehalf',\n    'onequarter',\n    'threequarters',\n    'franc',\n    'Gbreve',\n    'gbreve',\n    'Idotaccent',\n    'Scedilla',\n    'scedilla',\n    'Cacute',\n    'cacute',\n    'Ccaron',\n    'ccaron',\n    'dcroat'\n];\n\n\nclass $f92906be28e61769$export$2e2bcd8739ae039 {\n    _getPath() {\n        return new (0, $f43aec954cdfdf21$export$2e2bcd8739ae039)();\n    }\n    _getCBox() {\n        return this.path.cbox;\n    }\n    _getBBox() {\n        return this.path.bbox;\n    }\n    _getTableMetrics(table) {\n        if (this.id < table.metrics.length) return table.metrics.get(this.id);\n        let metric = table.metrics.get(table.metrics.length - 1);\n        let res = {\n            advance: metric ? metric.advance : 0,\n            bearing: table.bearings.get(this.id - table.metrics.length) || 0\n        };\n        return res;\n    }\n    _getMetrics(cbox) {\n        if (this._metrics) return this._metrics;\n        let { advance: advanceWidth, bearing: leftBearing } = this._getTableMetrics(this._font.hmtx);\n        // For vertical metrics, use vmtx if available, or fall back to global data from OS/2 or hhea\n        if (this._font.vmtx) var { advance: advanceHeight, bearing: topBearing } = this._getTableMetrics(this._font.vmtx);\n        else {\n            let os2;\n            if (typeof cbox === 'undefined' || cbox === null) ({ cbox: cbox } = this);\n            if ((os2 = this._font['OS/2']) && os2.version > 0) {\n                var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);\n                var topBearing = os2.typoAscender - cbox.maxY;\n            } else {\n                let { hhea: hhea } = this._font;\n                var advanceHeight = Math.abs(hhea.ascent - hhea.descent);\n                var topBearing = hhea.ascent - cbox.maxY;\n            }\n        }\n        if (this._font._variationProcessor && this._font.HVAR) advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);\n        return this._metrics = {\n            advanceWidth: advanceWidth,\n            advanceHeight: advanceHeight,\n            leftBearing: leftBearing,\n            topBearing: topBearing\n        };\n    }\n    /**\n   * The glyph’s control box.\n   * This is often the same as the bounding box, but is faster to compute.\n   * Because of the way bezier curves are defined, some of the control points\n   * can be outside of the bounding box. Where `bbox` takes this into account,\n   * `cbox` does not. Thus, cbox is less accurate, but faster to compute.\n   * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)\n   * for a more detailed description.\n   *\n   * @type {BBox}\n   */ get cbox() {\n        return this._getCBox();\n    }\n    /**\n   * The glyph’s bounding box, i.e. the rectangle that encloses the\n   * glyph outline as tightly as possible.\n   * @type {BBox}\n   */ get bbox() {\n        return this._getBBox();\n    }\n    /**\n   * A vector Path object representing the glyph outline.\n   * @type {Path}\n   */ get path() {\n        // Cache the path so we only decode it once\n        // Decoding is actually performed by subclasses\n        return this._getPath();\n    }\n    /**\n   * Returns a path scaled to the given font size.\n   * @param {number} size\n   * @return {Path}\n   */ getScaledPath(size) {\n        let scale = 1 / this._font.unitsPerEm * size;\n        return this.path.scale(scale);\n    }\n    /**\n   * The glyph's advance width.\n   * @type {number}\n   */ get advanceWidth() {\n        return this._getMetrics().advanceWidth;\n    }\n    /**\n   * The glyph's advance height.\n   * @type {number}\n   */ get advanceHeight() {\n        return this._getMetrics().advanceHeight;\n    }\n    get ligatureCaretPositions() {}\n    _getName() {\n        let { post: post } = this._font;\n        if (!post) return null;\n        switch(post.version){\n            case 1:\n                return (0, $7713b9b7b438dff8$export$2e2bcd8739ae039)[this.id];\n            case 2:\n                let id = post.glyphNameIndex[this.id];\n                if (id < (0, $7713b9b7b438dff8$export$2e2bcd8739ae039).length) return (0, $7713b9b7b438dff8$export$2e2bcd8739ae039)[id];\n                return post.names[id - (0, $7713b9b7b438dff8$export$2e2bcd8739ae039).length];\n            case 2.5:\n                return (0, $7713b9b7b438dff8$export$2e2bcd8739ae039)[this.id + post.offsets[this.id]];\n            case 4:\n                return String.fromCharCode(post.map[this.id]);\n        }\n    }\n    /**\n   * The glyph's name\n   * @type {string}\n   */ get name() {\n        return this._getName();\n    }\n    /**\n   * Renders the glyph to the given graphics context, at the specified font size.\n   * @param {CanvasRenderingContext2d} ctx\n   * @param {number} size\n   */ render(ctx, size) {\n        ctx.save();\n        let scale = 1 / this._font.head.unitsPerEm * size;\n        ctx.scale(scale, scale);\n        let fn = this.path.toFunction();\n        fn(ctx);\n        ctx.fill();\n        ctx.restore();\n    }\n    constructor(id, codePoints, font){\n        /**\n     * The glyph id in the font\n     * @type {number}\n     */ this.id = id;\n        /**\n     * An array of unicode code points that are represented by this glyph.\n     * There can be multiple code points in the case of ligatures and other glyphs\n     * that represent multiple visual characters.\n     * @type {number[]}\n     */ this.codePoints = codePoints;\n        this._font = font;\n        // TODO: get this info from GDEF if available\n        this.isMark = this.codePoints.length > 0 && this.codePoints.every((0, unicode_properties__WEBPACK_IMPORTED_MODULE_3__.isMark));\n        this.isLigature = this.codePoints.length > 1;\n    }\n}\n(0, _swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"cbox\", null);\n(0, _swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"bbox\", null);\n(0, _swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"path\", null);\n(0, _swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"advanceWidth\", null);\n(0, _swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"advanceHeight\", null);\n(0, _swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"name\", null);\n\n\n\n\n\n// The header for both simple and composite glyphs\nlet $69aac16029968692$var$GlyfHeader = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    numberOfContours: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n});\n// Flags for simple glyphs\nconst $69aac16029968692$var$ON_CURVE = 1;\nconst $69aac16029968692$var$X_SHORT_VECTOR = 2;\nconst $69aac16029968692$var$Y_SHORT_VECTOR = 4;\nconst $69aac16029968692$var$REPEAT = 8;\nconst $69aac16029968692$var$SAME_X = 16;\nconst $69aac16029968692$var$SAME_Y = 32;\n// Flags for composite glyphs\nconst $69aac16029968692$var$ARG_1_AND_2_ARE_WORDS = 1;\nconst $69aac16029968692$var$ARGS_ARE_XY_VALUES = 2;\nconst $69aac16029968692$var$ROUND_XY_TO_GRID = 4;\nconst $69aac16029968692$var$WE_HAVE_A_SCALE = 8;\nconst $69aac16029968692$var$MORE_COMPONENTS = 32;\nconst $69aac16029968692$var$WE_HAVE_AN_X_AND_Y_SCALE = 64;\nconst $69aac16029968692$var$WE_HAVE_A_TWO_BY_TWO = 128;\nconst $69aac16029968692$var$WE_HAVE_INSTRUCTIONS = 256;\nconst $69aac16029968692$var$USE_MY_METRICS = 512;\nconst $69aac16029968692$var$OVERLAP_COMPOUND = 1024;\nconst $69aac16029968692$var$SCALED_COMPONENT_OFFSET = 2048;\nconst $69aac16029968692$var$UNSCALED_COMPONENT_OFFSET = 4096;\nclass $69aac16029968692$export$baf26146a414f24a {\n    copy() {\n        return new $69aac16029968692$export$baf26146a414f24a(this.onCurve, this.endContour, this.x, this.y);\n    }\n    constructor(onCurve, endContour, x = 0, y = 0){\n        this.onCurve = onCurve;\n        this.endContour = endContour;\n        this.x = x;\n        this.y = y;\n    }\n}\n// Represents a component in a composite glyph\nclass $69aac16029968692$var$Component {\n    constructor(glyphID, dx, dy){\n        this.glyphID = glyphID;\n        this.dx = dx;\n        this.dy = dy;\n        this.pos = 0;\n        this.scaleX = this.scaleY = 1;\n        this.scale01 = this.scale10 = 0;\n    }\n}\nclass $69aac16029968692$export$2e2bcd8739ae039 extends (0, $f92906be28e61769$export$2e2bcd8739ae039) {\n    // Parses just the glyph header and returns the bounding box\n    _getCBox(internal) {\n        // We need to decode the glyph if variation processing is requested,\n        // so it's easier just to recompute the path's cbox after decoding.\n        if (this._font._variationProcessor && !internal) return this.path.cbox;\n        let stream = this._font._getTableStream('glyf');\n        stream.pos += this._font.loca.offsets[this.id];\n        let glyph = $69aac16029968692$var$GlyfHeader.decode(stream);\n        let cbox = new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039)(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);\n        return Object.freeze(cbox);\n    }\n    // Parses a single glyph coordinate\n    _parseGlyphCoord(stream, prev, short, same) {\n        if (short) {\n            var val = stream.readUInt8();\n            if (!same) val = -val;\n            val += prev;\n        } else if (same) var val = prev;\n        else var val = prev + stream.readInt16BE();\n        return val;\n    }\n    // Decodes the glyph data into points for simple glyphs,\n    // or components for composite glyphs\n    _decode() {\n        let glyfPos = this._font.loca.offsets[this.id];\n        let nextPos = this._font.loca.offsets[this.id + 1];\n        // Nothing to do if there is no data for this glyph\n        if (glyfPos === nextPos) return null;\n        let stream = this._font._getTableStream('glyf');\n        stream.pos += glyfPos;\n        let startPos = stream.pos;\n        let glyph = $69aac16029968692$var$GlyfHeader.decode(stream);\n        if (glyph.numberOfContours > 0) this._decodeSimple(glyph, stream);\n        else if (glyph.numberOfContours < 0) this._decodeComposite(glyph, stream, startPos);\n        return glyph;\n    }\n    _decodeSimple(glyph, stream) {\n        // this is a simple glyph\n        glyph.points = [];\n        let endPtsOfContours = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, glyph.numberOfContours).decode(stream);\n        glyph.instructions = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16).decode(stream);\n        let flags = [];\n        let numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;\n        while(flags.length < numCoords){\n            var flag = stream.readUInt8();\n            flags.push(flag);\n            // check for repeat flag\n            if (flag & $69aac16029968692$var$REPEAT) {\n                let count = stream.readUInt8();\n                for(let j = 0; j < count; j++)flags.push(flag);\n            }\n        }\n        for(var i = 0; i < flags.length; i++){\n            var flag = flags[i];\n            let point = new $69aac16029968692$export$baf26146a414f24a(!!(flag & $69aac16029968692$var$ON_CURVE), endPtsOfContours.indexOf(i) >= 0, 0, 0);\n            glyph.points.push(point);\n        }\n        let px = 0;\n        for(var i = 0; i < flags.length; i++){\n            var flag = flags[i];\n            glyph.points[i].x = px = this._parseGlyphCoord(stream, px, flag & $69aac16029968692$var$X_SHORT_VECTOR, flag & $69aac16029968692$var$SAME_X);\n        }\n        let py = 0;\n        for(var i = 0; i < flags.length; i++){\n            var flag = flags[i];\n            glyph.points[i].y = py = this._parseGlyphCoord(stream, py, flag & $69aac16029968692$var$Y_SHORT_VECTOR, flag & $69aac16029968692$var$SAME_Y);\n        }\n        if (this._font._variationProcessor) {\n            let points = glyph.points.slice();\n            points.push(...this._getPhantomPoints(glyph));\n            this._font._variationProcessor.transformPoints(this.id, points);\n            glyph.phantomPoints = points.slice(-4);\n        }\n        return;\n    }\n    _decodeComposite(glyph, stream, offset = 0) {\n        // this is a composite glyph\n        glyph.components = [];\n        let haveInstructions = false;\n        let flags = $69aac16029968692$var$MORE_COMPONENTS;\n        while(flags & $69aac16029968692$var$MORE_COMPONENTS){\n            flags = stream.readUInt16BE();\n            let gPos = stream.pos - offset;\n            let glyphID = stream.readUInt16BE();\n            if (!haveInstructions) haveInstructions = (flags & $69aac16029968692$var$WE_HAVE_INSTRUCTIONS) !== 0;\n            if (flags & $69aac16029968692$var$ARG_1_AND_2_ARE_WORDS) {\n                var dx = stream.readInt16BE();\n                var dy = stream.readInt16BE();\n            } else {\n                var dx = stream.readInt8();\n                var dy = stream.readInt8();\n            }\n            var component = new $69aac16029968692$var$Component(glyphID, dx, dy);\n            component.pos = gPos;\n            if (flags & $69aac16029968692$var$WE_HAVE_A_SCALE) // fixed number with 14 bits of fraction\n            component.scaleX = component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n            else if (flags & $69aac16029968692$var$WE_HAVE_AN_X_AND_Y_SCALE) {\n                component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n                component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n            } else if (flags & $69aac16029968692$var$WE_HAVE_A_TWO_BY_TWO) {\n                component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n                component.scale01 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n                component.scale10 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n                component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n            }\n            glyph.components.push(component);\n        }\n        if (this._font._variationProcessor) {\n            let points = [];\n            for(let j = 0; j < glyph.components.length; j++){\n                var component = glyph.components[j];\n                points.push(new $69aac16029968692$export$baf26146a414f24a(true, true, component.dx, component.dy));\n            }\n            points.push(...this._getPhantomPoints(glyph));\n            this._font._variationProcessor.transformPoints(this.id, points);\n            glyph.phantomPoints = points.splice(-4, 4);\n            for(let i = 0; i < points.length; i++){\n                let point = points[i];\n                glyph.components[i].dx = point.x;\n                glyph.components[i].dy = point.y;\n            }\n        }\n        return haveInstructions;\n    }\n    _getPhantomPoints(glyph) {\n        let cbox = this._getCBox(true);\n        if (this._metrics == null) this._metrics = (0, $f92906be28e61769$export$2e2bcd8739ae039).prototype._getMetrics.call(this, cbox);\n        let { advanceWidth: advanceWidth, advanceHeight: advanceHeight, leftBearing: leftBearing, topBearing: topBearing } = this._metrics;\n        return [\n            new $69aac16029968692$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing, 0),\n            new $69aac16029968692$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing + advanceWidth, 0),\n            new $69aac16029968692$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing),\n            new $69aac16029968692$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing + advanceHeight)\n        ];\n    }\n    // Decodes font data, resolves composite glyphs, and returns an array of contours\n    _getContours() {\n        let glyph = this._decode();\n        if (!glyph) return [];\n        let points = [];\n        if (glyph.numberOfContours < 0) // resolve composite glyphs\n        for (let component of glyph.components){\n            let contours = this._font.getGlyph(component.glyphID)._getContours();\n            for(let i = 0; i < contours.length; i++){\n                let contour = contours[i];\n                for(let j = 0; j < contour.length; j++){\n                    let point = contour[j];\n                    let x = point.x * component.scaleX + point.y * component.scale01 + component.dx;\n                    let y = point.y * component.scaleY + point.x * component.scale10 + component.dy;\n                    points.push(new $69aac16029968692$export$baf26146a414f24a(point.onCurve, point.endContour, x, y));\n                }\n            }\n        }\n        else points = glyph.points || [];\n        // Recompute and cache metrics if we performed variation processing, and don't have an HVAR table\n        if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {\n            this._metrics.advanceWidth = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;\n            this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;\n            this._metrics.leftBearing = glyph.xMin - glyph.phantomPoints[0].x;\n            this._metrics.topBearing = glyph.phantomPoints[2].y - glyph.yMax;\n        }\n        let contours = [];\n        let cur = [];\n        for(let k = 0; k < points.length; k++){\n            var point = points[k];\n            cur.push(point);\n            if (point.endContour) {\n                contours.push(cur);\n                cur = [];\n            }\n        }\n        return contours;\n    }\n    _getMetrics() {\n        if (this._metrics) return this._metrics;\n        let cbox = this._getCBox(true);\n        super._getMetrics(cbox);\n        if (this._font._variationProcessor && !this._font.HVAR) // No HVAR table, decode the glyph. This triggers recomputation of metrics.\n        this.path;\n        return this._metrics;\n    }\n    // Converts contours to a Path object that can be rendered\n    _getPath() {\n        let contours = this._getContours();\n        let path = new (0, $f43aec954cdfdf21$export$2e2bcd8739ae039);\n        for(let i = 0; i < contours.length; i++){\n            let contour = contours[i];\n            let firstPt = contour[0];\n            let lastPt = contour[contour.length - 1];\n            let start = 0;\n            if (firstPt.onCurve) {\n                // The first point will be consumed by the moveTo command, so skip in the loop\n                var curvePt = null;\n                start = 1;\n            } else {\n                if (lastPt.onCurve) // Start at the last point if the first point is off curve and the last point is on curve\n                firstPt = lastPt;\n                else // Start at the middle if both the first and last points are off curve\n                firstPt = new $69aac16029968692$export$baf26146a414f24a(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);\n                var curvePt = firstPt;\n            }\n            path.moveTo(firstPt.x, firstPt.y);\n            for(let j = start; j < contour.length; j++){\n                let pt = contour[j];\n                let prevPt = j === 0 ? firstPt : contour[j - 1];\n                if (prevPt.onCurve && pt.onCurve) path.lineTo(pt.x, pt.y);\n                else if (prevPt.onCurve && !pt.onCurve) var curvePt = pt;\n                else if (!prevPt.onCurve && !pt.onCurve) {\n                    let midX = (prevPt.x + pt.x) / 2;\n                    let midY = (prevPt.y + pt.y) / 2;\n                    path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);\n                    var curvePt = pt;\n                } else if (!prevPt.onCurve && pt.onCurve) {\n                    path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);\n                    var curvePt = null;\n                } else throw new Error(\"Unknown TTF path state\");\n            }\n            // Connect the first and last points\n            if (curvePt) path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);\n            path.closePath();\n        }\n        return path;\n    }\n    constructor(...args){\n        super(...args);\n        (0, _swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_10__._)(this, \"type\", 'TTF');\n    }\n}\n\n\n\n\n\nclass $62cc5109c6101893$export$2e2bcd8739ae039 extends (0, $f92906be28e61769$export$2e2bcd8739ae039) {\n    _getName() {\n        if (this._font.CFF2) return super._getName();\n        return this._font['CFF '].getGlyphName(this.id);\n    }\n    bias(s) {\n        if (s.length < 1240) return 107;\n        else if (s.length < 33900) return 1131;\n        else return 32768;\n    }\n    _getPath() {\n        let cff = this._font.CFF2 || this._font['CFF '];\n        let { stream: stream } = cff;\n        let str = cff.topDict.CharStrings[this.id];\n        let end = str.offset + str.length;\n        stream.pos = str.offset;\n        let path = new (0, $f43aec954cdfdf21$export$2e2bcd8739ae039);\n        let stack = [];\n        let trans = [];\n        let width = null;\n        let nStems = 0;\n        let x = 0, y = 0;\n        let usedGsubrs;\n        let usedSubrs;\n        let open = false;\n        this._usedGsubrs = usedGsubrs = {};\n        this._usedSubrs = usedSubrs = {};\n        let gsubrs = cff.globalSubrIndex || [];\n        let gsubrsBias = this.bias(gsubrs);\n        let privateDict = cff.privateDictForGlyph(this.id) || {};\n        let subrs = privateDict.Subrs || [];\n        let subrsBias = this.bias(subrs);\n        let vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;\n        let vsindex = privateDict.vsindex;\n        let variationProcessor = this._font._variationProcessor;\n        function checkWidth() {\n            if (width == null) width = stack.shift() + privateDict.nominalWidthX;\n        }\n        function parseStems() {\n            if (stack.length % 2 !== 0) checkWidth();\n            nStems += stack.length >> 1;\n            return stack.length = 0;\n        }\n        function moveTo(x, y) {\n            if (open) path.closePath();\n            path.moveTo(x, y);\n            open = true;\n        }\n        let parse = function() {\n            while(stream.pos < end){\n                let op = stream.readUInt8();\n                if (op < 32) {\n                    let index, subr, phase;\n                    let c1x, c1y, c2x, c2y, c3x, c3y;\n                    let c4x, c4y, c5x, c5y, c6x, c6y;\n                    let pts;\n                    switch(op){\n                        case 1:\n                        case 3:\n                        case 18:\n                        case 23:\n                            parseStems();\n                            break;\n                        case 4:\n                            if (stack.length > 1) checkWidth();\n                            y += stack.shift();\n                            moveTo(x, y);\n                            break;\n                        case 5:\n                            while(stack.length >= 2){\n                                x += stack.shift();\n                                y += stack.shift();\n                                path.lineTo(x, y);\n                            }\n                            break;\n                        case 6:\n                        case 7:\n                            phase = op === 6;\n                            while(stack.length >= 1){\n                                if (phase) x += stack.shift();\n                                else y += stack.shift();\n                                path.lineTo(x, y);\n                                phase = !phase;\n                            }\n                            break;\n                        case 8:\n                            while(stack.length > 0){\n                                c1x = x + stack.shift();\n                                c1y = y + stack.shift();\n                                c2x = c1x + stack.shift();\n                                c2y = c1y + stack.shift();\n                                x = c2x + stack.shift();\n                                y = c2y + stack.shift();\n                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n                            }\n                            break;\n                        case 10:\n                            index = stack.pop() + subrsBias;\n                            subr = subrs[index];\n                            if (subr) {\n                                usedSubrs[index] = true;\n                                let p = stream.pos;\n                                let e = end;\n                                stream.pos = subr.offset;\n                                end = subr.offset + subr.length;\n                                parse();\n                                stream.pos = p;\n                                end = e;\n                            }\n                            break;\n                        case 11:\n                            if (cff.version >= 2) break;\n                            return;\n                        case 14:\n                            if (cff.version >= 2) break;\n                            if (stack.length > 0) checkWidth();\n                            if (open) {\n                                path.closePath();\n                                open = false;\n                            }\n                            break;\n                        case 15:\n                            if (cff.version < 2) throw new Error('vsindex operator not supported in CFF v1');\n                            vsindex = stack.pop();\n                            break;\n                        case 16:\n                            {\n                                if (cff.version < 2) throw new Error('blend operator not supported in CFF v1');\n                                if (!variationProcessor) throw new Error('blend operator in non-variation font');\n                                let blendVector = variationProcessor.getBlendVector(vstore, vsindex);\n                                let numBlends = stack.pop();\n                                let numOperands = numBlends * blendVector.length;\n                                let delta = stack.length - numOperands;\n                                let base = delta - numBlends;\n                                for(let i = 0; i < numBlends; i++){\n                                    let sum = stack[base + i];\n                                    for(let j = 0; j < blendVector.length; j++)sum += blendVector[j] * stack[delta++];\n                                    stack[base + i] = sum;\n                                }\n                                while(numOperands--)stack.pop();\n                                break;\n                            }\n                        case 19:\n                        case 20:\n                            parseStems();\n                            stream.pos += nStems + 7 >> 3;\n                            break;\n                        case 21:\n                            if (stack.length > 2) checkWidth();\n                            x += stack.shift();\n                            y += stack.shift();\n                            moveTo(x, y);\n                            break;\n                        case 22:\n                            if (stack.length > 1) checkWidth();\n                            x += stack.shift();\n                            moveTo(x, y);\n                            break;\n                        case 24:\n                            while(stack.length >= 8){\n                                c1x = x + stack.shift();\n                                c1y = y + stack.shift();\n                                c2x = c1x + stack.shift();\n                                c2y = c1y + stack.shift();\n                                x = c2x + stack.shift();\n                                y = c2y + stack.shift();\n                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n                            }\n                            x += stack.shift();\n                            y += stack.shift();\n                            path.lineTo(x, y);\n                            break;\n                        case 25:\n                            while(stack.length >= 8){\n                                x += stack.shift();\n                                y += stack.shift();\n                                path.lineTo(x, y);\n                            }\n                            c1x = x + stack.shift();\n                            c1y = y + stack.shift();\n                            c2x = c1x + stack.shift();\n                            c2y = c1y + stack.shift();\n                            x = c2x + stack.shift();\n                            y = c2y + stack.shift();\n                            path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n                            break;\n                        case 26:\n                            if (stack.length % 2) x += stack.shift();\n                            while(stack.length >= 4){\n                                c1x = x;\n                                c1y = y + stack.shift();\n                                c2x = c1x + stack.shift();\n                                c2y = c1y + stack.shift();\n                                x = c2x;\n                                y = c2y + stack.shift();\n                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n                            }\n                            break;\n                        case 27:\n                            if (stack.length % 2) y += stack.shift();\n                            while(stack.length >= 4){\n                                c1x = x + stack.shift();\n                                c1y = y;\n                                c2x = c1x + stack.shift();\n                                c2y = c1y + stack.shift();\n                                x = c2x + stack.shift();\n                                y = c2y;\n                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n                            }\n                            break;\n                        case 28:\n                            stack.push(stream.readInt16BE());\n                            break;\n                        case 29:\n                            index = stack.pop() + gsubrsBias;\n                            subr = gsubrs[index];\n                            if (subr) {\n                                usedGsubrs[index] = true;\n                                let p = stream.pos;\n                                let e = end;\n                                stream.pos = subr.offset;\n                                end = subr.offset + subr.length;\n                                parse();\n                                stream.pos = p;\n                                end = e;\n                            }\n                            break;\n                        case 30:\n                        case 31:\n                            phase = op === 31;\n                            while(stack.length >= 4){\n                                if (phase) {\n                                    c1x = x + stack.shift();\n                                    c1y = y;\n                                    c2x = c1x + stack.shift();\n                                    c2y = c1y + stack.shift();\n                                    y = c2y + stack.shift();\n                                    x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                                } else {\n                                    c1x = x;\n                                    c1y = y + stack.shift();\n                                    c2x = c1x + stack.shift();\n                                    c2y = c1y + stack.shift();\n                                    x = c2x + stack.shift();\n                                    y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                                }\n                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n                                phase = !phase;\n                            }\n                            break;\n                        case 12:\n                            op = stream.readUInt8();\n                            switch(op){\n                                case 3:\n                                    let a = stack.pop();\n                                    let b = stack.pop();\n                                    stack.push(a && b ? 1 : 0);\n                                    break;\n                                case 4:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(a || b ? 1 : 0);\n                                    break;\n                                case 5:\n                                    a = stack.pop();\n                                    stack.push(a ? 0 : 1);\n                                    break;\n                                case 9:\n                                    a = stack.pop();\n                                    stack.push(Math.abs(a));\n                                    break;\n                                case 10:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(a + b);\n                                    break;\n                                case 11:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(a - b);\n                                    break;\n                                case 12:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(a / b);\n                                    break;\n                                case 14:\n                                    a = stack.pop();\n                                    stack.push(-a);\n                                    break;\n                                case 15:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(a === b ? 1 : 0);\n                                    break;\n                                case 18:\n                                    stack.pop();\n                                    break;\n                                case 20:\n                                    let val = stack.pop();\n                                    let idx = stack.pop();\n                                    trans[idx] = val;\n                                    break;\n                                case 21:\n                                    idx = stack.pop();\n                                    stack.push(trans[idx] || 0);\n                                    break;\n                                case 22:\n                                    let s1 = stack.pop();\n                                    let s2 = stack.pop();\n                                    let v1 = stack.pop();\n                                    let v2 = stack.pop();\n                                    stack.push(v1 <= v2 ? s1 : s2);\n                                    break;\n                                case 23:\n                                    stack.push(Math.random());\n                                    break;\n                                case 24:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(a * b);\n                                    break;\n                                case 26:\n                                    a = stack.pop();\n                                    stack.push(Math.sqrt(a));\n                                    break;\n                                case 27:\n                                    a = stack.pop();\n                                    stack.push(a, a);\n                                    break;\n                                case 28:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(b, a);\n                                    break;\n                                case 29:\n                                    idx = stack.pop();\n                                    if (idx < 0) idx = 0;\n                                    else if (idx > stack.length - 1) idx = stack.length - 1;\n                                    stack.push(stack[idx]);\n                                    break;\n                                case 30:\n                                    let n = stack.pop();\n                                    let j = stack.pop();\n                                    if (j >= 0) while(j > 0){\n                                        var t = stack[n - 1];\n                                        for(let i = n - 2; i >= 0; i--)stack[i + 1] = stack[i];\n                                        stack[0] = t;\n                                        j--;\n                                    }\n                                    else while(j < 0){\n                                        var t = stack[0];\n                                        for(let i = 0; i <= n; i++)stack[i] = stack[i + 1];\n                                        stack[n - 1] = t;\n                                        j++;\n                                    }\n                                    break;\n                                case 34:\n                                    c1x = x + stack.shift();\n                                    c1y = y;\n                                    c2x = c1x + stack.shift();\n                                    c2y = c1y + stack.shift();\n                                    c3x = c2x + stack.shift();\n                                    c3y = c2y;\n                                    c4x = c3x + stack.shift();\n                                    c4y = c3y;\n                                    c5x = c4x + stack.shift();\n                                    c5y = c4y;\n                                    c6x = c5x + stack.shift();\n                                    c6y = c5y;\n                                    x = c6x;\n                                    y = c6y;\n                                    path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                                    path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                                    break;\n                                case 35:\n                                    pts = [];\n                                    for(let i = 0; i <= 5; i++){\n                                        x += stack.shift();\n                                        y += stack.shift();\n                                        pts.push(x, y);\n                                    }\n                                    path.bezierCurveTo(...pts.slice(0, 6));\n                                    path.bezierCurveTo(...pts.slice(6));\n                                    stack.shift(); // fd\n                                    break;\n                                case 36:\n                                    c1x = x + stack.shift();\n                                    c1y = y + stack.shift();\n                                    c2x = c1x + stack.shift();\n                                    c2y = c1y + stack.shift();\n                                    c3x = c2x + stack.shift();\n                                    c3y = c2y;\n                                    c4x = c3x + stack.shift();\n                                    c4y = c3y;\n                                    c5x = c4x + stack.shift();\n                                    c5y = c4y + stack.shift();\n                                    c6x = c5x + stack.shift();\n                                    c6y = c5y;\n                                    x = c6x;\n                                    y = c6y;\n                                    path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                                    path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                                    break;\n                                case 37:\n                                    let startx = x;\n                                    let starty = y;\n                                    pts = [];\n                                    for(let i = 0; i <= 4; i++){\n                                        x += stack.shift();\n                                        y += stack.shift();\n                                        pts.push(x, y);\n                                    }\n                                    if (Math.abs(x - startx) > Math.abs(y - starty)) {\n                                        x += stack.shift();\n                                        y = starty;\n                                    } else {\n                                        x = startx;\n                                        y += stack.shift();\n                                    }\n                                    pts.push(x, y);\n                                    path.bezierCurveTo(...pts.slice(0, 6));\n                                    path.bezierCurveTo(...pts.slice(6));\n                                    break;\n                                default:\n                                    throw new Error(`Unknown op: 12 ${op}`);\n                            }\n                            break;\n                        default:\n                            throw new Error(`Unknown op: ${op}`);\n                    }\n                } else if (op < 247) stack.push(op - 139);\n                else if (op < 251) {\n                    var b1 = stream.readUInt8();\n                    stack.push((op - 247) * 256 + b1 + 108);\n                } else if (op < 255) {\n                    var b1 = stream.readUInt8();\n                    stack.push(-(op - 251) * 256 - b1 - 108);\n                } else stack.push(stream.readInt32BE() / 65536);\n            }\n        };\n        parse();\n        if (open) path.closePath();\n        return path;\n    }\n    constructor(...args){\n        super(...args);\n        (0, _swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_10__._)(this, \"type\", 'CFF');\n    }\n}\n\n\n\n\n\nlet $25d8f049c222084c$var$SBIXImage = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    originX: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    originY: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    type: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    data: new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer((t)=>t.parent.buflen - t._currentOffset)\n});\nclass $25d8f049c222084c$export$2e2bcd8739ae039 extends (0, $69aac16029968692$export$2e2bcd8739ae039) {\n    /**\n   * Returns an object representing a glyph image at the given point size.\n   * The object has a data property with a Buffer containing the actual image data,\n   * along with the image type, and origin.\n   *\n   * @param {number} size\n   * @return {object}\n   */ getImageForSize(size) {\n        for(let i = 0; i < this._font.sbix.imageTables.length; i++){\n            var table = this._font.sbix.imageTables[i];\n            if (table.ppem >= size) break;\n        }\n        let offsets = table.imageOffsets;\n        let start = offsets[this.id];\n        let end = offsets[this.id + 1];\n        if (start === end) return null;\n        this._font.stream.pos = start;\n        return $25d8f049c222084c$var$SBIXImage.decode(this._font.stream, {\n            buflen: end - start\n        });\n    }\n    render(ctx, size) {\n        let img = this.getImageForSize(size);\n        if (img != null) {\n            let scale = size / this._font.unitsPerEm;\n            ctx.image(img.data, {\n                height: size,\n                x: img.originX,\n                y: (this.bbox.minY - img.originY) * scale\n            });\n        }\n        if (this._font.sbix.flags.renderOutlines) super.render(ctx, size);\n    }\n    constructor(...args){\n        super(...args);\n        (0, _swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_10__._)(this, \"type\", 'SBIX');\n    }\n}\n\n\n\n\n\nclass $0d411f0165859681$var$COLRLayer {\n    constructor(glyph, color){\n        this.glyph = glyph;\n        this.color = color;\n    }\n}\nclass $0d411f0165859681$export$2e2bcd8739ae039 extends (0, $f92906be28e61769$export$2e2bcd8739ae039) {\n    _getBBox() {\n        let bbox = new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039);\n        for(let i = 0; i < this.layers.length; i++){\n            let layer = this.layers[i];\n            let b = layer.glyph.bbox;\n            bbox.addPoint(b.minX, b.minY);\n            bbox.addPoint(b.maxX, b.maxY);\n        }\n        return bbox;\n    }\n    /**\n   * Returns an array of objects containing the glyph and color for\n   * each layer in the composite color glyph.\n   * @type {object[]}\n   */ get layers() {\n        let cpal = this._font.CPAL;\n        let colr = this._font.COLR;\n        let low = 0;\n        let high = colr.baseGlyphRecord.length - 1;\n        while(low <= high){\n            let mid = low + high >> 1;\n            var rec = colr.baseGlyphRecord[mid];\n            if (this.id < rec.gid) high = mid - 1;\n            else if (this.id > rec.gid) low = mid + 1;\n            else {\n                var baseLayer = rec;\n                break;\n            }\n        }\n        // if base glyph not found in COLR table,\n        // default to normal glyph from glyf or CFF\n        if (baseLayer == null) {\n            var g = this._font._getBaseGlyph(this.id);\n            var color = {\n                red: 0,\n                green: 0,\n                blue: 0,\n                alpha: 255\n            };\n            return [\n                new $0d411f0165859681$var$COLRLayer(g, color)\n            ];\n        }\n        // otherwise, return an array of all the layers\n        let layers = [];\n        for(let i = baseLayer.firstLayerIndex; i < baseLayer.firstLayerIndex + baseLayer.numLayers; i++){\n            var rec = colr.layerRecords[i];\n            var color = cpal.colorRecords[rec.paletteIndex];\n            var g = this._font._getBaseGlyph(rec.gid);\n            layers.push(new $0d411f0165859681$var$COLRLayer(g, color));\n        }\n        return layers;\n    }\n    render(ctx, size) {\n        for (let { glyph: glyph, color: color } of this.layers){\n            ctx.fillColor([\n                color.red,\n                color.green,\n                color.blue\n            ], color.alpha / 255 * 100);\n            glyph.render(ctx, size);\n        }\n        return;\n    }\n    constructor(...args){\n        super(...args);\n        (0, _swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_10__._)(this, \"type\", 'COLR');\n    }\n}\n\n\nconst $0bb840cac04e911b$var$TUPLES_SHARE_POINT_NUMBERS = 0x8000;\nconst $0bb840cac04e911b$var$TUPLE_COUNT_MASK = 0x0fff;\nconst $0bb840cac04e911b$var$EMBEDDED_TUPLE_COORD = 0x8000;\nconst $0bb840cac04e911b$var$INTERMEDIATE_TUPLE = 0x4000;\nconst $0bb840cac04e911b$var$PRIVATE_POINT_NUMBERS = 0x2000;\nconst $0bb840cac04e911b$var$TUPLE_INDEX_MASK = 0x0fff;\nconst $0bb840cac04e911b$var$POINTS_ARE_WORDS = 0x80;\nconst $0bb840cac04e911b$var$POINT_RUN_COUNT_MASK = 0x7f;\nconst $0bb840cac04e911b$var$DELTAS_ARE_ZERO = 0x80;\nconst $0bb840cac04e911b$var$DELTAS_ARE_WORDS = 0x40;\nconst $0bb840cac04e911b$var$DELTA_RUN_COUNT_MASK = 0x3f;\nclass $0bb840cac04e911b$export$2e2bcd8739ae039 {\n    normalizeCoords(coords) {\n        // the default mapping is linear along each axis, in two segments:\n        // from the minValue to defaultValue, and from defaultValue to maxValue.\n        let normalized = [];\n        for(var i = 0; i < this.font.fvar.axis.length; i++){\n            let axis = this.font.fvar.axis[i];\n            if (coords[i] < axis.defaultValue) normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.defaultValue - axis.minValue + Number.EPSILON));\n            else normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.maxValue - axis.defaultValue + Number.EPSILON));\n        }\n        // if there is an avar table, the normalized value is calculated\n        // by interpolating between the two nearest mapped values.\n        if (this.font.avar) for(var i = 0; i < this.font.avar.segment.length; i++){\n            let segment = this.font.avar.segment[i];\n            for(let j = 0; j < segment.correspondence.length; j++){\n                let pair = segment.correspondence[j];\n                if (j >= 1 && normalized[i] < pair.fromCoord) {\n                    let prev = segment.correspondence[j - 1];\n                    normalized[i] = ((normalized[i] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + Number.EPSILON) / (pair.fromCoord - prev.fromCoord + Number.EPSILON) + prev.toCoord;\n                    break;\n                }\n            }\n        }\n        return normalized;\n    }\n    transformPoints(gid, glyphPoints) {\n        if (!this.font.fvar || !this.font.gvar) return;\n        let { gvar: gvar } = this.font;\n        if (gid >= gvar.glyphCount) return;\n        let offset = gvar.offsets[gid];\n        if (offset === gvar.offsets[gid + 1]) return;\n        // Read the gvar data for this glyph\n        let { stream: stream } = this.font;\n        stream.pos = offset;\n        if (stream.pos >= stream.length) return;\n        let tupleCount = stream.readUInt16BE();\n        let offsetToData = offset + stream.readUInt16BE();\n        if (tupleCount & $0bb840cac04e911b$var$TUPLES_SHARE_POINT_NUMBERS) {\n            var here = stream.pos;\n            stream.pos = offsetToData;\n            var sharedPoints = this.decodePoints();\n            offsetToData = stream.pos;\n            stream.pos = here;\n        }\n        let origPoints = glyphPoints.map((pt)=>pt.copy());\n        tupleCount &= $0bb840cac04e911b$var$TUPLE_COUNT_MASK;\n        for(let i = 0; i < tupleCount; i++){\n            let tupleDataSize = stream.readUInt16BE();\n            let tupleIndex = stream.readUInt16BE();\n            if (tupleIndex & $0bb840cac04e911b$var$EMBEDDED_TUPLE_COORD) {\n                var tupleCoords = [];\n                for(let a = 0; a < gvar.axisCount; a++)tupleCoords.push(stream.readInt16BE() / 16384);\n            } else {\n                if ((tupleIndex & $0bb840cac04e911b$var$TUPLE_INDEX_MASK) >= gvar.globalCoordCount) throw new Error('Invalid gvar table');\n                var tupleCoords = gvar.globalCoords[tupleIndex & $0bb840cac04e911b$var$TUPLE_INDEX_MASK];\n            }\n            if (tupleIndex & $0bb840cac04e911b$var$INTERMEDIATE_TUPLE) {\n                var startCoords = [];\n                for(let a = 0; a < gvar.axisCount; a++)startCoords.push(stream.readInt16BE() / 16384);\n                var endCoords = [];\n                for(let a = 0; a < gvar.axisCount; a++)endCoords.push(stream.readInt16BE() / 16384);\n            }\n            // Get the factor at which to apply this tuple\n            let factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);\n            if (factor === 0) {\n                offsetToData += tupleDataSize;\n                continue;\n            }\n            var here = stream.pos;\n            stream.pos = offsetToData;\n            if (tupleIndex & $0bb840cac04e911b$var$PRIVATE_POINT_NUMBERS) var points = this.decodePoints();\n            else var points = sharedPoints;\n            // points.length = 0 means there are deltas for all points\n            let nPoints = points.length === 0 ? glyphPoints.length : points.length;\n            let xDeltas = this.decodeDeltas(nPoints);\n            let yDeltas = this.decodeDeltas(nPoints);\n            if (points.length === 0) for(let i = 0; i < glyphPoints.length; i++){\n                var point = glyphPoints[i];\n                point.x += Math.round(xDeltas[i] * factor);\n                point.y += Math.round(yDeltas[i] * factor);\n            }\n            else {\n                let outPoints = origPoints.map((pt)=>pt.copy());\n                let hasDelta = glyphPoints.map(()=>false);\n                for(let i = 0; i < points.length; i++){\n                    let idx = points[i];\n                    if (idx < glyphPoints.length) {\n                        let point = outPoints[idx];\n                        hasDelta[idx] = true;\n                        point.x += xDeltas[i] * factor;\n                        point.y += yDeltas[i] * factor;\n                    }\n                }\n                this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);\n                for(let i = 0; i < glyphPoints.length; i++){\n                    let deltaX = outPoints[i].x - origPoints[i].x;\n                    let deltaY = outPoints[i].y - origPoints[i].y;\n                    glyphPoints[i].x = Math.round(glyphPoints[i].x + deltaX);\n                    glyphPoints[i].y = Math.round(glyphPoints[i].y + deltaY);\n                }\n            }\n            offsetToData += tupleDataSize;\n            stream.pos = here;\n        }\n    }\n    decodePoints() {\n        let stream = this.font.stream;\n        let count = stream.readUInt8();\n        if (count & $0bb840cac04e911b$var$POINTS_ARE_WORDS) count = (count & $0bb840cac04e911b$var$POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();\n        let points = new Uint16Array(count);\n        let i = 0;\n        let point = 0;\n        while(i < count){\n            let run = stream.readUInt8();\n            let runCount = (run & $0bb840cac04e911b$var$POINT_RUN_COUNT_MASK) + 1;\n            let fn = run & $0bb840cac04e911b$var$POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;\n            for(let j = 0; j < runCount && i < count; j++){\n                point += fn.call(stream);\n                points[i++] = point;\n            }\n        }\n        return points;\n    }\n    decodeDeltas(count) {\n        let stream = this.font.stream;\n        let i = 0;\n        let deltas = new Int16Array(count);\n        while(i < count){\n            let run = stream.readUInt8();\n            let runCount = (run & $0bb840cac04e911b$var$DELTA_RUN_COUNT_MASK) + 1;\n            if (run & $0bb840cac04e911b$var$DELTAS_ARE_ZERO) i += runCount;\n            else {\n                let fn = run & $0bb840cac04e911b$var$DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;\n                for(let j = 0; j < runCount && i < count; j++)deltas[i++] = fn.call(stream);\n            }\n        }\n        return deltas;\n    }\n    tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {\n        let normalized = this.normalizedCoords;\n        let { gvar: gvar } = this.font;\n        let factor = 1;\n        for(let i = 0; i < gvar.axisCount; i++){\n            if (tupleCoords[i] === 0) continue;\n            if (normalized[i] === 0) return 0;\n            if ((tupleIndex & $0bb840cac04e911b$var$INTERMEDIATE_TUPLE) === 0) {\n                if (normalized[i] < Math.min(0, tupleCoords[i]) || normalized[i] > Math.max(0, tupleCoords[i])) return 0;\n                factor = (factor * normalized[i] + Number.EPSILON) / (tupleCoords[i] + Number.EPSILON);\n            } else {\n                if (normalized[i] < startCoords[i] || normalized[i] > endCoords[i]) return 0;\n                else if (normalized[i] < tupleCoords[i]) factor = factor * (normalized[i] - startCoords[i] + Number.EPSILON) / (tupleCoords[i] - startCoords[i] + Number.EPSILON);\n                else factor = factor * (endCoords[i] - normalized[i] + Number.EPSILON) / (endCoords[i] - tupleCoords[i] + Number.EPSILON);\n            }\n        }\n        return factor;\n    }\n    // Interpolates points without delta values.\n    // Needed for the Ø and Q glyphs in Skia.\n    // Algorithm from Freetype.\n    interpolateMissingDeltas(points, inPoints, hasDelta) {\n        if (points.length === 0) return;\n        let point = 0;\n        while(point < points.length){\n            let firstPoint = point;\n            // find the end point of the contour\n            let endPoint = point;\n            let pt = points[endPoint];\n            while(!pt.endContour)pt = points[++endPoint];\n            // find the first point that has a delta\n            while(point <= endPoint && !hasDelta[point])point++;\n            if (point > endPoint) continue;\n            let firstDelta = point;\n            let curDelta = point;\n            point++;\n            while(point <= endPoint){\n                // find the next point with a delta, and interpolate intermediate points\n                if (hasDelta[point]) {\n                    this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);\n                    curDelta = point;\n                }\n                point++;\n            }\n            // shift contour if we only have a single delta\n            if (curDelta === firstDelta) this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);\n            else {\n                // otherwise, handle the remaining points at the end and beginning of the contour\n                this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);\n                if (firstDelta > 0) this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);\n            }\n            point = endPoint + 1;\n        }\n    }\n    deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {\n        if (p1 > p2) return;\n        let iterable = [\n            'x',\n            'y'\n        ];\n        for(let i = 0; i < iterable.length; i++){\n            let k = iterable[i];\n            if (inPoints[ref1][k] > inPoints[ref2][k]) {\n                var p = ref1;\n                ref1 = ref2;\n                ref2 = p;\n            }\n            let in1 = inPoints[ref1][k];\n            let in2 = inPoints[ref2][k];\n            let out1 = outPoints[ref1][k];\n            let out2 = outPoints[ref2][k];\n            // If the reference points have the same coordinate but different\n            // delta, inferred delta is zero.  Otherwise interpolate.\n            if (in1 !== in2 || out1 === out2) {\n                let scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);\n                for(let p = p1; p <= p2; p++){\n                    let out = inPoints[p][k];\n                    if (out <= in1) out += out1 - in1;\n                    else if (out >= in2) out += out2 - in2;\n                    else out = out1 + (out - in1) * scale;\n                    outPoints[p][k] = out;\n                }\n            }\n        }\n    }\n    deltaShift(p1, p2, ref, inPoints, outPoints) {\n        let deltaX = outPoints[ref].x - inPoints[ref].x;\n        let deltaY = outPoints[ref].y - inPoints[ref].y;\n        if (deltaX === 0 && deltaY === 0) return;\n        for(let p = p1; p <= p2; p++)if (p !== ref) {\n            outPoints[p].x += deltaX;\n            outPoints[p].y += deltaY;\n        }\n    }\n    getAdvanceAdjustment(gid, table) {\n        let outerIndex, innerIndex;\n        if (table.advanceWidthMapping) {\n            let idx = gid;\n            if (idx >= table.advanceWidthMapping.mapCount) idx = table.advanceWidthMapping.mapCount - 1;\n            let entryFormat = table.advanceWidthMapping.entryFormat;\n            ({ outerIndex: outerIndex, innerIndex: innerIndex } = table.advanceWidthMapping.mapData[idx]);\n        } else {\n            outerIndex = 0;\n            innerIndex = gid;\n        }\n        return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);\n    }\n    // See pseudo code from `Font Variations Overview'\n    // in the OpenType specification.\n    getDelta(itemStore, outerIndex, innerIndex) {\n        if (outerIndex >= itemStore.itemVariationData.length) return 0;\n        let varData = itemStore.itemVariationData[outerIndex];\n        if (innerIndex >= varData.deltaSets.length) return 0;\n        let deltaSet = varData.deltaSets[innerIndex];\n        let blendVector = this.getBlendVector(itemStore, outerIndex);\n        let netAdjustment = 0;\n        for(let master = 0; master < varData.regionIndexCount; master++)netAdjustment += deltaSet.deltas[master] * blendVector[master];\n        return netAdjustment;\n    }\n    getBlendVector(itemStore, outerIndex) {\n        let varData = itemStore.itemVariationData[outerIndex];\n        if (this.blendVectors.has(varData)) return this.blendVectors.get(varData);\n        let normalizedCoords = this.normalizedCoords;\n        let blendVector = [];\n        // outer loop steps through master designs to be blended\n        for(let master = 0; master < varData.regionIndexCount; master++){\n            let scalar = 1;\n            let regionIndex = varData.regionIndexes[master];\n            let axes = itemStore.variationRegionList.variationRegions[regionIndex];\n            // inner loop steps through axes in this region\n            for(let j = 0; j < axes.length; j++){\n                let axis = axes[j];\n                let axisScalar;\n                // compute the scalar contribution of this axis\n                // ignore invalid ranges\n                if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord) axisScalar = 1;\n                else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0) axisScalar = 1;\n                else if (axis.peakCoord === 0) axisScalar = 1;\n                else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord) axisScalar = 0;\n                else {\n                    if (normalizedCoords[j] === axis.peakCoord) axisScalar = 1;\n                    else if (normalizedCoords[j] < axis.peakCoord) axisScalar = (normalizedCoords[j] - axis.startCoord + Number.EPSILON) / (axis.peakCoord - axis.startCoord + Number.EPSILON);\n                    else axisScalar = (axis.endCoord - normalizedCoords[j] + Number.EPSILON) / (axis.endCoord - axis.peakCoord + Number.EPSILON);\n                }\n                // take product of all the axis scalars\n                scalar *= axisScalar;\n            }\n            blendVector[master] = scalar;\n        }\n        this.blendVectors.set(varData, blendVector);\n        return blendVector;\n    }\n    constructor(font, coords){\n        this.font = font;\n        this.normalizedCoords = this.normalizeCoords(coords);\n        this.blendVectors = new Map;\n    }\n}\n\n\n\n\nconst $5cc7476da92df375$var$resolved = Promise.resolve();\nclass $5cc7476da92df375$export$2e2bcd8739ae039 {\n    includeGlyph(glyph) {\n        if (typeof glyph === 'object') glyph = glyph.id;\n        if (this.mapping[glyph] == null) {\n            this.glyphs.push(glyph);\n            this.mapping[glyph] = this.glyphs.length - 1;\n        }\n        return this.mapping[glyph];\n    }\n    constructor(font){\n        this.font = font;\n        this.glyphs = [];\n        this.mapping = {};\n        // always include the missing glyph\n        this.includeGlyph(0);\n    }\n}\n\n\n\n\n\n// Flags for simple glyphs\nconst $807e58506be70005$var$ON_CURVE = 1;\nconst $807e58506be70005$var$X_SHORT_VECTOR = 2;\nconst $807e58506be70005$var$Y_SHORT_VECTOR = 4;\nconst $807e58506be70005$var$REPEAT = 8;\nconst $807e58506be70005$var$SAME_X = 16;\nconst $807e58506be70005$var$SAME_Y = 32;\nclass $807e58506be70005$var$Point {\n    static size(val) {\n        return val >= 0 && val <= 255 ? 1 : 2;\n    }\n    static encode(stream, value) {\n        if (value >= 0 && value <= 255) stream.writeUInt8(value);\n        else stream.writeInt16BE(value);\n    }\n}\nlet $807e58506be70005$var$Glyf = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    numberOfContours: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    endPtsOfContours: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'numberOfContours'),\n    instructions: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    flags: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, 0),\n    xPoints: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($807e58506be70005$var$Point, 0),\n    yPoints: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($807e58506be70005$var$Point, 0)\n});\nclass $807e58506be70005$export$2e2bcd8739ae039 {\n    encodeSimple(path, instructions = []) {\n        let endPtsOfContours = [];\n        let xPoints = [];\n        let yPoints = [];\n        let flags = [];\n        let same = 0;\n        let lastX = 0, lastY = 0, lastFlag = 0;\n        let pointCount = 0;\n        for(let i = 0; i < path.commands.length; i++){\n            let c = path.commands[i];\n            for(let j = 0; j < c.args.length; j += 2){\n                let x = c.args[j];\n                let y = c.args[j + 1];\n                let flag = 0;\n                // If the ending point of a quadratic curve is the midpoint\n                // between the control point and the control point of the next\n                // quadratic curve, we can omit the ending point.\n                if (c.command === 'quadraticCurveTo' && j === 2) {\n                    let next = path.commands[i + 1];\n                    if (next && next.command === 'quadraticCurveTo') {\n                        let midX = (lastX + next.args[0]) / 2;\n                        let midY = (lastY + next.args[1]) / 2;\n                        if (x === midX && y === midY) continue;\n                    }\n                }\n                // All points except control points are on curve.\n                if (!(c.command === 'quadraticCurveTo' && j === 0)) flag |= $807e58506be70005$var$ON_CURVE;\n                flag = this._encodePoint(x, lastX, xPoints, flag, $807e58506be70005$var$X_SHORT_VECTOR, $807e58506be70005$var$SAME_X);\n                flag = this._encodePoint(y, lastY, yPoints, flag, $807e58506be70005$var$Y_SHORT_VECTOR, $807e58506be70005$var$SAME_Y);\n                if (flag === lastFlag && same < 255) {\n                    flags[flags.length - 1] |= $807e58506be70005$var$REPEAT;\n                    same++;\n                } else {\n                    if (same > 0) {\n                        flags.push(same);\n                        same = 0;\n                    }\n                    flags.push(flag);\n                    lastFlag = flag;\n                }\n                lastX = x;\n                lastY = y;\n                pointCount++;\n            }\n            if (c.command === 'closePath') endPtsOfContours.push(pointCount - 1);\n        }\n        // Close the path if the last command didn't already\n        if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== 'closePath') endPtsOfContours.push(pointCount - 1);\n        let bbox = path.bbox;\n        let glyf = {\n            numberOfContours: endPtsOfContours.length,\n            xMin: bbox.minX,\n            yMin: bbox.minY,\n            xMax: bbox.maxX,\n            yMax: bbox.maxY,\n            endPtsOfContours: endPtsOfContours,\n            instructions: instructions,\n            flags: flags,\n            xPoints: xPoints,\n            yPoints: yPoints\n        };\n        let size = $807e58506be70005$var$Glyf.size(glyf);\n        let tail = 4 - size % 4;\n        let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.EncodeStream(size + tail);\n        $807e58506be70005$var$Glyf.encode(stream, glyf);\n        // Align to 4-byte length\n        if (tail !== 0) stream.fill(0, tail);\n        return stream.buffer;\n    }\n    _encodePoint(value, last, points, flag, shortFlag, sameFlag) {\n        let diff = value - last;\n        if (value === last) flag |= sameFlag;\n        else {\n            if (-255 <= diff && diff <= 255) {\n                flag |= shortFlag;\n                if (diff < 0) diff = -diff;\n                else flag |= sameFlag;\n            }\n            points.push(diff);\n        }\n        return flag;\n    }\n}\n\n\nclass $4abbb6a5dbdc441a$export$2e2bcd8739ae039 extends (0, $5cc7476da92df375$export$2e2bcd8739ae039) {\n    _addGlyph(gid) {\n        let glyph = this.font.getGlyph(gid);\n        let glyf = glyph._decode();\n        // get the offset to the glyph from the loca table\n        let curOffset = this.font.loca.offsets[gid];\n        let nextOffset = this.font.loca.offsets[gid + 1];\n        let stream = this.font._getTableStream('glyf');\n        stream.pos += curOffset;\n        let buffer = stream.readBuffer(nextOffset - curOffset);\n        // if it is a compound glyph, include its components\n        if (glyf && glyf.numberOfContours < 0) {\n            buffer = new Uint8Array(buffer);\n            let view = new DataView(buffer.buffer);\n            for (let component of glyf.components){\n                gid = this.includeGlyph(component.glyphID);\n                view.setUint16(component.pos, gid);\n            }\n        } else if (glyf && this.font._variationProcessor) // If this is a TrueType variation glyph, re-encode the path\n        buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);\n        this.glyf.push(buffer);\n        this.loca.offsets.push(this.offset);\n        this.hmtx.metrics.push({\n            advance: glyph.advanceWidth,\n            bearing: glyph._getMetrics().leftBearing\n        });\n        this.offset += buffer.length;\n        return this.glyf.length - 1;\n    }\n    encode() {\n        // tables required by PDF spec:\n        //   head, hhea, loca, maxp, cvt , prep, glyf, hmtx, fpgm\n        //\n        // additional tables required for standalone fonts:\n        //   name, cmap, OS/2, post\n        this.glyf = [];\n        this.offset = 0;\n        this.loca = {\n            offsets: [],\n            version: this.font.loca.version\n        };\n        this.hmtx = {\n            metrics: [],\n            bearings: []\n        };\n        // include all the glyphs\n        // not using a for loop because we need to support adding more\n        // glyphs to the array as we go, and CoffeeScript caches the length.\n        let i = 0;\n        while(i < this.glyphs.length)this._addGlyph(this.glyphs[i++]);\n        let maxp = (0, clone__WEBPACK_IMPORTED_MODULE_6__)(this.font.maxp);\n        maxp.numGlyphs = this.glyf.length;\n        this.loca.offsets.push(this.offset);\n        let head = (0, clone__WEBPACK_IMPORTED_MODULE_6__)(this.font.head);\n        head.indexToLocFormat = this.loca.version;\n        let hhea = (0, clone__WEBPACK_IMPORTED_MODULE_6__)(this.font.hhea);\n        hhea.numberOfMetrics = this.hmtx.metrics.length;\n        // map = []\n        // for index in [0...256]\n        //     if index < @numGlyphs\n        //         map[index] = index\n        //     else\n        //         map[index] = 0\n        //\n        // cmapTable =\n        //     version: 0\n        //     length: 262\n        //     language: 0\n        //     codeMap: map\n        //\n        // cmap =\n        //     version: 0\n        //     numSubtables: 1\n        //     tables: [\n        //         platformID: 1\n        //         encodingID: 0\n        //         table: cmapTable\n        //     ]\n        // TODO: subset prep, cvt, fpgm?\n        return (0, $816c07a04b6dba87$export$2e2bcd8739ae039).toBuffer({\n            tables: {\n                head: head,\n                hhea: hhea,\n                loca: this.loca,\n                maxp: maxp,\n                'cvt ': this.font['cvt '],\n                prep: this.font.prep,\n                glyf: this.glyf,\n                hmtx: this.hmtx,\n                fpgm: this.font.fpgm\n            }\n        });\n    }\n    constructor(font){\n        super(font);\n        this.glyphEncoder = new (0, $807e58506be70005$export$2e2bcd8739ae039);\n    }\n}\n\n\n\n\n\n\nclass $001d739428a71d5a$export$2e2bcd8739ae039 extends (0, $5cc7476da92df375$export$2e2bcd8739ae039) {\n    subsetCharstrings() {\n        this.charstrings = [];\n        let gsubrs = {};\n        for (let gid of this.glyphs){\n            this.charstrings.push(this.cff.getCharString(gid));\n            let glyph = this.font.getGlyph(gid);\n            let path = glyph.path; // this causes the glyph to be parsed\n            for(let subr in glyph._usedGsubrs)gsubrs[subr] = true;\n        }\n        this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);\n    }\n    subsetSubrs(subrs, used) {\n        let res = [];\n        for(let i = 0; i < subrs.length; i++){\n            let subr = subrs[i];\n            if (used[i]) {\n                this.cff.stream.pos = subr.offset;\n                res.push(this.cff.stream.readBuffer(subr.length));\n            } else res.push(new Uint8Array([\n                11\n            ])); // return\n        }\n        return res;\n    }\n    subsetFontdict(topDict) {\n        topDict.FDArray = [];\n        topDict.FDSelect = {\n            version: 0,\n            fds: []\n        };\n        let used_fds = {};\n        let used_subrs = [];\n        let fd_select = {};\n        for (let gid of this.glyphs){\n            let fd = this.cff.fdForGlyph(gid);\n            if (fd == null) continue;\n            if (!used_fds[fd]) {\n                topDict.FDArray.push(Object.assign({}, this.cff.topDict.FDArray[fd]));\n                used_subrs.push({});\n                fd_select[fd] = topDict.FDArray.length - 1;\n            }\n            used_fds[fd] = true;\n            topDict.FDSelect.fds.push(fd_select[fd]);\n            let glyph = this.font.getGlyph(gid);\n            let path = glyph.path; // this causes the glyph to be parsed\n            for(let subr in glyph._usedSubrs)used_subrs[fd_select[fd]][subr] = true;\n        }\n        for(let i = 0; i < topDict.FDArray.length; i++){\n            let dict = topDict.FDArray[i];\n            delete dict.FontName;\n            if (dict.Private && dict.Private.Subrs) {\n                dict.Private = Object.assign({}, dict.Private);\n                dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i]);\n            }\n        }\n        return;\n    }\n    createCIDFontdict(topDict) {\n        let used_subrs = {};\n        for (let gid of this.glyphs){\n            let glyph = this.font.getGlyph(gid);\n            let path = glyph.path; // this causes the glyph to be parsed\n            for(let subr in glyph._usedSubrs)used_subrs[subr] = true;\n        }\n        let privateDict = Object.assign({}, this.cff.topDict.Private);\n        if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs) privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);\n        topDict.FDArray = [\n            {\n                Private: privateDict\n            }\n        ];\n        return topDict.FDSelect = {\n            version: 3,\n            nRanges: 1,\n            ranges: [\n                {\n                    first: 0,\n                    fd: 0\n                }\n            ],\n            sentinel: this.charstrings.length\n        };\n    }\n    addString(string) {\n        if (!string) return null;\n        if (!this.strings) this.strings = [];\n        this.strings.push(string);\n        return (0, $229224aec43783c5$export$2e2bcd8739ae039).length + this.strings.length - 1;\n    }\n    encode() {\n        this.subsetCharstrings();\n        let charset = {\n            version: this.charstrings.length > 255 ? 2 : 1,\n            ranges: [\n                {\n                    first: 1,\n                    nLeft: this.charstrings.length - 2\n                }\n            ]\n        };\n        let topDict = Object.assign({}, this.cff.topDict);\n        topDict.Private = null;\n        topDict.charset = charset;\n        topDict.Encoding = null;\n        topDict.CharStrings = this.charstrings;\n        for (let key of [\n            'version',\n            'Notice',\n            'Copyright',\n            'FullName',\n            'FamilyName',\n            'Weight',\n            'PostScript',\n            'BaseFontName',\n            'FontName'\n        ])topDict[key] = this.addString(this.cff.string(topDict[key]));\n        topDict.ROS = [\n            this.addString('Adobe'),\n            this.addString('Identity'),\n            0\n        ];\n        topDict.CIDCount = this.charstrings.length;\n        if (this.cff.isCIDFont) this.subsetFontdict(topDict);\n        else this.createCIDFontdict(topDict);\n        let top = {\n            version: 1,\n            hdrSize: this.cff.hdrSize,\n            offSize: 4,\n            header: this.cff.header,\n            nameIndex: [\n                this.cff.postscriptName\n            ],\n            topDictIndex: [\n                topDict\n            ],\n            stringIndex: this.strings,\n            globalSubrIndex: this.gsubrs\n        };\n        return (0, $b84fd3dd9d8eddb2$export$2e2bcd8739ae039).toBuffer(top);\n    }\n    constructor(font){\n        super(font);\n        this.cff = this.font['CFF '];\n        if (!this.cff) throw new Error('Not a CFF Font');\n    }\n}\n\n\n\n\nclass $4c1709dee528ea76$export$2e2bcd8739ae039 {\n    static probe(buffer) {\n        let format = (0, $12727730ddfc8bfe$export$3d28c1996ced1f14).decode(buffer.slice(0, 4));\n        return format === 'true' || format === 'OTTO' || format === String.fromCharCode(0, 1, 0, 0);\n    }\n    setDefaultLanguage(lang = null) {\n        this.defaultLanguage = lang;\n    }\n    _getTable(table) {\n        if (!(table.tag in this._tables)) try {\n            this._tables[table.tag] = this._decodeTable(table);\n        } catch (e) {\n            if ($d636bc798e7178db$export$bd5c5d8b8dcafd78) {\n                console.error(`Error decoding table ${table.tag}`);\n                console.error(e.stack);\n            }\n        }\n        return this._tables[table.tag];\n    }\n    _getTableStream(tag) {\n        let table = this.directory.tables[tag];\n        if (table) {\n            this.stream.pos = table.offset;\n            return this.stream;\n        }\n        return null;\n    }\n    _decodeDirectory() {\n        return this.directory = (0, $816c07a04b6dba87$export$2e2bcd8739ae039).decode(this.stream, {\n            _startOffset: 0\n        });\n    }\n    _decodeTable(table) {\n        let pos = this.stream.pos;\n        let stream = this._getTableStream(table.tag);\n        let result = (0, $c3395722bea751e2$export$2e2bcd8739ae039)[table.tag].decode(stream, this, table.length);\n        this.stream.pos = pos;\n        return result;\n    }\n    /**\n   * Gets a string from the font's `name` table\n   * `lang` is a BCP-47 language code.\n   * @return {string}\n   */ getName(key, lang = this.defaultLanguage || $d636bc798e7178db$export$42940898df819940) {\n        let record = this.name && this.name.records[key];\n        if (record) // Attempt to retrieve the entry, depending on which translation is available:\n        return record[lang] || record[this.defaultLanguage] || record[$d636bc798e7178db$export$42940898df819940] || record['en'] || record[Object.keys(record)[0]] // Seriously, ANY language would be fine\n         || null;\n        return null;\n    }\n    /**\n   * The unique PostScript name for this font, e.g. \"Helvetica-Bold\"\n   * @type {string}\n   */ get postscriptName() {\n        return this.getName('postscriptName');\n    }\n    /**\n   * The font's full name, e.g. \"Helvetica Bold\"\n   * @type {string}\n   */ get fullName() {\n        return this.getName('fullName');\n    }\n    /**\n   * The font's family name, e.g. \"Helvetica\"\n   * @type {string}\n   */ get familyName() {\n        return this.getName('fontFamily');\n    }\n    /**\n   * The font's sub-family, e.g. \"Bold\".\n   * @type {string}\n   */ get subfamilyName() {\n        return this.getName('fontSubfamily');\n    }\n    /**\n   * The font's copyright information\n   * @type {string}\n   */ get copyright() {\n        return this.getName('copyright');\n    }\n    /**\n   * The font's version number\n   * @type {string}\n   */ get version() {\n        return this.getName('version');\n    }\n    /**\n   * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))\n   * @type {number}\n   */ get ascent() {\n        return this.hhea.ascent;\n    }\n    /**\n   * The font’s [descender](https://en.wikipedia.org/wiki/Descender)\n   * @type {number}\n   */ get descent() {\n        return this.hhea.descent;\n    }\n    /**\n   * The amount of space that should be included between lines\n   * @type {number}\n   */ get lineGap() {\n        return this.hhea.lineGap;\n    }\n    /**\n   * The offset from the normal underline position that should be used\n   * @type {number}\n   */ get underlinePosition() {\n        return this.post.underlinePosition;\n    }\n    /**\n   * The weight of the underline that should be used\n   * @type {number}\n   */ get underlineThickness() {\n        return this.post.underlineThickness;\n    }\n    /**\n   * If this is an italic font, the angle the cursor should be drawn at to match the font design\n   * @type {number}\n   */ get italicAngle() {\n        return this.post.italicAngle;\n    }\n    /**\n   * The height of capital letters above the baseline.\n   * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.\n   * @type {number}\n   */ get capHeight() {\n        let os2 = this['OS/2'];\n        return os2 ? os2.capHeight : this.ascent;\n    }\n    /**\n   * The height of lower case letters in the font.\n   * See [here](https://en.wikipedia.org/wiki/X-height) for more details.\n   * @type {number}\n   */ get xHeight() {\n        let os2 = this['OS/2'];\n        return os2 ? os2.xHeight : 0;\n    }\n    /**\n   * The number of glyphs in the font.\n   * @type {number}\n   */ get numGlyphs() {\n        return this.maxp.numGlyphs;\n    }\n    /**\n   * The size of the font’s internal coordinate grid\n   * @type {number}\n   */ get unitsPerEm() {\n        return this.head.unitsPerEm;\n    }\n    /**\n   * The font’s bounding box, i.e. the box that encloses all glyphs in the font.\n   * @type {BBox}\n   */ get bbox() {\n        return Object.freeze(new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039)(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));\n    }\n    get _cmapProcessor() {\n        return new (0, $f08dd41ef10b694c$export$2e2bcd8739ae039)(this.cmap);\n    }\n    /**\n   * An array of all of the unicode code points supported by the font.\n   * @type {number[]}\n   */ get characterSet() {\n        return this._cmapProcessor.getCharacterSet();\n    }\n    /**\n   * Returns whether there is glyph in the font for the given unicode code point.\n   *\n   * @param {number} codePoint\n   * @return {boolean}\n   */ hasGlyphForCodePoint(codePoint) {\n        return !!this._cmapProcessor.lookup(codePoint);\n    }\n    /**\n   * Maps a single unicode code point to a Glyph object.\n   * Does not perform any advanced substitutions (there is no context to do so).\n   *\n   * @param {number} codePoint\n   * @return {Glyph}\n   */ glyphForCodePoint(codePoint) {\n        return this.getGlyph(this._cmapProcessor.lookup(codePoint), [\n            codePoint\n        ]);\n    }\n    /**\n   * Returns an array of Glyph objects for the given string.\n   * This is only a one-to-one mapping from characters to glyphs.\n   * For most uses, you should use font.layout (described below), which\n   * provides a much more advanced mapping supporting AAT and OpenType shaping.\n   *\n   * @param {string} string\n   * @return {Glyph[]}\n   */ glyphsForString(string) {\n        let glyphs = [];\n        let len = string.length;\n        let idx = 0;\n        let last = -1;\n        let state = -1;\n        while(idx <= len){\n            let code = 0;\n            let nextState = 0;\n            if (idx < len) {\n                // Decode the next codepoint from UTF 16\n                code = string.charCodeAt(idx++);\n                if (0xd800 <= code && code <= 0xdbff && idx < len) {\n                    let next = string.charCodeAt(idx);\n                    if (0xdc00 <= next && next <= 0xdfff) {\n                        idx++;\n                        code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;\n                    }\n                }\n                // Compute the next state: 1 if the next codepoint is a variation selector, 0 otherwise.\n                nextState = 0xfe00 <= code && code <= 0xfe0f || 0xe0100 <= code && code <= 0xe01ef ? 1 : 0;\n            } else idx++;\n            if (state === 0 && nextState === 1) // Variation selector following normal codepoint.\n            glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [\n                last,\n                code\n            ]));\n            else if (state === 0 && nextState === 0) // Normal codepoint following normal codepoint.\n            glyphs.push(this.glyphForCodePoint(last));\n            last = code;\n            state = nextState;\n        }\n        return glyphs;\n    }\n    get _layoutEngine() {\n        return new (0, $4c0a7fa5df7a9ab1$export$2e2bcd8739ae039)(this);\n    }\n    /**\n   * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.\n   *\n   * @param {string} string\n   * @param {string[]} [userFeatures]\n   * @param {string} [script]\n   * @param {string} [language]\n   * @param {string} [direction]\n   * @return {GlyphRun}\n   */ layout(string, userFeatures, script, language, direction) {\n        return this._layoutEngine.layout(string, userFeatures, script, language, direction);\n    }\n    /**\n   * Returns an array of strings that map to the given glyph id.\n   * @param {number} gid - glyph id\n   */ stringsForGlyph(gid) {\n        return this._layoutEngine.stringsForGlyph(gid);\n    }\n    /**\n   * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)\n   * (or mapped AAT tags) supported by the font.\n   * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.\n   * If this is an AAT font, the OpenType feature tags are mapped to AAT features.\n   *\n   * @type {string[]}\n   */ get availableFeatures() {\n        return this._layoutEngine.getAvailableFeatures();\n    }\n    getAvailableFeatures(script, language) {\n        return this._layoutEngine.getAvailableFeatures(script, language);\n    }\n    _getBaseGlyph(glyph, characters = []) {\n        if (!this._glyphs[glyph]) {\n            if (this.directory.tables.glyf) this._glyphs[glyph] = new (0, $69aac16029968692$export$2e2bcd8739ae039)(glyph, characters, this);\n            else if (this.directory.tables['CFF '] || this.directory.tables.CFF2) this._glyphs[glyph] = new (0, $62cc5109c6101893$export$2e2bcd8739ae039)(glyph, characters, this);\n        }\n        return this._glyphs[glyph] || null;\n    }\n    /**\n   * Returns a glyph object for the given glyph id.\n   * You can pass the array of code points this glyph represents for\n   * your use later, and it will be stored in the glyph object.\n   *\n   * @param {number} glyph\n   * @param {number[]} characters\n   * @return {Glyph}\n   */ getGlyph(glyph, characters = []) {\n        if (!this._glyphs[glyph]) {\n            if (this.directory.tables.sbix) this._glyphs[glyph] = new (0, $25d8f049c222084c$export$2e2bcd8739ae039)(glyph, characters, this);\n            else if (this.directory.tables.COLR && this.directory.tables.CPAL) this._glyphs[glyph] = new (0, $0d411f0165859681$export$2e2bcd8739ae039)(glyph, characters, this);\n            else this._getBaseGlyph(glyph, characters);\n        }\n        return this._glyphs[glyph] || null;\n    }\n    /**\n   * Returns a Subset for this font.\n   * @return {Subset}\n   */ createSubset() {\n        if (this.directory.tables['CFF ']) return new (0, $001d739428a71d5a$export$2e2bcd8739ae039)(this);\n        return new (0, $4abbb6a5dbdc441a$export$2e2bcd8739ae039)(this);\n    }\n    /**\n   * Returns an object describing the available variation axes\n   * that this font supports. Keys are setting tags, and values\n   * contain the axis name, range, and default value.\n   *\n   * @type {object}\n   */ get variationAxes() {\n        let res = {};\n        if (!this.fvar) return res;\n        for (let axis of this.fvar.axis)res[axis.axisTag.trim()] = {\n            name: axis.name.en,\n            min: axis.minValue,\n            default: axis.defaultValue,\n            max: axis.maxValue\n        };\n        return res;\n    }\n    /**\n   * Returns an object describing the named variation instances\n   * that the font designer has specified. Keys are variation names\n   * and values are the variation settings for this instance.\n   *\n   * @type {object}\n   */ get namedVariations() {\n        let res = {};\n        if (!this.fvar) return res;\n        for (let instance of this.fvar.instance){\n            let settings = {};\n            for(let i = 0; i < this.fvar.axis.length; i++){\n                let axis = this.fvar.axis[i];\n                settings[axis.axisTag.trim()] = instance.coord[i];\n            }\n            res[instance.name.en] = settings;\n        }\n        return res;\n    }\n    /**\n   * Returns a new font with the given variation settings applied.\n   * Settings can either be an instance name, or an object containing\n   * variation tags as specified by the `variationAxes` property.\n   *\n   * @param {object} settings\n   * @return {TTFFont}\n   */ getVariation(settings) {\n        if (!(this.directory.tables.fvar && (this.directory.tables.gvar && this.directory.tables.glyf || this.directory.tables.CFF2))) throw new Error('Variations require a font with the fvar, gvar and glyf, or CFF2 tables.');\n        if (typeof settings === 'string') settings = this.namedVariations[settings];\n        if (typeof settings !== 'object') throw new Error('Variation settings must be either a variation name or settings object.');\n        // normalize the coordinates\n        let coords = this.fvar.axis.map((axis, i)=>{\n            let axisTag = axis.axisTag.trim();\n            if (axisTag in settings) return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));\n            else return axis.defaultValue;\n        });\n        let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(this.stream.buffer);\n        stream.pos = this._directoryPos;\n        let font = new $4c1709dee528ea76$export$2e2bcd8739ae039(stream, coords);\n        font._tables = this._tables;\n        return font;\n    }\n    get _variationProcessor() {\n        if (!this.fvar) return null;\n        let variationCoords = this.variationCoords;\n        // Ignore if no variation coords and not CFF2\n        if (!variationCoords && !this.CFF2) return null;\n        if (!variationCoords) variationCoords = this.fvar.axis.map((axis)=>axis.defaultValue);\n        return new (0, $0bb840cac04e911b$export$2e2bcd8739ae039)(this, variationCoords);\n    }\n    // Standardized format plugin API\n    getFont(name) {\n        return this.getVariation(name);\n    }\n    constructor(stream, variationCoords = null){\n        (0, _swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_10__._)(this, \"type\", 'TTF');\n        this.defaultLanguage = null;\n        this.stream = stream;\n        this.variationCoords = variationCoords;\n        this._directoryPos = this.stream.pos;\n        this._tables = {};\n        this._glyphs = {};\n        this._decodeDirectory();\n        // define properties for each table to lazily parse\n        for(let tag in this.directory.tables){\n            let table = this.directory.tables[tag];\n            if ((0, $c3395722bea751e2$export$2e2bcd8739ae039)[tag] && table.length > 0) Object.defineProperty(this, tag, {\n                get: this._getTable.bind(this, table)\n            });\n        }\n    }\n}\n(0, _swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"bbox\", null);\n(0, _swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"_cmapProcessor\", null);\n(0, _swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"characterSet\", null);\n(0, _swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"_layoutEngine\", null);\n(0, _swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"variationAxes\", null);\n(0, _swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"namedVariations\", null);\n(0, _swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"_variationProcessor\", null);\n\n\n\n\n\n\nlet $c1726355ecc5b889$var$WOFFDirectoryEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    offset: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, 'void', {\n        type: 'global'\n    }),\n    compLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    origChecksum: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nlet $c1726355ecc5b889$var$WOFFDirectory = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    flavor: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    numTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    totalSfntSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    majorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    minorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    metaOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    metaLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    metaOrigLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    privOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    privLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    tables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($c1726355ecc5b889$var$WOFFDirectoryEntry, 'numTables')\n});\n$c1726355ecc5b889$var$WOFFDirectory.process = function() {\n    let tables = {};\n    for (let table of this.tables)tables[table.tag] = table;\n    this.tables = tables;\n};\nvar $c1726355ecc5b889$export$2e2bcd8739ae039 = $c1726355ecc5b889$var$WOFFDirectory;\n\n\n\n\n\n\nclass $760785214b9fc52c$export$2e2bcd8739ae039 extends (0, $4c1709dee528ea76$export$2e2bcd8739ae039) {\n    static probe(buffer) {\n        return (0, $12727730ddfc8bfe$export$3d28c1996ced1f14).decode(buffer.slice(0, 4)) === 'wOFF';\n    }\n    _decodeDirectory() {\n        this.directory = (0, $c1726355ecc5b889$export$2e2bcd8739ae039).decode(this.stream, {\n            _startOffset: 0\n        });\n    }\n    _getTableStream(tag) {\n        let table = this.directory.tables[tag];\n        if (table) {\n            this.stream.pos = table.offset;\n            if (table.compLength < table.length) {\n                this.stream.pos += 2; // skip deflate header\n                let outBuffer = new Uint8Array(table.length);\n                let buf = (0, tiny_inflate__WEBPACK_IMPORTED_MODULE_7__)(this.stream.readBuffer(table.compLength - 2), outBuffer);\n                return new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(buf);\n            } else return this.stream;\n        }\n        return null;\n    }\n    constructor(...args){\n        super(...args);\n        (0, _swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_10__._)(this, \"type\", 'WOFF');\n    }\n}\n\n\n\n\n\n\n\n\n\nclass $8046190c9f1ad19e$export$2e2bcd8739ae039 extends (0, $69aac16029968692$export$2e2bcd8739ae039) {\n    _decode() {\n        // We have to decode in advance (in WOFF2Font), so just return the pre-decoded data.\n        return this._font._transformedGlyphs[this.id];\n    }\n    _getCBox() {\n        return this.path.bbox;\n    }\n    constructor(...args){\n        super(...args);\n        (0, _swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_10__._)(this, \"type\", 'WOFF2');\n    }\n}\n\n\n\nconst $c28ec7bbb3b8de3a$var$Base128 = {\n    decode (stream) {\n        let result = 0;\n        let iterable = [\n            0,\n            1,\n            2,\n            3,\n            4\n        ];\n        for(let j = 0; j < iterable.length; j++){\n            let i = iterable[j];\n            let code = stream.readUInt8();\n            // If any of the top seven bits are set then we're about to overflow.\n            if (result & 0xe0000000) throw new Error('Overflow');\n            result = result << 7 | code & 0x7f;\n            if ((code & 0x80) === 0) return result;\n        }\n        throw new Error('Bad base 128 number');\n    }\n};\nlet $c28ec7bbb3b8de3a$var$knownTags = [\n    'cmap',\n    'head',\n    'hhea',\n    'hmtx',\n    'maxp',\n    'name',\n    'OS/2',\n    'post',\n    'cvt ',\n    'fpgm',\n    'glyf',\n    'loca',\n    'prep',\n    'CFF ',\n    'VORG',\n    'EBDT',\n    'EBLC',\n    'gasp',\n    'hdmx',\n    'kern',\n    'LTSH',\n    'PCLT',\n    'VDMX',\n    'vhea',\n    'vmtx',\n    'BASE',\n    'GDEF',\n    'GPOS',\n    'GSUB',\n    'EBSC',\n    'JSTF',\n    'MATH',\n    'CBDT',\n    'CBLC',\n    'COLR',\n    'CPAL',\n    'SVG ',\n    'sbix',\n    'acnt',\n    'avar',\n    'bdat',\n    'bloc',\n    'bsln',\n    'cvar',\n    'fdsc',\n    'feat',\n    'fmtx',\n    'fvar',\n    'gvar',\n    'hsty',\n    'just',\n    'lcar',\n    'mort',\n    'morx',\n    'opbd',\n    'prop',\n    'trak',\n    'Zapf',\n    'Silf',\n    'Glat',\n    'Gloc',\n    'Feat',\n    'Sill'\n];\nlet $c28ec7bbb3b8de3a$var$WOFF2DirectoryEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    customTag: new restructure__WEBPACK_IMPORTED_MODULE_0__.Optional(new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4), (t)=>(t.flags & 0x3f) === 0x3f),\n    tag: (t)=>t.customTag || $c28ec7bbb3b8de3a$var$knownTags[t.flags & 0x3f],\n    length: $c28ec7bbb3b8de3a$var$Base128,\n    transformVersion: (t)=>t.flags >>> 6 & 0x03,\n    transformed: (t)=>t.tag === 'glyf' || t.tag === 'loca' ? t.transformVersion === 0 : t.transformVersion !== 0,\n    transformLength: new restructure__WEBPACK_IMPORTED_MODULE_0__.Optional($c28ec7bbb3b8de3a$var$Base128, (t)=>t.transformed)\n});\nlet $c28ec7bbb3b8de3a$var$WOFF2Directory = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    flavor: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    numTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    totalSfntSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    totalCompressedSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    majorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    minorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    metaOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    metaLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    metaOrigLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    privOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    privLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    tables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($c28ec7bbb3b8de3a$var$WOFF2DirectoryEntry, 'numTables')\n});\n$c28ec7bbb3b8de3a$var$WOFF2Directory.process = function() {\n    let tables = {};\n    for(let i = 0; i < this.tables.length; i++){\n        let table = this.tables[i];\n        tables[table.tag] = table;\n    }\n    return this.tables = tables;\n};\nvar $c28ec7bbb3b8de3a$export$2e2bcd8739ae039 = $c28ec7bbb3b8de3a$var$WOFF2Directory;\n\n\n\nclass $21ee218f84ac7f32$export$2e2bcd8739ae039 extends (0, $4c1709dee528ea76$export$2e2bcd8739ae039) {\n    static probe(buffer) {\n        return (0, $12727730ddfc8bfe$export$3d28c1996ced1f14).decode(buffer.slice(0, 4)) === 'wOF2';\n    }\n    _decodeDirectory() {\n        this.directory = (0, $c28ec7bbb3b8de3a$export$2e2bcd8739ae039).decode(this.stream);\n        this._dataPos = this.stream.pos;\n    }\n    _decompress() {\n        // decompress data and setup table offsets if we haven't already\n        if (!this._decompressed) {\n            this.stream.pos = this._dataPos;\n            let buffer = this.stream.readBuffer(this.directory.totalCompressedSize);\n            let decompressedSize = 0;\n            for(let tag in this.directory.tables){\n                let entry = this.directory.tables[tag];\n                entry.offset = decompressedSize;\n                decompressedSize += entry.transformLength != null ? entry.transformLength : entry.length;\n            }\n            let decompressed = (0, brotli_decompress_js__WEBPACK_IMPORTED_MODULE_8__)(buffer, decompressedSize);\n            if (!decompressed) throw new Error('Error decoding compressed data in WOFF2');\n            this.stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(decompressed);\n            this._decompressed = true;\n        }\n    }\n    _decodeTable(table) {\n        this._decompress();\n        return super._decodeTable(table);\n    }\n    // Override this method to get a glyph and return our\n    // custom subclass if there is a glyf table.\n    _getBaseGlyph(glyph, characters = []) {\n        if (!this._glyphs[glyph]) {\n            if (this.directory.tables.glyf && this.directory.tables.glyf.transformed) {\n                if (!this._transformedGlyphs) this._transformGlyfTable();\n                return this._glyphs[glyph] = new (0, $8046190c9f1ad19e$export$2e2bcd8739ae039)(glyph, characters, this);\n            } else return super._getBaseGlyph(glyph, characters);\n        }\n    }\n    _transformGlyfTable() {\n        this._decompress();\n        this.stream.pos = this.directory.tables.glyf.offset;\n        let table = $21ee218f84ac7f32$var$GlyfTable.decode(this.stream);\n        let glyphs = [];\n        for(let index = 0; index < table.numGlyphs; index++){\n            let glyph = {};\n            let nContours = table.nContours.readInt16BE();\n            glyph.numberOfContours = nContours;\n            if (nContours > 0) {\n                let nPoints = [];\n                let totalPoints = 0;\n                for(let i = 0; i < nContours; i++){\n                    let r = $21ee218f84ac7f32$var$read255UInt16(table.nPoints);\n                    totalPoints += r;\n                    nPoints.push(totalPoints);\n                }\n                glyph.points = $21ee218f84ac7f32$var$decodeTriplet(table.flags, table.glyphs, totalPoints);\n                for(let i = 0; i < nContours; i++)glyph.points[nPoints[i] - 1].endContour = true;\n                var instructionSize = $21ee218f84ac7f32$var$read255UInt16(table.glyphs);\n            } else if (nContours < 0) {\n                let haveInstructions = (0, $69aac16029968692$export$2e2bcd8739ae039).prototype._decodeComposite.call({\n                    _font: this\n                }, glyph, table.composites);\n                if (haveInstructions) var instructionSize = $21ee218f84ac7f32$var$read255UInt16(table.glyphs);\n            }\n            glyphs.push(glyph);\n        }\n        this._transformedGlyphs = glyphs;\n    }\n    constructor(...args){\n        super(...args);\n        (0, _swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_10__._)(this, \"type\", 'WOFF2');\n    }\n}\n// Special class that accepts a length and returns a sub-stream for that data\nclass $21ee218f84ac7f32$var$Substream {\n    decode(stream, parent) {\n        return new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(this._buf.decode(stream, parent));\n    }\n    constructor(length){\n        this.length = length;\n        this._buf = new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer(length);\n    }\n}\n// This struct represents the entire glyf table\nlet $21ee218f84ac7f32$var$GlyfTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    numGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    indexFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nContourStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    nPointsStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    flagStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    glyphStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    compositeStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    bboxStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    instructionStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    nContours: new $21ee218f84ac7f32$var$Substream('nContourStreamSize'),\n    nPoints: new $21ee218f84ac7f32$var$Substream('nPointsStreamSize'),\n    flags: new $21ee218f84ac7f32$var$Substream('flagStreamSize'),\n    glyphs: new $21ee218f84ac7f32$var$Substream('glyphStreamSize'),\n    composites: new $21ee218f84ac7f32$var$Substream('compositeStreamSize'),\n    bboxes: new $21ee218f84ac7f32$var$Substream('bboxStreamSize'),\n    instructions: new $21ee218f84ac7f32$var$Substream('instructionStreamSize')\n});\nconst $21ee218f84ac7f32$var$WORD_CODE = 253;\nconst $21ee218f84ac7f32$var$ONE_MORE_BYTE_CODE2 = 254;\nconst $21ee218f84ac7f32$var$ONE_MORE_BYTE_CODE1 = 255;\nconst $21ee218f84ac7f32$var$LOWEST_U_CODE = 253;\nfunction $21ee218f84ac7f32$var$read255UInt16(stream) {\n    let code = stream.readUInt8();\n    if (code === $21ee218f84ac7f32$var$WORD_CODE) return stream.readUInt16BE();\n    if (code === $21ee218f84ac7f32$var$ONE_MORE_BYTE_CODE1) return stream.readUInt8() + $21ee218f84ac7f32$var$LOWEST_U_CODE;\n    if (code === $21ee218f84ac7f32$var$ONE_MORE_BYTE_CODE2) return stream.readUInt8() + $21ee218f84ac7f32$var$LOWEST_U_CODE * 2;\n    return code;\n}\nfunction $21ee218f84ac7f32$var$withSign(flag, baseval) {\n    return flag & 1 ? baseval : -baseval;\n}\nfunction $21ee218f84ac7f32$var$decodeTriplet(flags, glyphs, nPoints) {\n    let y;\n    let x = y = 0;\n    let res = [];\n    for(let i = 0; i < nPoints; i++){\n        let dx = 0, dy = 0;\n        let flag = flags.readUInt8();\n        let onCurve = !(flag >> 7);\n        flag &= 0x7f;\n        if (flag < 10) {\n            dx = 0;\n            dy = $21ee218f84ac7f32$var$withSign(flag, ((flag & 14) << 7) + glyphs.readUInt8());\n        } else if (flag < 20) {\n            dx = $21ee218f84ac7f32$var$withSign(flag, ((flag - 10 & 14) << 7) + glyphs.readUInt8());\n            dy = 0;\n        } else if (flag < 84) {\n            var b0 = flag - 20;\n            var b1 = glyphs.readUInt8();\n            dx = $21ee218f84ac7f32$var$withSign(flag, 1 + (b0 & 0x30) + (b1 >> 4));\n            dy = $21ee218f84ac7f32$var$withSign(flag >> 1, 1 + ((b0 & 0x0c) << 2) + (b1 & 0x0f));\n        } else if (flag < 120) {\n            var b0 = flag - 84;\n            dx = $21ee218f84ac7f32$var$withSign(flag, 1 + (b0 / 12 << 8) + glyphs.readUInt8());\n            dy = $21ee218f84ac7f32$var$withSign(flag >> 1, 1 + (b0 % 12 >> 2 << 8) + glyphs.readUInt8());\n        } else if (flag < 124) {\n            var b1 = glyphs.readUInt8();\n            let b2 = glyphs.readUInt8();\n            dx = $21ee218f84ac7f32$var$withSign(flag, (b1 << 4) + (b2 >> 4));\n            dy = $21ee218f84ac7f32$var$withSign(flag >> 1, ((b2 & 0x0f) << 8) + glyphs.readUInt8());\n        } else {\n            dx = $21ee218f84ac7f32$var$withSign(flag, glyphs.readUInt16BE());\n            dy = $21ee218f84ac7f32$var$withSign(flag >> 1, glyphs.readUInt16BE());\n        }\n        x += dx;\n        y += dy;\n        res.push(new (0, $69aac16029968692$export$baf26146a414f24a)(onCurve, false, x, y));\n    }\n    return res;\n}\n\n\n\n\n\n\n\n\nlet $cd5853a56c68fec7$var$TTCHeader = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, {\n    0x00010000: {\n        numFonts: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, 'numFonts')\n    },\n    0x00020000: {\n        numFonts: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, 'numFonts'),\n        dsigTag: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        dsigLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        dsigOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n    }\n});\nclass $cd5853a56c68fec7$export$2e2bcd8739ae039 {\n    static probe(buffer) {\n        return (0, $12727730ddfc8bfe$export$3d28c1996ced1f14).decode(buffer.slice(0, 4)) === 'ttcf';\n    }\n    getFont(name) {\n        for (let offset of this.header.offsets){\n            let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(this.stream.buffer);\n            stream.pos = offset;\n            let font = new (0, $4c1709dee528ea76$export$2e2bcd8739ae039)(stream);\n            if (font.postscriptName === name || font.postscriptName instanceof Uint8Array && name instanceof Uint8Array && font.postscriptName.every((v, i)=>name[i] === v)) return font;\n        }\n        return null;\n    }\n    get fonts() {\n        let fonts = [];\n        for (let offset of this.header.offsets){\n            let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(this.stream.buffer);\n            stream.pos = offset;\n            fonts.push(new (0, $4c1709dee528ea76$export$2e2bcd8739ae039)(stream));\n        }\n        return fonts;\n    }\n    constructor(stream){\n        (0, _swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_10__._)(this, \"type\", 'TTC');\n        this.stream = stream;\n        if (stream.readString(4) !== 'ttcf') throw new Error('Not a TrueType collection');\n        this.header = $cd5853a56c68fec7$var$TTCHeader.decode(stream);\n    }\n}\n\n\n\n\n\nlet $05f49f930186144e$var$DFontName = new restructure__WEBPACK_IMPORTED_MODULE_0__.String(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8);\nlet $05f49f930186144e$var$DFontData = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    len: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    buf: new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer('len')\n});\nlet $05f49f930186144e$var$Ref = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    id: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nameOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    attr: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    dataOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint24,\n    handle: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nlet $05f49f930186144e$var$Type = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    name: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    maxTypeIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    refList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($05f49f930186144e$var$Ref, (t)=>t.maxTypeIndex + 1), {\n        type: 'parent'\n    })\n});\nlet $05f49f930186144e$var$TypeList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    types: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($05f49f930186144e$var$Type, (t)=>t.length + 1)\n});\nlet $05f49f930186144e$var$DFontMap = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, 24),\n    typeList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $05f49f930186144e$var$TypeList),\n    nameListOffset: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 'void')\n});\nlet $05f49f930186144e$var$DFontHeader = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    dataOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    map: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $05f49f930186144e$var$DFontMap),\n    dataLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    mapLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nclass $05f49f930186144e$export$2e2bcd8739ae039 {\n    static probe(buffer) {\n        let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(buffer);\n        try {\n            var header = $05f49f930186144e$var$DFontHeader.decode(stream);\n        } catch (e) {\n            return false;\n        }\n        for (let type of header.map.typeList.types){\n            if (type.name === 'sfnt') return true;\n        }\n        return false;\n    }\n    getFont(name) {\n        if (!this.sfnt) return null;\n        for (let ref of this.sfnt.refList){\n            let pos = this.header.dataOffset + ref.dataOffset + 4;\n            let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(this.stream.buffer.slice(pos));\n            let font = new (0, $4c1709dee528ea76$export$2e2bcd8739ae039)(stream);\n            if (font.postscriptName === name || font.postscriptName instanceof Uint8Array && name instanceof Uint8Array && font.postscriptName.every((v, i)=>name[i] === v)) return font;\n        }\n        return null;\n    }\n    get fonts() {\n        let fonts = [];\n        for (let ref of this.sfnt.refList){\n            let pos = this.header.dataOffset + ref.dataOffset + 4;\n            let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(this.stream.buffer.slice(pos));\n            fonts.push(new (0, $4c1709dee528ea76$export$2e2bcd8739ae039)(stream));\n        }\n        return fonts;\n    }\n    constructor(stream){\n        (0, _swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_10__._)(this, \"type\", 'DFont');\n        this.stream = stream;\n        this.header = $05f49f930186144e$var$DFontHeader.decode(this.stream);\n        for (let type of this.header.map.typeList.types){\n            for (let ref of type.refList)if (ref.nameOffset >= 0) {\n                this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;\n                ref.name = $05f49f930186144e$var$DFontName.decode(this.stream);\n            } else ref.name = null;\n            if (type.name === 'sfnt') this.sfnt = type;\n        }\n    }\n}\n\n\n// Register font formats\n(0, $d636bc798e7178db$export$36b2f24e97d43be)((0, $4c1709dee528ea76$export$2e2bcd8739ae039));\n(0, $d636bc798e7178db$export$36b2f24e97d43be)((0, $760785214b9fc52c$export$2e2bcd8739ae039));\n(0, $d636bc798e7178db$export$36b2f24e97d43be)((0, $21ee218f84ac7f32$export$2e2bcd8739ae039));\n(0, $d636bc798e7178db$export$36b2f24e97d43be)((0, $cd5853a56c68fec7$export$2e2bcd8739ae039));\n(0, $d636bc798e7178db$export$36b2f24e97d43be)((0, $05f49f930186144e$export$2e2bcd8739ae039));\n\n\n\n//# sourceMappingURL=module.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZm9udGtpdC9kaXN0L21vZHVsZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXl3QjtBQUM5dUI7QUFDbUM7QUFDSDtBQUNSO0FBQ29KO0FBQ3pKO0FBQ2pCO0FBQ0k7QUFDYTtBQUNlOzs7QUFHN0Q7QUFDQSwrQkFBK0IscURBQXFEO0FBQ3BGOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDBDQUEwQztBQUM3RDtBQUNBO0FBQ0EsMENBQTBDLHFEQUFtQjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQSxxQkFBcUIsK0JBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsK0JBQVM7QUFDcEM7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQU1BLDBDQUEwQywrQ0FBYTtBQUN2RCxlQUFlLCtDQUFhO0FBQzVCLGdCQUFnQiwrQ0FBYTtBQUM3QixhQUFhLDhDQUFZO0FBQ3pCLG1CQUFtQiwrQ0FBYTtBQUNoQyxDQUFDO0FBQ0QsMENBQTBDLCtDQUFhO0FBQ3ZELG1CQUFtQiwrQ0FBYTtBQUNoQyxpQkFBaUIsK0NBQWE7QUFDOUIsYUFBYSwrQ0FBYTtBQUMxQixDQUFDO0FBQ0Qsa0RBQWtELCtDQUFhO0FBQy9ELHVCQUF1QiwrQ0FB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7O0FBR0EscUVBQXFFO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQywrQ0FBYTtBQUM1RCxZQUFZLCtDQUFhO0FBQ3pCO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qyx3REFBc0IsQ0FBQyxnREFBYztBQUM1RTtBQUNBLGlCQUFpQiw4Q0FBWTtBQUM3QixpQkFBaUIsOENBQVk7QUFDN0IseUVBQXlFLCtDQUFhO0FBQ3RGO0FBQ0EsMkVBQTJFLCtDQUFhO0FBQ3hGO0FBQ0EsS0FBSztBQUNMO0FBQ0EsaUJBQWlCLDhDQUFZO0FBQzdCLGdCQUFnQiwrQ0FBYTtBQUM3QjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxtQkFBbUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiwyQkFBMkI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELDhCQUE4QjtBQUMzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUEsK0NBQStDLCtDQUFhO0FBQzVELGdCQUFnQiwrQ0FBYTtBQUM3QixpQkFBaUIsOENBQVk7QUFDN0IsQ0FBQztBQUNELG1EQUFtRCwrQ0FBYTtBQUNoRSxrQkFBa0IsK0NBQWE7QUFDL0Isa0JBQWtCLCtDQUFhO0FBQy9CLHdCQUF3Qiw4Q0FBWTtBQUNwQywyQkFBMkIsK0NBQWE7QUFDeEMsaUJBQWlCLDhDQUFZO0FBQzdCLENBQUM7Ozs7O0FBS0Qsb0RBQW9ELCtDQUFhO0FBQ2pFLFlBQVksOENBQVk7QUFDeEIsV0FBVyw4Q0FBWTtBQUN2QixrQkFBa0IsNkNBQVc7QUFDN0Isa0JBQWtCLDZDQUFXO0FBQzdCLGlCQUFpQiw4Q0FBWTtBQUM3QixrQkFBa0IsNkNBQVc7QUFDN0Isa0JBQWtCLDZDQUFXO0FBQzdCLGlCQUFpQiw4Q0FBWTtBQUM3QixDQUFDO0FBQ0Qsb0RBQW9ELCtDQUFhO0FBQ2pFLFlBQVksOENBQVk7QUFDeEIsV0FBVyw4Q0FBWTtBQUN2QixjQUFjLDZDQUFXO0FBQ3pCLGNBQWMsNkNBQVc7QUFDekIsYUFBYSw4Q0FBWTtBQUN6QixDQUFDO0FBQ0QsOENBQThDLCtDQUFhO0FBQzNELFdBQVcsK0NBQWE7QUFDeEIsYUFBYSw2Q0FBVztBQUN4QixhQUFhLDZDQUFXO0FBQ3hCLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCx3REFBc0I7QUFDeEU7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxpQkFBaUIsaURBQWUsQ0FBQyw4Q0FBWTtBQUM3Qyx1QkFBdUIsK0NBQWE7QUFDcEMsd0JBQXdCLDhDQUFZO0FBQ3BDLEtBQUs7QUFDTDtBQUNBO0FBQ0EsaUJBQWlCLGlEQUFlLENBQUMsOENBQVk7QUFDN0MsdUJBQXVCLCtDQUFhO0FBQ3BDLHdCQUF3Qiw4Q0FBWTtBQUNwQyxLQUFLO0FBQ0w7QUFDQTtBQUNBLGlCQUFpQiwrQ0FBYTtBQUM5QixrQkFBa0IsK0NBQWE7QUFDL0IsS0FBSztBQUNMO0FBQ0E7QUFDQSxpQkFBaUIsK0NBQWE7QUFDOUIsa0JBQWtCLCtDQUFhO0FBQy9CLEtBQUs7QUFDTDtBQUNBLGlCQUFpQiwrQ0FBYTtBQUM5QixrQkFBa0IsK0NBQWE7QUFDL0I7QUFDQSxDQUFDOzs7QUFHRCxnREFBZ0QsK0NBQWE7QUFDN0QsY0FBYyw2Q0FBVztBQUN6QixlQUFlLDZDQUFXO0FBQzFCLGNBQWMsOENBQVk7QUFDMUIseUJBQXlCLDZDQUFXO0FBQ3BDLDJCQUEyQiw2Q0FBVztBQUN0QyxpQkFBaUIsNkNBQVc7QUFDNUIsaUJBQWlCLDZDQUFXO0FBQzVCLGtCQUFrQiw2Q0FBVztBQUM3QixpQkFBaUIsNkNBQVc7QUFDNUIsZ0JBQWdCLDZDQUFXO0FBQzNCLGFBQWEsaURBQWUsQ0FBQyw2Q0FBVztBQUN4QyxDQUFDO0FBQ0QsK0NBQStDLCtDQUFhO0FBQzVELGVBQWUsK0NBQWE7QUFDNUIsWUFBWSwrQ0FBYTtBQUN6QixDQUFDO0FBQ0QsOENBQThDLHdEQUFzQixDQUFDLCtDQUFhO0FBQ2xGO0FBQ0EscUJBQXFCLCtDQUFhO0FBQ2xDLHlCQUF5QiwrQ0FBYTtBQUN0QyxLQUFLO0FBQ0w7QUFDQSx5QkFBeUIsOENBQVksQ0FBQywrQ0FBYTtBQUNuRCxLQUFLO0FBQ0w7QUFDQSxtQkFBbUIsK0NBQWE7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDQSx5QkFBeUIsOENBQVksQ0FBQywrQ0FBYTtBQUNuRCxLQUFLO0FBQ0w7QUFDQSxtQkFBbUIsK0NBQWE7QUFDaEMsd0JBQXdCLDhDQUFZO0FBQ3BDLEtBQUs7QUFDTDtBQUNBLG1CQUFtQiwrQ0FBYTtBQUNoQztBQUNBLG1CQUFtQiwrQ0FBYTtBQUNoQyw0QkFBNEIsOENBQVksQ0FBQywrQ0FBYTtBQUN0RDtBQUNBLENBQUM7QUFDRCxtREFBbUQsK0NBQWE7QUFDaEUscUJBQXFCLCtDQUFhO0FBQ2xDLG9CQUFvQiwrQ0FBYTtBQUNqQyxrQkFBa0IsZ0RBQWMsQ0FBQywrQ0FBYTtBQUM5QyxDQUFDO0FBQ0QsZ0RBQWdELCtDQUFhO0FBQzdELDRCQUE0QixnREFBYyxDQUFDLCtDQUFhLE1BQU0sOENBQVk7QUFDMUU7QUFDQSxLQUFLO0FBQ0wscUJBQXFCLCtDQUFhO0FBQ2xDLDRCQUE0QiwrQ0FBYTtBQUN6QyxjQUFjLCtDQUFhO0FBQzNCO0FBQ0E7QUFDQSxxQkFBcUIsK0NBQWE7QUFDbEMsbUJBQW1CLCtDQUFhO0FBQ2hDLFdBQVcsOENBQVk7QUFDdkIsV0FBVyw4Q0FBWTtBQUN2QixjQUFjLDhDQUFZO0FBQzFCLGVBQWUsaURBQWUsQ0FBQyw4Q0FBWTtBQUMzQztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsbURBQW1ELCtDQUFhO0FBQ2hFLGFBQWEsK0NBQWE7QUFDMUIsY0FBYywrQ0FBYTtBQUMzQixlQUFlLDhDQUFZO0FBQzNCLENBQUM7Ozs7QUFJRCwyQ0FBMkMsK0NBQWE7QUFDeEQsVUFBVSwrQ0FBYTtBQUN2QixnQkFBZ0IsK0NBQWE7QUFDN0Isc0JBQXNCLDhDQUFZLEtBQUssZ0RBQWMsQ0FBQywrQ0FBYTtBQUNuRSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLCtDQUFhO0FBQzVELGFBQWEsK0NBQWE7QUFDMUIsZUFBZSxpREFBZSxDQUFDLCtDQUFhO0FBQzVDO0FBQ0E7QUFDQSxrQkFBa0IsK0NBQWE7QUFDL0IscUJBQXFCLDhDQUFZLEtBQUssZ0RBQWMsQ0FBQywrQ0FBYTtBQUNsRSxDQUFDOzs7O0FBSUQsNENBQTRDLCtDQUFhO0FBQ3pELFNBQVMsK0NBQWE7QUFDdEIsa0JBQWtCLCtDQUFhO0FBQy9CLENBQUMsR0FBRztBQUNKO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCwrQ0FBYTtBQUM3RCxTQUFTLCtDQUFhO0FBQ3RCO0FBQ0EscUJBQXFCLCtDQUFhO0FBQ2xDO0FBQ0EsZUFBZSwrQ0FBYTtBQUM1QixDQUFDO0FBQ0QsbURBQW1ELCtDQUFhO0FBQ2hFLGFBQWEsK0NBQWE7QUFDMUIseUJBQXlCLCtDQUFhO0FBQ3RDLHlCQUF5QixnREFBYyxDQUFDLCtDQUFhLE1BQU0sOENBQVk7QUFDdkUsc0JBQXNCLGdEQUFjLENBQUMsK0NBQWEsTUFBTSw4Q0FBWTtBQUNwRTtBQUNBLEtBQUs7QUFDTCxxQkFBcUIsK0NBQWE7QUFDbEMsQ0FBQzs7OztBQUlELDRDQUE0QywrQ0FBYTtBQUN6RCxVQUFVLDhDQUFZO0FBQ3RCLFdBQVcsOENBQVk7QUFDdkIsU0FBUyw4Q0FBWTtBQUNyQixXQUFXLDhDQUFZO0FBQ3ZCLENBQUM7QUFDRCxtREFBbUQsd0RBQXNCLENBQUMsK0NBQWE7QUFDdkY7QUFDQSwyQkFBMkIsK0NBQWE7QUFDeEMscUJBQXFCLCtDQUFhO0FBQ2xDLHlCQUF5QiwrQ0FBYTtBQUN0QywwQkFBMEIsZ0RBQWMsQ0FBQywrQ0FBYSxNQUFNLDhDQUFZO0FBQ3hFLGdDQUFnQyw4Q0FBWSxDQUFDLCtDQUFhO0FBQzFELEtBQUs7QUFDTCxTQUFTO0FBQ1Q7QUFDQSxvQ0FBb0MsZ0RBQWMsQ0FBQywrQ0FBYSxNQUFNLDhDQUFZLENBQUMsK0NBQWE7QUFDaEcscUNBQXFDLGdEQUFjLENBQUMsK0NBQWEsTUFBTSw4Q0FBWSxDQUFDLCtDQUFhO0FBQ2pHLDBDQUEwQyxnREFBYyxDQUFDLCtDQUFhLE1BQU0sOENBQVksQ0FBQywrQ0FBYTtBQUN0RztBQUNBLENBQUM7Ozs7OztBQU1ELDBDQUEwQyx3REFBc0IsQ0FBQywrQ0FBYTtBQUM5RTtBQUNBLG9CQUFvQiw4Q0FBWTtBQUNoQyxLQUFLO0FBQ0w7QUFDQSxvQkFBb0IsOENBQVk7QUFDaEMsd0JBQXdCLCtDQUFhO0FBQ3JDLHdCQUF3QiwrQ0FBYTtBQUNyQyxLQUFLO0FBQ0w7QUFDQSxvQkFBb0IsOENBQVk7QUFDaEMseUJBQXlCLGdEQUFjLENBQUMsK0NBQWE7QUFDckQ7QUFDQSxDQUFDO0FBQ0QsMkNBQTJDLCtDQUFhO0FBQ3hELGtCQUFrQiwrQ0FBYTtBQUMvQixvQkFBb0IsK0NBQWE7QUFDakMsb0JBQW9CLDhDQUFZLEtBQUssZ0RBQWMsQ0FBQywrQ0FBYTtBQUNqRSxDQUFDO0FBQ0QsaURBQWlELCtDQUFhO0FBQzlELGFBQWEsK0NBQWE7QUFDMUIsa0JBQWtCLGdEQUFjLENBQUMsK0NBQWE7QUFDOUM7QUFDQSxLQUFLO0FBQ0wsa0JBQWtCLGdEQUFjLENBQUMsK0NBQWE7QUFDOUM7QUFDQSxLQUFLO0FBQ0wsQ0FBQztBQUNELHVDQUF1QywrQ0FBYTtBQUNwRCxrQkFBa0IsZ0RBQWMsQ0FBQywrQ0FBYTtBQUM5QyxrQkFBa0IsZ0RBQWMsQ0FBQywrQ0FBYTtBQUM5QyxxQkFBcUIsK0NBQWE7QUFDbEMsMkJBQTJCLDhDQUFZO0FBQ3ZDLENBQUM7QUFDRCxrREFBa0QsK0NBQWE7QUFDL0QsYUFBYSwrQ0FBYTtBQUMxQixnQkFBZ0IsZ0RBQWMsQ0FBQywrQ0FBYTtBQUM1QztBQUNBLEtBQUs7QUFDTCxDQUFDO0FBQ0QsMkNBQTJDLCtDQUFhO0FBQ3hELG9CQUFvQixnREFBYyxDQUFDLCtDQUFhO0FBQ2hELHVCQUF1QixnREFBYyxDQUFDLCtDQUFhO0FBQ25ELHNCQUFzQiwrQ0FBYTtBQUNuQyw0QkFBNEIsOENBQVk7QUFDeEMsQ0FBQztBQUNELGlEQUFpRCwrQ0FBYTtBQUM5RCxhQUFhLCtDQUFhO0FBQzFCLGdCQUFnQixnREFBYyxDQUFDLCtDQUFhO0FBQzVDO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRCwrQ0FBK0MsOENBQVkseUNBQXlDLCtDQUFhO0FBQ2pIO0FBQ0EsNENBQTRDLDhDQUFZLEtBQUssK0NBQWEsS0FBSywrQ0FBYTtBQUM1RixxQ0FBcUMsK0NBQWE7QUFDbEQscUJBQXFCLGdEQUFjLENBQUMsK0NBQWE7QUFDakQsd0JBQXdCLGdEQUFjLENBQUMsK0NBQWE7QUFDcEQsQ0FBQztBQUNELG1EQUFtRCx3REFBc0IsQ0FBQywrQ0FBYTtBQUN2RjtBQUNBLHVCQUF1QixnREFBYyxDQUFDLCtDQUFhO0FBQ25ELHNCQUFzQixnREFBYyxDQUFDLCtDQUFhO0FBQ2xELEtBQUs7QUFDTCxrQkFBa0I7QUFDbEI7QUFDQSxnQ0FBZ0MsZ0RBQWMsQ0FBQywrQ0FBYTtBQUM1RDtBQUNBLENBQUM7Ozs7OztBQU1ELDRDQUE0Qyw4Q0FBWSxDQUFDLCtDQUFhLEVBQUUsK0NBQWE7QUFDckYsMkNBQTJDLCtDQUFhO0FBQ3hELGtCQUFrQixnREFBYyxDQUFDLCtDQUFhO0FBQzlDLGdCQUFnQiwrQ0FBYTtBQUM3QixzQkFBc0IsOENBQVksS0FBSyxnREFBYyxDQUFDLCtDQUFhO0FBQ25FLENBQUM7QUFDRCwyQ0FBMkMsd0RBQXNCLENBQUMsK0NBQWE7QUFDL0U7QUFDQSxvQkFBb0IsOENBQVk7QUFDaEMsS0FBSztBQUNMO0FBQ0EseUJBQXlCLCtDQUFhO0FBQ3RDLEtBQUs7QUFDTDtBQUNBLG9CQUFvQiw4Q0FBWTtBQUNoQyx5QkFBeUIsZ0RBQWMsQ0FBQywrQ0FBYTtBQUNyRDtBQUNBLENBQUM7QUFDRCx5Q0FBeUMsOENBQVksS0FBSyxnREFBYyxDQUFDLCtDQUFhLHFDQUFxQywrQ0FBYTtBQUN4SSw2Q0FBNkMsK0NBQWE7QUFDMUQsa0JBQWtCLGdEQUFjLENBQUMsK0NBQWE7QUFDOUMsbUJBQW1CLCtDQUFhO0FBQ2hDLG1CQUFtQiw4Q0FBWSxLQUFLLGdEQUFjLENBQUMsK0NBQWE7QUFDaEUsQ0FBQztBQUNELGlEQUFpRCwrQ0FBYTtBQUM5RCx3QkFBd0IsK0NBQWE7QUFDckMsa0JBQWtCLCtDQUFhO0FBQy9CLGtCQUFrQiw4Q0FBWSxLQUFLLGdEQUFjLENBQUMsK0NBQWE7QUFDL0QsQ0FBQztBQUNELG1EQUFtRCx3REFBc0IsQ0FBQywrQ0FBYTtBQUN2RjtBQUNBLDJCQUEyQixnREFBYyxDQUFDLCtDQUFhO0FBQ3ZELHdCQUF3QixnREFBYyxDQUFDLCtDQUFhO0FBQ3BELDBCQUEwQixnREFBYyxDQUFDLCtDQUFhO0FBQ3RELGdDQUFnQyxnREFBYyxDQUFDLCtDQUFhO0FBQzVELEtBQUs7QUFDTCxrQkFBa0I7QUFDbEI7QUFDQSw4QkFBOEIsZ0RBQWMsQ0FBQywrQ0FBYTtBQUMxRCxLQUFLO0FBQ0w7QUFDQSw4QkFBOEIsZ0RBQWMsQ0FBQywrQ0FBYTtBQUMxRCxnQ0FBZ0MsZ0RBQWMsQ0FBQywrQ0FBYTtBQUM1RDtBQUNBLENBQUM7Ozs7OztBQU1ELDRDQUE0QyxpREFBZSxDQUFDLCtDQUFhO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDhDQUFZO0FBQzVCLGdCQUFnQiw4Q0FBWTtBQUM1QixjQUFjLDhDQUFZO0FBQzFCLGNBQWMsOENBQVk7QUFDMUIsb0JBQW9CLGdEQUFjLENBQUMsK0NBQWE7QUFDaEQ7QUFDQTtBQUNBLEtBQUs7QUFDTCxvQkFBb0IsZ0RBQWMsQ0FBQywrQ0FBYTtBQUNoRDtBQUNBO0FBQ0EsS0FBSztBQUNMLG9CQUFvQixnREFBYyxDQUFDLCtDQUFhO0FBQ2hEO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsb0JBQW9CLGdEQUFjLENBQUMsK0NBQWE7QUFDaEQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiwrQ0FBYTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCwrQ0FBYTtBQUM3RCxpQkFBaUIsK0NBQWE7QUFDOUI7QUFDQTtBQUNBLENBQUM7QUFDRCx3Q0FBd0MsOENBQVksd0NBQXdDLCtDQUFhO0FBQ3pHLDZDQUE2QywrQ0FBYTtBQUMxRDtBQUNBO0FBQ0EsQ0FBQztBQUNELHVDQUF1Qyx3REFBc0IsQ0FBQywrQ0FBYTtBQUMzRTtBQUNBLHFCQUFxQiw4Q0FBWTtBQUNqQyxxQkFBcUIsOENBQVk7QUFDakMsS0FBSztBQUNMO0FBQ0EscUJBQXFCLDhDQUFZO0FBQ2pDLHFCQUFxQiw4Q0FBWTtBQUNqQyxxQkFBcUIsK0NBQWE7QUFDbEMsS0FBSztBQUNMO0FBQ0EscUJBQXFCLDhDQUFZO0FBQ2pDLHFCQUFxQiw4Q0FBWTtBQUNqQywwQkFBMEIsZ0RBQWMsQ0FBQywrQ0FBYTtBQUN0RCwwQkFBMEIsZ0RBQWMsQ0FBQywrQ0FBYTtBQUN0RDtBQUNBLENBQUM7QUFDRCxnREFBZ0QsK0NBQWE7QUFDN0QscUJBQXFCLGdEQUFjLENBQUMsK0NBQWE7QUFDakQ7QUFDQSxLQUFLO0FBQ0wsb0JBQW9CLGdEQUFjLENBQUMsK0NBQWE7QUFDaEQ7QUFDQSxLQUFLO0FBQ0wsQ0FBQztBQUNELDJDQUEyQywrQ0FBYTtBQUN4RCxXQUFXLCtDQUFhO0FBQ3hCLG9CQUFvQixnREFBYyxDQUFDLCtDQUFhO0FBQ2hEO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRCwwQ0FBMEMsOENBQVksbUNBQW1DLCtDQUFhO0FBQ3RHLDJDQUEyQyw4Q0FBWSxLQUFLLGdEQUFjLENBQUMsK0NBQWE7QUFDeEYsMENBQTBDLDhDQUFZLG1DQUFtQywrQ0FBYTtBQUN0RyxnREFBZ0QsOENBQVksS0FBSyxnREFBYyxDQUFDLCtDQUFhO0FBQzdGLCtDQUErQyw4Q0FBWSx3Q0FBd0MsK0NBQWE7QUFDaEgsOENBQThDLDhDQUFZLEtBQUssZ0RBQWMsQ0FBQywrQ0FBYSx5Q0FBeUMsK0NBQWE7QUFDakosb0RBQW9ELHdEQUFzQjtBQUMxRSxXQUFXLHdEQUFzQixDQUFDLCtDQUFhO0FBQy9DO0FBQ0EsMEJBQTBCLGdEQUFjLENBQUMsK0NBQWE7QUFDdEQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLDBCQUEwQixnREFBYyxDQUFDLCtDQUFhO0FBQ3REO0FBQ0Esd0JBQXdCLCtDQUFhO0FBQ3JDLHdCQUF3QixrREFBZ0I7QUFDeEM7QUFDQSxLQUFLO0FBQ0wsV0FBVyx3REFBc0IsQ0FBQywrQ0FBYTtBQUMvQztBQUNBLDBCQUEwQixnREFBYyxDQUFDLCtDQUFhO0FBQ3REO0FBQ0E7QUFDQSwwQkFBMEIsK0NBQWE7QUFDdkMsMEJBQTBCLGtEQUFnQixLQUFLLGdEQUFjLENBQUMsK0NBQWE7QUFDM0UsU0FBUztBQUNUO0FBQ0EsMEJBQTBCLGdEQUFjLENBQUMsK0NBQWE7QUFDdEQ7QUFDQTtBQUNBLDJCQUEyQixnREFBYyxDQUFDLCtDQUFhO0FBQ3ZELDJCQUEyQixnREFBYyxDQUFDLCtDQUFhO0FBQ3ZELHlCQUF5QiwrQ0FBYTtBQUN0Qyx5QkFBeUIsK0NBQWE7QUFDdEMsOEJBQThCLGtEQUFnQixLQUFLLGtEQUFnQjtBQUNuRTtBQUNBLEtBQUs7QUFDTDtBQUNBLGdCQUFnQiwrQ0FBYTtBQUM3QixzQkFBc0IsZ0RBQWMsQ0FBQywrQ0FBYTtBQUNsRCx3QkFBd0IsK0NBQWE7QUFDckMsOEJBQThCLDhDQUFZO0FBQzFDLEtBQUs7QUFDTDtBQUNBLGdCQUFnQiwrQ0FBYTtBQUM3QiwwQkFBMEIsZ0RBQWMsQ0FBQywrQ0FBYTtBQUN0RCwwQkFBMEIsZ0RBQWMsQ0FBQywrQ0FBYTtBQUN0RCxvQkFBb0IsK0NBQWE7QUFDakMsdUJBQXVCLGdEQUFjLENBQUMsK0NBQWE7QUFDbkQsdUJBQXVCLGdEQUFjLENBQUMsK0NBQWE7QUFDbkQsS0FBSztBQUNMO0FBQ0EsZ0JBQWdCLCtDQUFhO0FBQzdCLDBCQUEwQixnREFBYyxDQUFDLCtDQUFhO0FBQ3RELDhCQUE4QixnREFBYyxDQUFDLCtDQUFhO0FBQzFELG9CQUFvQiwrQ0FBYTtBQUNqQyx1QkFBdUIsZ0RBQWMsQ0FBQywrQ0FBYTtBQUNuRCwyQkFBMkIsZ0RBQWMsQ0FBQywrQ0FBYTtBQUN2RCxLQUFLO0FBQ0w7QUFDQSxnQkFBZ0IsK0NBQWE7QUFDN0IsMkJBQTJCLGdEQUFjLENBQUMsK0NBQWE7QUFDdkQsMkJBQTJCLGdEQUFjLENBQUMsK0NBQWE7QUFDdkQsb0JBQW9CLCtDQUFhO0FBQ2pDLHdCQUF3QixnREFBYyxDQUFDLCtDQUFhO0FBQ3BELHdCQUF3QixnREFBYyxDQUFDLCtDQUFhO0FBQ3BELEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsK0NBQWE7QUFDaEMsb0JBQW9CLCtDQUFhO0FBQ2pDLHVCQUF1QixnREFBYyxDQUFDLCtDQUFhO0FBQ25EO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxtREFBbUQsd0RBQXNCLENBQUMsK0NBQWE7QUFDdkY7QUFDQSx3QkFBd0IsZ0RBQWMsQ0FBQywrQ0FBYTtBQUNwRCx5QkFBeUIsZ0RBQWMsQ0FBQywrQ0FBYTtBQUNyRCx3QkFBd0IsZ0RBQWMsQ0FBQywrQ0FBYTtBQUNwRCxLQUFLO0FBQ0wsa0JBQWtCO0FBQ2xCO0FBQ0EsK0JBQStCLGdEQUFjLENBQUMsK0NBQWE7QUFDM0Q7QUFDQSxDQUFDOzs7Ozs7QUFNRCx5Q0FBeUMsOENBQVksQ0FBQywrQ0FBYSxFQUFFLCtDQUFhO0FBQ2xGO0FBQ0EseUNBQXlDLCtDQUFhO0FBQ3RELFdBQVcsK0NBQWE7QUFDeEIsZUFBZSwrQ0FBYTtBQUM1QixvQkFBb0IsOENBQVksQ0FBQywrQ0FBYTtBQUM5QyxDQUFDO0FBQ0QsNENBQTRDLDhDQUFZLEtBQUssZ0RBQWMsQ0FBQywrQ0FBYSxtQ0FBbUMsK0NBQWE7QUFDekksMkNBQTJDLHdEQUFzQjtBQUNqRSxXQUFXLHdEQUFzQixDQUFDLCtDQUFhO0FBQy9DO0FBQ0EsMEJBQTBCLGdEQUFjLENBQUMsK0NBQWE7QUFDdEQsMEJBQTBCLDhDQUFZO0FBQ3RDLFNBQVM7QUFDVDtBQUNBLDBCQUEwQixnREFBYyxDQUFDLCtDQUFhO0FBQ3RELHdCQUF3QiwrQ0FBYTtBQUNyQyw0QkFBNEIsa0RBQWdCLENBQUMsK0NBQWE7QUFDMUQ7QUFDQSxLQUFLO0FBQ0w7QUFDQSxxQkFBcUIsK0NBQWE7QUFDbEMsc0JBQXNCLGdEQUFjLENBQUMsK0NBQWE7QUFDbEQsZUFBZSwrQ0FBYTtBQUM1Qix1QkFBdUIsa0RBQWdCLEtBQUssZ0RBQWMsQ0FBQywrQ0FBYTtBQUN4RSxLQUFLO0FBQ0w7QUFDQSxxQkFBcUIsK0NBQWE7QUFDbEMsc0JBQXNCLGdEQUFjLENBQUMsK0NBQWE7QUFDbEQsZUFBZSwrQ0FBYTtBQUM1QiwwQkFBMEIsa0RBQWdCLEtBQUssZ0RBQWMsQ0FBQywrQ0FBYTtBQUMzRSxLQUFLO0FBQ0w7QUFDQSxxQkFBcUIsK0NBQWE7QUFDbEMsc0JBQXNCLGdEQUFjLENBQUMsK0NBQWE7QUFDbEQsZUFBZSwrQ0FBYTtBQUM1QiwwQkFBMEIsa0RBQWdCLEtBQUssZ0RBQWMsQ0FBQywrQ0FBYTtBQUMzRSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLCtDQUFhO0FBQ2xDLG9CQUFvQiwrQ0FBYTtBQUNqQyx1QkFBdUIsZ0RBQWMsQ0FBQywrQ0FBYTtBQUNuRCxLQUFLO0FBQ0w7QUFDQSxxQkFBcUIsK0NBQWE7QUFDbEMsc0JBQXNCLGdEQUFjLENBQUMsK0NBQWE7QUFDbEQsK0JBQStCLDhDQUFZLEtBQUssZ0RBQWMsQ0FBQywrQ0FBYTtBQUM1RSw2QkFBNkIsK0NBQWE7QUFDMUMsK0JBQStCLDhDQUFZLEtBQUssZ0RBQWMsQ0FBQywrQ0FBYTtBQUM1RSxvQkFBb0IsK0NBQWE7QUFDakMseUJBQXlCLDhDQUFZLENBQUMsK0NBQWE7QUFDbkQ7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLG1EQUFtRCx3REFBc0IsQ0FBQywrQ0FBYTtBQUN2RjtBQUNBLHdCQUF3QixnREFBYyxDQUFDLCtDQUFhO0FBQ3BELHlCQUF5QixnREFBYyxDQUFDLCtDQUFhO0FBQ3JELHdCQUF3QixnREFBYyxDQUFDLCtDQUFhO0FBQ3BELEtBQUs7QUFDTCxrQkFBa0I7QUFDbEI7QUFDQSwrQkFBK0IsZ0RBQWMsQ0FBQywrQ0FBYTtBQUMzRDtBQUNBLENBQUM7Ozs7OztBQU1ELGdEQUFnRCw4Q0FBWSxDQUFDLCtDQUFhLEVBQUUsK0NBQWE7QUFDekYsNkNBQTZDLCtDQUFhO0FBQzFELDZCQUE2QixnREFBYyxDQUFDLCtDQUFhO0FBQ3pELDhCQUE4QixnREFBYyxDQUFDLCtDQUFhO0FBQzFELDZCQUE2QixnREFBYyxDQUFDLCtDQUFhO0FBQ3pELDhCQUE4QixnREFBYyxDQUFDLCtDQUFhO0FBQzFELDBCQUEwQixnREFBYyxDQUFDLCtDQUFhO0FBQ3RELDZCQUE2QixnREFBYyxDQUFDLCtDQUFhO0FBQ3pELDhCQUE4QixnREFBYyxDQUFDLCtDQUFhO0FBQzFELDZCQUE2QixnREFBYyxDQUFDLCtDQUFhO0FBQ3pELDhCQUE4QixnREFBYyxDQUFDLCtDQUFhO0FBQzFELDBCQUEwQixnREFBYyxDQUFDLCtDQUFhO0FBQ3RELENBQUM7QUFDRCw0Q0FBNEMsOENBQVksS0FBSyxnREFBYyxDQUFDLCtDQUFhLHVDQUF1QywrQ0FBYTtBQUM3SSxrREFBa0QsK0NBQWE7QUFDL0QsYUFBYSwrQ0FBYTtBQUMxQixxQkFBcUIsZ0RBQWMsQ0FBQywrQ0FBYTtBQUNqRCxDQUFDO0FBQ0QsMkNBQTJDLCtDQUFhO0FBQ3hELHdCQUF3QixnREFBYyxDQUFDLCtDQUFhLE1BQU0sOENBQVksQ0FBQywrQ0FBYSxFQUFFLCtDQUFhO0FBQ25HLHdCQUF3QixnREFBYyxDQUFDLCtDQUFhO0FBQ3BELGtCQUFrQiwrQ0FBYTtBQUMvQix3QkFBd0IsOENBQVk7QUFDcEMsQ0FBQztBQUNELGlEQUFpRCwrQ0FBYTtBQUM5RCxhQUFhLCtDQUFhO0FBQzFCLGdCQUFnQixnREFBYyxDQUFDLCtDQUFhO0FBQzVDO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRCxtREFBbUQsK0NBQWE7QUFDaEUsYUFBYSwrQ0FBYTtBQUMxQixpQkFBaUIsK0NBQWE7QUFDOUIsb0JBQW9CLDhDQUFZO0FBQ2hDLENBQUM7Ozs7O0FBS0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHNEQUFvQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLCtDQUFhO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxpREFBaUQsK0NBQWE7QUFDOUQsaUJBQWlCLCtDQUFhO0FBQzlCLGNBQWMsK0NBQWE7QUFDM0IsaUJBQWlCLDhDQUFZO0FBQzdCLENBQUM7QUFDRCxtREFBbUQsK0NBQWE7QUFDaEUsa0JBQWtCLCtDQUFhO0FBQy9CLGtCQUFrQiwrQ0FBYTtBQUMvQiw0QkFBNEIsZ0RBQWMsQ0FBQywrQ0FBYTtBQUN4RCw2QkFBNkIsZ0RBQWMsQ0FBQywrQ0FBYTtBQUN6RCxvQkFBb0IsZ0RBQWMsQ0FBQywrQ0FBYTtBQUNoRCxvQkFBb0IsZ0RBQWMsQ0FBQywrQ0FBYTtBQUNoRCxDQUFDOzs7O0FBSUQsMENBQTBDLCtDQUFhO0FBQ3ZELFlBQVksK0NBQWE7QUFDekIsWUFBWSwrQ0FBYTtBQUN6QixZQUFZLCtDQUFhO0FBQ3pCLENBQUM7QUFDRCwrQ0FBK0MsK0NBQWE7QUFDNUQsa0JBQWtCLGlEQUFlLENBQUMsK0NBQWE7QUFDL0MsaUJBQWlCLCtDQUFhO0FBQzlCLG1CQUFtQiwrQ0FBYTtBQUNoQyxDQUFDO0FBQ0QsbURBQW1ELCtDQUFhO0FBQ2hFLGVBQWUsK0NBQWE7QUFDNUIsZUFBZSwrQ0FBYTtBQUM1QixZQUFZLCtDQUFhO0FBQ3pCLG9CQUFvQiw4Q0FBWTtBQUNoQyx5QkFBeUIsOENBQVk7QUFDckMsQ0FBQzs7OztBQUlELDBDQUEwQywrQ0FBYTtBQUN2RCxrQkFBa0IsK0NBQWE7QUFDL0IsMkJBQTJCLGlEQUFlLENBQUMsK0NBQWE7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxtREFBbUQsK0NBQWE7QUFDaEUsYUFBYSwrQ0FBYTtBQUMxQixlQUFlLCtDQUFhO0FBQzVCLG9CQUFvQiw4Q0FBWTtBQUNoQyxDQUFDOzs7O0FBSUQsNkNBQTZDLCtDQUFhO0FBQzFELGVBQWUsOENBQVk7QUFDM0Isa0JBQWtCLDhDQUFZO0FBQzlCLGdCQUFnQiw4Q0FBWSxDQUFDLDhDQUFZO0FBQ3pDLENBQUM7QUFDRDtBQUNBLCtDQUErQywrQ0FBYTtBQUM1RCxhQUFhLCtDQUFhO0FBQzFCLGdCQUFnQiw4Q0FBWTtBQUM1QixzQkFBc0IsOENBQVk7QUFDbEMsaUJBQWlCLDhDQUFZO0FBQzdCLENBQUM7Ozs7QUFJRCx5Q0FBeUMsK0NBQWE7QUFDdEQsVUFBVSwrQ0FBYTtBQUN2QixXQUFXLCtDQUFhO0FBQ3hCLFdBQVcsOENBQVk7QUFDdkIsQ0FBQztBQUNELDJDQUEyQywrQ0FBYTtBQUN4RCxnQkFBZ0IsK0NBQWE7QUFDN0IsYUFBYSwrQ0FBYTtBQUMxQixpQkFBaUIsOENBQVksQ0FBQywrQ0FBYTtBQUMzQztBQUNBLENBQUM7QUFDRCwyQ0FBMkMsK0NBQWE7QUFDeEQ7QUFDQTtBQUNBLGdCQUFnQixrREFBZ0IsQ0FBQyw4Q0FBWTtBQUM3QyxDQUFDO0FBQ0QsNkNBQTZDLHdEQUFzQjtBQUNuRTtBQUNBLGdCQUFnQiwrQ0FBYTtBQUM3QixxQkFBcUIsK0NBQWE7QUFDbEMsdUJBQXVCLCtDQUFhO0FBQ3BDLG9CQUFvQiwrQ0FBYTtBQUNqQyxtQkFBbUIsOENBQVk7QUFDL0IsS0FBSztBQUNMO0FBQ0Esa0JBQWtCLCtDQUFhO0FBQy9CLHVCQUF1QixnREFBYyxDQUFDLCtDQUFhO0FBQ25EO0FBQ0EsU0FBUztBQUNULHdCQUF3QixnREFBYyxDQUFDLCtDQUFhO0FBQ3BEO0FBQ0EsU0FBUztBQUNULG1CQUFtQixnREFBYyxDQUFDLCtDQUFhO0FBQy9DO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBLG9CQUFvQiwrQ0FBYTtBQUNqQyx3QkFBd0IsOENBQVk7QUFDcEMsd0JBQXdCLDhDQUFZO0FBQ3BDLHlCQUF5Qiw4Q0FBWTtBQUNyQyxlQUFlLDhDQUFZO0FBQzNCLHVCQUF1Qiw4Q0FBWSxDQUFDLDhDQUFZO0FBQ2hELHVCQUF1Qiw4Q0FBWSxDQUFDLDhDQUFZO0FBQ2hELHdCQUF3Qiw4Q0FBWSxDQUFDLDhDQUFZO0FBQ2pELHVCQUF1Qiw4Q0FBWSxDQUFDLDhDQUFZO0FBQ2hEO0FBQ0EsQ0FBQztBQUNELDBDQUEwQyx3REFBc0I7QUFDaEU7QUFDQSxvQkFBb0IsK0NBQWE7QUFDakMsZ0JBQWdCLCtDQUFhO0FBQzdCLGdCQUFnQiw4Q0FBWTtBQUM1QixzQkFBc0IsaURBQWUsQ0FBQyw4Q0FBWTtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsaURBQWUsQ0FBQyw4Q0FBWTtBQUNqRCxLQUFLO0FBQ0w7QUFDQSxnQkFBZ0IsK0NBQWE7QUFDN0Isc0JBQXNCLGlEQUFlLENBQUMsOENBQVk7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDhDQUFZO0FBQzVCLG9CQUFvQiwrQ0FBYTtBQUNqQztBQUNBLHFCQUFxQixpREFBZSxDQUFDLDhDQUFZO0FBQ2pEO0FBQ0EsQ0FBQztBQUNELG1EQUFtRCx3REFBc0IsQ0FBQywrQ0FBYTtBQUN2RjtBQUNBLGlCQUFpQiwrQ0FBYTtBQUM5QixvQkFBb0IsOENBQVk7QUFDaEMsS0FBSztBQUNMO0FBQ0Esc0JBQXNCLGlEQUFlLENBQUMsK0NBQWE7QUFDbkQsaUJBQWlCLCtDQUFhO0FBQzlCLG9CQUFvQiw4Q0FBWTtBQUNoQztBQUNBLENBQUM7Ozs7QUFJRDtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsK0NBQWE7QUFDNUQsYUFBYSwrQ0FBYTtBQUMxQixlQUFlLCtDQUFhO0FBQzVCLGVBQWUsOENBQVksQ0FBQyw4Q0FBWTtBQUN4QyxDQUFDOzs7O0FBSUQ7QUFDQTtBQUNBLCtDQUErQywrQ0FBYTtBQUM1RCxhQUFhLCtDQUFhO0FBQzFCLGdCQUFnQiwrQ0FBYTtBQUM3QixXQUFXLCtDQUFhO0FBQ3hCLGFBQWEsK0NBQWE7QUFDMUIsV0FBVywrQ0FBYTtBQUN4QixnQkFBZ0IsK0NBQWE7QUFDN0IsZUFBZSwrQ0FBYTtBQUM1QixlQUFlLCtDQUFhO0FBQzVCLGtCQUFrQiwrQ0FBYTtBQUMvQiw2QkFBNkIsK0NBQWE7QUFDMUMsa0JBQWtCLCtDQUFhO0FBQy9CLHNCQUFzQiwrQ0FBYTtBQUNuQyxtQkFBbUIsK0NBQWE7QUFDaEMsZ0JBQWdCLDhDQUFZO0FBQzVCLGtCQUFrQixpREFBZSxDQUFDLDhDQUFZO0FBQzlDLENBQUM7Ozs7QUFJRDtBQUNBO0FBQ0Esc0NBQXNDLCtDQUFhO0FBQ25ELGNBQWMsOENBQVk7QUFDMUIsWUFBWSw4Q0FBWTtBQUN4QixpQkFBaUIsOENBQVk7QUFDN0IsZUFBZSw4Q0FBWTtBQUMzQixDQUFDO0FBQ0QsdUNBQXVDLCtDQUFhO0FBQ3BELGdCQUFnQiwrQ0FBYTtBQUM3QixVQUFVLDhDQUFZO0FBQ3RCLFVBQVUsOENBQVk7QUFDdEIsQ0FBQztBQUNELDBDQUEwQywrQ0FBYTtBQUN2RCxVQUFVLCtDQUFhO0FBQ3ZCLGFBQWEsOENBQVk7QUFDekIsV0FBVyw4Q0FBWTtBQUN2QixpQkFBaUIsOENBQVk7QUFDN0IsQ0FBQztBQUNELG1EQUFtRCwrQ0FBYTtBQUNoRSxhQUFhLCtDQUFhO0FBQzFCLGFBQWEsK0NBQWE7QUFDMUIsZUFBZSwrQ0FBYTtBQUM1QixxQkFBcUIsOENBQVk7QUFDakMsaUJBQWlCLDhDQUFZLENBQUMsK0NBQWE7QUFDM0MsZ0JBQWdCLDhDQUFZO0FBQzVCLENBQUM7Ozs7QUFJRDtBQUNBLCtDQUErQywrQ0FBYTtBQUM1RCxhQUFhLCtDQUFhO0FBQzFCLFlBQVksOENBQVk7QUFDeEIsYUFBYSw4Q0FBWTtBQUN6QixhQUFhLDhDQUFZO0FBQ3pCLHNCQUFzQiw4Q0FBWTtBQUNsQyx1QkFBdUIsOENBQVk7QUFDbkMsMEJBQTBCLDhDQUFZO0FBQ3RDLGdCQUFnQiw4Q0FBWTtBQUM1QixvQkFBb0IsOENBQVk7QUFDaEMsbUJBQW1CLDhDQUFZO0FBQy9CLGlCQUFpQiw4Q0FBWTtBQUM3QixrQkFBa0IsaURBQWUsQ0FBQyw4Q0FBWTtBQUM5QyxzQkFBc0IsOENBQVk7QUFDbEMscUJBQXFCLCtDQUFhO0FBQ2xDLENBQUM7Ozs7QUFJRCwwQ0FBMEMsK0NBQWE7QUFDdkQsYUFBYSwrQ0FBYTtBQUMxQixhQUFhLDhDQUFZO0FBQ3pCLENBQUM7QUFDRDtBQUNBLCtDQUErQywrQ0FBYTtBQUM1RCxpQkFBaUIsa0RBQWdCO0FBQ2pDLGtCQUFrQixrREFBZ0IsQ0FBQyw4Q0FBWTtBQUMvQyxDQUFDOzs7O0FBSUQsMENBQTBDLDhDQUFZO0FBQ3RELCtDQUErQywrQ0FBYTtBQUM1RDtBQUNBO0FBQ0EsQ0FBQztBQUNELHdDQUF3QywrQ0FBYTtBQUNyRCxlQUFlLCtDQUFhO0FBQzVCLHdCQUF3Qiw4Q0FBWTtBQUNwQyxDQUFDO0FBQ0QsbURBQW1ELCtDQUFhO0FBQ2hFLGFBQWEsZ0RBQWM7QUFDM0IsZUFBZSwrQ0FBYTtBQUM1QixpQkFBaUIsOENBQVk7QUFDN0IsQ0FBQzs7Ozs7QUFLRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLDJCQUEyQjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsOENBQVk7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsK0NBQWE7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsK0NBQWE7QUFDOUMsa0JBQWtCLCtDQUFhO0FBQy9CLGdCQUFnQiwrQ0FBYTtBQUM3QixxQkFBcUIsK0NBQWE7QUFDbEMsdUJBQXVCLCtDQUFhO0FBQ3BDLG9CQUFvQiwrQ0FBYTtBQUNqQyxLQUFLO0FBQ0wsa0NBQWtDLCtDQUFhO0FBQy9DLG1CQUFtQiwrQ0FBYTtBQUNoQyxvQkFBb0IsK0NBQWE7QUFDakM7QUFDQSxLQUFLO0FBQ0wsaUNBQWlDLCtDQUFhO0FBQzlDLG1CQUFtQiwrQ0FBYTtBQUNoQyxvQkFBb0IsK0NBQWE7QUFDakMsb0JBQW9CLGdEQUFjLENBQUMsK0NBQWEsTUFBTSw4Q0FBWTtBQUNsRTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0wsMkJBQTJCLCtDQUFhO0FBQ3hDLGVBQWUsK0NBQWE7QUFDNUI7QUFDQSxLQUFLO0FBQ0wsZUFBZSx3REFBc0IsQ0FBQywrQ0FBYTtBQUNuRDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSwwQkFBMEIsOENBQVk7QUFDdEMsU0FBUztBQUNUO0FBQ0E7QUFDQSwwQkFBMEIsOENBQVk7QUFDdEMsU0FBUztBQUNUO0FBQ0E7QUFDQSwwQkFBMEIsOENBQVk7QUFDdEMsU0FBUztBQUNUO0FBQ0Esd0JBQXdCLCtDQUFhO0FBQ3JDLG1CQUFtQiwrQ0FBYTtBQUNoQyx3QkFBd0IsOENBQVk7QUFDcEM7QUFDQSxLQUFLO0FBQ0w7QUFDQSxpRUFBaUUsZUFBZSwrQ0FBYTtBQUM3RjtBQUNBLGtCQUFrQiwrQ0FBYTtBQUMvQixlQUFlLCtDQUFhO0FBQzVCLEtBQUs7QUFDTCxvQkFBb0IsK0NBQWE7QUFDakMsdUVBQXVFLDhDQUFZLENBQUMsK0NBQWE7QUFDakcsMEJBQTBCLCtDQUFhO0FBQ3ZDLGtCQUFrQiwrQ0FBYTtBQUMvQix3QkFBd0IsZ0RBQWMsQ0FBQywrQ0FBYTtBQUNwRCx3QkFBd0IsZ0RBQWMsQ0FBQywrQ0FBYTtBQUNwRCx3QkFBd0IsZ0RBQWMsQ0FBQywrQ0FBYTtBQUNwRCxLQUFLO0FBQ0w7QUFDQTtBQUNBLGlFQUFpRSxlQUFlLCtDQUFhO0FBQzdGLCtCQUErQiwrQ0FBYTtBQUM1QztBQUNBO0FBQ0EsU0FBUztBQUNULG9CQUFvQiwrQ0FBYTtBQUNqQyxvQkFBb0IsOENBQVksQ0FBQyw4Q0FBWSxFQUFFLCtDQUFhO0FBQzVELEtBQUs7QUFDTDtBQUNBLHdCQUF3QiwrQ0FBYTtBQUNyQztBQUNBO0FBQ0EsZUFBZSwrQ0FBYTtBQUM1QixLQUFLO0FBQ0wsb0JBQW9CLCtDQUFhO0FBQ2pDLHVFQUF1RSw4Q0FBWSxDQUFDLDhDQUFZO0FBQ2hHLDJCQUEyQiwrQ0FBYTtBQUN4QyxrQkFBa0IsK0NBQWE7QUFDL0Isd0JBQXdCLGdEQUFjLENBQUMsK0NBQWE7QUFDcEQsd0JBQXdCLGdEQUFjLENBQUMsK0NBQWE7QUFDcEQsd0JBQXdCLGdEQUFjLENBQUMsK0NBQWE7QUFDcEQsS0FBSztBQUNMO0FBQ0E7OztBQUdBLDZDQUE2Qyx3REFBc0I7QUFDbkU7QUFDQSxvQkFBb0IsOENBQVksQ0FBQyw4Q0FBWTtBQUM3QyxLQUFLO0FBQ0w7QUFDQSxvQkFBb0IsOENBQVksQ0FBQyw4Q0FBWTtBQUM3Qyx3RUFBd0UsK0NBQWE7QUFDckYsS0FBSztBQUNMO0FBQ0EsdUJBQXVCLCtDQUFhO0FBQ3BDLDJCQUEyQiw4Q0FBWSxDQUFDLCtDQUFhO0FBQ3JELEtBQUs7QUFDTDtBQUNBLHVCQUF1QiwrQ0FBYTtBQUNwQywyQkFBMkIsOENBQVksQ0FBQywrQ0FBYTtBQUNyRCx3RUFBd0UsK0NBQWE7QUFDckY7QUFDQSxDQUFDO0FBQ0QsbURBQW1ELCtDQUFhO0FBQ2hFLGFBQWEsZ0RBQWM7QUFDM0IsWUFBWSwrQ0FBYTtBQUN6QixxQkFBcUIsK0NBQWE7QUFDbEM7QUFDQSxDQUFDOzs7O0FBSUQsd0NBQXdDLCtDQUFhO0FBQ3JELGFBQWEsK0NBQWE7QUFDMUIsZUFBZSw4Q0FBWTtBQUMzQjtBQUNBLENBQUM7QUFDRCw0Q0FBNEMsK0NBQWE7QUFDekQsYUFBYSwrQ0FBYTtBQUMxQixlQUFlLCtDQUFhO0FBQzVCLHNCQUFzQixnREFBYyxDQUFDLCtDQUFhLE1BQU0sOENBQVk7QUFDcEU7QUFDQSxLQUFLO0FBQ0wsc0JBQXNCLGlEQUFlLENBQUMsOENBQVk7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDhDQUFZO0FBQ2hDLGVBQWUsOENBQVk7QUFDM0I7QUFDQSxDQUFDO0FBQ0QsbURBQW1ELCtDQUFhO0FBQ2hFLGFBQWEsZ0RBQWM7QUFDM0Isc0JBQXNCLCtDQUFhO0FBQ25DLG1CQUFtQixpREFBZSxDQUFDLCtDQUFhO0FBQ2hELG1CQUFtQixpREFBZSxDQUFDLCtDQUFhO0FBQ2hELHNCQUFzQiw4Q0FBWTtBQUNsQyxDQUFDOzs7O0FBSUQscUNBQXFDLCtDQUFhO0FBQ2xELGlCQUFpQiwrQ0FBYTtBQUM5QixjQUFjLGdEQUFjO0FBQzVCLGtCQUFrQixnREFBYztBQUNoQyxjQUFjLGdEQUFjO0FBQzVCLFdBQVcsK0NBQWE7QUFDeEIsWUFBWSwrQ0FBYTtBQUN6QjtBQUNBLENBQUM7QUFDRCx5Q0FBeUMsK0NBQWE7QUFDdEQsWUFBWSwrQ0FBYTtBQUN6QjtBQUNBLFdBQVcsK0NBQWE7QUFDeEIsZUFBZSw4Q0FBWSxDQUFDLGdEQUFjO0FBQzFDLDBCQUEwQixpREFBZSxDQUFDLCtDQUFhO0FBQ3ZELENBQUM7QUFDRCxtREFBbUQsK0NBQWE7QUFDaEUsYUFBYSxnREFBYztBQUMzQixrQkFBa0IsK0NBQWE7QUFDL0Isb0JBQW9CLCtDQUFhO0FBQ2pDLGVBQWUsK0NBQWE7QUFDNUIsY0FBYywrQ0FBYTtBQUMzQixtQkFBbUIsK0NBQWE7QUFDaEMsa0JBQWtCLCtDQUFhO0FBQy9CLGNBQWMsOENBQVk7QUFDMUIsa0JBQWtCLDhDQUFZO0FBQzlCLENBQUM7Ozs7QUFJRCwwQ0FBMEMsOENBQVk7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQywrQ0FBYTtBQUNsRCxhQUFhLCtDQUFhO0FBQzFCLGtCQUFrQixpREFBZSxDQUFDLCtDQUFhO0FBQy9DLGVBQWUsK0NBQWE7QUFDNUIsc0JBQXNCLCtDQUFhO0FBQ25DLHNCQUFzQixnREFBYyxDQUFDLCtDQUFhLE1BQU0sOENBQVksS0FBSyw4Q0FBWTtBQUNyRixnQkFBZ0IsK0NBQWE7QUFDN0IsV0FBVywrQ0FBYTtBQUN4QixrQkFBa0IsK0NBQWE7QUFDL0IsaUJBQWlCLDhDQUFZLEtBQUssZ0RBQWM7QUFDaEQ7QUFDQTtBQUNBLEtBQUs7QUFDTCxDQUFDO0FBQ0Q7Ozs7O0FBS0EsMkNBQTJDLCtDQUFhO0FBQ3hELFlBQVksK0NBQWE7QUFDekIsY0FBYywrQ0FBYTtBQUMzQixxQkFBcUIsK0NBQWE7QUFDbEM7QUFDQSxDQUFDO0FBQ0QsaURBQWlELCtDQUFhO0FBQzlELGVBQWUsK0NBQWE7QUFDNUIscUJBQXFCLGdEQUFjO0FBQ25DLHVCQUF1QixnREFBYztBQUNyQyxvQkFBb0IsZ0RBQWM7QUFDbEMsc0JBQXNCLGdEQUFjO0FBQ3BDLGVBQWUsK0NBQWE7QUFDNUIsaUJBQWlCLCtDQUFhO0FBQzlCLENBQUM7QUFDRCxrREFBa0QsOENBQVkseUNBQXlDLCtDQUFhO0FBQ3BILDJDQUEyQyx3REFBc0I7QUFDakU7QUFDQSxvQkFBb0IsZ0RBQWM7QUFDbEMsb0JBQW9CLGdEQUFjO0FBQ2xDLGVBQWUsK0NBQWE7QUFDNUIsb0JBQW9CLDhDQUFZLENBQUMsK0NBQWEsRUFBRSwrQ0FBYTtBQUM3RCxLQUFLO0FBQ0w7QUFDQSxrQkFBa0IsK0NBQWE7QUFDL0IsS0FBSztBQUNMO0FBQ0Esd0JBQXdCLGdEQUFjO0FBQ3RDLGtCQUFrQiwrQ0FBYTtBQUMvQixvQkFBb0IsK0NBQWE7QUFDakMsS0FBSztBQUNMLFNBQVM7QUFDVDtBQUNBLHVCQUF1QiwrQ0FBYTtBQUNwQyxzQkFBc0IsZ0RBQWM7QUFDcEMsd0JBQXdCLGdEQUFjO0FBQ3RDLHNCQUFzQixnREFBYztBQUNwQyxLQUFLO0FBQ0w7QUFDQSxlQUFlLCtDQUFhO0FBQzVCLGVBQWUsK0NBQWE7QUFDNUI7QUFDQSxDQUFDO0FBQ0QsdUNBQXVDLCtDQUFhO0FBQ3BELGlCQUFpQiwrQ0FBYTtBQUM5QixnQkFBZ0IsK0NBQWE7QUFDN0Isa0JBQWtCLCtDQUFhO0FBQy9CO0FBQ0EsaUJBQWlCLGlEQUFlLENBQUMsOENBQVk7QUFDN0MsQ0FBQztBQUNELHVEQUF1RCw4Q0FBWSwrQkFBK0IsK0NBQWE7QUFDL0csc0RBQXNELCtDQUFhO0FBQ25FLHdFQUF3RSxnREFBYyxDQUFDLCtDQUFhO0FBQ3BHLENBQUM7QUFDRCxtREFBbUQsK0NBQWE7QUFDaEUsb0JBQW9CLGdEQUFjLENBQUMsK0NBQWE7QUFDaEQ7QUFDQSxLQUFLO0FBQ0wsZUFBZSwrQ0FBYTtBQUM1QiwrQkFBK0IsZ0RBQWMsQ0FBQywrQ0FBYTtBQUMzRDtBQUNBLEtBQUs7QUFDTCwrRUFBK0UsZ0RBQWMsQ0FBQywrQ0FBYTtBQUMzRztBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRCxtREFBbUQsK0NBQWE7QUFDaEUsYUFBYSwrQ0FBYTtBQUMxQixZQUFZLCtDQUFhO0FBQ3pCLG9CQUFvQixnREFBYyxDQUFDLCtDQUFhO0FBQ2hELGtCQUFrQixnREFBYyxDQUFDLCtDQUFhO0FBQzlDLENBQUM7Ozs7O0FBS0Q7QUFDQSxZQUFZLCtDQUFhO0FBQ3pCO0FBQ0E7QUFDQSxlQUFlLCtDQUFhO0FBQzVCLGtCQUFrQiwrQ0FBYTtBQUMvQjtBQUNBO0FBQ0Esd0JBQXdCLCtDQUFhO0FBQ3JDLHVCQUF1QiwrQ0FBYTtBQUNwQztBQUNBLGtEQUFrRCwrQ0FBYTtBQUMvRCxrRUFBa0UsZ0RBQWMsQ0FBQywrQ0FBYTtBQUM5RixDQUFDO0FBQ0QsNkNBQTZDLHdEQUFzQjtBQUNuRTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSwrQkFBK0IsZ0RBQWMsQ0FBQywrQ0FBYTtBQUMzRCxLQUFLO0FBQ0w7QUFDQTtBQUNBLDZCQUE2QixnREFBYyxDQUFDLCtDQUFhLHFEQUFxRCwrQ0FBYTtBQUMzSCx3QkFBd0IsZ0RBQWMsQ0FBQywrQ0FBYSxxREFBcUQsK0NBQWE7QUFDdEgsMEJBQTBCLGdEQUFjLENBQUMsK0NBQWEscURBQXFELCtDQUFhO0FBQ3hILEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSw4QkFBOEIsZ0RBQWMsQ0FBQywrQ0FBYSxxREFBcUQsK0NBQWE7QUFDNUg7QUFDQSxDQUFDO0FBQ0QseUNBQXlDLCtDQUFhO0FBQ3RELFlBQVksK0NBQWE7QUFDekIsY0FBYywrQ0FBYTtBQUMzQixVQUFVLDhDQUFZO0FBQ3RCLHFCQUFxQiwrQ0FBYTtBQUNsQztBQUNBLGlCQUFpQixpREFBZSxDQUFDLDhDQUFZO0FBQzdDLENBQUM7QUFDRCw2Q0FBNkMsK0NBQWE7QUFDMUQsaUJBQWlCLCtDQUFhO0FBQzlCLG9CQUFvQiwrQ0FBYTtBQUNqQyxpQkFBaUIsK0NBQWE7QUFDOUIsa0JBQWtCLCtDQUFhO0FBQy9CLENBQUM7QUFDRCwwQ0FBMEMsK0NBQWE7QUFDdkQsa0JBQWtCLCtDQUFhO0FBQy9CLGlCQUFpQiwrQ0FBYTtBQUM5QixxQkFBcUIsK0NBQWE7QUFDbEMsZ0JBQWdCLCtDQUFhO0FBQzdCLGtCQUFrQiw4Q0FBWTtBQUM5QixtQkFBbUIsOENBQVk7QUFDL0IsQ0FBQztBQUNELG1EQUFtRCwrQ0FBYTtBQUNoRSxhQUFhLCtDQUFhO0FBQzFCLGdCQUFnQixpREFBZSxDQUFDLCtDQUFhO0FBQzdDLGFBQWEsK0NBQWE7QUFDMUIsZ0JBQWdCLDhDQUFZO0FBQzVCLENBQUM7Ozs7O0FBS0QsOENBQThDLCtDQUFhO0FBQzNELFVBQVUsOENBQVk7QUFDdEIsU0FBUyw4Q0FBWTtBQUNyQixXQUFXLDhDQUFZO0FBQ3ZCLFlBQVksOENBQVk7QUFDeEIsQ0FBQztBQUNELG1EQUFtRCwrQ0FBYTtBQUNoRSxhQUFhLGdEQUFjO0FBQzNCLFlBQVksK0NBQWE7QUFDekI7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsMkNBQTJDLCtDQUFhO0FBQ3hELGFBQWEsK0NBQWE7QUFDMUIsY0FBYywrQ0FBYTtBQUMzQixnQkFBZ0IsZ0RBQWMsQ0FBQywrQ0FBYTtBQUM1QztBQUNBLEtBQUs7QUFDTCxZQUFZLCtDQUFhO0FBQ3pCLENBQUM7QUFDRCwwQ0FBMEMsK0NBQWE7QUFDdkQsYUFBYSwrQ0FBYTtBQUMxQixlQUFlLCtDQUFhO0FBQzVCLGlCQUFpQiwrQ0FBYTtBQUM5QixtQkFBbUIsK0NBQWE7QUFDaEMsZ0JBQWdCLCtDQUFhO0FBQzdCLGdCQUFnQiw4Q0FBWTtBQUM1QixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsb0RBQWtCO0FBQzlDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHdDQUF3QztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLFNBQVM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGFBQWE7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxxQkFBcUI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGFBQWE7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxTQUFTO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsbUJBQW1CO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFVBQVU7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsYUFBYTtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGdFQUFTO0FBQ2I7QUFDQTtBQUNBLElBQUksZ0VBQVM7QUFDYjtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBLGdDQUFnQyxnQ0FBZ0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSxjQUFjO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RSxhQUFhO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsdUJBQXVCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMscUJBQXFCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxpRUFBd0I7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHlEQUFnQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBLHlCQUF5Qix5REFBZ0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiw0QkFBNEI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTLHlDQUF5QyxLQUFLLEVBQUUsWUFBWTtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlDQUFpQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsbUJBQW1CLHlEQUF5RDtBQUM1RTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksZ0VBQVM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxLQUFLO0FBQ2xEO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsbUJBQW1CO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsdURBQWM7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCx1REFBYztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSw0REFBUTs7Ozs7OztBQU9aLDJDQUEyQyx5Q0FBa0I7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsMkNBQTJDO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsbUJBQW1CO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHVCQUF1QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsMkRBQWtCO0FBQ3pDO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsb0JBQW9CO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsbUNBQW1DO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Ysa0ZBQWtGLHNEQUFhO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELHFCQUFxQjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLDREQUFRO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDLDZDQUE2QztBQUM3Qyw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQyxtQ0FBbUM7QUFDbkMsbUNBQW1DO0FBQ25DLG1DQUFtQztBQUNuQyxvQ0FBb0M7QUFDcEMscUNBQXFDO0FBQ3JDLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQVVBO0FBQ0EseUNBQXlDLGdtM0NBQWdtM0M7OztBQUd6bzNDO0FBQ0EseUNBQXlDLDhWQUE4ViwyOEJBQTI4Qix3bU1BQXdtTTs7O0FBRzE3TztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQSxRQUFRLHVEQUF1RDtBQUMvRCwyQ0FBMkMseUNBQWtCO0FBQzdELG1EQUFtRCxnQ0FBVTtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsUUFBUTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGdCQUFnQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsU0FBUztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELFlBQVk7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1SUFBdUksMkRBQWtCO0FBQ3pKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFVQSxRQUFRLHFHQUFxRztBQUM3RywyQ0FBMkMseUNBQWtCO0FBQzdELG1EQUFtRCxnQ0FBVTtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxRQUFRO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLDREQUFRO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFVBQVU7QUFDckM7QUFDQTtBQUNBLDJCQUEyQixtQkFBbUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLHVCQUF1QjtBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsa0RBQWtEO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsU0FBUztBQUNwQztBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLFNBQVM7QUFDekM7QUFDQSx1SUFBdUk7QUFDdkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsc0NBQXNDO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQSwyRUFBMkUsd0JBQXdCO0FBQ25HO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0Esd0RBQXdELFFBQVE7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELFlBQVk7QUFDL0Q7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxXQUFXO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsd0JBQXdCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix3QkFBd0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxPQUFPO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxXQUFXO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDRCQUE0QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixtQkFBbUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw4Q0FBOEMsRUFBRSxlQUFlO0FBQ3JGLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSw2REFBNkQseUJBQXlCO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBLDJEQUEyRDtBQUMzRDtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsUUFBUTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFVBQVU7QUFDdkIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLG1CQUFtQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOENBQThDO0FBQzVEO0FBQ0EsbUNBQW1DLDhDQUE4QztBQUNqRjtBQUNBO0FBQ0EsaUVBQWlFLGFBQWE7QUFDOUU7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLHNCQUFzQixhQUFhO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsYUFBYTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSwwQkFBMEI7QUFDdkMsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RSxzREFBYTtBQUMzRjtBQUNBO0FBQ0E7QUFDQSxJQUFJLGdFQUFTO0FBQ2I7QUFDQTtBQUNBLElBQUksZ0VBQVM7QUFDYjtBQUNBO0FBQ0EsSUFBSSxnRUFBUztBQUNiO0FBQ0E7QUFDQSxJQUFJLGdFQUFTO0FBQ2I7QUFDQTtBQUNBLElBQUksZ0VBQVM7QUFDYjtBQUNBO0FBQ0EsSUFBSSxnRUFBUztBQUNiO0FBQ0E7Ozs7OztBQU1BO0FBQ0EsMkNBQTJDLCtDQUFhO0FBQ3hELHNCQUFzQiw4Q0FBWTtBQUNsQyxVQUFVLDhDQUFZO0FBQ3RCLFVBQVUsOENBQVk7QUFDdEIsVUFBVSw4Q0FBWTtBQUN0QixVQUFVLDhDQUFZO0FBQ3RCLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLDhDQUFZLENBQUMsK0NBQWE7QUFDN0QsaUNBQWlDLDhDQUFZLENBQUMsOENBQVksRUFBRSwrQ0FBYTtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLFdBQVc7QUFDMUM7QUFDQTtBQUNBLHVCQUF1QixrQkFBa0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixrQkFBa0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsa0JBQWtCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsNkJBQTZCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixtQkFBbUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDZHQUE2RztBQUMzSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIscUJBQXFCO0FBQ2hEO0FBQ0EsK0JBQStCLG9CQUFvQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1CQUFtQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIscUJBQXFCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isb0JBQW9CO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksNERBQVE7QUFDcEI7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxpQkFBaUI7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsZUFBZTtBQUM5RDtBQUNBLG1EQUFtRCx3QkFBd0I7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELFFBQVE7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxRQUFRO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxRQUFRO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELFFBQVE7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxVQUFVO0FBQ3ZCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxVQUFVO0FBQ3ZCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiwyQkFBMkI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZDtBQUNB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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksNERBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUcwWjtBQUMxWiIsInNvdXJjZXMiOlsiL2hvbWUvZ2FzY2F0L3ByaXNtYXF1YW50L3ByaXNtYS1xdWFudHVtL25vZGVfbW9kdWxlcy9mb250a2l0L2Rpc3QvbW9kdWxlLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RlY29kZVN0cmVhbSBhcyAkNTJaSWYkRGVjb2RlU3RyZWFtLCBTdHJ1Y3QgYXMgJDUyWklmJFN0cnVjdCwgU3RyaW5nIGFzICQ1MlpJZiRTdHJpbmcsIHVpbnQzMiBhcyAkNTJaSWYkdWludDMyLCBQb2ludGVyIGFzICQ1MlpJZiRQb2ludGVyLCB1aW50MTYgYXMgJDUyWklmJHVpbnQxNiwgQXJyYXkgYXMgJDUyWklmJEFycmF5LCBWb2lkUG9pbnRlciBhcyAkNTJaSWYkVm9pZFBvaW50ZXIsIGludDE2IGFzICQ1MlpJZiRpbnQxNiwgdWludDI0IGFzICQ1MlpJZiR1aW50MjQsIHVpbnQ4IGFzICQ1MlpJZiR1aW50OCwgVmVyc2lvbmVkU3RydWN0IGFzICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QsIExhenlBcnJheSBhcyAkNTJaSWYkTGF6eUFycmF5LCBSZXNlcnZlZCBhcyAkNTJaSWYkUmVzZXJ2ZWQsIGludDMyIGFzICQ1MlpJZiRpbnQzMiwgQml0ZmllbGQgYXMgJDUyWklmJEJpdGZpZWxkLCBmaXhlZDMyIGFzICQ1MlpJZiRmaXhlZDMyLCBCdWZmZXIgYXMgJDUyWklmJEJ1ZmZlciwgTnVtYmVyIGFzICQ1MlpJZiROdW1iZXIsIHJlc29sdmVMZW5ndGggYXMgJDUyWklmJHJlc29sdmVMZW5ndGgsIGZpeGVkMTYgYXMgJDUyWklmJGZpeGVkMTYsIFByb3BlcnR5RGVzY3JpcHRvciBhcyAkNTJaSWYkUHJvcGVydHlEZXNjcmlwdG9yLCBGaXhlZCBhcyAkNTJaSWYkRml4ZWQsIGludDggYXMgJDUyWklmJGludDgsIE9wdGlvbmFsIGFzICQ1MlpJZiRPcHRpb25hbCwgRW5jb2RlU3RyZWFtIGFzICQ1MlpJZiRFbmNvZGVTdHJlYW19IGZyb20gXCJyZXN0cnVjdHVyZVwiO1xuaW1wb3J0ICQ1MlpJZiRmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCB7XyBhcyAkNTJaSWYkX30gZnJvbSBcIkBzd2MvaGVscGVycy9fL19kZWZpbmVfcHJvcGVydHlcIjtcbmltcG9ydCB7XyBhcyAkNTJaSWYkXzF9IGZyb20gXCJAc3djL2hlbHBlcnMvXy9fdHNfZGVjb3JhdGVcIjtcbmltcG9ydCAkNTJaSWYkZmFzdGRlZXBlcXVhbCBmcm9tIFwiZmFzdC1kZWVwLWVxdWFsXCI7XG5pbXBvcnQge2dldENvbWJpbmluZ0NsYXNzIGFzICQ1MlpJZiRnZXRDb21iaW5pbmdDbGFzcywgZ2V0U2NyaXB0IGFzICQ1MlpJZiRnZXRTY3JpcHQsIGlzRGlnaXQgYXMgJDUyWklmJGlzRGlnaXQsIGdldENhdGVnb3J5IGFzICQ1MlpJZiRnZXRDYXRlZ29yeSwgaXNNYXJrIGFzICQ1MlpJZiRpc01hcmt9IGZyb20gXCJ1bmljb2RlLXByb3BlcnRpZXNcIjtcbmltcG9ydCAkNTJaSWYkdW5pY29kZXRyaWUgZnJvbSBcInVuaWNvZGUtdHJpZVwiO1xuaW1wb3J0ICQ1MlpJZiRkZmEgZnJvbSBcImRmYVwiO1xuaW1wb3J0ICQ1MlpJZiRjbG9uZSBmcm9tIFwiY2xvbmVcIjtcbmltcG9ydCAkNTJaSWYkdGlueWluZmxhdGUgZnJvbSBcInRpbnktaW5mbGF0ZVwiO1xuaW1wb3J0ICQ1MlpJZiRicm90bGlkZWNvbXByZXNzanMgZnJvbSBcImJyb3RsaS9kZWNvbXByZXNzLmpzXCI7XG5cblxuZnVuY3Rpb24gJHBhcmNlbCRleHBvcnQoZSwgbiwgdiwgcykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgbiwge2dldDogdiwgc2V0OiBzLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9KTtcbn1cblxuZnVuY3Rpb24gJHBhcmNlbCRpbnRlcm9wRGVmYXVsdChhKSB7XG4gIHJldHVybiBhICYmIGEuX19lc01vZHVsZSA/IGEuZGVmYXVsdCA6IGE7XG59XG52YXIgJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0cyA9IHt9O1xuXG4kcGFyY2VsJGV4cG9ydCgkZDYzNmJjNzk4ZTcxNzhkYiRleHBvcnRzLCBcImxvZ0Vycm9yc1wiLCAoKSA9PiAkZDYzNmJjNzk4ZTcxNzhkYiRleHBvcnQkYmQ1YzVkOGI4ZGNhZmQ3OCk7XG4kcGFyY2VsJGV4cG9ydCgkZDYzNmJjNzk4ZTcxNzhkYiRleHBvcnRzLCBcInJlZ2lzdGVyRm9ybWF0XCIsICgpID0+ICRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCQzNmIyZjI0ZTk3ZDQzYmUpO1xuJHBhcmNlbCRleHBvcnQoJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0cywgXCJjcmVhdGVcIiwgKCkgPT4gJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0JDE4NTgwMmZkNjk0ZWUxZjUpO1xuJHBhcmNlbCRleHBvcnQoJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0cywgXCJkZWZhdWx0TGFuZ3VhZ2VcIiwgKCkgPT4gJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0JDQyOTQwODk4ZGY4MTk5NDApO1xuJHBhcmNlbCRleHBvcnQoJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0cywgXCJzZXREZWZhdWx0TGFuZ3VhZ2VcIiwgKCkgPT4gJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0JDUxNTdlNzc4MGQ0NGNjMzYpO1xuXG5sZXQgJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0JGJkNWM1ZDhiOGRjYWZkNzggPSBmYWxzZTtcbmxldCAkZDYzNmJjNzk4ZTcxNzhkYiR2YXIkZm9ybWF0cyA9IFtdO1xuZnVuY3Rpb24gJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0JDM2YjJmMjRlOTdkNDNiZShmb3JtYXQpIHtcbiAgICAkZDYzNmJjNzk4ZTcxNzhkYiR2YXIkZm9ybWF0cy5wdXNoKGZvcm1hdCk7XG59XG5mdW5jdGlvbiAkZDYzNmJjNzk4ZTcxNzhkYiRleHBvcnQkMTg1ODAyZmQ2OTRlZTFmNShidWZmZXIsIHBvc3RzY3JpcHROYW1lKSB7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8ICRkNjM2YmM3OThlNzE3OGRiJHZhciRmb3JtYXRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgbGV0IGZvcm1hdCA9ICRkNjM2YmM3OThlNzE3OGRiJHZhciRmb3JtYXRzW2ldO1xuICAgICAgICBpZiAoZm9ybWF0LnByb2JlKGJ1ZmZlcikpIHtcbiAgICAgICAgICAgIGxldCBmb250ID0gbmV3IGZvcm1hdChuZXcgKDAsICQ1MlpJZiREZWNvZGVTdHJlYW0pKGJ1ZmZlcikpO1xuICAgICAgICAgICAgaWYgKHBvc3RzY3JpcHROYW1lKSByZXR1cm4gZm9udC5nZXRGb250KHBvc3RzY3JpcHROYW1lKTtcbiAgICAgICAgICAgIHJldHVybiBmb250O1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBmb250IGZvcm1hdCcpO1xufVxubGV0ICRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCQ0Mjk0MDg5OGRmODE5OTQwID0gJ2VuJztcbmZ1bmN0aW9uICRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCQ1MTU3ZTc3ODBkNDRjYzM2KGxhbmcgPSAnZW4nKSB7XG4gICAgJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0JDQyOTQwODk4ZGY4MTk5NDAgPSBsYW5nO1xufVxuXG5cbnZhciAkYjQyMmIxZTAxM2NkNjAxMCRleHBvcnRzID0ge307XG5cbiRwYXJjZWwkZXhwb3J0KCRiNDIyYjFlMDEzY2Q2MDEwJGV4cG9ydHMsIFwib3BlblN5bmNcIiwgKCkgPT4gJGI0MjJiMWUwMTNjZDYwMTAkZXhwb3J0JGZhNTQ5OWVkYjFhYjQxNGEpO1xuJHBhcmNlbCRleHBvcnQoJGI0MjJiMWUwMTNjZDYwMTAkZXhwb3J0cywgXCJvcGVuXCIsICgpID0+ICRiNDIyYjFlMDEzY2Q2MDEwJGV4cG9ydCQzY2U2OTQ5ZjIwY2VhNzY1KTtcblxuXG5mdW5jdGlvbiAkYjQyMmIxZTAxM2NkNjAxMCRleHBvcnQkZmE1NDk5ZWRiMWFiNDE0YShmaWxlbmFtZSwgcG9zdHNjcmlwdE5hbWUpIHtcbiAgICBsZXQgYnVmZmVyID0gKDAsICQ1MlpJZiRmcykucmVhZEZpbGVTeW5jKGZpbGVuYW1lKTtcbiAgICByZXR1cm4gKDAsICRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCQxODU4MDJmZDY5NGVlMWY1KShidWZmZXIsIHBvc3RzY3JpcHROYW1lKTtcbn1cbmFzeW5jIGZ1bmN0aW9uICRiNDIyYjFlMDEzY2Q2MDEwJGV4cG9ydCQzY2U2OTQ5ZjIwY2VhNzY1KGZpbGVuYW1lLCBwb3N0c2NyaXB0TmFtZSwgY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIHBvc3RzY3JpcHROYW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNhbGxiYWNrID0gcG9zdHNjcmlwdE5hbWU7XG4gICAgICAgIHBvc3RzY3JpcHROYW1lID0gbnVsbDtcbiAgICB9XG4gICAgbGV0IGJ1ZmZlciA9IGF3YWl0ICgwLCAkNTJaSWYkZnMpLnByb21pc2VzLnJlYWRGaWxlKGZpbGVuYW1lKTtcbiAgICByZXR1cm4gKDAsICRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCQxODU4MDJmZDY5NGVlMWY1KShidWZmZXIsIHBvc3RzY3JpcHROYW1lKTtcbn1cblxuXG5cblxuXG4vKipcbiAqIFRoaXMgZGVjb3JhdG9yIGNhY2hlcyB0aGUgcmVzdWx0cyBvZiBhIGdldHRlciBvciBtZXRob2Qgc3VjaCB0aGF0XG4gKiB0aGUgcmVzdWx0cyBhcmUgbGF6aWx5IGNvbXB1dGVkIG9uY2UsIGFuZCB0aGVuIGNhY2hlZC5cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gJGU3MTU2NWYyY2UwOWNiNmIkZXhwb3J0JDY5YTMyMDlmMWEwNmMwNGQodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpIHtcbiAgICBpZiAoZGVzY3JpcHRvci5nZXQpIHtcbiAgICAgICAgbGV0IGdldCA9IGRlc2NyaXB0b3IuZ2V0O1xuICAgICAgICBkZXNjcmlwdG9yLmdldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gZ2V0LmNhbGwodGhpcyk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLnZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGxldCBmbiA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXQgKCkge1xuICAgICAgICAgICAgICAgIGxldCBjYWNoZSA9IG5ldyBNYXA7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gbWVtb2l6ZWQoLi4uYXJncykge1xuICAgICAgICAgICAgICAgICAgICBsZXQga2V5ID0gYXJncy5sZW5ndGggPiAwID8gYXJnc1swXSA6ICd2YWx1ZSc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWNoZS5oYXMoa2V5KSkgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gZm4uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlLnNldChrZXksIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBrZXksIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG1lbW9pemVkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lbW9pemVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn1cblxuXG5cblxuXG5sZXQgJDI2YTYyMjA1YWQwNjU3NGUkdmFyJFN1YkhlYWRlciA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBmaXJzdENvZGU6ICQ1MlpJZiR1aW50MTYsXG4gICAgZW50cnlDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICBpZERlbHRhOiAkNTJaSWYkaW50MTYsXG4gICAgaWRSYW5nZU9mZnNldDogJDUyWklmJHVpbnQxNlxufSk7XG5sZXQgJDI2YTYyMjA1YWQwNjU3NGUkdmFyJENtYXBHcm91cCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBzdGFydENoYXJDb2RlOiAkNTJaSWYkdWludDMyLFxuICAgIGVuZENoYXJDb2RlOiAkNTJaSWYkdWludDMyLFxuICAgIGdseXBoSUQ6ICQ1MlpJZiR1aW50MzJcbn0pO1xubGV0ICQyNmE2MjIwNWFkMDY1NzRlJHZhciRVbmljb2RlVmFsdWVSYW5nZSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBzdGFydFVuaWNvZGVWYWx1ZTogJDUyWklmJHVpbnQyNCxcbiAgICBhZGRpdGlvbmFsQ291bnQ6ICQ1MlpJZiR1aW50OFxufSk7XG5sZXQgJDI2YTYyMjA1YWQwNjU3NGUkdmFyJFVWU01hcHBpbmcgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdW5pY29kZVZhbHVlOiAkNTJaSWYkdWludDI0LFxuICAgIGdseXBoSUQ6ICQ1MlpJZiR1aW50MTZcbn0pO1xubGV0ICQyNmE2MjIwNWFkMDY1NzRlJHZhciREZWZhdWx0VVZTID0gbmV3ICQ1MlpJZiRBcnJheSgkMjZhNjIyMDVhZDA2NTc0ZSR2YXIkVW5pY29kZVZhbHVlUmFuZ2UsICQ1MlpJZiR1aW50MzIpO1xubGV0ICQyNmE2MjIwNWFkMDY1NzRlJHZhciROb25EZWZhdWx0VVZTID0gbmV3ICQ1MlpJZiRBcnJheSgkMjZhNjIyMDVhZDA2NTc0ZSR2YXIkVVZTTWFwcGluZywgJDUyWklmJHVpbnQzMik7XG5sZXQgJDI2YTYyMjA1YWQwNjU3NGUkdmFyJFZhclNlbGVjdG9yUmVjb3JkID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHZhclNlbGVjdG9yOiAkNTJaSWYkdWludDI0LFxuICAgIGRlZmF1bHRVVlM6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCAkMjZhNjIyMDVhZDA2NTc0ZSR2YXIkRGVmYXVsdFVWUywge1xuICAgICAgICB0eXBlOiAncGFyZW50J1xuICAgIH0pLFxuICAgIG5vbkRlZmF1bHRVVlM6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCAkMjZhNjIyMDVhZDA2NTc0ZSR2YXIkTm9uRGVmYXVsdFVWUywge1xuICAgICAgICB0eXBlOiAncGFyZW50J1xuICAgIH0pXG59KTtcbmxldCAkMjZhNjIyMDVhZDA2NTc0ZSR2YXIkQ21hcFN1YnRhYmxlID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoJDUyWklmJHVpbnQxNiwge1xuICAgIDA6IHtcbiAgICAgICAgbGVuZ3RoOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBsYW5ndWFnZTogJDUyWklmJHVpbnQxNixcbiAgICAgICAgY29kZU1hcDogbmV3ICQ1MlpJZiRMYXp5QXJyYXkoJDUyWklmJHVpbnQ4LCAyNTYpXG4gICAgfSxcbiAgICAyOiB7XG4gICAgICAgIGxlbmd0aDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgbGFuZ3VhZ2U6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHN1YkhlYWRlcktleXM6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQxNiwgMjU2KSxcbiAgICAgICAgc3ViSGVhZGVyQ291bnQ6ICh0KT0+TWF0aC5tYXguYXBwbHkoTWF0aCwgdC5zdWJIZWFkZXJLZXlzKSxcbiAgICAgICAgc3ViSGVhZGVyczogbmV3ICQ1MlpJZiRMYXp5QXJyYXkoJDI2YTYyMjA1YWQwNjU3NGUkdmFyJFN1YkhlYWRlciwgJ3N1YkhlYWRlckNvdW50JyksXG4gICAgICAgIGdseXBoSW5kZXhBcnJheTogbmV3ICQ1MlpJZiRMYXp5QXJyYXkoJDUyWklmJHVpbnQxNiwgJ3N1YkhlYWRlckNvdW50JylcbiAgICB9LFxuICAgIDQ6IHtcbiAgICAgICAgbGVuZ3RoOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBsYW5ndWFnZTogJDUyWklmJHVpbnQxNixcbiAgICAgICAgc2VnQ291bnRYMjogJDUyWklmJHVpbnQxNixcbiAgICAgICAgc2VnQ291bnQ6ICh0KT0+dC5zZWdDb3VudFgyID4+IDEsXG4gICAgICAgIHNlYXJjaFJhbmdlOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBlbnRyeVNlbGVjdG9yOiAkNTJaSWYkdWludDE2LFxuICAgICAgICByYW5nZVNoaWZ0OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBlbmRDb2RlOiBuZXcgJDUyWklmJExhenlBcnJheSgkNTJaSWYkdWludDE2LCAnc2VnQ291bnQnKSxcbiAgICAgICAgcmVzZXJ2ZWRQYWQ6IG5ldyAkNTJaSWYkUmVzZXJ2ZWQoJDUyWklmJHVpbnQxNiksXG4gICAgICAgIHN0YXJ0Q29kZTogbmV3ICQ1MlpJZiRMYXp5QXJyYXkoJDUyWklmJHVpbnQxNiwgJ3NlZ0NvdW50JyksXG4gICAgICAgIGlkRGVsdGE6IG5ldyAkNTJaSWYkTGF6eUFycmF5KCQ1MlpJZiRpbnQxNiwgJ3NlZ0NvdW50JyksXG4gICAgICAgIGlkUmFuZ2VPZmZzZXQ6IG5ldyAkNTJaSWYkTGF6eUFycmF5KCQ1MlpJZiR1aW50MTYsICdzZWdDb3VudCcpLFxuICAgICAgICBnbHlwaEluZGV4QXJyYXk6IG5ldyAkNTJaSWYkTGF6eUFycmF5KCQ1MlpJZiR1aW50MTYsICh0KT0+KHQubGVuZ3RoIC0gdC5fY3VycmVudE9mZnNldCkgLyAyKVxuICAgIH0sXG4gICAgNjoge1xuICAgICAgICBsZW5ndGg6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGxhbmd1YWdlOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBmaXJzdENvZGU6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGVudHJ5Q291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGdseXBoSW5kaWNlczogbmV3ICQ1MlpJZiRMYXp5QXJyYXkoJDUyWklmJHVpbnQxNiwgJ2VudHJ5Q291bnQnKVxuICAgIH0sXG4gICAgODoge1xuICAgICAgICByZXNlcnZlZDogbmV3ICQ1MlpJZiRSZXNlcnZlZCgkNTJaSWYkdWludDE2KSxcbiAgICAgICAgbGVuZ3RoOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBsYW5ndWFnZTogJDUyWklmJHVpbnQxNixcbiAgICAgICAgaXMzMjogbmV3ICQ1MlpJZiRMYXp5QXJyYXkoJDUyWklmJHVpbnQ4LCA4MTkyKSxcbiAgICAgICAgbkdyb3VwczogJDUyWklmJHVpbnQzMixcbiAgICAgICAgZ3JvdXBzOiBuZXcgJDUyWklmJExhenlBcnJheSgkMjZhNjIyMDVhZDA2NTc0ZSR2YXIkQ21hcEdyb3VwLCAnbkdyb3VwcycpXG4gICAgfSxcbiAgICAxMDoge1xuICAgICAgICByZXNlcnZlZDogbmV3ICQ1MlpJZiRSZXNlcnZlZCgkNTJaSWYkdWludDE2KSxcbiAgICAgICAgbGVuZ3RoOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBsYW5ndWFnZTogJDUyWklmJHVpbnQzMixcbiAgICAgICAgZmlyc3RDb2RlOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBlbnRyeUNvdW50OiAkNTJaSWYkdWludDMyLFxuICAgICAgICBnbHlwaEluZGljZXM6IG5ldyAkNTJaSWYkTGF6eUFycmF5KCQ1MlpJZiR1aW50MTYsICdudW1DaGFycycpXG4gICAgfSxcbiAgICAxMjoge1xuICAgICAgICByZXNlcnZlZDogbmV3ICQ1MlpJZiRSZXNlcnZlZCgkNTJaSWYkdWludDE2KSxcbiAgICAgICAgbGVuZ3RoOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBsYW5ndWFnZTogJDUyWklmJHVpbnQzMixcbiAgICAgICAgbkdyb3VwczogJDUyWklmJHVpbnQzMixcbiAgICAgICAgZ3JvdXBzOiBuZXcgJDUyWklmJExhenlBcnJheSgkMjZhNjIyMDVhZDA2NTc0ZSR2YXIkQ21hcEdyb3VwLCAnbkdyb3VwcycpXG4gICAgfSxcbiAgICAxMzoge1xuICAgICAgICByZXNlcnZlZDogbmV3ICQ1MlpJZiRSZXNlcnZlZCgkNTJaSWYkdWludDE2KSxcbiAgICAgICAgbGVuZ3RoOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBsYW5ndWFnZTogJDUyWklmJHVpbnQzMixcbiAgICAgICAgbkdyb3VwczogJDUyWklmJHVpbnQzMixcbiAgICAgICAgZ3JvdXBzOiBuZXcgJDUyWklmJExhenlBcnJheSgkMjZhNjIyMDVhZDA2NTc0ZSR2YXIkQ21hcEdyb3VwLCAnbkdyb3VwcycpXG4gICAgfSxcbiAgICAxNDoge1xuICAgICAgICBsZW5ndGg6ICQ1MlpJZiR1aW50MzIsXG4gICAgICAgIG51bVJlY29yZHM6ICQ1MlpJZiR1aW50MzIsXG4gICAgICAgIHZhclNlbGVjdG9yczogbmV3ICQ1MlpJZiRMYXp5QXJyYXkoJDI2YTYyMjA1YWQwNjU3NGUkdmFyJFZhclNlbGVjdG9yUmVjb3JkLCAnbnVtUmVjb3JkcycpXG4gICAgfVxufSk7XG5sZXQgJDI2YTYyMjA1YWQwNjU3NGUkdmFyJENtYXBFbnRyeSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBwbGF0Zm9ybUlEOiAkNTJaSWYkdWludDE2LFxuICAgIGVuY29kaW5nSUQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgdGFibGU6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCAkMjZhNjIyMDVhZDA2NTc0ZSR2YXIkQ21hcFN1YnRhYmxlLCB7XG4gICAgICAgIHR5cGU6ICdwYXJlbnQnLFxuICAgICAgICBsYXp5OiB0cnVlXG4gICAgfSlcbn0pO1xudmFyIC8vIGNoYXJhY3RlciB0byBnbHlwaCBtYXBwaW5nXG4kMjZhNjIyMDVhZDA2NTc0ZSRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHZlcnNpb246ICQ1MlpJZiR1aW50MTYsXG4gICAgbnVtU3VidGFibGVzOiAkNTJaSWYkdWludDE2LFxuICAgIHRhYmxlczogbmV3ICQ1MlpJZiRBcnJheSgkMjZhNjIyMDVhZDA2NTc0ZSR2YXIkQ21hcEVudHJ5LCAnbnVtU3VidGFibGVzJylcbn0pO1xuXG5cblxudmFyIC8vIGZvbnQgaGVhZGVyXG4kZjI2MTJhMjlmOTJhYzA2MiRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHZlcnNpb246ICQ1MlpJZiRpbnQzMixcbiAgICByZXZpc2lvbjogJDUyWklmJGludDMyLFxuICAgIGNoZWNrU3VtQWRqdXN0bWVudDogJDUyWklmJHVpbnQzMixcbiAgICBtYWdpY051bWJlcjogJDUyWklmJHVpbnQzMixcbiAgICBmbGFnczogJDUyWklmJHVpbnQxNixcbiAgICB1bml0c1BlckVtOiAkNTJaSWYkdWludDE2LFxuICAgIGNyZWF0ZWQ6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJGludDMyLCAyKSxcbiAgICBtb2RpZmllZDogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkaW50MzIsIDIpLFxuICAgIHhNaW46ICQ1MlpJZiRpbnQxNixcbiAgICB5TWluOiAkNTJaSWYkaW50MTYsXG4gICAgeE1heDogJDUyWklmJGludDE2LFxuICAgIHlNYXg6ICQ1MlpJZiRpbnQxNixcbiAgICBtYWNTdHlsZTogbmV3ICQ1MlpJZiRCaXRmaWVsZCgkNTJaSWYkdWludDE2LCBbXG4gICAgICAgICdib2xkJyxcbiAgICAgICAgJ2l0YWxpYycsXG4gICAgICAgICd1bmRlcmxpbmUnLFxuICAgICAgICAnb3V0bGluZScsXG4gICAgICAgICdzaGFkb3cnLFxuICAgICAgICAnY29uZGVuc2VkJyxcbiAgICAgICAgJ2V4dGVuZGVkJ1xuICAgIF0pLFxuICAgIGxvd2VzdFJlY1BQRU06ICQ1MlpJZiR1aW50MTYsXG4gICAgZm9udERpcmVjdGlvbkhpbnQ6ICQ1MlpJZiRpbnQxNixcbiAgICBpbmRleFRvTG9jRm9ybWF0OiAkNTJaSWYkaW50MTYsXG4gICAgZ2x5cGhEYXRhRm9ybWF0OiAkNTJaSWYkaW50MTYgLy8gMCBmb3IgY3VycmVudCBmb3JtYXRcbn0pO1xuXG5cblxudmFyIC8vIGhvcml6b250YWwgaGVhZGVyXG4kMmMxNzlkZDU5MzU4MzA3MyRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHZlcnNpb246ICQ1MlpJZiRpbnQzMixcbiAgICBhc2NlbnQ6ICQ1MlpJZiRpbnQxNixcbiAgICBkZXNjZW50OiAkNTJaSWYkaW50MTYsXG4gICAgbGluZUdhcDogJDUyWklmJGludDE2LFxuICAgIGFkdmFuY2VXaWR0aE1heDogJDUyWklmJHVpbnQxNixcbiAgICBtaW5MZWZ0U2lkZUJlYXJpbmc6ICQ1MlpJZiRpbnQxNixcbiAgICBtaW5SaWdodFNpZGVCZWFyaW5nOiAkNTJaSWYkaW50MTYsXG4gICAgeE1heEV4dGVudDogJDUyWklmJGludDE2LFxuICAgIGNhcmV0U2xvcGVSaXNlOiAkNTJaSWYkaW50MTYsXG4gICAgY2FyZXRTbG9wZVJ1bjogJDUyWklmJGludDE2LFxuICAgIGNhcmV0T2Zmc2V0OiAkNTJaSWYkaW50MTYsXG4gICAgcmVzZXJ2ZWQ6IG5ldyAkNTJaSWYkUmVzZXJ2ZWQoJDUyWklmJGludDE2LCA0KSxcbiAgICBtZXRyaWNEYXRhRm9ybWF0OiAkNTJaSWYkaW50MTYsXG4gICAgbnVtYmVyT2ZNZXRyaWNzOiAkNTJaSWYkdWludDE2IC8vIE51bWJlciBvZiBhZHZhbmNlIHdpZHRocyBpbiAnaG10eCcgdGFibGVcbn0pO1xuXG5cblxubGV0ICRiZGM5MDYwNTQyMjY0Yjg1JHZhciRIbXR4RW50cnkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgYWR2YW5jZTogJDUyWklmJHVpbnQxNixcbiAgICBiZWFyaW5nOiAkNTJaSWYkaW50MTZcbn0pO1xudmFyICRiZGM5MDYwNTQyMjY0Yjg1JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgbWV0cmljczogbmV3ICQ1MlpJZiRMYXp5QXJyYXkoJGJkYzkwNjA1NDIyNjRiODUkdmFyJEhtdHhFbnRyeSwgKHQpPT50LnBhcmVudC5oaGVhLm51bWJlck9mTWV0cmljcyksXG4gICAgYmVhcmluZ3M6IG5ldyAkNTJaSWYkTGF6eUFycmF5KCQ1MlpJZiRpbnQxNiwgKHQpPT50LnBhcmVudC5tYXhwLm51bUdseXBocyAtIHQucGFyZW50LmhoZWEubnVtYmVyT2ZNZXRyaWNzKVxufSk7XG5cblxuXG52YXIgLy8gbWF4aXVtdW0gcHJvZmlsZVxuJGRiZjUxY2IzZDNmZTQwOWQkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB2ZXJzaW9uOiAkNTJaSWYkaW50MzIsXG4gICAgbnVtR2x5cGhzOiAkNTJaSWYkdWludDE2LFxuICAgIG1heFBvaW50czogJDUyWklmJHVpbnQxNixcbiAgICBtYXhDb250b3VyczogJDUyWklmJHVpbnQxNixcbiAgICBtYXhDb21wb25lbnRQb2ludHM6ICQ1MlpJZiR1aW50MTYsXG4gICAgbWF4Q29tcG9uZW50Q29udG91cnM6ICQ1MlpJZiR1aW50MTYsXG4gICAgbWF4Wm9uZXM6ICQ1MlpJZiR1aW50MTYsXG4gICAgbWF4VHdpbGlnaHRQb2ludHM6ICQ1MlpJZiR1aW50MTYsXG4gICAgbWF4U3RvcmFnZTogJDUyWklmJHVpbnQxNixcbiAgICBtYXhGdW5jdGlvbkRlZnM6ICQ1MlpJZiR1aW50MTYsXG4gICAgbWF4SW5zdHJ1Y3Rpb25EZWZzOiAkNTJaSWYkdWludDE2LFxuICAgIG1heFN0YWNrRWxlbWVudHM6ICQ1MlpJZiR1aW50MTYsXG4gICAgbWF4U2l6ZU9mSW5zdHJ1Y3Rpb25zOiAkNTJaSWYkdWludDE2LFxuICAgIG1heENvbXBvbmVudEVsZW1lbnRzOiAkNTJaSWYkdWludDE2LFxuICAgIG1heENvbXBvbmVudERlcHRoOiAkNTJaSWYkdWludDE2IC8vIE1heGltdW0gbGV2ZWxzIG9mIHJlY3Vyc2lvbjsgMSBmb3Igc2ltcGxlIGNvbXBvbmVudHNcbn0pO1xuXG5cblxuLyoqXG4gKiBHZXRzIGFuIGVuY29kaW5nIG5hbWUgZnJvbSBwbGF0Zm9ybSwgZW5jb2RpbmcsIGFuZCBsYW5ndWFnZSBpZHMuXG4gKiBSZXR1cm5lZCBlbmNvZGluZyBuYW1lcyBjYW4gYmUgdXNlZCBpbiBpY29udi1saXRlIHRvIGRlY29kZSB0ZXh0LlxuICovIGZ1bmN0aW9uICRlNDQ5YWQ3OGQ1MDg0NWZlJGV4cG9ydCRiYWRjNTQ0ZTA2NTFiNmIxKHBsYXRmb3JtSUQsIGVuY29kaW5nSUQsIGxhbmd1YWdlSUQgPSAwKSB7XG4gICAgaWYgKHBsYXRmb3JtSUQgPT09IDEgJiYgJGU0NDlhZDc4ZDUwODQ1ZmUkZXhwb3J0JDQ3OWU2NzE5MDdmNDg2ZDFbbGFuZ3VhZ2VJRF0pIHJldHVybiAkZTQ0OWFkNzhkNTA4NDVmZSRleHBvcnQkNDc5ZTY3MTkwN2Y0ODZkMVtsYW5ndWFnZUlEXTtcbiAgICByZXR1cm4gJGU0NDlhZDc4ZDUwODQ1ZmUkZXhwb3J0JDZmZWY4N2I3NjE4YmRmMGJbcGxhdGZvcm1JRF1bZW5jb2RpbmdJRF07XG59XG5jb25zdCAkZTQ0OWFkNzhkNTA4NDVmZSR2YXIkU0lOR0xFX0JZVEVfRU5DT0RJTkdTID0gbmV3IFNldChbXG4gICAgJ3gtbWFjLXJvbWFuJyxcbiAgICAneC1tYWMtY3lyaWxsaWMnLFxuICAgICdpc28tODg1OS02JyxcbiAgICAnaXNvLTg4NTktOCdcbl0pO1xuY29uc3QgJGU0NDlhZDc4ZDUwODQ1ZmUkdmFyJE1BQ19FTkNPRElOR1MgPSB7XG4gICAgJ3gtbWFjLWNyb2F0aWFuJzogXCJcXHhjNFxceGM1XFx4YzdcXHhjOVxceGQxXFx4ZDZcXHhkY1xceGUxXFx4ZTBcXHhlMlxceGU0XFx4ZTNcXHhlNVxceGU3XFx4ZTlcXHhlOFxceGVhXFx4ZWJcXHhlZFxceGVjXFx4ZWVcXHhlZlxceGYxXFx4ZjNcXHhmMlxceGY0XFx4ZjZcXHhmNVxceGZhXFx4ZjlcXHhmYlxceGZjXFx1MjAyMFxceGIwXFx4YTJcXHhhM1xceGE3XFx1MjAyMlxceGI2XFx4ZGZcXHhhZVxcdTAxNjBcXHUyMTIyXFx4YjRcXHhhOFxcdTIyNjBcXHUwMTdEXFx4ZDhcXHUyMjFFXFx4YjFcXHUyMjY0XFx1MjI2NVxcdTIyMDZcXHhiNVxcdTIyMDJcXHUyMjExXFx1MjIwRlxcdTAxNjFcXHUyMjJCXFx4YWFcXHhiYVxcdTAzQTlcXHUwMTdFXFx4ZjhcXHhiZlxceGExXFx4YWNcXHUyMjFBXFx1MDE5MlxcdTIyNDhcXHUwMTA2XFx4YWJcXHUwMTBDXFx1MjAyNiBcXHhjMFxceGMzXFx4ZDVcXHUwMTUyXFx1MDE1M1xcdTAxMTBcXHUyMDE0XFx1MjAxQ1xcdTIwMURcXHUyMDE4XFx1MjAxOVxceGY3XFx1MjVDQVxcdUY4RkZcXHhhOVxcdTIwNDRcXHUyMEFDXFx1MjAzOVxcdTIwM0FcXHhjNlxceGJiXFx1MjAxM1xceGI3XFx1MjAxQVxcdTIwMUVcXHUyMDMwXFx4YzJcXHUwMTA3XFx4YzFcXHUwMTBEXFx4YzhcXHhjZFxceGNlXFx4Y2ZcXHhjY1xceGQzXFx4ZDRcXHUwMTExXFx4ZDJcXHhkYVxceGRiXFx4ZDlcXHUwMTMxXFx1MDJDNlxcdTAyRENcXHhhZlxcdTAzQzBcXHhjYlxcdTAyREFcXHhiOFxceGNhXFx4ZTZcXHUwMkM3XCIsXG4gICAgJ3gtbWFjLWdhZWxpYyc6IFwiXFx4YzRcXHhjNVxceGM3XFx4YzlcXHhkMVxceGQ2XFx4ZGNcXHhlMVxceGUwXFx4ZTJcXHhlNFxceGUzXFx4ZTVcXHhlN1xceGU5XFx4ZThcXHhlYVxceGViXFx4ZWRcXHhlY1xceGVlXFx4ZWZcXHhmMVxceGYzXFx4ZjJcXHhmNFxceGY2XFx4ZjVcXHhmYVxceGY5XFx4ZmJcXHhmY1xcdTIwMjBcXHhiMFxceGEyXFx4YTNcXHhhN1xcdTIwMjJcXHhiNlxceGRmXFx4YWVcXHhhOVxcdTIxMjJcXHhiNFxceGE4XFx1MjI2MFxceGM2XFx4ZDhcXHUxRTAyXFx4YjFcXHUyMjY0XFx1MjI2NVxcdTFFMDNcXHUwMTBBXFx1MDEwQlxcdTFFMEFcXHUxRTBCXFx1MUUxRVxcdTFFMUZcXHUwMTIwXFx1MDEyMVxcdTFFNDBcXHhlNlxceGY4XFx1MUU0MVxcdTFFNTZcXHUxRTU3XFx1MDI3Q1xcdTAxOTJcXHUwMTdGXFx1MUU2MFxceGFiXFx4YmJcXHUyMDI2IFxceGMwXFx4YzNcXHhkNVxcdTAxNTJcXHUwMTUzXFx1MjAxM1xcdTIwMTRcXHUyMDFDXFx1MjAxRFxcdTIwMThcXHUyMDE5XFx1MUU2MVxcdTFFOUJcXHhmZlxcdTAxNzhcXHUxRTZBXFx1MjBBQ1xcdTIwMzlcXHUyMDNBXFx1MDE3NlxcdTAxNzdcXHUxRTZCXFx4YjdcXHUxRUYyXFx1MUVGM1xcdTIwNEFcXHhjMlxceGNhXFx4YzFcXHhjYlxceGM4XFx4Y2RcXHhjZVxceGNmXFx4Y2NcXHhkM1xceGQ0XFx1MjY2M1xceGQyXFx4ZGFcXHhkYlxceGQ5XFx1MDEzMVxceGRkXFx4ZmRcXHUwMTc0XFx1MDE3NVxcdTFFODRcXHUxRTg1XFx1MUU4MFxcdTFFODFcXHUxRTgyXFx1MUU4M1wiLFxuICAgICd4LW1hYy1ncmVlayc6IFwiXFx4YzRcXHhiOVxceGIyXFx4YzlcXHhiM1xceGQ2XFx4ZGNcXHUwMzg1XFx4ZTBcXHhlMlxceGU0XFx1MDM4NFxceGE4XFx4ZTdcXHhlOVxceGU4XFx4ZWFcXHhlYlxceGEzXFx1MjEyMlxceGVlXFx4ZWZcXHUyMDIyXFx4YmRcXHUyMDMwXFx4ZjRcXHhmNlxceGE2XFx1MjBBQ1xceGY5XFx4ZmJcXHhmY1xcdTIwMjBcXHUwMzkzXFx1MDM5NFxcdTAzOThcXHUwMzlCXFx1MDM5RVxcdTAzQTBcXHhkZlxceGFlXFx4YTlcXHUwM0EzXFx1MDNBQVxceGE3XFx1MjI2MFxceGIwXFx4YjdcXHUwMzkxXFx4YjFcXHUyMjY0XFx1MjI2NVxceGE1XFx1MDM5MlxcdTAzOTVcXHUwMzk2XFx1MDM5N1xcdTAzOTlcXHUwMzlBXFx1MDM5Q1xcdTAzQTZcXHUwM0FCXFx1MDNBOFxcdTAzQTlcXHUwM0FDXFx1MDM5RFxceGFjXFx1MDM5RlxcdTAzQTFcXHUyMjQ4XFx1MDNBNFxceGFiXFx4YmJcXHUyMDI2IFxcdTAzQTVcXHUwM0E3XFx1MDM4NlxcdTAzODhcXHUwMTUzXFx1MjAxM1xcdTIwMTVcXHUyMDFDXFx1MjAxRFxcdTIwMThcXHUyMDE5XFx4ZjdcXHUwMzg5XFx1MDM4QVxcdTAzOENcXHUwMzhFXFx1MDNBRFxcdTAzQUVcXHUwM0FGXFx1MDNDQ1xcdTAzOEZcXHUwM0NEXFx1MDNCMVxcdTAzQjJcXHUwM0M4XFx1MDNCNFxcdTAzQjVcXHUwM0M2XFx1MDNCM1xcdTAzQjdcXHUwM0I5XFx1MDNCRVxcdTAzQkFcXHUwM0JCXFx1MDNCQ1xcdTAzQkRcXHUwM0JGXFx1MDNDMFxcdTAzQ0VcXHUwM0MxXFx1MDNDM1xcdTAzQzRcXHUwM0I4XFx1MDNDOVxcdTAzQzJcXHUwM0M3XFx1MDNDNVxcdTAzQjZcXHUwM0NBXFx1MDNDQlxcdTAzOTBcXHUwM0IwXFx4YWRcIixcbiAgICAneC1tYWMtaWNlbGFuZGljJzogXCJcXHhjNFxceGM1XFx4YzdcXHhjOVxceGQxXFx4ZDZcXHhkY1xceGUxXFx4ZTBcXHhlMlxceGU0XFx4ZTNcXHhlNVxceGU3XFx4ZTlcXHhlOFxceGVhXFx4ZWJcXHhlZFxceGVjXFx4ZWVcXHhlZlxceGYxXFx4ZjNcXHhmMlxceGY0XFx4ZjZcXHhmNVxceGZhXFx4ZjlcXHhmYlxceGZjXFx4ZGRcXHhiMFxceGEyXFx4YTNcXHhhN1xcdTIwMjJcXHhiNlxceGRmXFx4YWVcXHhhOVxcdTIxMjJcXHhiNFxceGE4XFx1MjI2MFxceGM2XFx4ZDhcXHUyMjFFXFx4YjFcXHUyMjY0XFx1MjI2NVxceGE1XFx4YjVcXHUyMjAyXFx1MjIxMVxcdTIyMEZcXHUwM0MwXFx1MjIyQlxceGFhXFx4YmFcXHUwM0E5XFx4ZTZcXHhmOFxceGJmXFx4YTFcXHhhY1xcdTIyMUFcXHUwMTkyXFx1MjI0OFxcdTIyMDZcXHhhYlxceGJiXFx1MjAyNiBcXHhjMFxceGMzXFx4ZDVcXHUwMTUyXFx1MDE1M1xcdTIwMTNcXHUyMDE0XFx1MjAxQ1xcdTIwMURcXHUyMDE4XFx1MjAxOVxceGY3XFx1MjVDQVxceGZmXFx1MDE3OFxcdTIwNDRcXHUyMEFDXFx4ZDBcXHhmMFxceGRlXFx4ZmVcXHhmZFxceGI3XFx1MjAxQVxcdTIwMUVcXHUyMDMwXFx4YzJcXHhjYVxceGMxXFx4Y2JcXHhjOFxceGNkXFx4Y2VcXHhjZlxceGNjXFx4ZDNcXHhkNFxcdUY4RkZcXHhkMlxceGRhXFx4ZGJcXHhkOVxcdTAxMzFcXHUwMkM2XFx1MDJEQ1xceGFmXFx1MDJEOFxcdTAyRDlcXHUwMkRBXFx4YjhcXHUwMkREXFx1MDJEQlxcdTAyQzdcIixcbiAgICAneC1tYWMtaW51aXQnOiBcIlxcdTE0MDNcXHUxNDA0XFx1MTQwNVxcdTE0MDZcXHUxNDBBXFx1MTQwQlxcdTE0MzFcXHUxNDMyXFx1MTQzM1xcdTE0MzRcXHUxNDM4XFx1MTQzOVxcdTE0NDlcXHUxNDRFXFx1MTQ0RlxcdTE0NTBcXHUxNDUxXFx1MTQ1NVxcdTE0NTZcXHUxNDY2XFx1MTQ2RFxcdTE0NkVcXHUxNDZGXFx1MTQ3MFxcdTE0NzJcXHUxNDczXFx1MTQ4M1xcdTE0OEJcXHUxNDhDXFx1MTQ4RFxcdTE0OEVcXHUxNDkwXFx1MTQ5MVxceGIwXFx1MTRBMVxcdTE0QTVcXHUxNEE2XFx1MjAyMlxceGI2XFx1MTRBN1xceGFlXFx4YTlcXHUyMTIyXFx1MTRBOFxcdTE0QUFcXHUxNEFCXFx1MTRCQlxcdTE0QzJcXHUxNEMzXFx1MTRDNFxcdTE0QzVcXHUxNEM3XFx1MTRDOFxcdTE0RDBcXHUxNEVGXFx1MTRGMFxcdTE0RjFcXHUxNEYyXFx1MTRGNFxcdTE0RjVcXHUxNTA1XFx1MTRENVxcdTE0RDZcXHUxNEQ3XFx1MTREOFxcdTE0REFcXHUxNERCXFx1MTRFQVxcdTE1MjhcXHUxNTI5XFx1MTUyQVxcdTE1MkJcXHUxNTJEXFx1MjAyNiBcXHUxNTJFXFx1MTUzRVxcdTE1NTVcXHUxNTU2XFx1MTU1N1xcdTIwMTNcXHUyMDE0XFx1MjAxQ1xcdTIwMURcXHUyMDE4XFx1MjAxOVxcdTE1NThcXHUxNTU5XFx1MTU1QVxcdTE1NURcXHUxNTQ2XFx1MTU0N1xcdTE1NDhcXHUxNTQ5XFx1MTU0QlxcdTE1NENcXHUxNTUwXFx1MTU3RlxcdTE1ODBcXHUxNTgxXFx1MTU4MlxcdTE1ODNcXHUxNTg0XFx1MTU4NVxcdTE1OEZcXHUxNTkwXFx1MTU5MVxcdTE1OTJcXHUxNTkzXFx1MTU5NFxcdTE1OTVcXHUxNjcxXFx1MTY3MlxcdTE2NzNcXHUxNjc0XFx1MTY3NVxcdTE2NzZcXHUxNTk2XFx1MTVBMFxcdTE1QTFcXHUxNUEyXFx1MTVBM1xcdTE1QTRcXHUxNUE1XFx1MTVBNlxcdTE1N0NcXHUwMTQxXFx1MDE0MlwiLFxuICAgICd4LW1hYy1jZSc6IFwiXFx4YzRcXHUwMTAwXFx1MDEwMVxceGM5XFx1MDEwNFxceGQ2XFx4ZGNcXHhlMVxcdTAxMDVcXHUwMTBDXFx4ZTRcXHUwMTBEXFx1MDEwNlxcdTAxMDdcXHhlOVxcdTAxNzlcXHUwMTdBXFx1MDEwRVxceGVkXFx1MDEwRlxcdTAxMTJcXHUwMTEzXFx1MDExNlxceGYzXFx1MDExN1xceGY0XFx4ZjZcXHhmNVxceGZhXFx1MDExQVxcdTAxMUJcXHhmY1xcdTIwMjBcXHhiMFxcdTAxMThcXHhhM1xceGE3XFx1MjAyMlxceGI2XFx4ZGZcXHhhZVxceGE5XFx1MjEyMlxcdTAxMTlcXHhhOFxcdTIyNjBcXHUwMTIzXFx1MDEyRVxcdTAxMkZcXHUwMTJBXFx1MjI2NFxcdTIyNjVcXHUwMTJCXFx1MDEzNlxcdTIyMDJcXHUyMjExXFx1MDE0MlxcdTAxM0JcXHUwMTNDXFx1MDEzRFxcdTAxM0VcXHUwMTM5XFx1MDEzQVxcdTAxNDVcXHUwMTQ2XFx1MDE0M1xceGFjXFx1MjIxQVxcdTAxNDRcXHUwMTQ3XFx1MjIwNlxceGFiXFx4YmJcXHUyMDI2IFxcdTAxNDhcXHUwMTUwXFx4ZDVcXHUwMTUxXFx1MDE0Q1xcdTIwMTNcXHUyMDE0XFx1MjAxQ1xcdTIwMURcXHUyMDE4XFx1MjAxOVxceGY3XFx1MjVDQVxcdTAxNERcXHUwMTU0XFx1MDE1NVxcdTAxNThcXHUyMDM5XFx1MjAzQVxcdTAxNTlcXHUwMTU2XFx1MDE1N1xcdTAxNjBcXHUyMDFBXFx1MjAxRVxcdTAxNjFcXHUwMTVBXFx1MDE1QlxceGMxXFx1MDE2NFxcdTAxNjVcXHhjZFxcdTAxN0RcXHUwMTdFXFx1MDE2QVxceGQzXFx4ZDRcXHUwMTZCXFx1MDE2RVxceGRhXFx1MDE2RlxcdTAxNzBcXHUwMTcxXFx1MDE3MlxcdTAxNzNcXHhkZFxceGZkXFx1MDEzN1xcdTAxN0JcXHUwMTQxXFx1MDE3Q1xcdTAxMjJcXHUwMkM3XCIsXG4gICAgJ3gtbWFjLXJvbWFuaWFuJzogXCJcXHhjNFxceGM1XFx4YzdcXHhjOVxceGQxXFx4ZDZcXHhkY1xceGUxXFx4ZTBcXHhlMlxceGU0XFx4ZTNcXHhlNVxceGU3XFx4ZTlcXHhlOFxceGVhXFx4ZWJcXHhlZFxceGVjXFx4ZWVcXHhlZlxceGYxXFx4ZjNcXHhmMlxceGY0XFx4ZjZcXHhmNVxceGZhXFx4ZjlcXHhmYlxceGZjXFx1MjAyMFxceGIwXFx4YTJcXHhhM1xceGE3XFx1MjAyMlxceGI2XFx4ZGZcXHhhZVxceGE5XFx1MjEyMlxceGI0XFx4YThcXHUyMjYwXFx1MDEwMlxcdTAyMThcXHUyMjFFXFx4YjFcXHUyMjY0XFx1MjI2NVxceGE1XFx4YjVcXHUyMjAyXFx1MjIxMVxcdTIyMEZcXHUwM0MwXFx1MjIyQlxceGFhXFx4YmFcXHUwM0E5XFx1MDEwM1xcdTAyMTlcXHhiZlxceGExXFx4YWNcXHUyMjFBXFx1MDE5MlxcdTIyNDhcXHUyMjA2XFx4YWJcXHhiYlxcdTIwMjYgXFx4YzBcXHhjM1xceGQ1XFx1MDE1MlxcdTAxNTNcXHUyMDEzXFx1MjAxNFxcdTIwMUNcXHUyMDFEXFx1MjAxOFxcdTIwMTlcXHhmN1xcdTI1Q0FcXHhmZlxcdTAxNzhcXHUyMDQ0XFx1MjBBQ1xcdTIwMzlcXHUyMDNBXFx1MDIxQVxcdTAyMUJcXHUyMDIxXFx4YjdcXHUyMDFBXFx1MjAxRVxcdTIwMzBcXHhjMlxceGNhXFx4YzFcXHhjYlxceGM4XFx4Y2RcXHhjZVxceGNmXFx4Y2NcXHhkM1xceGQ0XFx1RjhGRlxceGQyXFx4ZGFcXHhkYlxceGQ5XFx1MDEzMVxcdTAyQzZcXHUwMkRDXFx4YWZcXHUwMkQ4XFx1MDJEOVxcdTAyREFcXHhiOFxcdTAyRERcXHUwMkRCXFx1MDJDN1wiLFxuICAgICd4LW1hYy10dXJraXNoJzogXCJcXHhjNFxceGM1XFx4YzdcXHhjOVxceGQxXFx4ZDZcXHhkY1xceGUxXFx4ZTBcXHhlMlxceGU0XFx4ZTNcXHhlNVxceGU3XFx4ZTlcXHhlOFxceGVhXFx4ZWJcXHhlZFxceGVjXFx4ZWVcXHhlZlxceGYxXFx4ZjNcXHhmMlxceGY0XFx4ZjZcXHhmNVxceGZhXFx4ZjlcXHhmYlxceGZjXFx1MjAyMFxceGIwXFx4YTJcXHhhM1xceGE3XFx1MjAyMlxceGI2XFx4ZGZcXHhhZVxceGE5XFx1MjEyMlxceGI0XFx4YThcXHUyMjYwXFx4YzZcXHhkOFxcdTIyMUVcXHhiMVxcdTIyNjRcXHUyMjY1XFx4YTVcXHhiNVxcdTIyMDJcXHUyMjExXFx1MjIwRlxcdTAzQzBcXHUyMjJCXFx4YWFcXHhiYVxcdTAzQTlcXHhlNlxceGY4XFx4YmZcXHhhMVxceGFjXFx1MjIxQVxcdTAxOTJcXHUyMjQ4XFx1MjIwNlxceGFiXFx4YmJcXHUyMDI2IFxceGMwXFx4YzNcXHhkNVxcdTAxNTJcXHUwMTUzXFx1MjAxM1xcdTIwMTRcXHUyMDFDXFx1MjAxRFxcdTIwMThcXHUyMDE5XFx4ZjdcXHUyNUNBXFx4ZmZcXHUwMTc4XFx1MDExRVxcdTAxMUZcXHUwMTMwXFx1MDEzMVxcdTAxNUVcXHUwMTVGXFx1MjAyMVxceGI3XFx1MjAxQVxcdTIwMUVcXHUyMDMwXFx4YzJcXHhjYVxceGMxXFx4Y2JcXHhjOFxceGNkXFx4Y2VcXHhjZlxceGNjXFx4ZDNcXHhkNFxcdUY4RkZcXHhkMlxceGRhXFx4ZGJcXHhkOVxcdUY4QTBcXHUwMkM2XFx1MDJEQ1xceGFmXFx1MDJEOFxcdTAyRDlcXHUwMkRBXFx4YjhcXHUwMkREXFx1MDJEQlxcdTAyQzdcIlxufTtcbmNvbnN0ICRlNDQ5YWQ3OGQ1MDg0NWZlJHZhciRlbmNvZGluZ0NhY2hlID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gJGU0NDlhZDc4ZDUwODQ1ZmUkZXhwb3J0JDFkY2ViM2MxNGVkNjhiZWUoZW5jb2RpbmcpIHtcbiAgICBsZXQgY2FjaGVkID0gJGU0NDlhZDc4ZDUwODQ1ZmUkdmFyJGVuY29kaW5nQ2FjaGUuZ2V0KGVuY29kaW5nKTtcbiAgICBpZiAoY2FjaGVkKSByZXR1cm4gY2FjaGVkO1xuICAgIC8vIFRoZXNlIGVuY29kaW5ncyBhcmVuJ3Qgc3VwcG9ydGVkIGJ5IFRleHREZWNvZGVyLlxuICAgIGxldCBtYXBwaW5nID0gJGU0NDlhZDc4ZDUwODQ1ZmUkdmFyJE1BQ19FTkNPRElOR1NbZW5jb2RpbmddO1xuICAgIGlmIChtYXBwaW5nKSB7XG4gICAgICAgIGxldCByZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBtYXBwaW5nLmxlbmd0aDsgaSsrKXJlcy5zZXQobWFwcGluZy5jaGFyQ29kZUF0KGkpLCAweDgwICsgaSk7XG4gICAgICAgICRlNDQ5YWQ3OGQ1MDg0NWZlJHZhciRlbmNvZGluZ0NhY2hlLnNldChlbmNvZGluZywgcmVzKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgLy8gT25seSBzaW5nbGUgYnl0ZSBlbmNvZGluZ3MgY2FuIGJlIG1hcHBlZCAxOjEuXG4gICAgaWYgKCRlNDQ5YWQ3OGQ1MDg0NWZlJHZhciRTSU5HTEVfQllURV9FTkNPRElOR1MuaGFzKGVuY29kaW5nKSkge1xuICAgICAgICAvLyBUZXh0RW5jb2RlciBvbmx5IHN1cHBvcnRzIHV0ZjgsIHdoZXJlYXMgVGV4dERlY29kZXIgc3VwcG9ydHMgbGVnYWN5IGVuY29kaW5ncy5cbiAgICAgICAgLy8gVXNlIHRoaXMgdG8gY3JlYXRlIGEgbWFwcGluZyBvZiBjb2RlIHBvaW50cy5cbiAgICAgICAgbGV0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoZW5jb2RpbmcpO1xuICAgICAgICBsZXQgbWFwcGluZyA9IG5ldyBVaW50OEFycmF5KDB4ODApO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgMHg4MDsgaSsrKW1hcHBpbmdbaV0gPSAweDgwICsgaTtcbiAgICAgICAgbGV0IHJlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgbGV0IHMgPSBkZWNvZGVyLmRlY29kZShtYXBwaW5nKTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IDB4ODA7IGkrKylyZXMuc2V0KHMuY2hhckNvZGVBdChpKSwgMHg4MCArIGkpO1xuICAgICAgICAkZTQ0OWFkNzhkNTA4NDVmZSR2YXIkZW5jb2RpbmdDYWNoZS5zZXQoZW5jb2RpbmcsIHJlcyk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxufVxuY29uc3QgJGU0NDlhZDc4ZDUwODQ1ZmUkZXhwb3J0JDZmZWY4N2I3NjE4YmRmMGIgPSBbXG4gICAgLy8gdW5pY29kZVxuICAgIFtcbiAgICAgICAgJ3V0Zi0xNmJlJyxcbiAgICAgICAgJ3V0Zi0xNmJlJyxcbiAgICAgICAgJ3V0Zi0xNmJlJyxcbiAgICAgICAgJ3V0Zi0xNmJlJyxcbiAgICAgICAgJ3V0Zi0xNmJlJyxcbiAgICAgICAgJ3V0Zi0xNmJlJyxcbiAgICAgICAgJ3V0Zi0xNmJlJ1xuICAgIF0sXG4gICAgLy8gbWFjaW50b3NoXG4gICAgLy8gTWFwcGluZ3MgYXZhaWxhYmxlIGF0IGh0dHA6Ly91bmljb2RlLm9yZy9QdWJsaWMvTUFQUElOR1MvVkVORE9SUy9BUFBMRS9cbiAgICAvLyAwXHRSb21hbiAgICAgICAgICAgICAgICAgMTdcdE1hbGF5YWxhbVxuICAgIC8vIDFcdEphcGFuZXNlXHQgICAgICAgICAgICAxOFx0U2luaGFsZXNlXG4gICAgLy8gMlx0VHJhZGl0aW9uYWwgQ2hpbmVzZVx0ICAxOVx0QnVybWVzZVxuICAgIC8vIDNcdEtvcmVhblx0ICAgICAgICAgICAgICAyMFx0S2htZXJcbiAgICAvLyA0XHRBcmFiaWNcdCAgICAgICAgICAgICAgMjFcdFRoYWlcbiAgICAvLyA1XHRIZWJyZXdcdCAgICAgICAgICAgICAgMjJcdExhb3RpYW5cbiAgICAvLyA2XHRHcmVla1x0ICAgICAgICAgICAgICAgIDIzXHRHZW9yZ2lhblxuICAgIC8vIDdcdFJ1c3NpYW5cdCAgICAgICAgICAgICAgMjRcdEFybWVuaWFuXG4gICAgLy8gOFx0UlN5bWJvbFx0ICAgICAgICAgICAgICAyNVx0U2ltcGxpZmllZCBDaGluZXNlXG4gICAgLy8gOVx0RGV2YW5hZ2FyaVx0ICAgICAgICAgIDI2XHRUaWJldGFuXG4gICAgLy8gMTBcdEd1cm11a2hpXHQgICAgICAgICAgICAyN1x0TW9uZ29saWFuXG4gICAgLy8gMTFcdEd1amFyYXRpXHQgICAgICAgICAgICAyOFx0R2VlelxuICAgIC8vIDEyXHRPcml5YVx0ICAgICAgICAgICAgICAgIDI5XHRTbGF2aWNcbiAgICAvLyAxM1x0QmVuZ2FsaVx0ICAgICAgICAgICAgICAzMFx0VmlldG5hbWVzZVxuICAgIC8vIDE0XHRUYW1pbFx0ICAgICAgICAgICAgICAgIDMxXHRTaW5kaGlcbiAgICAvLyAxNVx0VGVsdWd1XHQgICAgICAgICAgICAgIDMyXHQoVW5pbnRlcnByZXRlZClcbiAgICAvLyAxNlx0S2FubmFkYVxuICAgIFtcbiAgICAgICAgJ3gtbWFjLXJvbWFuJyxcbiAgICAgICAgJ3NoaWZ0LWppcycsXG4gICAgICAgICdiaWc1JyxcbiAgICAgICAgJ2V1Yy1rcicsXG4gICAgICAgICdpc28tODg1OS02JyxcbiAgICAgICAgJ2lzby04ODU5LTgnLFxuICAgICAgICAneC1tYWMtZ3JlZWsnLFxuICAgICAgICAneC1tYWMtY3lyaWxsaWMnLFxuICAgICAgICAneC1tYWMtc3ltYm9sJyxcbiAgICAgICAgJ3gtbWFjLWRldmFuYWdhcmknLFxuICAgICAgICAneC1tYWMtZ3VybXVraGknLFxuICAgICAgICAneC1tYWMtZ3VqYXJhdGknLFxuICAgICAgICAnT3JpeWEnLFxuICAgICAgICAnQmVuZ2FsaScsXG4gICAgICAgICdUYW1pbCcsXG4gICAgICAgICdUZWx1Z3UnLFxuICAgICAgICAnS2FubmFkYScsXG4gICAgICAgICdNYWxheWFsYW0nLFxuICAgICAgICAnU2luaGFsZXNlJyxcbiAgICAgICAgJ0J1cm1lc2UnLFxuICAgICAgICAnS2htZXInLFxuICAgICAgICAnaXNvLTg4NTktMTEnLFxuICAgICAgICAnTGFvdGlhbicsXG4gICAgICAgICdHZW9yZ2lhbicsXG4gICAgICAgICdBcm1lbmlhbicsXG4gICAgICAgICdnYmsnLFxuICAgICAgICAnVGliZXRhbicsXG4gICAgICAgICdNb25nb2xpYW4nLFxuICAgICAgICAnR2VleicsXG4gICAgICAgICd4LW1hYy1jZScsXG4gICAgICAgICdWaWV0bmFtZXNlJyxcbiAgICAgICAgJ1NpbmRoaSdcbiAgICBdLFxuICAgIC8vIElTTyAoZGVwcmVjYXRlZClcbiAgICBbXG4gICAgICAgICdhc2NpaScsXG4gICAgICAgIG51bGwsXG4gICAgICAgICdpc28tODg1OS0xJ1xuICAgIF0sXG4gICAgLy8gd2luZG93c1xuICAgIC8vIERvY3MgaGVyZTogaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L3N5c3RlbS50ZXh0LmVuY29kaW5nKHY9dnMuMTEwKS5hc3B4XG4gICAgW1xuICAgICAgICAnc3ltYm9sJyxcbiAgICAgICAgJ3V0Zi0xNmJlJyxcbiAgICAgICAgJ3NoaWZ0LWppcycsXG4gICAgICAgICdnYjE4MDMwJyxcbiAgICAgICAgJ2JpZzUnLFxuICAgICAgICAnZXVjLWtyJyxcbiAgICAgICAgJ2pvaGFiJyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgJ3V0Zi0xNmJlJ1xuICAgIF1cbl07XG5jb25zdCAkZTQ0OWFkNzhkNTA4NDVmZSRleHBvcnQkNDc5ZTY3MTkwN2Y0ODZkMSA9IHtcbiAgICAxNTogJ3gtbWFjLWljZWxhbmRpYycsXG4gICAgMTc6ICd4LW1hYy10dXJraXNoJyxcbiAgICAxODogJ3gtbWFjLWNyb2F0aWFuJyxcbiAgICAyNDogJ3gtbWFjLWNlJyxcbiAgICAyNTogJ3gtbWFjLWNlJyxcbiAgICAyNjogJ3gtbWFjLWNlJyxcbiAgICAyNzogJ3gtbWFjLWNlJyxcbiAgICAyODogJ3gtbWFjLWNlJyxcbiAgICAzMDogJ3gtbWFjLWljZWxhbmRpYycsXG4gICAgMzc6ICd4LW1hYy1yb21hbmlhbicsXG4gICAgMzg6ICd4LW1hYy1jZScsXG4gICAgMzk6ICd4LW1hYy1jZScsXG4gICAgNDA6ICd4LW1hYy1jZScsXG4gICAgMTQzOiAneC1tYWMtaW51aXQnLFxuICAgIDE0NjogJ3gtbWFjLWdhZWxpYydcbn07XG5jb25zdCAkZTQ0OWFkNzhkNTA4NDVmZSRleHBvcnQkMjA5MjM3NmZkMDAyZTEzID0gW1xuICAgIC8vIHVuaWNvZGVcbiAgICBbXSxcbiAgICB7XG4gICAgICAgIDA6ICdlbicsXG4gICAgICAgIDMwOiAnZm8nLFxuICAgICAgICA2MDogJ2tzJyxcbiAgICAgICAgOTA6ICdydycsXG4gICAgICAgIDE6ICdmcicsXG4gICAgICAgIDMxOiAnZmEnLFxuICAgICAgICA2MTogJ2t1JyxcbiAgICAgICAgOTE6ICdybicsXG4gICAgICAgIDI6ICdkZScsXG4gICAgICAgIDMyOiAncnUnLFxuICAgICAgICA2MjogJ3NkJyxcbiAgICAgICAgOTI6ICdueScsXG4gICAgICAgIDM6ICdpdCcsXG4gICAgICAgIDMzOiAnemgnLFxuICAgICAgICA2MzogJ2JvJyxcbiAgICAgICAgOTM6ICdtZycsXG4gICAgICAgIDQ6ICdubCcsXG4gICAgICAgIDM0OiAnbmwtQkUnLFxuICAgICAgICA2NDogJ25lJyxcbiAgICAgICAgOTQ6ICdlbycsXG4gICAgICAgIDU6ICdzdicsXG4gICAgICAgIDM1OiAnZ2EnLFxuICAgICAgICA2NTogJ3NhJyxcbiAgICAgICAgMTI4OiAnY3knLFxuICAgICAgICA2OiAnZXMnLFxuICAgICAgICAzNjogJ3NxJyxcbiAgICAgICAgNjY6ICdtcicsXG4gICAgICAgIDEyOTogJ2V1JyxcbiAgICAgICAgNzogJ2RhJyxcbiAgICAgICAgMzc6ICdybycsXG4gICAgICAgIDY3OiAnYm4nLFxuICAgICAgICAxMzA6ICdjYScsXG4gICAgICAgIDg6ICdwdCcsXG4gICAgICAgIDM4OiAnY3onLFxuICAgICAgICA2ODogJ2FzJyxcbiAgICAgICAgMTMxOiAnbGEnLFxuICAgICAgICA5OiAnbm8nLFxuICAgICAgICAzOTogJ3NrJyxcbiAgICAgICAgNjk6ICdndScsXG4gICAgICAgIDEzMjogJ3F1JyxcbiAgICAgICAgMTA6ICdoZScsXG4gICAgICAgIDQwOiAnc2knLFxuICAgICAgICA3MDogJ3BhJyxcbiAgICAgICAgMTMzOiAnZ24nLFxuICAgICAgICAxMTogJ2phJyxcbiAgICAgICAgNDE6ICd5aScsXG4gICAgICAgIDcxOiAnb3InLFxuICAgICAgICAxMzQ6ICdheScsXG4gICAgICAgIDEyOiAnYXInLFxuICAgICAgICA0MjogJ3NyJyxcbiAgICAgICAgNzI6ICdtbCcsXG4gICAgICAgIDEzNTogJ3R0JyxcbiAgICAgICAgMTM6ICdmaScsXG4gICAgICAgIDQzOiAnbWsnLFxuICAgICAgICA3MzogJ2tuJyxcbiAgICAgICAgMTM2OiAndWcnLFxuICAgICAgICAxNDogJ2VsJyxcbiAgICAgICAgNDQ6ICdiZycsXG4gICAgICAgIDc0OiAndGEnLFxuICAgICAgICAxMzc6ICdkeicsXG4gICAgICAgIDE1OiAnaXMnLFxuICAgICAgICA0NTogJ3VrJyxcbiAgICAgICAgNzU6ICd0ZScsXG4gICAgICAgIDEzODogJ2p2JyxcbiAgICAgICAgMTY6ICdtdCcsXG4gICAgICAgIDQ2OiAnYmUnLFxuICAgICAgICA3NjogJ3NpJyxcbiAgICAgICAgMTM5OiAnc3UnLFxuICAgICAgICAxNzogJ3RyJyxcbiAgICAgICAgNDc6ICd1eicsXG4gICAgICAgIDc3OiAnbXknLFxuICAgICAgICAxNDA6ICdnbCcsXG4gICAgICAgIDE4OiAnaHInLFxuICAgICAgICA0ODogJ2trJyxcbiAgICAgICAgNzg6ICdrbScsXG4gICAgICAgIDE0MTogJ2FmJyxcbiAgICAgICAgMTk6ICd6aC1IYW50JyxcbiAgICAgICAgNDk6ICdhei1DeXJsJyxcbiAgICAgICAgNzk6ICdsbycsXG4gICAgICAgIDE0MjogJ2JyJyxcbiAgICAgICAgMjA6ICd1cicsXG4gICAgICAgIDUwOiAnYXotQXJhYicsXG4gICAgICAgIDgwOiAndmknLFxuICAgICAgICAxNDM6ICdpdScsXG4gICAgICAgIDIxOiAnaGknLFxuICAgICAgICA1MTogJ2h5JyxcbiAgICAgICAgODE6ICdpZCcsXG4gICAgICAgIDE0NDogJ2dkJyxcbiAgICAgICAgMjI6ICd0aCcsXG4gICAgICAgIDUyOiAna2EnLFxuICAgICAgICA4MjogJ3RsJyxcbiAgICAgICAgMTQ1OiAnZ3YnLFxuICAgICAgICAyMzogJ2tvJyxcbiAgICAgICAgNTM6ICdtbycsXG4gICAgICAgIDgzOiAnbXMnLFxuICAgICAgICAxNDY6ICdnYScsXG4gICAgICAgIDI0OiAnbHQnLFxuICAgICAgICA1NDogJ2t5JyxcbiAgICAgICAgODQ6ICdtcy1BcmFiJyxcbiAgICAgICAgMTQ3OiAndG8nLFxuICAgICAgICAyNTogJ3BsJyxcbiAgICAgICAgNTU6ICd0ZycsXG4gICAgICAgIDg1OiAnYW0nLFxuICAgICAgICAxNDg6ICdlbC1wb2x5dG9uJyxcbiAgICAgICAgMjY6ICdodScsXG4gICAgICAgIDU2OiAndGsnLFxuICAgICAgICA4NjogJ3RpJyxcbiAgICAgICAgMTQ5OiAna2wnLFxuICAgICAgICAyNzogJ2VzJyxcbiAgICAgICAgNTc6ICdtbi1DTicsXG4gICAgICAgIDg3OiAnb20nLFxuICAgICAgICAxNTA6ICdheicsXG4gICAgICAgIDI4OiAnbHYnLFxuICAgICAgICA1ODogJ21uJyxcbiAgICAgICAgODg6ICdzbycsXG4gICAgICAgIDE1MTogJ25uJyxcbiAgICAgICAgMjk6ICdzZScsXG4gICAgICAgIDU5OiAncHMnLFxuICAgICAgICA4OTogJ3N3J1xuICAgIH0sXG4gICAgLy8gSVNPIChkZXByZWNhdGVkKVxuICAgIFtdLFxuICAgIHtcbiAgICAgICAgMHgwNDM2OiAnYWYnLFxuICAgICAgICAweDQwMDk6ICdlbi1JTicsXG4gICAgICAgIDB4MDQ4NzogJ3J3JyxcbiAgICAgICAgMHgwNDMyOiAndG4nLFxuICAgICAgICAweDA0MUM6ICdzcScsXG4gICAgICAgIDB4MTgwOTogJ2VuLUlFJyxcbiAgICAgICAgMHgwNDQxOiAnc3cnLFxuICAgICAgICAweDA0NUI6ICdzaScsXG4gICAgICAgIDB4MDQ4NDogJ2dzdycsXG4gICAgICAgIDB4MjAwOTogJ2VuLUpNJyxcbiAgICAgICAgMHgwNDU3OiAna29rJyxcbiAgICAgICAgMHgwNDFCOiAnc2snLFxuICAgICAgICAweDA0NUU6ICdhbScsXG4gICAgICAgIDB4NDQwOTogJ2VuLU1ZJyxcbiAgICAgICAgMHgwNDEyOiAna28nLFxuICAgICAgICAweDA0MjQ6ICdzbCcsXG4gICAgICAgIDB4MTQwMTogJ2FyLURaJyxcbiAgICAgICAgMHgxNDA5OiAnZW4tTlonLFxuICAgICAgICAweDA0NDA6ICdreScsXG4gICAgICAgIDB4MkMwQTogJ2VzLUFSJyxcbiAgICAgICAgMHgzQzAxOiAnYXItQkgnLFxuICAgICAgICAweDM0MDk6ICdlbi1QSCcsXG4gICAgICAgIDB4MDQ1NDogJ2xvJyxcbiAgICAgICAgMHg0MDBBOiAnZXMtQk8nLFxuICAgICAgICAweDBDMDE6ICdhcicsXG4gICAgICAgIDB4NDgwOTogJ2VuLVNHJyxcbiAgICAgICAgMHgwNDI2OiAnbHYnLFxuICAgICAgICAweDM0MEE6ICdlcy1DTCcsXG4gICAgICAgIDB4MDgwMTogJ2FyLUlRJyxcbiAgICAgICAgMHgxQzA5OiAnZW4tWkEnLFxuICAgICAgICAweDA0Mjc6ICdsdCcsXG4gICAgICAgIDB4MjQwQTogJ2VzLUNPJyxcbiAgICAgICAgMHgyQzAxOiAnYXItSk8nLFxuICAgICAgICAweDJDMDk6ICdlbi1UVCcsXG4gICAgICAgIDB4MDgyRTogJ2RzYicsXG4gICAgICAgIDB4MTQwQTogJ2VzLUNSJyxcbiAgICAgICAgMHgzNDAxOiAnYXItS1cnLFxuICAgICAgICAweDA4MDk6ICdlbi1HQicsXG4gICAgICAgIDB4MDQ2RTogJ2xiJyxcbiAgICAgICAgMHgxQzBBOiAnZXMtRE8nLFxuICAgICAgICAweDMwMDE6ICdhci1MQicsXG4gICAgICAgIDB4MDQwOTogJ2VuJyxcbiAgICAgICAgMHgwNDJGOiAnbWsnLFxuICAgICAgICAweDMwMEE6ICdlcy1FQycsXG4gICAgICAgIDB4MTAwMTogJ2FyLUxZJyxcbiAgICAgICAgMHgzMDA5OiAnZW4tWlcnLFxuICAgICAgICAweDA4M0U6ICdtcy1CTicsXG4gICAgICAgIDB4NDQwQTogJ2VzLVNWJyxcbiAgICAgICAgMHgxODAxOiAnYXJ5JyxcbiAgICAgICAgMHgwNDI1OiAnZXQnLFxuICAgICAgICAweDA0M0U6ICdtcycsXG4gICAgICAgIDB4MTAwQTogJ2VzLUdUJyxcbiAgICAgICAgMHgyMDAxOiAnYXItT00nLFxuICAgICAgICAweDA0Mzg6ICdmbycsXG4gICAgICAgIDB4MDQ0QzogJ21sJyxcbiAgICAgICAgMHg0ODBBOiAnZXMtSE4nLFxuICAgICAgICAweDQwMDE6ICdhci1RQScsXG4gICAgICAgIDB4MDQ2NDogJ2ZpbCcsXG4gICAgICAgIDB4MDQzQTogJ210JyxcbiAgICAgICAgMHgwODBBOiAnZXMtTVgnLFxuICAgICAgICAweDA0MDE6ICdhci1TQScsXG4gICAgICAgIDB4MDQwQjogJ2ZpJyxcbiAgICAgICAgMHgwNDgxOiAnbWknLFxuICAgICAgICAweDRDMEE6ICdlcy1OSScsXG4gICAgICAgIDB4MjgwMTogJ2FyLVNZJyxcbiAgICAgICAgMHgwODBDOiAnZnItQkUnLFxuICAgICAgICAweDA0N0E6ICdhcm4nLFxuICAgICAgICAweDE4MEE6ICdlcy1QQScsXG4gICAgICAgIDB4MUMwMTogJ2FlYicsXG4gICAgICAgIDB4MEMwQzogJ2ZyLUNBJyxcbiAgICAgICAgMHgwNDRFOiAnbXInLFxuICAgICAgICAweDNDMEE6ICdlcy1QWScsXG4gICAgICAgIDB4MzgwMTogJ2FyLUFFJyxcbiAgICAgICAgMHgwNDBDOiAnZnInLFxuICAgICAgICAweDA0N0M6ICdtb2gnLFxuICAgICAgICAweDI4MEE6ICdlcy1QRScsXG4gICAgICAgIDB4MjQwMTogJ2FyLVlFJyxcbiAgICAgICAgMHgxNDBDOiAnZnItTFUnLFxuICAgICAgICAweDA0NTA6ICdtbicsXG4gICAgICAgIDB4NTAwQTogJ2VzLVBSJyxcbiAgICAgICAgMHgwNDJCOiAnaHknLFxuICAgICAgICAweDE4MEM6ICdmci1NQycsXG4gICAgICAgIDB4MDg1MDogJ21uLUNOJyxcbiAgICAgICAgMHgwQzBBOiAnZXMnLFxuICAgICAgICAweDA0NEQ6ICdhcycsXG4gICAgICAgIDB4MTAwQzogJ2ZyLUNIJyxcbiAgICAgICAgMHgwNDYxOiAnbmUnLFxuICAgICAgICAweDA0MEE6ICdlcycsXG4gICAgICAgIDB4MDgyQzogJ2F6LUN5cmwnLFxuICAgICAgICAweDA0NjI6ICdmeScsXG4gICAgICAgIDB4MDQxNDogJ25iJyxcbiAgICAgICAgMHg1NDBBOiAnZXMtVVMnLFxuICAgICAgICAweDA0MkM6ICdheicsXG4gICAgICAgIDB4MDQ1NjogJ2dsJyxcbiAgICAgICAgMHgwODE0OiAnbm4nLFxuICAgICAgICAweDM4MEE6ICdlcy1VWScsXG4gICAgICAgIDB4MDQ2RDogJ2JhJyxcbiAgICAgICAgMHgwNDM3OiAna2EnLFxuICAgICAgICAweDA0ODI6ICdvYycsXG4gICAgICAgIDB4MjAwQTogJ2VzLVZFJyxcbiAgICAgICAgMHgwNDJEOiAnZXUnLFxuICAgICAgICAweDBDMDc6ICdkZS1BVCcsXG4gICAgICAgIDB4MDQ0ODogJ29yJyxcbiAgICAgICAgMHgwODFEOiAnc3YtRkknLFxuICAgICAgICAweDA0MjM6ICdiZScsXG4gICAgICAgIDB4MDQwNzogJ2RlJyxcbiAgICAgICAgMHgwNDYzOiAncHMnLFxuICAgICAgICAweDA0MUQ6ICdzdicsXG4gICAgICAgIDB4MDg0NTogJ2JuJyxcbiAgICAgICAgMHgxNDA3OiAnZGUtTEknLFxuICAgICAgICAweDA0MTU6ICdwbCcsXG4gICAgICAgIDB4MDQ1QTogJ3N5cicsXG4gICAgICAgIDB4MDQ0NTogJ2JuLUlOJyxcbiAgICAgICAgMHgxMDA3OiAnZGUtTFUnLFxuICAgICAgICAweDA0MTY6ICdwdCcsXG4gICAgICAgIDB4MDQyODogJ3RnJyxcbiAgICAgICAgMHgyMDFBOiAnYnMtQ3lybCcsXG4gICAgICAgIDB4MDgwNzogJ2RlLUNIJyxcbiAgICAgICAgMHgwODE2OiAncHQtUFQnLFxuICAgICAgICAweDA4NUY6ICd0em0nLFxuICAgICAgICAweDE0MUE6ICdicycsXG4gICAgICAgIDB4MDQwODogJ2VsJyxcbiAgICAgICAgMHgwNDQ2OiAncGEnLFxuICAgICAgICAweDA0NDk6ICd0YScsXG4gICAgICAgIDB4MDQ3RTogJ2JyJyxcbiAgICAgICAgMHgwNDZGOiAna2wnLFxuICAgICAgICAweDA0NkI6ICdxdS1CTycsXG4gICAgICAgIDB4MDQ0NDogJ3R0JyxcbiAgICAgICAgMHgwNDAyOiAnYmcnLFxuICAgICAgICAweDA0NDc6ICdndScsXG4gICAgICAgIDB4MDg2QjogJ3F1LUVDJyxcbiAgICAgICAgMHgwNDRBOiAndGUnLFxuICAgICAgICAweDA0MDM6ICdjYScsXG4gICAgICAgIDB4MDQ2ODogJ2hhJyxcbiAgICAgICAgMHgwQzZCOiAncXUnLFxuICAgICAgICAweDA0MUU6ICd0aCcsXG4gICAgICAgIDB4MEMwNDogJ3poLUhLJyxcbiAgICAgICAgMHgwNDBEOiAnaGUnLFxuICAgICAgICAweDA0MTg6ICdybycsXG4gICAgICAgIDB4MDQ1MTogJ2JvJyxcbiAgICAgICAgMHgxNDA0OiAnemgtTU8nLFxuICAgICAgICAweDA0Mzk6ICdoaScsXG4gICAgICAgIDB4MDQxNzogJ3JtJyxcbiAgICAgICAgMHgwNDFGOiAndHInLFxuICAgICAgICAweDA4MDQ6ICd6aCcsXG4gICAgICAgIDB4MDQwRTogJ2h1JyxcbiAgICAgICAgMHgwNDE5OiAncnUnLFxuICAgICAgICAweDA0NDI6ICd0aycsXG4gICAgICAgIDB4MTAwNDogJ3poLVNHJyxcbiAgICAgICAgMHgwNDBGOiAnaXMnLFxuICAgICAgICAweDI0M0I6ICdzbW4nLFxuICAgICAgICAweDA0ODA6ICd1ZycsXG4gICAgICAgIDB4MDQwNDogJ3poLVRXJyxcbiAgICAgICAgMHgwNDcwOiAnaWcnLFxuICAgICAgICAweDEwM0I6ICdzbWotTk8nLFxuICAgICAgICAweDA0MjI6ICd1aycsXG4gICAgICAgIDB4MDQ4MzogJ2NvJyxcbiAgICAgICAgMHgwNDIxOiAnaWQnLFxuICAgICAgICAweDE0M0I6ICdzbWonLFxuICAgICAgICAweDA0MkU6ICdoc2InLFxuICAgICAgICAweDA0MUE6ICdocicsXG4gICAgICAgIDB4MDQ1RDogJ2l1JyxcbiAgICAgICAgMHgwQzNCOiAnc2UtRkknLFxuICAgICAgICAweDA0MjA6ICd1cicsXG4gICAgICAgIDB4MTAxQTogJ2hyLUJBJyxcbiAgICAgICAgMHgwODVEOiAnaXUtTGF0bicsXG4gICAgICAgIDB4MDQzQjogJ3NlJyxcbiAgICAgICAgMHgwODQzOiAndXotQ3lybCcsXG4gICAgICAgIDB4MDQwNTogJ2NzJyxcbiAgICAgICAgMHgwODNDOiAnZ2EnLFxuICAgICAgICAweDA4M0I6ICdzZS1TRScsXG4gICAgICAgIDB4MDQ0MzogJ3V6JyxcbiAgICAgICAgMHgwNDA2OiAnZGEnLFxuICAgICAgICAweDA0MzQ6ICd4aCcsXG4gICAgICAgIDB4MjAzQjogJ3NtcycsXG4gICAgICAgIDB4MDQyQTogJ3ZpJyxcbiAgICAgICAgMHgwNDhDOiAncHJzJyxcbiAgICAgICAgMHgwNDM1OiAnenUnLFxuICAgICAgICAweDE4M0I6ICdzbWEtTk8nLFxuICAgICAgICAweDA0NTI6ICdjeScsXG4gICAgICAgIDB4MDQ2NTogJ2R2JyxcbiAgICAgICAgMHgwNDEwOiAnaXQnLFxuICAgICAgICAweDFDM0I6ICdzbXMnLFxuICAgICAgICAweDA0ODg6ICd3bycsXG4gICAgICAgIDB4MDgxMzogJ25sLUJFJyxcbiAgICAgICAgMHgwODEwOiAnaXQtQ0gnLFxuICAgICAgICAweDA0NEY6ICdzYScsXG4gICAgICAgIDB4MDQ4NTogJ3NhaCcsXG4gICAgICAgIDB4MDQxMzogJ25sJyxcbiAgICAgICAgMHgwNDExOiAnamEnLFxuICAgICAgICAweDFDMUE6ICdzci1DeXJsLUJBJyxcbiAgICAgICAgMHgwNDc4OiAnaWknLFxuICAgICAgICAweDBDMDk6ICdlbi1BVScsXG4gICAgICAgIDB4MDQ0QjogJ2tuJyxcbiAgICAgICAgMHgwQzFBOiAnc3InLFxuICAgICAgICAweDA0NkE6ICd5bycsXG4gICAgICAgIDB4MjgwOTogJ2VuLUJaJyxcbiAgICAgICAgMHgwNDNGOiAna2snLFxuICAgICAgICAweDE4MUE6ICdzci1MYXRuLUJBJyxcbiAgICAgICAgMHgxMDA5OiAnZW4tQ0EnLFxuICAgICAgICAweDA0NTM6ICdrbScsXG4gICAgICAgIDB4MDgxQTogJ3NyLUxhdG4nLFxuICAgICAgICAweDI0MDk6ICdlbi0wMjknLFxuICAgICAgICAweDA0ODY6ICdxdWMnLFxuICAgICAgICAweDA0NkM6ICduc28nXG4gICAgfVxuXTtcblxuXG5sZXQgJDJiY2YyMjE3NTNlYzhlMzIkdmFyJE5hbWVSZWNvcmQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgcGxhdGZvcm1JRDogJDUyWklmJHVpbnQxNixcbiAgICBlbmNvZGluZ0lEOiAkNTJaSWYkdWludDE2LFxuICAgIGxhbmd1YWdlSUQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgbmFtZUlEOiAkNTJaSWYkdWludDE2LFxuICAgIGxlbmd0aDogJDUyWklmJHVpbnQxNixcbiAgICBzdHJpbmc6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCBuZXcgJDUyWklmJFN0cmluZygnbGVuZ3RoJywgKHQpPT4oMCwgJGU0NDlhZDc4ZDUwODQ1ZmUkZXhwb3J0JGJhZGM1NDRlMDY1MWI2YjEpKHQucGxhdGZvcm1JRCwgdC5lbmNvZGluZ0lELCB0Lmxhbmd1YWdlSUQpKSwge1xuICAgICAgICB0eXBlOiAncGFyZW50JyxcbiAgICAgICAgcmVsYXRpdmVUbzogKGN0eCk9PmN0eC5wYXJlbnQuc3RyaW5nT2Zmc2V0LFxuICAgICAgICBhbGxvd051bGw6IGZhbHNlXG4gICAgfSlcbn0pO1xubGV0ICQyYmNmMjIxNzUzZWM4ZTMyJHZhciRMYW5nVGFnUmVjb3JkID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGxlbmd0aDogJDUyWklmJHVpbnQxNixcbiAgICB0YWc6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCBuZXcgJDUyWklmJFN0cmluZygnbGVuZ3RoJywgJ3V0ZjE2YmUnKSwge1xuICAgICAgICB0eXBlOiAncGFyZW50JyxcbiAgICAgICAgcmVsYXRpdmVUbzogKGN0eCk9PmN0eC5zdHJpbmdPZmZzZXRcbiAgICB9KVxufSk7XG52YXIgJDJiY2YyMjE3NTNlYzhlMzIkdmFyJE5hbWVUYWJsZSA9IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KCQ1MlpJZiR1aW50MTYsIHtcbiAgICAwOiB7XG4gICAgICAgIGNvdW50OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBzdHJpbmdPZmZzZXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHJlY29yZHM6IG5ldyAkNTJaSWYkQXJyYXkoJDJiY2YyMjE3NTNlYzhlMzIkdmFyJE5hbWVSZWNvcmQsICdjb3VudCcpXG4gICAgfSxcbiAgICAxOiB7XG4gICAgICAgIGNvdW50OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBzdHJpbmdPZmZzZXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHJlY29yZHM6IG5ldyAkNTJaSWYkQXJyYXkoJDJiY2YyMjE3NTNlYzhlMzIkdmFyJE5hbWVSZWNvcmQsICdjb3VudCcpLFxuICAgICAgICBsYW5nVGFnQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGxhbmdUYWdzOiBuZXcgJDUyWklmJEFycmF5KCQyYmNmMjIxNzUzZWM4ZTMyJHZhciRMYW5nVGFnUmVjb3JkLCAnbGFuZ1RhZ0NvdW50JylcbiAgICB9XG59KTtcbnZhciAkMmJjZjIyMTc1M2VjOGUzMiRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gJDJiY2YyMjE3NTNlYzhlMzIkdmFyJE5hbWVUYWJsZTtcbmNvbnN0ICQyYmNmMjIxNzUzZWM4ZTMyJHZhciROQU1FUyA9IFtcbiAgICAnY29weXJpZ2h0JyxcbiAgICAnZm9udEZhbWlseScsXG4gICAgJ2ZvbnRTdWJmYW1pbHknLFxuICAgICd1bmlxdWVTdWJmYW1pbHknLFxuICAgICdmdWxsTmFtZScsXG4gICAgJ3ZlcnNpb24nLFxuICAgICdwb3N0c2NyaXB0TmFtZScsXG4gICAgJ3RyYWRlbWFyaycsXG4gICAgJ21hbnVmYWN0dXJlcicsXG4gICAgJ2Rlc2lnbmVyJyxcbiAgICAnZGVzY3JpcHRpb24nLFxuICAgICd2ZW5kb3JVUkwnLFxuICAgICdkZXNpZ25lclVSTCcsXG4gICAgJ2xpY2Vuc2UnLFxuICAgICdsaWNlbnNlVVJMJyxcbiAgICBudWxsLFxuICAgICdwcmVmZXJyZWRGYW1pbHknLFxuICAgICdwcmVmZXJyZWRTdWJmYW1pbHknLFxuICAgICdjb21wYXRpYmxlRnVsbCcsXG4gICAgJ3NhbXBsZVRleHQnLFxuICAgICdwb3N0c2NyaXB0Q0lERm9udE5hbWUnLFxuICAgICd3d3NGYW1pbHlOYW1lJyxcbiAgICAnd3dzU3ViZmFtaWx5TmFtZSdcbl07XG4kMmJjZjIyMTc1M2VjOGUzMiR2YXIkTmFtZVRhYmxlLnByb2Nlc3MgPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICB2YXIgcmVjb3JkcyA9IHt9O1xuICAgIGZvciAobGV0IHJlY29yZCBvZiB0aGlzLnJlY29yZHMpe1xuICAgICAgICAvLyBmaW5kIG91dCB3aGF0IGxhbmd1YWdlIHRoaXMgaXMgZm9yXG4gICAgICAgIGxldCBsYW5ndWFnZSA9ICgwLCAkZTQ0OWFkNzhkNTA4NDVmZSRleHBvcnQkMjA5MjM3NmZkMDAyZTEzKVtyZWNvcmQucGxhdGZvcm1JRF1bcmVjb3JkLmxhbmd1YWdlSURdO1xuICAgICAgICBpZiAobGFuZ3VhZ2UgPT0gbnVsbCAmJiB0aGlzLmxhbmdUYWdzICE9IG51bGwgJiYgcmVjb3JkLmxhbmd1YWdlSUQgPj0gMHg4MDAwKSBsYW5ndWFnZSA9IHRoaXMubGFuZ1RhZ3NbcmVjb3JkLmxhbmd1YWdlSUQgLSAweDgwMDBdLnRhZztcbiAgICAgICAgaWYgKGxhbmd1YWdlID09IG51bGwpIGxhbmd1YWdlID0gcmVjb3JkLnBsYXRmb3JtSUQgKyAnLScgKyByZWNvcmQubGFuZ3VhZ2VJRDtcbiAgICAgICAgLy8gaWYgdGhlIG5hbWVJRCBpcyA+PSAyNTYsIGl0IGlzIGEgZm9udCBmZWF0dXJlIHJlY29yZCAoQUFUKVxuICAgICAgICBsZXQga2V5ID0gcmVjb3JkLm5hbWVJRCA+PSAyNTYgPyAnZm9udEZlYXR1cmVzJyA6ICQyYmNmMjIxNzUzZWM4ZTMyJHZhciROQU1FU1tyZWNvcmQubmFtZUlEXSB8fCByZWNvcmQubmFtZUlEO1xuICAgICAgICBpZiAocmVjb3Jkc1trZXldID09IG51bGwpIHJlY29yZHNba2V5XSA9IHt9O1xuICAgICAgICBsZXQgb2JqID0gcmVjb3Jkc1trZXldO1xuICAgICAgICBpZiAocmVjb3JkLm5hbWVJRCA+PSAyNTYpIG9iaiA9IG9ialtyZWNvcmQubmFtZUlEXSB8fCAob2JqW3JlY29yZC5uYW1lSURdID0ge30pO1xuICAgICAgICBpZiAodHlwZW9mIHJlY29yZC5zdHJpbmcgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvYmpbbGFuZ3VhZ2VdICE9PSAnc3RyaW5nJykgb2JqW2xhbmd1YWdlXSA9IHJlY29yZC5zdHJpbmc7XG4gICAgfVxuICAgIHRoaXMucmVjb3JkcyA9IHJlY29yZHM7XG59O1xuJDJiY2YyMjE3NTNlYzhlMzIkdmFyJE5hbWVUYWJsZS5wcmVFbmNvZGUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnJlY29yZHMpKSByZXR1cm47XG4gICAgdGhpcy52ZXJzaW9uID0gMDtcbiAgICBsZXQgcmVjb3JkcyA9IFtdO1xuICAgIGZvcihsZXQga2V5IGluIHRoaXMucmVjb3Jkcyl7XG4gICAgICAgIGxldCB2YWwgPSB0aGlzLnJlY29yZHNba2V5XTtcbiAgICAgICAgaWYgKGtleSA9PT0gJ2ZvbnRGZWF0dXJlcycpIGNvbnRpbnVlO1xuICAgICAgICByZWNvcmRzLnB1c2goe1xuICAgICAgICAgICAgcGxhdGZvcm1JRDogMyxcbiAgICAgICAgICAgIGVuY29kaW5nSUQ6IDEsXG4gICAgICAgICAgICBsYW5ndWFnZUlEOiAweDQwOSxcbiAgICAgICAgICAgIG5hbWVJRDogJDJiY2YyMjE3NTNlYzhlMzIkdmFyJE5BTUVTLmluZGV4T2Yoa2V5KSxcbiAgICAgICAgICAgIGxlbmd0aDogdmFsLmVuLmxlbmd0aCAqIDIsXG4gICAgICAgICAgICBzdHJpbmc6IHZhbC5lblxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGtleSA9PT0gJ3Bvc3RzY3JpcHROYW1lJykgcmVjb3Jkcy5wdXNoKHtcbiAgICAgICAgICAgIHBsYXRmb3JtSUQ6IDEsXG4gICAgICAgICAgICBlbmNvZGluZ0lEOiAwLFxuICAgICAgICAgICAgbGFuZ3VhZ2VJRDogMCxcbiAgICAgICAgICAgIG5hbWVJRDogJDJiY2YyMjE3NTNlYzhlMzIkdmFyJE5BTUVTLmluZGV4T2Yoa2V5KSxcbiAgICAgICAgICAgIGxlbmd0aDogdmFsLmVuLmxlbmd0aCxcbiAgICAgICAgICAgIHN0cmluZzogdmFsLmVuXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLnJlY29yZHMgPSByZWNvcmRzO1xuICAgIHRoaXMuY291bnQgPSByZWNvcmRzLmxlbmd0aDtcbiAgICB0aGlzLnN0cmluZ09mZnNldCA9ICQyYmNmMjIxNzUzZWM4ZTMyJHZhciROYW1lVGFibGUuc2l6ZSh0aGlzLCBudWxsLCBmYWxzZSk7XG59O1xuXG5cblxudmFyICQ4NGIyNzJhYTMxYjcwNjA2JHZhciRPUzIgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkdWludDE2LCB7XG4gICAgaGVhZGVyOiB7XG4gICAgICAgIHhBdmdDaGFyV2lkdGg6ICQ1MlpJZiRpbnQxNixcbiAgICAgICAgdXNXZWlnaHRDbGFzczogJDUyWklmJHVpbnQxNixcbiAgICAgICAgdXNXaWR0aENsYXNzOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBmc1R5cGU6IG5ldyAkNTJaSWYkQml0ZmllbGQoJDUyWklmJHVpbnQxNiwgW1xuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICdub0VtYmVkZGluZycsXG4gICAgICAgICAgICAndmlld09ubHknLFxuICAgICAgICAgICAgJ2VkaXRhYmxlJyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAnbm9TdWJzZXR0aW5nJyxcbiAgICAgICAgICAgICdiaXRtYXBPbmx5J1xuICAgICAgICBdKSxcbiAgICAgICAgeVN1YnNjcmlwdFhTaXplOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHlTdWJzY3JpcHRZU2l6ZTogJDUyWklmJGludDE2LFxuICAgICAgICB5U3Vic2NyaXB0WE9mZnNldDogJDUyWklmJGludDE2LFxuICAgICAgICB5U3Vic2NyaXB0WU9mZnNldDogJDUyWklmJGludDE2LFxuICAgICAgICB5U3VwZXJzY3JpcHRYU2l6ZTogJDUyWklmJGludDE2LFxuICAgICAgICB5U3VwZXJzY3JpcHRZU2l6ZTogJDUyWklmJGludDE2LFxuICAgICAgICB5U3VwZXJzY3JpcHRYT2Zmc2V0OiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHlTdXBlcnNjcmlwdFlPZmZzZXQ6ICQ1MlpJZiRpbnQxNixcbiAgICAgICAgeVN0cmlrZW91dFNpemU6ICQ1MlpJZiRpbnQxNixcbiAgICAgICAgeVN0cmlrZW91dFBvc2l0aW9uOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHNGYW1pbHlDbGFzczogJDUyWklmJGludDE2LFxuICAgICAgICBwYW5vc2U6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQ4LCAxMCksXG4gICAgICAgIHVsQ2hhclJhbmdlOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MzIsIDQpLFxuICAgICAgICB2ZW5kb3JJRDogbmV3ICQ1MlpJZiRTdHJpbmcoNCksXG4gICAgICAgIGZzU2VsZWN0aW9uOiBuZXcgJDUyWklmJEJpdGZpZWxkKCQ1MlpJZiR1aW50MTYsIFtcbiAgICAgICAgICAgICdpdGFsaWMnLFxuICAgICAgICAgICAgJ3VuZGVyc2NvcmUnLFxuICAgICAgICAgICAgJ25lZ2F0aXZlJyxcbiAgICAgICAgICAgICdvdXRsaW5lZCcsXG4gICAgICAgICAgICAnc3RyaWtlb3V0JyxcbiAgICAgICAgICAgICdib2xkJyxcbiAgICAgICAgICAgICdyZWd1bGFyJyxcbiAgICAgICAgICAgICd1c2VUeXBvTWV0cmljcycsXG4gICAgICAgICAgICAnd3dzJyxcbiAgICAgICAgICAgICdvYmxpcXVlJ1xuICAgICAgICBdKSxcbiAgICAgICAgdXNGaXJzdENoYXJJbmRleDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgdXNMYXN0Q2hhckluZGV4OiAkNTJaSWYkdWludDE2IC8vIFRoZSBtYXhpbXVtIFVuaWNvZGUgaW5kZXggaW4gdGhpcyBmb250XG4gICAgfSxcbiAgICAvLyBUaGUgQXBwbGUgdmVyc2lvbiBvZiB0aGlzIHRhYmxlIGVuZHMgaGVyZSwgYnV0IHRoZSBNaWNyb3NvZnQgb25lIGNvbnRpbnVlcyBvbi4uLlxuICAgIDA6IHt9LFxuICAgIDE6IHtcbiAgICAgICAgdHlwb0FzY2VuZGVyOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHR5cG9EZXNjZW5kZXI6ICQ1MlpJZiRpbnQxNixcbiAgICAgICAgdHlwb0xpbmVHYXA6ICQ1MlpJZiRpbnQxNixcbiAgICAgICAgd2luQXNjZW50OiAkNTJaSWYkdWludDE2LFxuICAgICAgICB3aW5EZXNjZW50OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBjb2RlUGFnZVJhbmdlOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MzIsIDIpXG4gICAgfSxcbiAgICAyOiB7XG4gICAgICAgIC8vIHRoZXNlIHNob3VsZCBiZSBjb21tb24gd2l0aCB2ZXJzaW9uIDEgc29tZWhvd1xuICAgICAgICB0eXBvQXNjZW5kZXI6ICQ1MlpJZiRpbnQxNixcbiAgICAgICAgdHlwb0Rlc2NlbmRlcjogJDUyWklmJGludDE2LFxuICAgICAgICB0eXBvTGluZUdhcDogJDUyWklmJGludDE2LFxuICAgICAgICB3aW5Bc2NlbnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHdpbkRlc2NlbnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGNvZGVQYWdlUmFuZ2U6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQzMiwgMiksXG4gICAgICAgIHhIZWlnaHQ6ICQ1MlpJZiRpbnQxNixcbiAgICAgICAgY2FwSGVpZ2h0OiAkNTJaSWYkaW50MTYsXG4gICAgICAgIGRlZmF1bHRDaGFyOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBicmVha0NoYXI6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIG1heENvbnRlbnQ6ICQ1MlpJZiR1aW50MTZcbiAgICB9LFxuICAgIDU6IHtcbiAgICAgICAgdHlwb0FzY2VuZGVyOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHR5cG9EZXNjZW5kZXI6ICQ1MlpJZiRpbnQxNixcbiAgICAgICAgdHlwb0xpbmVHYXA6ICQ1MlpJZiRpbnQxNixcbiAgICAgICAgd2luQXNjZW50OiAkNTJaSWYkdWludDE2LFxuICAgICAgICB3aW5EZXNjZW50OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBjb2RlUGFnZVJhbmdlOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MzIsIDIpLFxuICAgICAgICB4SGVpZ2h0OiAkNTJaSWYkaW50MTYsXG4gICAgICAgIGNhcEhlaWdodDogJDUyWklmJGludDE2LFxuICAgICAgICBkZWZhdWx0Q2hhcjogJDUyWklmJHVpbnQxNixcbiAgICAgICAgYnJlYWtDaGFyOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBtYXhDb250ZW50OiAkNTJaSWYkdWludDE2LFxuICAgICAgICB1c0xvd2VyT3B0aWNhbFBvaW50U2l6ZTogJDUyWklmJHVpbnQxNixcbiAgICAgICAgdXNVcHBlck9wdGljYWxQb2ludFNpemU6ICQ1MlpJZiR1aW50MTZcbiAgICB9XG59KTtcbmxldCAkODRiMjcyYWEzMWI3MDYwNiR2YXIkdmVyc2lvbnMgPSAkODRiMjcyYWEzMWI3MDYwNiR2YXIkT1MyLnZlcnNpb25zO1xuJDg0YjI3MmFhMzFiNzA2MDYkdmFyJHZlcnNpb25zWzNdID0gJDg0YjI3MmFhMzFiNzA2MDYkdmFyJHZlcnNpb25zWzRdID0gJDg0YjI3MmFhMzFiNzA2MDYkdmFyJHZlcnNpb25zWzJdO1xudmFyICQ4NGIyNzJhYTMxYjcwNjA2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSAkODRiMjcyYWEzMWI3MDYwNiR2YXIkT1MyO1xuXG5cblxudmFyIC8vIFBvc3RTY3JpcHQgaW5mb3JtYXRpb25cbiQzMmQ5ZTJlYjk1NjVkOTNjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkZml4ZWQzMiwge1xuICAgIGhlYWRlcjoge1xuICAgICAgICBpdGFsaWNBbmdsZTogJDUyWklmJGZpeGVkMzIsXG4gICAgICAgIHVuZGVybGluZVBvc2l0aW9uOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHVuZGVybGluZVRoaWNrbmVzczogJDUyWklmJGludDE2LFxuICAgICAgICBpc0ZpeGVkUGl0Y2g6ICQ1MlpJZiR1aW50MzIsXG4gICAgICAgIG1pbk1lbVR5cGU0MjogJDUyWklmJHVpbnQzMixcbiAgICAgICAgbWF4TWVtVHlwZTQyOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBtaW5NZW1UeXBlMTogJDUyWklmJHVpbnQzMixcbiAgICAgICAgbWF4TWVtVHlwZTE6ICQ1MlpJZiR1aW50MzIgLy8gTWF4aW11bSBtZW1vcnkgdXNhZ2Ugd2hlbiBhIFRydWVUeXBlIGZvbnQgaXMgZG93bmxvYWRlZCBhcyBhIFR5cGUgMSBmb250XG4gICAgfSxcbiAgICAxOiB7fSxcbiAgICAyOiB7XG4gICAgICAgIG51bWJlck9mR2x5cGhzOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBnbHlwaE5hbWVJbmRleDogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCAnbnVtYmVyT2ZHbHlwaHMnKSxcbiAgICAgICAgbmFtZXM6IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRTdHJpbmcoJDUyWklmJHVpbnQ4KSlcbiAgICB9LFxuICAgIDIuNToge1xuICAgICAgICBudW1iZXJPZkdseXBoczogJDUyWklmJHVpbnQxNixcbiAgICAgICAgb2Zmc2V0czogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDgsICdudW1iZXJPZkdseXBocycpXG4gICAgfSxcbiAgICAzOiB7fSxcbiAgICA0OiB7XG4gICAgICAgIG1hcDogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDMyLCAodCk9PnQucGFyZW50Lm1heHAubnVtR2x5cGhzKVxuICAgIH1cbn0pO1xuXG5cblxudmFyIC8vIEFuIGFycmF5IG9mIHByZWRlZmluZWQgdmFsdWVzIGFjY2Vzc2libGUgYnkgaW5zdHJ1Y3Rpb25zXG4kNTIwMmJkOWQ5YWQ4ZWFhYyRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGNvbnRyb2xWYWx1ZXM6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJGludDE2KVxufSk7XG5cblxuXG52YXIgLy8gQSBsaXN0IG9mIGluc3RydWN0aW9ucyB0aGF0IGFyZSBleGVjdXRlZCBvbmNlIHdoZW4gYSBmb250IGlzIGZpcnN0IHVzZWQuXG4vLyBUaGVzZSBpbnN0cnVjdGlvbnMgYXJlIGtub3duIGFzIHRoZSBmb250IHByb2dyYW0uIFRoZSBtYWluIHVzZSBvZiB0aGlzIHRhYmxlXG4vLyBpcyBmb3IgdGhlIGRlZmluaXRpb24gb2YgZnVuY3Rpb25zIHRoYXQgYXJlIHVzZWQgaW4gbWFueSBkaWZmZXJlbnQgZ2x5cGggcHJvZ3JhbXMuXG4kNWMwZjM3Y2E1ZmZiMTg1MCRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGluc3RydWN0aW9uczogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDgpXG59KTtcblxuXG5cbmxldCAkMmIyYjI2MDkwMmIxYzU3ZSR2YXIkbG9jYSA9IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KCdoZWFkLmluZGV4VG9Mb2NGb3JtYXQnLCB7XG4gICAgMDoge1xuICAgICAgICBvZmZzZXRzOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MTYpXG4gICAgfSxcbiAgICAxOiB7XG4gICAgICAgIG9mZnNldHM6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQzMilcbiAgICB9XG59KTtcbiQyYjJiMjYwOTAyYjFjNTdlJHZhciRsb2NhLnByb2Nlc3MgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy52ZXJzaW9uID09PSAwICYmICF0aGlzLl9wcm9jZXNzZWQpIHtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMub2Zmc2V0cy5sZW5ndGg7IGkrKyl0aGlzLm9mZnNldHNbaV0gPDw9IDE7XG4gICAgICAgIHRoaXMuX3Byb2Nlc3NlZCA9IHRydWU7XG4gICAgfVxufTtcbiQyYjJiMjYwOTAyYjFjNTdlJHZhciRsb2NhLnByZUVuY29kZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnZlcnNpb24gPT09IDAgJiYgdGhpcy5fcHJvY2Vzc2VkICE9PSBmYWxzZSkge1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5vZmZzZXRzLmxlbmd0aDsgaSsrKXRoaXMub2Zmc2V0c1tpXSA+Pj49IDE7XG4gICAgICAgIHRoaXMuX3Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIH1cbn07XG52YXIgJDJiMmIyNjA5MDJiMWM1N2UkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9ICQyYjJiMjYwOTAyYjFjNTdlJHZhciRsb2NhO1xuXG5cblxudmFyIC8vIFNldCBvZiBpbnN0cnVjdGlvbnMgZXhlY3V0ZWQgd2hlbmV2ZXIgdGhlIHBvaW50IHNpemUgb3IgZm9udCB0cmFuc2Zvcm1hdGlvbiBjaGFuZ2VcbiQ3YWZiODc4YzdiZWE0ZjY2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgY29udHJvbFZhbHVlUHJvZ3JhbTogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDgpXG59KTtcblxuXG5cbnZhciAvLyBvbmx5IHVzZWQgZm9yIGVuY29kaW5nXG4kNmM5MmI2MzcxYmNlOGJkOSRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRBcnJheShuZXcgJDUyWklmJEJ1ZmZlcik7XG5cblxuXG5cbmNsYXNzICQ0M2U5ODIxZWYzNzE3ZWVjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIGdldENGRlZlcnNpb24oY3R4KSB7XG4gICAgICAgIHdoaWxlKGN0eCAmJiAhY3R4LmhkclNpemUpY3R4ID0gY3R4LnBhcmVudDtcbiAgICAgICAgcmV0dXJuIGN0eCA/IGN0eC52ZXJzaW9uIDogLTE7XG4gICAgfVxuICAgIGRlY29kZShzdHJlYW0sIHBhcmVudCkge1xuICAgICAgICBsZXQgdmVyc2lvbiA9IHRoaXMuZ2V0Q0ZGVmVyc2lvbihwYXJlbnQpO1xuICAgICAgICBsZXQgY291bnQgPSB2ZXJzaW9uID49IDIgPyBzdHJlYW0ucmVhZFVJbnQzMkJFKCkgOiBzdHJlYW0ucmVhZFVJbnQxNkJFKCk7XG4gICAgICAgIGlmIChjb3VudCA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgICBsZXQgb2ZmU2l6ZSA9IHN0cmVhbS5yZWFkVUludDgoKTtcbiAgICAgICAgbGV0IG9mZnNldFR5cGU7XG4gICAgICAgIGlmIChvZmZTaXplID09PSAxKSBvZmZzZXRUeXBlID0gJDUyWklmJHVpbnQ4O1xuICAgICAgICBlbHNlIGlmIChvZmZTaXplID09PSAyKSBvZmZzZXRUeXBlID0gJDUyWklmJHVpbnQxNjtcbiAgICAgICAgZWxzZSBpZiAob2ZmU2l6ZSA9PT0gMykgb2Zmc2V0VHlwZSA9ICQ1MlpJZiR1aW50MjQ7XG4gICAgICAgIGVsc2UgaWYgKG9mZlNpemUgPT09IDQpIG9mZnNldFR5cGUgPSAkNTJaSWYkdWludDMyO1xuICAgICAgICBlbHNlIHRocm93IG5ldyBFcnJvcihgQmFkIG9mZnNldCBzaXplIGluIENGRkluZGV4OiAke29mZlNpemV9ICR7c3RyZWFtLnBvc31gKTtcbiAgICAgICAgbGV0IHJldCA9IFtdO1xuICAgICAgICBsZXQgc3RhcnRQb3MgPSBzdHJlYW0ucG9zICsgKGNvdW50ICsgMSkgKiBvZmZTaXplIC0gMTtcbiAgICAgICAgbGV0IHN0YXJ0ID0gb2Zmc2V0VHlwZS5kZWNvZGUoc3RyZWFtKTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspe1xuICAgICAgICAgICAgbGV0IGVuZCA9IG9mZnNldFR5cGUuZGVjb2RlKHN0cmVhbSk7XG4gICAgICAgICAgICBpZiAodGhpcy50eXBlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsZXQgcG9zID0gc3RyZWFtLnBvcztcbiAgICAgICAgICAgICAgICBzdHJlYW0ucG9zID0gc3RhcnRQb3MgKyBzdGFydDtcbiAgICAgICAgICAgICAgICBwYXJlbnQubGVuZ3RoID0gZW5kIC0gc3RhcnQ7XG4gICAgICAgICAgICAgICAgcmV0LnB1c2godGhpcy50eXBlLmRlY29kZShzdHJlYW0sIHBhcmVudCkpO1xuICAgICAgICAgICAgICAgIHN0cmVhbS5wb3MgPSBwb3M7XG4gICAgICAgICAgICB9IGVsc2UgcmV0LnB1c2goe1xuICAgICAgICAgICAgICAgIG9mZnNldDogc3RhcnRQb3MgKyBzdGFydCxcbiAgICAgICAgICAgICAgICBsZW5ndGg6IGVuZCAtIHN0YXJ0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHN0YXJ0ID0gZW5kO1xuICAgICAgICB9XG4gICAgICAgIHN0cmVhbS5wb3MgPSBzdGFydFBvcyArIHN0YXJ0O1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICBzaXplKGFyciwgcGFyZW50KSB7XG4gICAgICAgIGxldCBzaXplID0gMjtcbiAgICAgICAgaWYgKGFyci5sZW5ndGggPT09IDApIHJldHVybiBzaXplO1xuICAgICAgICBsZXQgdHlwZSA9IHRoaXMudHlwZSB8fCBuZXcgJDUyWklmJEJ1ZmZlcjtcbiAgICAgICAgLy8gZmluZCBtYXhpbXVtIG9mZnNldCB0byBkZXRtaW5pbmUgb2Zmc2V0IHR5cGVcbiAgICAgICAgbGV0IG9mZnNldCA9IDE7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgbGV0IGl0ZW0gPSBhcnJbaV07XG4gICAgICAgICAgICBvZmZzZXQgKz0gdHlwZS5zaXplKGl0ZW0sIHBhcmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG9mZnNldFR5cGU7XG4gICAgICAgIGlmIChvZmZzZXQgPD0gMHhmZikgb2Zmc2V0VHlwZSA9ICQ1MlpJZiR1aW50ODtcbiAgICAgICAgZWxzZSBpZiAob2Zmc2V0IDw9IDB4ZmZmZikgb2Zmc2V0VHlwZSA9ICQ1MlpJZiR1aW50MTY7XG4gICAgICAgIGVsc2UgaWYgKG9mZnNldCA8PSAweGZmZmZmZikgb2Zmc2V0VHlwZSA9ICQ1MlpJZiR1aW50MjQ7XG4gICAgICAgIGVsc2UgaWYgKG9mZnNldCA8PSAweGZmZmZmZmZmKSBvZmZzZXRUeXBlID0gJDUyWklmJHVpbnQzMjtcbiAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgb2Zmc2V0IGluIENGRkluZGV4XCIpO1xuICAgICAgICBzaXplICs9IDEgKyBvZmZzZXRUeXBlLnNpemUoKSAqIChhcnIubGVuZ3RoICsgMSk7XG4gICAgICAgIHNpemUgKz0gb2Zmc2V0IC0gMTtcbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgfVxuICAgIGVuY29kZShzdHJlYW0sIGFyciwgcGFyZW50KSB7XG4gICAgICAgIHN0cmVhbS53cml0ZVVJbnQxNkJFKGFyci5sZW5ndGgpO1xuICAgICAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgICBsZXQgdHlwZSA9IHRoaXMudHlwZSB8fCBuZXcgJDUyWklmJEJ1ZmZlcjtcbiAgICAgICAgLy8gZmluZCBtYXhpbXVtIG9mZnNldCB0byBkZXRtaW5pbmUgb2Zmc2V0IHR5cGVcbiAgICAgICAgbGV0IHNpemVzID0gW107XG4gICAgICAgIGxldCBvZmZzZXQgPSAxO1xuICAgICAgICBmb3IgKGxldCBpdGVtIG9mIGFycil7XG4gICAgICAgICAgICBsZXQgcyA9IHR5cGUuc2l6ZShpdGVtLCBwYXJlbnQpO1xuICAgICAgICAgICAgc2l6ZXMucHVzaChzKTtcbiAgICAgICAgICAgIG9mZnNldCArPSBzO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvZmZzZXRUeXBlO1xuICAgICAgICBpZiAob2Zmc2V0IDw9IDB4ZmYpIG9mZnNldFR5cGUgPSAkNTJaSWYkdWludDg7XG4gICAgICAgIGVsc2UgaWYgKG9mZnNldCA8PSAweGZmZmYpIG9mZnNldFR5cGUgPSAkNTJaSWYkdWludDE2O1xuICAgICAgICBlbHNlIGlmIChvZmZzZXQgPD0gMHhmZmZmZmYpIG9mZnNldFR5cGUgPSAkNTJaSWYkdWludDI0O1xuICAgICAgICBlbHNlIGlmIChvZmZzZXQgPD0gMHhmZmZmZmZmZikgb2Zmc2V0VHlwZSA9ICQ1MlpJZiR1aW50MzI7XG4gICAgICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKFwiQmFkIG9mZnNldCBpbiBDRkZJbmRleFwiKTtcbiAgICAgICAgLy8gd3JpdGUgb2Zmc2V0IHNpemVcbiAgICAgICAgc3RyZWFtLndyaXRlVUludDgob2Zmc2V0VHlwZS5zaXplKCkpO1xuICAgICAgICAvLyB3cml0ZSBlbGVtZW50c1xuICAgICAgICBvZmZzZXQgPSAxO1xuICAgICAgICBvZmZzZXRUeXBlLmVuY29kZShzdHJlYW0sIG9mZnNldCk7XG4gICAgICAgIGZvciAobGV0IHNpemUgb2Ygc2l6ZXMpe1xuICAgICAgICAgICAgb2Zmc2V0ICs9IHNpemU7XG4gICAgICAgICAgICBvZmZzZXRUeXBlLmVuY29kZShzdHJlYW0sIG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBhcnIpdHlwZS5lbmNvZGUoc3RyZWFtLCBpdGVtLCBwYXJlbnQpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHR5cGUpe1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIH1cbn1cblxuXG5cblxuXG5jb25zdCAkYzJkMjhlOTI3MDhmOTlkYSR2YXIkRkxPQVRfRU9GID0gMHhmO1xuY29uc3QgJGMyZDI4ZTkyNzA4Zjk5ZGEkdmFyJEZMT0FUX0xPT0tVUCA9IFtcbiAgICAnMCcsXG4gICAgJzEnLFxuICAgICcyJyxcbiAgICAnMycsXG4gICAgJzQnLFxuICAgICc1JyxcbiAgICAnNicsXG4gICAgJzcnLFxuICAgICc4JyxcbiAgICAnOScsXG4gICAgJy4nLFxuICAgICdFJyxcbiAgICAnRS0nLFxuICAgIG51bGwsXG4gICAgJy0nXG5dO1xuY29uc3QgJGMyZDI4ZTkyNzA4Zjk5ZGEkdmFyJEZMT0FUX0VOQ09ERV9MT09LVVAgPSB7XG4gICAgJy4nOiAxMCxcbiAgICAnRSc6IDExLFxuICAgICdFLSc6IDEyLFxuICAgICctJzogMTRcbn07XG5jbGFzcyAkYzJkMjhlOTI3MDhmOTlkYSRleHBvcnQkMmUyYmNkODczOWFlMDM5IHtcbiAgICBzdGF0aWMgZGVjb2RlKHN0cmVhbSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKDMyIDw9IHZhbHVlICYmIHZhbHVlIDw9IDI0NikgcmV0dXJuIHZhbHVlIC0gMTM5O1xuICAgICAgICBpZiAoMjQ3IDw9IHZhbHVlICYmIHZhbHVlIDw9IDI1MCkgcmV0dXJuICh2YWx1ZSAtIDI0NykgKiAyNTYgKyBzdHJlYW0ucmVhZFVJbnQ4KCkgKyAxMDg7XG4gICAgICAgIGlmICgyNTEgPD0gdmFsdWUgJiYgdmFsdWUgPD0gMjU0KSByZXR1cm4gLSh2YWx1ZSAtIDI1MSkgKiAyNTYgLSBzdHJlYW0ucmVhZFVJbnQ4KCkgLSAxMDg7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gMjgpIHJldHVybiBzdHJlYW0ucmVhZEludDE2QkUoKTtcbiAgICAgICAgaWYgKHZhbHVlID09PSAyOSkgcmV0dXJuIHN0cmVhbS5yZWFkSW50MzJCRSgpO1xuICAgICAgICBpZiAodmFsdWUgPT09IDMwKSB7XG4gICAgICAgICAgICBsZXQgc3RyID0gJyc7XG4gICAgICAgICAgICB3aGlsZSh0cnVlKXtcbiAgICAgICAgICAgICAgICBsZXQgYiA9IHN0cmVhbS5yZWFkVUludDgoKTtcbiAgICAgICAgICAgICAgICBsZXQgbjEgPSBiID4+IDQ7XG4gICAgICAgICAgICAgICAgaWYgKG4xID09PSAkYzJkMjhlOTI3MDhmOTlkYSR2YXIkRkxPQVRfRU9GKSBicmVhaztcbiAgICAgICAgICAgICAgICBzdHIgKz0gJGMyZDI4ZTkyNzA4Zjk5ZGEkdmFyJEZMT0FUX0xPT0tVUFtuMV07XG4gICAgICAgICAgICAgICAgbGV0IG4yID0gYiAmIDE1O1xuICAgICAgICAgICAgICAgIGlmIChuMiA9PT0gJGMyZDI4ZTkyNzA4Zjk5ZGEkdmFyJEZMT0FUX0VPRikgYnJlYWs7XG4gICAgICAgICAgICAgICAgc3RyICs9ICRjMmQyOGU5MjcwOGY5OWRhJHZhciRGTE9BVF9MT09LVVBbbjJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoc3RyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc3RhdGljIHNpemUodmFsdWUpIHtcbiAgICAgICAgLy8gaWYgdGhlIHZhbHVlIG5lZWRzIHRvIGJlIGZvcmNlZCB0byB0aGUgbGFyZ2VzdCBzaXplICgzMiBiaXQpXG4gICAgICAgIC8vIGUuZy4gZm9yIHVua25vd24gcG9pbnRlcnMsIHNldCB0byAzMjc2OFxuICAgICAgICBpZiAodmFsdWUuZm9yY2VMYXJnZSkgdmFsdWUgPSAzMjc2ODtcbiAgICAgICAgaWYgKCh2YWx1ZSB8IDApICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgbGV0IHN0ciA9ICcnICsgdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gMSArIE1hdGguY2VpbCgoc3RyLmxlbmd0aCArIDEpIC8gMik7XG4gICAgICAgIH0gZWxzZSBpZiAoLTEwNyA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSAxMDcpIHJldHVybiAxO1xuICAgICAgICBlbHNlIGlmICgxMDggPD0gdmFsdWUgJiYgdmFsdWUgPD0gMTEzMSB8fCAtMTEzMSA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSAtMTA4KSByZXR1cm4gMjtcbiAgICAgICAgZWxzZSBpZiAoLTMyNzY4IDw9IHZhbHVlICYmIHZhbHVlIDw9IDMyNzY3KSByZXR1cm4gMztcbiAgICAgICAgZWxzZSByZXR1cm4gNTtcbiAgICB9XG4gICAgc3RhdGljIGVuY29kZShzdHJlYW0sIHZhbHVlKSB7XG4gICAgICAgIC8vIGlmIHRoZSB2YWx1ZSBuZWVkcyB0byBiZSBmb3JjZWQgdG8gdGhlIGxhcmdlc3Qgc2l6ZSAoMzIgYml0KVxuICAgICAgICAvLyBlLmcuIGZvciB1bmtub3duIHBvaW50ZXJzLCBzYXZlIHRoZSBvbGQgdmFsdWUgYW5kIHNldCB0byAzMjc2OFxuICAgICAgICBsZXQgdmFsID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlLmZvcmNlTGFyZ2UpIHtcbiAgICAgICAgICAgIHN0cmVhbS53cml0ZVVJbnQ4KDI5KTtcbiAgICAgICAgICAgIHJldHVybiBzdHJlYW0ud3JpdGVJbnQzMkJFKHZhbCk7XG4gICAgICAgIH0gZWxzZSBpZiAoKHZhbCB8IDApICE9PSB2YWwpIHtcbiAgICAgICAgICAgIHN0cmVhbS53cml0ZVVJbnQ4KDMwKTtcbiAgICAgICAgICAgIGxldCBzdHIgPSAnJyArIHZhbDtcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpICs9IDIpe1xuICAgICAgICAgICAgICAgIGxldCBjMSA9IHN0cltpXTtcbiAgICAgICAgICAgICAgICBsZXQgbjEgPSAkYzJkMjhlOTI3MDhmOTlkYSR2YXIkRkxPQVRfRU5DT0RFX0xPT0tVUFtjMV0gfHwgK2MxO1xuICAgICAgICAgICAgICAgIGlmIChpID09PSBzdHIubGVuZ3RoIC0gMSkgdmFyIG4yID0gJGMyZDI4ZTkyNzA4Zjk5ZGEkdmFyJEZMT0FUX0VPRjtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGMyID0gc3RyW2kgKyAxXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4yID0gJGMyZDI4ZTkyNzA4Zjk5ZGEkdmFyJEZMT0FUX0VOQ09ERV9MT09LVVBbYzJdIHx8ICtjMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RyZWFtLndyaXRlVUludDgobjEgPDwgNCB8IG4yICYgMTUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG4yICE9PSAkYzJkMjhlOTI3MDhmOTlkYSR2YXIkRkxPQVRfRU9GKSByZXR1cm4gc3RyZWFtLndyaXRlVUludDgoJGMyZDI4ZTkyNzA4Zjk5ZGEkdmFyJEZMT0FUX0VPRiA8PCA0KTtcbiAgICAgICAgfSBlbHNlIGlmICgtMTA3IDw9IHZhbCAmJiB2YWwgPD0gMTA3KSByZXR1cm4gc3RyZWFtLndyaXRlVUludDgodmFsICsgMTM5KTtcbiAgICAgICAgZWxzZSBpZiAoMTA4IDw9IHZhbCAmJiB2YWwgPD0gMTEzMSkge1xuICAgICAgICAgICAgdmFsIC09IDEwODtcbiAgICAgICAgICAgIHN0cmVhbS53cml0ZVVJbnQ4KCh2YWwgPj4gOCkgKyAyNDcpO1xuICAgICAgICAgICAgcmV0dXJuIHN0cmVhbS53cml0ZVVJbnQ4KHZhbCAmIDB4ZmYpO1xuICAgICAgICB9IGVsc2UgaWYgKC0xMTMxIDw9IHZhbCAmJiB2YWwgPD0gLTEwOCkge1xuICAgICAgICAgICAgdmFsID0gLXZhbCAtIDEwODtcbiAgICAgICAgICAgIHN0cmVhbS53cml0ZVVJbnQ4KCh2YWwgPj4gOCkgKyAyNTEpO1xuICAgICAgICAgICAgcmV0dXJuIHN0cmVhbS53cml0ZVVJbnQ4KHZhbCAmIDB4ZmYpO1xuICAgICAgICB9IGVsc2UgaWYgKC0zMjc2OCA8PSB2YWwgJiYgdmFsIDw9IDMyNzY3KSB7XG4gICAgICAgICAgICBzdHJlYW0ud3JpdGVVSW50OCgyOCk7XG4gICAgICAgICAgICByZXR1cm4gc3RyZWFtLndyaXRlSW50MTZCRSh2YWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyZWFtLndyaXRlVUludDgoMjkpO1xuICAgICAgICAgICAgcmV0dXJuIHN0cmVhbS53cml0ZUludDMyQkUodmFsKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5jbGFzcyAkNjFhYTU0OWYxNmQ1OGI5YiRleHBvcnQkMmUyYmNkODczOWFlMDM5IHtcbiAgICBkZWNvZGVPcGVyYW5kcyh0eXBlLCBzdHJlYW0sIHJldCwgb3BlcmFuZHMpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodHlwZSkpIHJldHVybiBvcGVyYW5kcy5tYXAoKG9wLCBpKT0+dGhpcy5kZWNvZGVPcGVyYW5kcyh0eXBlW2ldLCBzdHJlYW0sIHJldCwgW1xuICAgICAgICAgICAgICAgIG9wXG4gICAgICAgICAgICBdKSk7XG4gICAgICAgIGVsc2UgaWYgKHR5cGUuZGVjb2RlICE9IG51bGwpIHJldHVybiB0eXBlLmRlY29kZShzdHJlYW0sIHJldCwgb3BlcmFuZHMpO1xuICAgICAgICBlbHNlIHN3aXRjaCh0eXBlKXtcbiAgICAgICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgICBjYXNlICdvZmZzZXQnOlxuICAgICAgICAgICAgY2FzZSAnc2lkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gb3BlcmFuZHNbMF07XG4gICAgICAgICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gISFvcGVyYW5kc1swXTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wZXJhbmRzO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVuY29kZU9wZXJhbmRzKHR5cGUsIHN0cmVhbSwgY3R4LCBvcGVyYW5kcykge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0eXBlKSkgcmV0dXJuIG9wZXJhbmRzLm1hcCgob3AsIGkpPT50aGlzLmVuY29kZU9wZXJhbmRzKHR5cGVbaV0sIHN0cmVhbSwgY3R4LCBvcClbMF0pO1xuICAgICAgICBlbHNlIGlmICh0eXBlLmVuY29kZSAhPSBudWxsKSByZXR1cm4gdHlwZS5lbmNvZGUoc3RyZWFtLCBvcGVyYW5kcywgY3R4KTtcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIG9wZXJhbmRzID09PSAnbnVtYmVyJykgcmV0dXJuIFtcbiAgICAgICAgICAgIG9wZXJhbmRzXG4gICAgICAgIF07XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBvcGVyYW5kcyA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gW1xuICAgICAgICAgICAgK29wZXJhbmRzXG4gICAgICAgIF07XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob3BlcmFuZHMpKSByZXR1cm4gb3BlcmFuZHM7XG4gICAgICAgIGVsc2UgcmV0dXJuIFtcbiAgICAgICAgICAgIG9wZXJhbmRzXG4gICAgICAgIF07XG4gICAgfVxuICAgIGRlY29kZShzdHJlYW0sIHBhcmVudCkge1xuICAgICAgICBsZXQgZW5kID0gc3RyZWFtLnBvcyArIHBhcmVudC5sZW5ndGg7XG4gICAgICAgIGxldCByZXQgPSB7fTtcbiAgICAgICAgbGV0IG9wZXJhbmRzID0gW107XG4gICAgICAgIC8vIGRlZmluZSBoaWRkZW4gcHJvcGVydGllc1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhyZXQsIHtcbiAgICAgICAgICAgIHBhcmVudDoge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBwYXJlbnRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc3RhcnRPZmZzZXQ6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogc3RyZWFtLnBvc1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gZmlsbCBpbiBkZWZhdWx0c1xuICAgICAgICBmb3IobGV0IGtleSBpbiB0aGlzLmZpZWxkcyl7XG4gICAgICAgICAgICBsZXQgZmllbGQgPSB0aGlzLmZpZWxkc1trZXldO1xuICAgICAgICAgICAgcmV0W2ZpZWxkWzFdXSA9IGZpZWxkWzNdO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlKHN0cmVhbS5wb3MgPCBlbmQpe1xuICAgICAgICAgICAgbGV0IGIgPSBzdHJlYW0ucmVhZFVJbnQ4KCk7XG4gICAgICAgICAgICBpZiAoYiA8IDI4KSB7XG4gICAgICAgICAgICAgICAgaWYgKGIgPT09IDEyKSBiID0gYiA8PCA4IHwgc3RyZWFtLnJlYWRVSW50OCgpO1xuICAgICAgICAgICAgICAgIGxldCBmaWVsZCA9IHRoaXMuZmllbGRzW2JdO1xuICAgICAgICAgICAgICAgIGlmICghZmllbGQpIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBvcGVyYXRvciAke2J9YCk7XG4gICAgICAgICAgICAgICAgbGV0IHZhbCA9IHRoaXMuZGVjb2RlT3BlcmFuZHMoZmllbGRbMl0sIHN0cmVhbSwgcmV0LCBvcGVyYW5kcyk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWwgaW5zdGFuY2VvZiAoMCwgJDUyWklmJFByb3BlcnR5RGVzY3JpcHRvcikpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXQsIGZpZWxkWzFdLCB2YWwpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHJldFtmaWVsZFsxXV0gPSB2YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9wZXJhbmRzID0gW107XG4gICAgICAgICAgICB9IGVsc2Ugb3BlcmFuZHMucHVzaCgoMCwgJGMyZDI4ZTkyNzA4Zjk5ZGEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkuZGVjb2RlKHN0cmVhbSwgYikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIHNpemUoZGljdCwgcGFyZW50LCBpbmNsdWRlUG9pbnRlcnMgPSB0cnVlKSB7XG4gICAgICAgIGxldCBjdHggPSB7XG4gICAgICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgICAgIHZhbDogZGljdCxcbiAgICAgICAgICAgIHBvaW50ZXJTaXplOiAwLFxuICAgICAgICAgICAgc3RhcnRPZmZzZXQ6IHBhcmVudC5zdGFydE9mZnNldCB8fCAwXG4gICAgICAgIH07XG4gICAgICAgIGxldCBsZW4gPSAwO1xuICAgICAgICBmb3IobGV0IGsgaW4gdGhpcy5maWVsZHMpe1xuICAgICAgICAgICAgbGV0IGZpZWxkID0gdGhpcy5maWVsZHNba107XG4gICAgICAgICAgICBsZXQgdmFsID0gZGljdFtmaWVsZFsxXV07XG4gICAgICAgICAgICBpZiAodmFsID09IG51bGwgfHwgKDAsICQ1MlpJZiRmYXN0ZGVlcGVxdWFsKSh2YWwsIGZpZWxkWzNdKSkgY29udGludWU7XG4gICAgICAgICAgICBsZXQgb3BlcmFuZHMgPSB0aGlzLmVuY29kZU9wZXJhbmRzKGZpZWxkWzJdLCBudWxsLCBjdHgsIHZhbCk7XG4gICAgICAgICAgICBmb3IgKGxldCBvcCBvZiBvcGVyYW5kcylsZW4gKz0gKDAsICRjMmQyOGU5MjcwOGY5OWRhJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLnNpemUob3ApO1xuICAgICAgICAgICAgbGV0IGtleSA9IEFycmF5LmlzQXJyYXkoZmllbGRbMF0pID8gZmllbGRbMF0gOiBbXG4gICAgICAgICAgICAgICAgZmllbGRbMF1cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBsZW4gKz0ga2V5Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5jbHVkZVBvaW50ZXJzKSBsZW4gKz0gY3R4LnBvaW50ZXJTaXplO1xuICAgICAgICByZXR1cm4gbGVuO1xuICAgIH1cbiAgICBlbmNvZGUoc3RyZWFtLCBkaWN0LCBwYXJlbnQpIHtcbiAgICAgICAgbGV0IGN0eCA9IHtcbiAgICAgICAgICAgIHBvaW50ZXJzOiBbXSxcbiAgICAgICAgICAgIHN0YXJ0T2Zmc2V0OiBzdHJlYW0ucG9zLFxuICAgICAgICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICAgICAgICB2YWw6IGRpY3QsXG4gICAgICAgICAgICBwb2ludGVyU2l6ZTogMFxuICAgICAgICB9O1xuICAgICAgICBjdHgucG9pbnRlck9mZnNldCA9IHN0cmVhbS5wb3MgKyB0aGlzLnNpemUoZGljdCwgY3R4LCBmYWxzZSk7XG4gICAgICAgIGZvciAobGV0IGZpZWxkIG9mIHRoaXMub3BzKXtcbiAgICAgICAgICAgIGxldCB2YWwgPSBkaWN0W2ZpZWxkWzFdXTtcbiAgICAgICAgICAgIGlmICh2YWwgPT0gbnVsbCB8fCAoMCwgJDUyWklmJGZhc3RkZWVwZXF1YWwpKHZhbCwgZmllbGRbM10pKSBjb250aW51ZTtcbiAgICAgICAgICAgIGxldCBvcGVyYW5kcyA9IHRoaXMuZW5jb2RlT3BlcmFuZHMoZmllbGRbMl0sIHN0cmVhbSwgY3R4LCB2YWwpO1xuICAgICAgICAgICAgZm9yIChsZXQgb3Agb2Ygb3BlcmFuZHMpKDAsICRjMmQyOGU5MjcwOGY5OWRhJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLmVuY29kZShzdHJlYW0sIG9wKTtcbiAgICAgICAgICAgIGxldCBrZXkgPSBBcnJheS5pc0FycmF5KGZpZWxkWzBdKSA/IGZpZWxkWzBdIDogW1xuICAgICAgICAgICAgICAgIGZpZWxkWzBdXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgZm9yIChsZXQgb3Agb2Yga2V5KXN0cmVhbS53cml0ZVVJbnQ4KG9wKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIHdoaWxlKGkgPCBjdHgucG9pbnRlcnMubGVuZ3RoKXtcbiAgICAgICAgICAgIGxldCBwdHIgPSBjdHgucG9pbnRlcnNbaSsrXTtcbiAgICAgICAgICAgIHB0ci50eXBlLmVuY29kZShzdHJlYW0sIHB0ci52YWwsIHB0ci5wYXJlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3RydWN0b3Iob3BzID0gW10pe1xuICAgICAgICB0aGlzLm9wcyA9IG9wcztcbiAgICAgICAgdGhpcy5maWVsZHMgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgZmllbGQgb2Ygb3BzKXtcbiAgICAgICAgICAgIGxldCBrZXkgPSBBcnJheS5pc0FycmF5KGZpZWxkWzBdKSA/IGZpZWxkWzBdWzBdIDw8IDggfCBmaWVsZFswXVsxXSA6IGZpZWxkWzBdO1xuICAgICAgICAgICAgdGhpcy5maWVsZHNba2V5XSA9IGZpZWxkO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cblxuXG5jbGFzcyAkMGUzNGE0M2QwNWJkZTgyYyRleHBvcnQkMmUyYmNkODczOWFlMDM5IGV4dGVuZHMgJDUyWklmJFBvaW50ZXIge1xuICAgIGRlY29kZShzdHJlYW0sIHBhcmVudCwgb3BlcmFuZHMpIHtcbiAgICAgICAgdGhpcy5vZmZzZXRUeXBlID0ge1xuICAgICAgICAgICAgZGVjb2RlOiAoKT0+b3BlcmFuZHNbMF1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmRlY29kZShzdHJlYW0sIHBhcmVudCwgb3BlcmFuZHMpO1xuICAgIH1cbiAgICBlbmNvZGUoc3RyZWFtLCB2YWx1ZSwgY3R4KSB7XG4gICAgICAgIGlmICghc3RyZWFtKSB7XG4gICAgICAgICAgICAvLyBjb21wdXRlIHRoZSBzaXplIChzbyBjdHgucG9pbnRlclNpemUgaXMgY29ycmVjdClcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0VHlwZSA9IHtcbiAgICAgICAgICAgICAgICBzaXplOiAoKT0+MFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuc2l6ZSh2YWx1ZSwgY3R4KTtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgbmV3ICQwZTM0YTQzZDA1YmRlODJjJHZhciRQdHIoMClcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHB0ciA9IG51bGw7XG4gICAgICAgIHRoaXMub2Zmc2V0VHlwZSA9IHtcbiAgICAgICAgICAgIGVuY29kZTogKHN0cmVhbSwgdmFsKT0+cHRyID0gdmFsXG4gICAgICAgIH07XG4gICAgICAgIHN1cGVyLmVuY29kZShzdHJlYW0sIHZhbHVlLCBjdHgpO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbmV3ICQwZTM0YTQzZDA1YmRlODJjJHZhciRQdHIocHRyKVxuICAgICAgICBdO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCBvcHRpb25zID0ge30pe1xuICAgICAgICBpZiAob3B0aW9ucy50eXBlID09IG51bGwpIG9wdGlvbnMudHlwZSA9ICdnbG9iYWwnO1xuICAgICAgICBzdXBlcihudWxsLCB0eXBlLCBvcHRpb25zKTtcbiAgICB9XG59XG5jbGFzcyAkMGUzNGE0M2QwNWJkZTgyYyR2YXIkUHRyIHtcbiAgICB2YWx1ZU9mKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWw7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHZhbCl7XG4gICAgICAgIHRoaXMudmFsID0gdmFsO1xuICAgICAgICB0aGlzLmZvcmNlTGFyZ2UgPSB0cnVlO1xuICAgIH1cbn1cblxuXG5cblxuXG5jbGFzcyAkNmQ1OWRiMmUyOWNjNzdiMyR2YXIkQ0ZGQmxlbmRPcCB7XG4gICAgc3RhdGljIGRlY29kZShzdHJlYW0sIHBhcmVudCwgb3BlcmFuZHMpIHtcbiAgICAgICAgbGV0IG51bUJsZW5kcyA9IG9wZXJhbmRzLnBvcCgpO1xuICAgICAgICAvLyBUT0RPOiBhY3R1YWxseSBibGVuZC4gRm9yIG5vdyBqdXN0IGNvbnN1bWUgdGhlIGRlbHRhc1xuICAgICAgICAvLyBzaW5jZSB3ZSBkb24ndCB1c2UgYW55IG9mIHRoZSB2YWx1ZXMgYW55d2F5LlxuICAgICAgICB3aGlsZShvcGVyYW5kcy5sZW5ndGggPiBudW1CbGVuZHMpb3BlcmFuZHMucG9wKCk7XG4gICAgfVxufVxudmFyICQ2ZDU5ZGIyZTI5Y2M3N2IzJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgKDAsICQ2MWFhNTQ5ZjE2ZDU4YjliJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKFtcbiAgICAvLyBrZXkgICAgICAgbmFtZSAgICAgICAgICAgICAgICAgICAgdHlwZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRcbiAgICBbXG4gICAgICAgIDYsXG4gICAgICAgICdCbHVlVmFsdWVzJyxcbiAgICAgICAgJ2RlbHRhJyxcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICA3LFxuICAgICAgICAnT3RoZXJCbHVlcycsXG4gICAgICAgICdkZWx0YScsXG4gICAgICAgIG51bGxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgOCxcbiAgICAgICAgJ0ZhbWlseUJsdWVzJyxcbiAgICAgICAgJ2RlbHRhJyxcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICA5LFxuICAgICAgICAnRmFtaWx5T3RoZXJCbHVlcycsXG4gICAgICAgICdkZWx0YScsXG4gICAgICAgIG51bGxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICA5XG4gICAgICAgIF0sXG4gICAgICAgICdCbHVlU2NhbGUnLFxuICAgICAgICAnbnVtYmVyJyxcbiAgICAgICAgMC4wMzk2MjVcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAxMFxuICAgICAgICBdLFxuICAgICAgICAnQmx1ZVNoaWZ0JyxcbiAgICAgICAgJ251bWJlcicsXG4gICAgICAgIDdcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAxMVxuICAgICAgICBdLFxuICAgICAgICAnQmx1ZUZ1enonLFxuICAgICAgICAnbnVtYmVyJyxcbiAgICAgICAgMVxuICAgIF0sXG4gICAgW1xuICAgICAgICAxMCxcbiAgICAgICAgJ1N0ZEhXJyxcbiAgICAgICAgJ251bWJlcicsXG4gICAgICAgIG51bGxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgMTEsXG4gICAgICAgICdTdGRWVycsXG4gICAgICAgICdudW1iZXInLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMTJcbiAgICAgICAgXSxcbiAgICAgICAgJ1N0ZW1TbmFwSCcsXG4gICAgICAgICdkZWx0YScsXG4gICAgICAgIG51bGxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAxM1xuICAgICAgICBdLFxuICAgICAgICAnU3RlbVNuYXBWJyxcbiAgICAgICAgJ2RlbHRhJyxcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDE0XG4gICAgICAgIF0sXG4gICAgICAgICdGb3JjZUJvbGQnLFxuICAgICAgICAnYm9vbGVhbicsXG4gICAgICAgIGZhbHNlXG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMTdcbiAgICAgICAgXSxcbiAgICAgICAgJ0xhbmd1YWdlR3JvdXAnLFxuICAgICAgICAnbnVtYmVyJyxcbiAgICAgICAgMFxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDE4XG4gICAgICAgIF0sXG4gICAgICAgICdFeHBhbnNpb25GYWN0b3InLFxuICAgICAgICAnbnVtYmVyJyxcbiAgICAgICAgMC4wNlxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDE5XG4gICAgICAgIF0sXG4gICAgICAgICdpbml0aWFsUmFuZG9tU2VlZCcsXG4gICAgICAgICdudW1iZXInLFxuICAgICAgICAwXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDIwLFxuICAgICAgICAnZGVmYXVsdFdpZHRoWCcsXG4gICAgICAgICdudW1iZXInLFxuICAgICAgICAwXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDIxLFxuICAgICAgICAnbm9taW5hbFdpZHRoWCcsXG4gICAgICAgICdudW1iZXInLFxuICAgICAgICAwXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDIyLFxuICAgICAgICAndnNpbmRleCcsXG4gICAgICAgICdudW1iZXInLFxuICAgICAgICAwXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDIzLFxuICAgICAgICAnYmxlbmQnLFxuICAgICAgICAkNmQ1OWRiMmUyOWNjNzdiMyR2YXIkQ0ZGQmxlbmRPcCxcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICAxOSxcbiAgICAgICAgJ1N1YnJzJyxcbiAgICAgICAgbmV3ICgwLCAkMGUzNGE0M2QwNWJkZTgyYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KShuZXcgKDAsICQ0M2U5ODIxZWYzNzE3ZWVjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLCB7XG4gICAgICAgICAgICB0eXBlOiAnbG9jYWwnXG4gICAgICAgIH0pLFxuICAgICAgICBudWxsXG4gICAgXVxuXSk7XG5cblxuLy8gQXV0b21hdGljYWxseSBnZW5lcmF0ZWQgZnJvbSBBcHBlbmRpeCBBIG9mIHRoZSBDRkYgc3BlY2lmaWNhdGlvbjsgZG9cbi8vIG5vdCBlZGl0LiBMZW5ndGggc2hvdWxkIGJlIDM5MS5cbnZhciAkMjI5MjI0YWVjNDM3ODNjNSRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gW1xuICAgIFwiLm5vdGRlZlwiLFxuICAgIFwic3BhY2VcIixcbiAgICBcImV4Y2xhbVwiLFxuICAgIFwicXVvdGVkYmxcIixcbiAgICBcIm51bWJlcnNpZ25cIixcbiAgICBcImRvbGxhclwiLFxuICAgIFwicGVyY2VudFwiLFxuICAgIFwiYW1wZXJzYW5kXCIsXG4gICAgXCJxdW90ZXJpZ2h0XCIsXG4gICAgXCJwYXJlbmxlZnRcIixcbiAgICBcInBhcmVucmlnaHRcIixcbiAgICBcImFzdGVyaXNrXCIsXG4gICAgXCJwbHVzXCIsXG4gICAgXCJjb21tYVwiLFxuICAgIFwiaHlwaGVuXCIsXG4gICAgXCJwZXJpb2RcIixcbiAgICBcInNsYXNoXCIsXG4gICAgXCJ6ZXJvXCIsXG4gICAgXCJvbmVcIixcbiAgICBcInR3b1wiLFxuICAgIFwidGhyZWVcIixcbiAgICBcImZvdXJcIixcbiAgICBcImZpdmVcIixcbiAgICBcInNpeFwiLFxuICAgIFwic2V2ZW5cIixcbiAgICBcImVpZ2h0XCIsXG4gICAgXCJuaW5lXCIsXG4gICAgXCJjb2xvblwiLFxuICAgIFwic2VtaWNvbG9uXCIsXG4gICAgXCJsZXNzXCIsXG4gICAgXCJlcXVhbFwiLFxuICAgIFwiZ3JlYXRlclwiLFxuICAgIFwicXVlc3Rpb25cIixcbiAgICBcImF0XCIsXG4gICAgXCJBXCIsXG4gICAgXCJCXCIsXG4gICAgXCJDXCIsXG4gICAgXCJEXCIsXG4gICAgXCJFXCIsXG4gICAgXCJGXCIsXG4gICAgXCJHXCIsXG4gICAgXCJIXCIsXG4gICAgXCJJXCIsXG4gICAgXCJKXCIsXG4gICAgXCJLXCIsXG4gICAgXCJMXCIsXG4gICAgXCJNXCIsXG4gICAgXCJOXCIsXG4gICAgXCJPXCIsXG4gICAgXCJQXCIsXG4gICAgXCJRXCIsXG4gICAgXCJSXCIsXG4gICAgXCJTXCIsXG4gICAgXCJUXCIsXG4gICAgXCJVXCIsXG4gICAgXCJWXCIsXG4gICAgXCJXXCIsXG4gICAgXCJYXCIsXG4gICAgXCJZXCIsXG4gICAgXCJaXCIsXG4gICAgXCJicmFja2V0bGVmdFwiLFxuICAgIFwiYmFja3NsYXNoXCIsXG4gICAgXCJicmFja2V0cmlnaHRcIixcbiAgICBcImFzY2lpY2lyY3VtXCIsXG4gICAgXCJ1bmRlcnNjb3JlXCIsXG4gICAgXCJxdW90ZWxlZnRcIixcbiAgICBcImFcIixcbiAgICBcImJcIixcbiAgICBcImNcIixcbiAgICBcImRcIixcbiAgICBcImVcIixcbiAgICBcImZcIixcbiAgICBcImdcIixcbiAgICBcImhcIixcbiAgICBcImlcIixcbiAgICBcImpcIixcbiAgICBcImtcIixcbiAgICBcImxcIixcbiAgICBcIm1cIixcbiAgICBcIm5cIixcbiAgICBcIm9cIixcbiAgICBcInBcIixcbiAgICBcInFcIixcbiAgICBcInJcIixcbiAgICBcInNcIixcbiAgICBcInRcIixcbiAgICBcInVcIixcbiAgICBcInZcIixcbiAgICBcIndcIixcbiAgICBcInhcIixcbiAgICBcInlcIixcbiAgICBcInpcIixcbiAgICBcImJyYWNlbGVmdFwiLFxuICAgIFwiYmFyXCIsXG4gICAgXCJicmFjZXJpZ2h0XCIsXG4gICAgXCJhc2NpaXRpbGRlXCIsXG4gICAgXCJleGNsYW1kb3duXCIsXG4gICAgXCJjZW50XCIsXG4gICAgXCJzdGVybGluZ1wiLFxuICAgIFwiZnJhY3Rpb25cIixcbiAgICBcInllblwiLFxuICAgIFwiZmxvcmluXCIsXG4gICAgXCJzZWN0aW9uXCIsXG4gICAgXCJjdXJyZW5jeVwiLFxuICAgIFwicXVvdGVzaW5nbGVcIixcbiAgICBcInF1b3RlZGJsbGVmdFwiLFxuICAgIFwiZ3VpbGxlbW90bGVmdFwiLFxuICAgIFwiZ3VpbHNpbmdsbGVmdFwiLFxuICAgIFwiZ3VpbHNpbmdscmlnaHRcIixcbiAgICBcImZpXCIsXG4gICAgXCJmbFwiLFxuICAgIFwiZW5kYXNoXCIsXG4gICAgXCJkYWdnZXJcIixcbiAgICBcImRhZ2dlcmRibFwiLFxuICAgIFwicGVyaW9kY2VudGVyZWRcIixcbiAgICBcInBhcmFncmFwaFwiLFxuICAgIFwiYnVsbGV0XCIsXG4gICAgXCJxdW90ZXNpbmdsYmFzZVwiLFxuICAgIFwicXVvdGVkYmxiYXNlXCIsXG4gICAgXCJxdW90ZWRibHJpZ2h0XCIsXG4gICAgXCJndWlsbGVtb3RyaWdodFwiLFxuICAgIFwiZWxsaXBzaXNcIixcbiAgICBcInBlcnRob3VzYW5kXCIsXG4gICAgXCJxdWVzdGlvbmRvd25cIixcbiAgICBcImdyYXZlXCIsXG4gICAgXCJhY3V0ZVwiLFxuICAgIFwiY2lyY3VtZmxleFwiLFxuICAgIFwidGlsZGVcIixcbiAgICBcIm1hY3JvblwiLFxuICAgIFwiYnJldmVcIixcbiAgICBcImRvdGFjY2VudFwiLFxuICAgIFwiZGllcmVzaXNcIixcbiAgICBcInJpbmdcIixcbiAgICBcImNlZGlsbGFcIixcbiAgICBcImh1bmdhcnVtbGF1dFwiLFxuICAgIFwib2dvbmVrXCIsXG4gICAgXCJjYXJvblwiLFxuICAgIFwiZW1kYXNoXCIsXG4gICAgXCJBRVwiLFxuICAgIFwib3JkZmVtaW5pbmVcIixcbiAgICBcIkxzbGFzaFwiLFxuICAgIFwiT3NsYXNoXCIsXG4gICAgXCJPRVwiLFxuICAgIFwib3JkbWFzY3VsaW5lXCIsXG4gICAgXCJhZVwiLFxuICAgIFwiZG90bGVzc2lcIixcbiAgICBcImxzbGFzaFwiLFxuICAgIFwib3NsYXNoXCIsXG4gICAgXCJvZVwiLFxuICAgIFwiZ2VybWFuZGJsc1wiLFxuICAgIFwib25lc3VwZXJpb3JcIixcbiAgICBcImxvZ2ljYWxub3RcIixcbiAgICBcIm11XCIsXG4gICAgXCJ0cmFkZW1hcmtcIixcbiAgICBcIkV0aFwiLFxuICAgIFwib25laGFsZlwiLFxuICAgIFwicGx1c21pbnVzXCIsXG4gICAgXCJUaG9yblwiLFxuICAgIFwib25lcXVhcnRlclwiLFxuICAgIFwiZGl2aWRlXCIsXG4gICAgXCJicm9rZW5iYXJcIixcbiAgICBcImRlZ3JlZVwiLFxuICAgIFwidGhvcm5cIixcbiAgICBcInRocmVlcXVhcnRlcnNcIixcbiAgICBcInR3b3N1cGVyaW9yXCIsXG4gICAgXCJyZWdpc3RlcmVkXCIsXG4gICAgXCJtaW51c1wiLFxuICAgIFwiZXRoXCIsXG4gICAgXCJtdWx0aXBseVwiLFxuICAgIFwidGhyZWVzdXBlcmlvclwiLFxuICAgIFwiY29weXJpZ2h0XCIsXG4gICAgXCJBYWN1dGVcIixcbiAgICBcIkFjaXJjdW1mbGV4XCIsXG4gICAgXCJBZGllcmVzaXNcIixcbiAgICBcIkFncmF2ZVwiLFxuICAgIFwiQXJpbmdcIixcbiAgICBcIkF0aWxkZVwiLFxuICAgIFwiQ2NlZGlsbGFcIixcbiAgICBcIkVhY3V0ZVwiLFxuICAgIFwiRWNpcmN1bWZsZXhcIixcbiAgICBcIkVkaWVyZXNpc1wiLFxuICAgIFwiRWdyYXZlXCIsXG4gICAgXCJJYWN1dGVcIixcbiAgICBcIkljaXJjdW1mbGV4XCIsXG4gICAgXCJJZGllcmVzaXNcIixcbiAgICBcIklncmF2ZVwiLFxuICAgIFwiTnRpbGRlXCIsXG4gICAgXCJPYWN1dGVcIixcbiAgICBcIk9jaXJjdW1mbGV4XCIsXG4gICAgXCJPZGllcmVzaXNcIixcbiAgICBcIk9ncmF2ZVwiLFxuICAgIFwiT3RpbGRlXCIsXG4gICAgXCJTY2Fyb25cIixcbiAgICBcIlVhY3V0ZVwiLFxuICAgIFwiVWNpcmN1bWZsZXhcIixcbiAgICBcIlVkaWVyZXNpc1wiLFxuICAgIFwiVWdyYXZlXCIsXG4gICAgXCJZYWN1dGVcIixcbiAgICBcIllkaWVyZXNpc1wiLFxuICAgIFwiWmNhcm9uXCIsXG4gICAgXCJhYWN1dGVcIixcbiAgICBcImFjaXJjdW1mbGV4XCIsXG4gICAgXCJhZGllcmVzaXNcIixcbiAgICBcImFncmF2ZVwiLFxuICAgIFwiYXJpbmdcIixcbiAgICBcImF0aWxkZVwiLFxuICAgIFwiY2NlZGlsbGFcIixcbiAgICBcImVhY3V0ZVwiLFxuICAgIFwiZWNpcmN1bWZsZXhcIixcbiAgICBcImVkaWVyZXNpc1wiLFxuICAgIFwiZWdyYXZlXCIsXG4gICAgXCJpYWN1dGVcIixcbiAgICBcImljaXJjdW1mbGV4XCIsXG4gICAgXCJpZGllcmVzaXNcIixcbiAgICBcImlncmF2ZVwiLFxuICAgIFwibnRpbGRlXCIsXG4gICAgXCJvYWN1dGVcIixcbiAgICBcIm9jaXJjdW1mbGV4XCIsXG4gICAgXCJvZGllcmVzaXNcIixcbiAgICBcIm9ncmF2ZVwiLFxuICAgIFwib3RpbGRlXCIsXG4gICAgXCJzY2Fyb25cIixcbiAgICBcInVhY3V0ZVwiLFxuICAgIFwidWNpcmN1bWZsZXhcIixcbiAgICBcInVkaWVyZXNpc1wiLFxuICAgIFwidWdyYXZlXCIsXG4gICAgXCJ5YWN1dGVcIixcbiAgICBcInlkaWVyZXNpc1wiLFxuICAgIFwiemNhcm9uXCIsXG4gICAgXCJleGNsYW1zbWFsbFwiLFxuICAgIFwiSHVuZ2FydW1sYXV0c21hbGxcIixcbiAgICBcImRvbGxhcm9sZHN0eWxlXCIsXG4gICAgXCJkb2xsYXJzdXBlcmlvclwiLFxuICAgIFwiYW1wZXJzYW5kc21hbGxcIixcbiAgICBcIkFjdXRlc21hbGxcIixcbiAgICBcInBhcmVubGVmdHN1cGVyaW9yXCIsXG4gICAgXCJwYXJlbnJpZ2h0c3VwZXJpb3JcIixcbiAgICBcInR3b2RvdGVubGVhZGVyXCIsXG4gICAgXCJvbmVkb3RlbmxlYWRlclwiLFxuICAgIFwiemVyb29sZHN0eWxlXCIsXG4gICAgXCJvbmVvbGRzdHlsZVwiLFxuICAgIFwidHdvb2xkc3R5bGVcIixcbiAgICBcInRocmVlb2xkc3R5bGVcIixcbiAgICBcImZvdXJvbGRzdHlsZVwiLFxuICAgIFwiZml2ZW9sZHN0eWxlXCIsXG4gICAgXCJzaXhvbGRzdHlsZVwiLFxuICAgIFwic2V2ZW5vbGRzdHlsZVwiLFxuICAgIFwiZWlnaHRvbGRzdHlsZVwiLFxuICAgIFwibmluZW9sZHN0eWxlXCIsXG4gICAgXCJjb21tYXN1cGVyaW9yXCIsXG4gICAgXCJ0aHJlZXF1YXJ0ZXJzZW1kYXNoXCIsXG4gICAgXCJwZXJpb2RzdXBlcmlvclwiLFxuICAgIFwicXVlc3Rpb25zbWFsbFwiLFxuICAgIFwiYXN1cGVyaW9yXCIsXG4gICAgXCJic3VwZXJpb3JcIixcbiAgICBcImNlbnRzdXBlcmlvclwiLFxuICAgIFwiZHN1cGVyaW9yXCIsXG4gICAgXCJlc3VwZXJpb3JcIixcbiAgICBcImlzdXBlcmlvclwiLFxuICAgIFwibHN1cGVyaW9yXCIsXG4gICAgXCJtc3VwZXJpb3JcIixcbiAgICBcIm5zdXBlcmlvclwiLFxuICAgIFwib3N1cGVyaW9yXCIsXG4gICAgXCJyc3VwZXJpb3JcIixcbiAgICBcInNzdXBlcmlvclwiLFxuICAgIFwidHN1cGVyaW9yXCIsXG4gICAgXCJmZlwiLFxuICAgIFwiZmZpXCIsXG4gICAgXCJmZmxcIixcbiAgICBcInBhcmVubGVmdGluZmVyaW9yXCIsXG4gICAgXCJwYXJlbnJpZ2h0aW5mZXJpb3JcIixcbiAgICBcIkNpcmN1bWZsZXhzbWFsbFwiLFxuICAgIFwiaHlwaGVuc3VwZXJpb3JcIixcbiAgICBcIkdyYXZlc21hbGxcIixcbiAgICBcIkFzbWFsbFwiLFxuICAgIFwiQnNtYWxsXCIsXG4gICAgXCJDc21hbGxcIixcbiAgICBcIkRzbWFsbFwiLFxuICAgIFwiRXNtYWxsXCIsXG4gICAgXCJGc21hbGxcIixcbiAgICBcIkdzbWFsbFwiLFxuICAgIFwiSHNtYWxsXCIsXG4gICAgXCJJc21hbGxcIixcbiAgICBcIkpzbWFsbFwiLFxuICAgIFwiS3NtYWxsXCIsXG4gICAgXCJMc21hbGxcIixcbiAgICBcIk1zbWFsbFwiLFxuICAgIFwiTnNtYWxsXCIsXG4gICAgXCJPc21hbGxcIixcbiAgICBcIlBzbWFsbFwiLFxuICAgIFwiUXNtYWxsXCIsXG4gICAgXCJSc21hbGxcIixcbiAgICBcIlNzbWFsbFwiLFxuICAgIFwiVHNtYWxsXCIsXG4gICAgXCJVc21hbGxcIixcbiAgICBcIlZzbWFsbFwiLFxuICAgIFwiV3NtYWxsXCIsXG4gICAgXCJYc21hbGxcIixcbiAgICBcIllzbWFsbFwiLFxuICAgIFwiWnNtYWxsXCIsXG4gICAgXCJjb2xvbm1vbmV0YXJ5XCIsXG4gICAgXCJvbmVmaXR0ZWRcIixcbiAgICBcInJ1cGlhaFwiLFxuICAgIFwiVGlsZGVzbWFsbFwiLFxuICAgIFwiZXhjbGFtZG93bnNtYWxsXCIsXG4gICAgXCJjZW50b2xkc3R5bGVcIixcbiAgICBcIkxzbGFzaHNtYWxsXCIsXG4gICAgXCJTY2Fyb25zbWFsbFwiLFxuICAgIFwiWmNhcm9uc21hbGxcIixcbiAgICBcIkRpZXJlc2lzc21hbGxcIixcbiAgICBcIkJyZXZlc21hbGxcIixcbiAgICBcIkNhcm9uc21hbGxcIixcbiAgICBcIkRvdGFjY2VudHNtYWxsXCIsXG4gICAgXCJNYWNyb25zbWFsbFwiLFxuICAgIFwiZmlndXJlZGFzaFwiLFxuICAgIFwiaHlwaGVuaW5mZXJpb3JcIixcbiAgICBcIk9nb25la3NtYWxsXCIsXG4gICAgXCJSaW5nc21hbGxcIixcbiAgICBcIkNlZGlsbGFzbWFsbFwiLFxuICAgIFwicXVlc3Rpb25kb3duc21hbGxcIixcbiAgICBcIm9uZWVpZ2h0aFwiLFxuICAgIFwidGhyZWVlaWdodGhzXCIsXG4gICAgXCJmaXZlZWlnaHRoc1wiLFxuICAgIFwic2V2ZW5laWdodGhzXCIsXG4gICAgXCJvbmV0aGlyZFwiLFxuICAgIFwidHdvdGhpcmRzXCIsXG4gICAgXCJ6ZXJvc3VwZXJpb3JcIixcbiAgICBcImZvdXJzdXBlcmlvclwiLFxuICAgIFwiZml2ZXN1cGVyaW9yXCIsXG4gICAgXCJzaXhzdXBlcmlvclwiLFxuICAgIFwic2V2ZW5zdXBlcmlvclwiLFxuICAgIFwiZWlnaHRzdXBlcmlvclwiLFxuICAgIFwibmluZXN1cGVyaW9yXCIsXG4gICAgXCJ6ZXJvaW5mZXJpb3JcIixcbiAgICBcIm9uZWluZmVyaW9yXCIsXG4gICAgXCJ0d29pbmZlcmlvclwiLFxuICAgIFwidGhyZWVpbmZlcmlvclwiLFxuICAgIFwiZm91cmluZmVyaW9yXCIsXG4gICAgXCJmaXZlaW5mZXJpb3JcIixcbiAgICBcInNpeGluZmVyaW9yXCIsXG4gICAgXCJzZXZlbmluZmVyaW9yXCIsXG4gICAgXCJlaWdodGluZmVyaW9yXCIsXG4gICAgXCJuaW5laW5mZXJpb3JcIixcbiAgICBcImNlbnRpbmZlcmlvclwiLFxuICAgIFwiZG9sbGFyaW5mZXJpb3JcIixcbiAgICBcInBlcmlvZGluZmVyaW9yXCIsXG4gICAgXCJjb21tYWluZmVyaW9yXCIsXG4gICAgXCJBZ3JhdmVzbWFsbFwiLFxuICAgIFwiQWFjdXRlc21hbGxcIixcbiAgICBcIkFjaXJjdW1mbGV4c21hbGxcIixcbiAgICBcIkF0aWxkZXNtYWxsXCIsXG4gICAgXCJBZGllcmVzaXNzbWFsbFwiLFxuICAgIFwiQXJpbmdzbWFsbFwiLFxuICAgIFwiQUVzbWFsbFwiLFxuICAgIFwiQ2NlZGlsbGFzbWFsbFwiLFxuICAgIFwiRWdyYXZlc21hbGxcIixcbiAgICBcIkVhY3V0ZXNtYWxsXCIsXG4gICAgXCJFY2lyY3VtZmxleHNtYWxsXCIsXG4gICAgXCJFZGllcmVzaXNzbWFsbFwiLFxuICAgIFwiSWdyYXZlc21hbGxcIixcbiAgICBcIklhY3V0ZXNtYWxsXCIsXG4gICAgXCJJY2lyY3VtZmxleHNtYWxsXCIsXG4gICAgXCJJZGllcmVzaXNzbWFsbFwiLFxuICAgIFwiRXRoc21hbGxcIixcbiAgICBcIk50aWxkZXNtYWxsXCIsXG4gICAgXCJPZ3JhdmVzbWFsbFwiLFxuICAgIFwiT2FjdXRlc21hbGxcIixcbiAgICBcIk9jaXJjdW1mbGV4c21hbGxcIixcbiAgICBcIk90aWxkZXNtYWxsXCIsXG4gICAgXCJPZGllcmVzaXNzbWFsbFwiLFxuICAgIFwiT0VzbWFsbFwiLFxuICAgIFwiT3NsYXNoc21hbGxcIixcbiAgICBcIlVncmF2ZXNtYWxsXCIsXG4gICAgXCJVYWN1dGVzbWFsbFwiLFxuICAgIFwiVWNpcmN1bWZsZXhzbWFsbFwiLFxuICAgIFwiVWRpZXJlc2lzc21hbGxcIixcbiAgICBcIllhY3V0ZXNtYWxsXCIsXG4gICAgXCJUaG9ybnNtYWxsXCIsXG4gICAgXCJZZGllcmVzaXNzbWFsbFwiLFxuICAgIFwiMDAxLjAwMFwiLFxuICAgIFwiMDAxLjAwMVwiLFxuICAgIFwiMDAxLjAwMlwiLFxuICAgIFwiMDAxLjAwM1wiLFxuICAgIFwiQmxhY2tcIixcbiAgICBcIkJvbGRcIixcbiAgICBcIkJvb2tcIixcbiAgICBcIkxpZ2h0XCIsXG4gICAgXCJNZWRpdW1cIixcbiAgICBcIlJlZ3VsYXJcIixcbiAgICBcIlJvbWFuXCIsXG4gICAgXCJTZW1pYm9sZFwiXG5dO1xuXG5cbmxldCAkYmMwNDMzZDliN2U0MWY1ZiRleHBvcnQkZGVlMDAyNzA2MGZhMTNiZCA9IFtcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnc3BhY2UnLFxuICAgICdleGNsYW0nLFxuICAgICdxdW90ZWRibCcsXG4gICAgJ251bWJlcnNpZ24nLFxuICAgICdkb2xsYXInLFxuICAgICdwZXJjZW50JyxcbiAgICAnYW1wZXJzYW5kJyxcbiAgICAncXVvdGVyaWdodCcsXG4gICAgJ3BhcmVubGVmdCcsXG4gICAgJ3BhcmVucmlnaHQnLFxuICAgICdhc3RlcmlzaycsXG4gICAgJ3BsdXMnLFxuICAgICdjb21tYScsXG4gICAgJ2h5cGhlbicsXG4gICAgJ3BlcmlvZCcsXG4gICAgJ3NsYXNoJyxcbiAgICAnemVybycsXG4gICAgJ29uZScsXG4gICAgJ3R3bycsXG4gICAgJ3RocmVlJyxcbiAgICAnZm91cicsXG4gICAgJ2ZpdmUnLFxuICAgICdzaXgnLFxuICAgICdzZXZlbicsXG4gICAgJ2VpZ2h0JyxcbiAgICAnbmluZScsXG4gICAgJ2NvbG9uJyxcbiAgICAnc2VtaWNvbG9uJyxcbiAgICAnbGVzcycsXG4gICAgJ2VxdWFsJyxcbiAgICAnZ3JlYXRlcicsXG4gICAgJ3F1ZXN0aW9uJyxcbiAgICAnYXQnLFxuICAgICdBJyxcbiAgICAnQicsXG4gICAgJ0MnLFxuICAgICdEJyxcbiAgICAnRScsXG4gICAgJ0YnLFxuICAgICdHJyxcbiAgICAnSCcsXG4gICAgJ0knLFxuICAgICdKJyxcbiAgICAnSycsXG4gICAgJ0wnLFxuICAgICdNJyxcbiAgICAnTicsXG4gICAgJ08nLFxuICAgICdQJyxcbiAgICAnUScsXG4gICAgJ1InLFxuICAgICdTJyxcbiAgICAnVCcsXG4gICAgJ1UnLFxuICAgICdWJyxcbiAgICAnVycsXG4gICAgJ1gnLFxuICAgICdZJyxcbiAgICAnWicsXG4gICAgJ2JyYWNrZXRsZWZ0JyxcbiAgICAnYmFja3NsYXNoJyxcbiAgICAnYnJhY2tldHJpZ2h0JyxcbiAgICAnYXNjaWljaXJjdW0nLFxuICAgICd1bmRlcnNjb3JlJyxcbiAgICAncXVvdGVsZWZ0JyxcbiAgICAnYScsXG4gICAgJ2InLFxuICAgICdjJyxcbiAgICAnZCcsXG4gICAgJ2UnLFxuICAgICdmJyxcbiAgICAnZycsXG4gICAgJ2gnLFxuICAgICdpJyxcbiAgICAnaicsXG4gICAgJ2snLFxuICAgICdsJyxcbiAgICAnbScsXG4gICAgJ24nLFxuICAgICdvJyxcbiAgICAncCcsXG4gICAgJ3EnLFxuICAgICdyJyxcbiAgICAncycsXG4gICAgJ3QnLFxuICAgICd1JyxcbiAgICAndicsXG4gICAgJ3cnLFxuICAgICd4JyxcbiAgICAneScsXG4gICAgJ3onLFxuICAgICdicmFjZWxlZnQnLFxuICAgICdiYXInLFxuICAgICdicmFjZXJpZ2h0JyxcbiAgICAnYXNjaWl0aWxkZScsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJ2V4Y2xhbWRvd24nLFxuICAgICdjZW50JyxcbiAgICAnc3RlcmxpbmcnLFxuICAgICdmcmFjdGlvbicsXG4gICAgJ3llbicsXG4gICAgJ2Zsb3JpbicsXG4gICAgJ3NlY3Rpb24nLFxuICAgICdjdXJyZW5jeScsXG4gICAgJ3F1b3Rlc2luZ2xlJyxcbiAgICAncXVvdGVkYmxsZWZ0JyxcbiAgICAnZ3VpbGxlbW90bGVmdCcsXG4gICAgJ2d1aWxzaW5nbGxlZnQnLFxuICAgICdndWlsc2luZ2xyaWdodCcsXG4gICAgJ2ZpJyxcbiAgICAnZmwnLFxuICAgICcnLFxuICAgICdlbmRhc2gnLFxuICAgICdkYWdnZXInLFxuICAgICdkYWdnZXJkYmwnLFxuICAgICdwZXJpb2RjZW50ZXJlZCcsXG4gICAgJycsXG4gICAgJ3BhcmFncmFwaCcsXG4gICAgJ2J1bGxldCcsXG4gICAgJ3F1b3Rlc2luZ2xiYXNlJyxcbiAgICAncXVvdGVkYmxiYXNlJyxcbiAgICAncXVvdGVkYmxyaWdodCcsXG4gICAgJ2d1aWxsZW1vdHJpZ2h0JyxcbiAgICAnZWxsaXBzaXMnLFxuICAgICdwZXJ0aG91c2FuZCcsXG4gICAgJycsXG4gICAgJ3F1ZXN0aW9uZG93bicsXG4gICAgJycsXG4gICAgJ2dyYXZlJyxcbiAgICAnYWN1dGUnLFxuICAgICdjaXJjdW1mbGV4JyxcbiAgICAndGlsZGUnLFxuICAgICdtYWNyb24nLFxuICAgICdicmV2ZScsXG4gICAgJ2RvdGFjY2VudCcsXG4gICAgJ2RpZXJlc2lzJyxcbiAgICAnJyxcbiAgICAncmluZycsXG4gICAgJ2NlZGlsbGEnLFxuICAgICcnLFxuICAgICdodW5nYXJ1bWxhdXQnLFxuICAgICdvZ29uZWsnLFxuICAgICdjYXJvbicsXG4gICAgJ2VtZGFzaCcsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJ0FFJyxcbiAgICAnJyxcbiAgICAnb3JkZmVtaW5pbmUnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICdMc2xhc2gnLFxuICAgICdPc2xhc2gnLFxuICAgICdPRScsXG4gICAgJ29yZG1hc2N1bGluZScsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJycsXG4gICAgJ2FlJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnZG90bGVzc2knLFxuICAgICcnLFxuICAgICcnLFxuICAgICdsc2xhc2gnLFxuICAgICdvc2xhc2gnLFxuICAgICdvZScsXG4gICAgJ2dlcm1hbmRibHMnXG5dO1xubGV0ICRiYzA0MzNkOWI3ZTQxZjVmJGV4cG9ydCQ0ZjU4ZjQ5N2UxNGE1M2MzID0gW1xuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICcnLFxuICAgICdzcGFjZScsXG4gICAgJ2V4Y2xhbXNtYWxsJyxcbiAgICAnSHVuZ2FydW1sYXV0c21hbGwnLFxuICAgICcnLFxuICAgICdkb2xsYXJvbGRzdHlsZScsXG4gICAgJ2RvbGxhcnN1cGVyaW9yJyxcbiAgICAnYW1wZXJzYW5kc21hbGwnLFxuICAgICdBY3V0ZXNtYWxsJyxcbiAgICAncGFyZW5sZWZ0c3VwZXJpb3InLFxuICAgICdwYXJlbnJpZ2h0c3VwZXJpb3InLFxuICAgICd0d29kb3RlbmxlYWRlcicsXG4gICAgJ29uZWRvdGVubGVhZGVyJyxcbiAgICAnY29tbWEnLFxuICAgICdoeXBoZW4nLFxuICAgICdwZXJpb2QnLFxuICAgICdmcmFjdGlvbicsXG4gICAgJ3plcm9vbGRzdHlsZScsXG4gICAgJ29uZW9sZHN0eWxlJyxcbiAgICAndHdvb2xkc3R5bGUnLFxuICAgICd0aHJlZW9sZHN0eWxlJyxcbiAgICAnZm91cm9sZHN0eWxlJyxcbiAgICAnZml2ZW9sZHN0eWxlJyxcbiAgICAnc2l4b2xkc3R5bGUnLFxuICAgICdzZXZlbm9sZHN0eWxlJyxcbiAgICAnZWlnaHRvbGRzdHlsZScsXG4gICAgJ25pbmVvbGRzdHlsZScsXG4gICAgJ2NvbG9uJyxcbiAgICAnc2VtaWNvbG9uJyxcbiAgICAnY29tbWFzdXBlcmlvcicsXG4gICAgJ3RocmVlcXVhcnRlcnNlbWRhc2gnLFxuICAgICdwZXJpb2RzdXBlcmlvcicsXG4gICAgJ3F1ZXN0aW9uc21hbGwnLFxuICAgICcnLFxuICAgICdhc3VwZXJpb3InLFxuICAgICdic3VwZXJpb3InLFxuICAgICdjZW50c3VwZXJpb3InLFxuICAgICdkc3VwZXJpb3InLFxuICAgICdlc3VwZXJpb3InLFxuICAgICcnLFxuICAgICcnLFxuICAgICdpc3VwZXJpb3InLFxuICAgICcnLFxuICAgICcnLFxuICAgICdsc3VwZXJpb3InLFxuICAgICdtc3VwZXJpb3InLFxuICAgICduc3VwZXJpb3InLFxuICAgICdvc3VwZXJpb3InLFxuICAgICcnLFxuICAgICcnLFxuICAgICdyc3VwZXJpb3InLFxuICAgICdzc3VwZXJpb3InLFxuICAgICd0c3VwZXJpb3InLFxuICAgICcnLFxuICAgICdmZicsXG4gICAgJ2ZpJyxcbiAgICAnZmwnLFxuICAgICdmZmknLFxuICAgICdmZmwnLFxuICAgICdwYXJlbmxlZnRpbmZlcmlvcicsXG4gICAgJycsXG4gICAgJ3BhcmVucmlnaHRpbmZlcmlvcicsXG4gICAgJ0NpcmN1bWZsZXhzbWFsbCcsXG4gICAgJ2h5cGhlbnN1cGVyaW9yJyxcbiAgICAnR3JhdmVzbWFsbCcsXG4gICAgJ0FzbWFsbCcsXG4gICAgJ0JzbWFsbCcsXG4gICAgJ0NzbWFsbCcsXG4gICAgJ0RzbWFsbCcsXG4gICAgJ0VzbWFsbCcsXG4gICAgJ0ZzbWFsbCcsXG4gICAgJ0dzbWFsbCcsXG4gICAgJ0hzbWFsbCcsXG4gICAgJ0lzbWFsbCcsXG4gICAgJ0pzbWFsbCcsXG4gICAgJ0tzbWFsbCcsXG4gICAgJ0xzbWFsbCcsXG4gICAgJ01zbWFsbCcsXG4gICAgJ05zbWFsbCcsXG4gICAgJ09zbWFsbCcsXG4gICAgJ1BzbWFsbCcsXG4gICAgJ1FzbWFsbCcsXG4gICAgJ1JzbWFsbCcsXG4gICAgJ1NzbWFsbCcsXG4gICAgJ1RzbWFsbCcsXG4gICAgJ1VzbWFsbCcsXG4gICAgJ1ZzbWFsbCcsXG4gICAgJ1dzbWFsbCcsXG4gICAgJ1hzbWFsbCcsXG4gICAgJ1lzbWFsbCcsXG4gICAgJ1pzbWFsbCcsXG4gICAgJ2NvbG9ubW9uZXRhcnknLFxuICAgICdvbmVmaXR0ZWQnLFxuICAgICdydXBpYWgnLFxuICAgICdUaWxkZXNtYWxsJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnZXhjbGFtZG93bnNtYWxsJyxcbiAgICAnY2VudG9sZHN0eWxlJyxcbiAgICAnTHNsYXNoc21hbGwnLFxuICAgICcnLFxuICAgICcnLFxuICAgICdTY2Fyb25zbWFsbCcsXG4gICAgJ1pjYXJvbnNtYWxsJyxcbiAgICAnRGllcmVzaXNzbWFsbCcsXG4gICAgJ0JyZXZlc21hbGwnLFxuICAgICdDYXJvbnNtYWxsJyxcbiAgICAnJyxcbiAgICAnRG90YWNjZW50c21hbGwnLFxuICAgICcnLFxuICAgICcnLFxuICAgICdNYWNyb25zbWFsbCcsXG4gICAgJycsXG4gICAgJycsXG4gICAgJ2ZpZ3VyZWRhc2gnLFxuICAgICdoeXBoZW5pbmZlcmlvcicsXG4gICAgJycsXG4gICAgJycsXG4gICAgJ09nb25la3NtYWxsJyxcbiAgICAnUmluZ3NtYWxsJyxcbiAgICAnQ2VkaWxsYXNtYWxsJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnb25lcXVhcnRlcicsXG4gICAgJ29uZWhhbGYnLFxuICAgICd0aHJlZXF1YXJ0ZXJzJyxcbiAgICAncXVlc3Rpb25kb3duc21hbGwnLFxuICAgICdvbmVlaWdodGgnLFxuICAgICd0aHJlZWVpZ2h0aHMnLFxuICAgICdmaXZlZWlnaHRocycsXG4gICAgJ3NldmVuZWlnaHRocycsXG4gICAgJ29uZXRoaXJkJyxcbiAgICAndHdvdGhpcmRzJyxcbiAgICAnJyxcbiAgICAnJyxcbiAgICAnemVyb3N1cGVyaW9yJyxcbiAgICAnb25lc3VwZXJpb3InLFxuICAgICd0d29zdXBlcmlvcicsXG4gICAgJ3RocmVlc3VwZXJpb3InLFxuICAgICdmb3Vyc3VwZXJpb3InLFxuICAgICdmaXZlc3VwZXJpb3InLFxuICAgICdzaXhzdXBlcmlvcicsXG4gICAgJ3NldmVuc3VwZXJpb3InLFxuICAgICdlaWdodHN1cGVyaW9yJyxcbiAgICAnbmluZXN1cGVyaW9yJyxcbiAgICAnemVyb2luZmVyaW9yJyxcbiAgICAnb25laW5mZXJpb3InLFxuICAgICd0d29pbmZlcmlvcicsXG4gICAgJ3RocmVlaW5mZXJpb3InLFxuICAgICdmb3VyaW5mZXJpb3InLFxuICAgICdmaXZlaW5mZXJpb3InLFxuICAgICdzaXhpbmZlcmlvcicsXG4gICAgJ3NldmVuaW5mZXJpb3InLFxuICAgICdlaWdodGluZmVyaW9yJyxcbiAgICAnbmluZWluZmVyaW9yJyxcbiAgICAnY2VudGluZmVyaW9yJyxcbiAgICAnZG9sbGFyaW5mZXJpb3InLFxuICAgICdwZXJpb2RpbmZlcmlvcicsXG4gICAgJ2NvbW1haW5mZXJpb3InLFxuICAgICdBZ3JhdmVzbWFsbCcsXG4gICAgJ0FhY3V0ZXNtYWxsJyxcbiAgICAnQWNpcmN1bWZsZXhzbWFsbCcsXG4gICAgJ0F0aWxkZXNtYWxsJyxcbiAgICAnQWRpZXJlc2lzc21hbGwnLFxuICAgICdBcmluZ3NtYWxsJyxcbiAgICAnQUVzbWFsbCcsXG4gICAgJ0NjZWRpbGxhc21hbGwnLFxuICAgICdFZ3JhdmVzbWFsbCcsXG4gICAgJ0VhY3V0ZXNtYWxsJyxcbiAgICAnRWNpcmN1bWZsZXhzbWFsbCcsXG4gICAgJ0VkaWVyZXNpc3NtYWxsJyxcbiAgICAnSWdyYXZlc21hbGwnLFxuICAgICdJYWN1dGVzbWFsbCcsXG4gICAgJ0ljaXJjdW1mbGV4c21hbGwnLFxuICAgICdJZGllcmVzaXNzbWFsbCcsXG4gICAgJ0V0aHNtYWxsJyxcbiAgICAnTnRpbGRlc21hbGwnLFxuICAgICdPZ3JhdmVzbWFsbCcsXG4gICAgJ09hY3V0ZXNtYWxsJyxcbiAgICAnT2NpcmN1bWZsZXhzbWFsbCcsXG4gICAgJ090aWxkZXNtYWxsJyxcbiAgICAnT2RpZXJlc2lzc21hbGwnLFxuICAgICdPRXNtYWxsJyxcbiAgICAnT3NsYXNoc21hbGwnLFxuICAgICdVZ3JhdmVzbWFsbCcsXG4gICAgJ1VhY3V0ZXNtYWxsJyxcbiAgICAnVWNpcmN1bWZsZXhzbWFsbCcsXG4gICAgJ1VkaWVyZXNpc3NtYWxsJyxcbiAgICAnWWFjdXRlc21hbGwnLFxuICAgICdUaG9ybnNtYWxsJyxcbiAgICAnWWRpZXJlc2lzc21hbGwnXG5dO1xuXG5cbmxldCAkZWY2NThmNWM5YTE0ODhiMiRleHBvcnQkYzMzYjUwMzM2YzIzNGYxNiA9IFtcbiAgICAnLm5vdGRlZicsXG4gICAgJ3NwYWNlJyxcbiAgICAnZXhjbGFtJyxcbiAgICAncXVvdGVkYmwnLFxuICAgICdudW1iZXJzaWduJyxcbiAgICAnZG9sbGFyJyxcbiAgICAncGVyY2VudCcsXG4gICAgJ2FtcGVyc2FuZCcsXG4gICAgJ3F1b3RlcmlnaHQnLFxuICAgICdwYXJlbmxlZnQnLFxuICAgICdwYXJlbnJpZ2h0JyxcbiAgICAnYXN0ZXJpc2snLFxuICAgICdwbHVzJyxcbiAgICAnY29tbWEnLFxuICAgICdoeXBoZW4nLFxuICAgICdwZXJpb2QnLFxuICAgICdzbGFzaCcsXG4gICAgJ3plcm8nLFxuICAgICdvbmUnLFxuICAgICd0d28nLFxuICAgICd0aHJlZScsXG4gICAgJ2ZvdXInLFxuICAgICdmaXZlJyxcbiAgICAnc2l4JyxcbiAgICAnc2V2ZW4nLFxuICAgICdlaWdodCcsXG4gICAgJ25pbmUnLFxuICAgICdjb2xvbicsXG4gICAgJ3NlbWljb2xvbicsXG4gICAgJ2xlc3MnLFxuICAgICdlcXVhbCcsXG4gICAgJ2dyZWF0ZXInLFxuICAgICdxdWVzdGlvbicsXG4gICAgJ2F0JyxcbiAgICAnQScsXG4gICAgJ0InLFxuICAgICdDJyxcbiAgICAnRCcsXG4gICAgJ0UnLFxuICAgICdGJyxcbiAgICAnRycsXG4gICAgJ0gnLFxuICAgICdJJyxcbiAgICAnSicsXG4gICAgJ0snLFxuICAgICdMJyxcbiAgICAnTScsXG4gICAgJ04nLFxuICAgICdPJyxcbiAgICAnUCcsXG4gICAgJ1EnLFxuICAgICdSJyxcbiAgICAnUycsXG4gICAgJ1QnLFxuICAgICdVJyxcbiAgICAnVicsXG4gICAgJ1cnLFxuICAgICdYJyxcbiAgICAnWScsXG4gICAgJ1onLFxuICAgICdicmFja2V0bGVmdCcsXG4gICAgJ2JhY2tzbGFzaCcsXG4gICAgJ2JyYWNrZXRyaWdodCcsXG4gICAgJ2FzY2lpY2lyY3VtJyxcbiAgICAndW5kZXJzY29yZScsXG4gICAgJ3F1b3RlbGVmdCcsXG4gICAgJ2EnLFxuICAgICdiJyxcbiAgICAnYycsXG4gICAgJ2QnLFxuICAgICdlJyxcbiAgICAnZicsXG4gICAgJ2cnLFxuICAgICdoJyxcbiAgICAnaScsXG4gICAgJ2onLFxuICAgICdrJyxcbiAgICAnbCcsXG4gICAgJ20nLFxuICAgICduJyxcbiAgICAnbycsXG4gICAgJ3AnLFxuICAgICdxJyxcbiAgICAncicsXG4gICAgJ3MnLFxuICAgICd0JyxcbiAgICAndScsXG4gICAgJ3YnLFxuICAgICd3JyxcbiAgICAneCcsXG4gICAgJ3knLFxuICAgICd6JyxcbiAgICAnYnJhY2VsZWZ0JyxcbiAgICAnYmFyJyxcbiAgICAnYnJhY2VyaWdodCcsXG4gICAgJ2FzY2lpdGlsZGUnLFxuICAgICdleGNsYW1kb3duJyxcbiAgICAnY2VudCcsXG4gICAgJ3N0ZXJsaW5nJyxcbiAgICAnZnJhY3Rpb24nLFxuICAgICd5ZW4nLFxuICAgICdmbG9yaW4nLFxuICAgICdzZWN0aW9uJyxcbiAgICAnY3VycmVuY3knLFxuICAgICdxdW90ZXNpbmdsZScsXG4gICAgJ3F1b3RlZGJsbGVmdCcsXG4gICAgJ2d1aWxsZW1vdGxlZnQnLFxuICAgICdndWlsc2luZ2xsZWZ0JyxcbiAgICAnZ3VpbHNpbmdscmlnaHQnLFxuICAgICdmaScsXG4gICAgJ2ZsJyxcbiAgICAnZW5kYXNoJyxcbiAgICAnZGFnZ2VyJyxcbiAgICAnZGFnZ2VyZGJsJyxcbiAgICAncGVyaW9kY2VudGVyZWQnLFxuICAgICdwYXJhZ3JhcGgnLFxuICAgICdidWxsZXQnLFxuICAgICdxdW90ZXNpbmdsYmFzZScsXG4gICAgJ3F1b3RlZGJsYmFzZScsXG4gICAgJ3F1b3RlZGJscmlnaHQnLFxuICAgICdndWlsbGVtb3RyaWdodCcsXG4gICAgJ2VsbGlwc2lzJyxcbiAgICAncGVydGhvdXNhbmQnLFxuICAgICdxdWVzdGlvbmRvd24nLFxuICAgICdncmF2ZScsXG4gICAgJ2FjdXRlJyxcbiAgICAnY2lyY3VtZmxleCcsXG4gICAgJ3RpbGRlJyxcbiAgICAnbWFjcm9uJyxcbiAgICAnYnJldmUnLFxuICAgICdkb3RhY2NlbnQnLFxuICAgICdkaWVyZXNpcycsXG4gICAgJ3JpbmcnLFxuICAgICdjZWRpbGxhJyxcbiAgICAnaHVuZ2FydW1sYXV0JyxcbiAgICAnb2dvbmVrJyxcbiAgICAnY2Fyb24nLFxuICAgICdlbWRhc2gnLFxuICAgICdBRScsXG4gICAgJ29yZGZlbWluaW5lJyxcbiAgICAnTHNsYXNoJyxcbiAgICAnT3NsYXNoJyxcbiAgICAnT0UnLFxuICAgICdvcmRtYXNjdWxpbmUnLFxuICAgICdhZScsXG4gICAgJ2RvdGxlc3NpJyxcbiAgICAnbHNsYXNoJyxcbiAgICAnb3NsYXNoJyxcbiAgICAnb2UnLFxuICAgICdnZXJtYW5kYmxzJyxcbiAgICAnb25lc3VwZXJpb3InLFxuICAgICdsb2dpY2Fsbm90JyxcbiAgICAnbXUnLFxuICAgICd0cmFkZW1hcmsnLFxuICAgICdFdGgnLFxuICAgICdvbmVoYWxmJyxcbiAgICAncGx1c21pbnVzJyxcbiAgICAnVGhvcm4nLFxuICAgICdvbmVxdWFydGVyJyxcbiAgICAnZGl2aWRlJyxcbiAgICAnYnJva2VuYmFyJyxcbiAgICAnZGVncmVlJyxcbiAgICAndGhvcm4nLFxuICAgICd0aHJlZXF1YXJ0ZXJzJyxcbiAgICAndHdvc3VwZXJpb3InLFxuICAgICdyZWdpc3RlcmVkJyxcbiAgICAnbWludXMnLFxuICAgICdldGgnLFxuICAgICdtdWx0aXBseScsXG4gICAgJ3RocmVlc3VwZXJpb3InLFxuICAgICdjb3B5cmlnaHQnLFxuICAgICdBYWN1dGUnLFxuICAgICdBY2lyY3VtZmxleCcsXG4gICAgJ0FkaWVyZXNpcycsXG4gICAgJ0FncmF2ZScsXG4gICAgJ0FyaW5nJyxcbiAgICAnQXRpbGRlJyxcbiAgICAnQ2NlZGlsbGEnLFxuICAgICdFYWN1dGUnLFxuICAgICdFY2lyY3VtZmxleCcsXG4gICAgJ0VkaWVyZXNpcycsXG4gICAgJ0VncmF2ZScsXG4gICAgJ0lhY3V0ZScsXG4gICAgJ0ljaXJjdW1mbGV4JyxcbiAgICAnSWRpZXJlc2lzJyxcbiAgICAnSWdyYXZlJyxcbiAgICAnTnRpbGRlJyxcbiAgICAnT2FjdXRlJyxcbiAgICAnT2NpcmN1bWZsZXgnLFxuICAgICdPZGllcmVzaXMnLFxuICAgICdPZ3JhdmUnLFxuICAgICdPdGlsZGUnLFxuICAgICdTY2Fyb24nLFxuICAgICdVYWN1dGUnLFxuICAgICdVY2lyY3VtZmxleCcsXG4gICAgJ1VkaWVyZXNpcycsXG4gICAgJ1VncmF2ZScsXG4gICAgJ1lhY3V0ZScsXG4gICAgJ1lkaWVyZXNpcycsXG4gICAgJ1pjYXJvbicsXG4gICAgJ2FhY3V0ZScsXG4gICAgJ2FjaXJjdW1mbGV4JyxcbiAgICAnYWRpZXJlc2lzJyxcbiAgICAnYWdyYXZlJyxcbiAgICAnYXJpbmcnLFxuICAgICdhdGlsZGUnLFxuICAgICdjY2VkaWxsYScsXG4gICAgJ2VhY3V0ZScsXG4gICAgJ2VjaXJjdW1mbGV4JyxcbiAgICAnZWRpZXJlc2lzJyxcbiAgICAnZWdyYXZlJyxcbiAgICAnaWFjdXRlJyxcbiAgICAnaWNpcmN1bWZsZXgnLFxuICAgICdpZGllcmVzaXMnLFxuICAgICdpZ3JhdmUnLFxuICAgICdudGlsZGUnLFxuICAgICdvYWN1dGUnLFxuICAgICdvY2lyY3VtZmxleCcsXG4gICAgJ29kaWVyZXNpcycsXG4gICAgJ29ncmF2ZScsXG4gICAgJ290aWxkZScsXG4gICAgJ3NjYXJvbicsXG4gICAgJ3VhY3V0ZScsXG4gICAgJ3VjaXJjdW1mbGV4JyxcbiAgICAndWRpZXJlc2lzJyxcbiAgICAndWdyYXZlJyxcbiAgICAneWFjdXRlJyxcbiAgICAneWRpZXJlc2lzJyxcbiAgICAnemNhcm9uJ1xuXTtcbmxldCAkZWY2NThmNWM5YTE0ODhiMiRleHBvcnQkM2VkMGY5ZTFmZWU4ZDQ4OSA9IFtcbiAgICAnLm5vdGRlZicsXG4gICAgJ3NwYWNlJyxcbiAgICAnZXhjbGFtc21hbGwnLFxuICAgICdIdW5nYXJ1bWxhdXRzbWFsbCcsXG4gICAgJ2RvbGxhcm9sZHN0eWxlJyxcbiAgICAnZG9sbGFyc3VwZXJpb3InLFxuICAgICdhbXBlcnNhbmRzbWFsbCcsXG4gICAgJ0FjdXRlc21hbGwnLFxuICAgICdwYXJlbmxlZnRzdXBlcmlvcicsXG4gICAgJ3BhcmVucmlnaHRzdXBlcmlvcicsXG4gICAgJ3R3b2RvdGVubGVhZGVyJyxcbiAgICAnb25lZG90ZW5sZWFkZXInLFxuICAgICdjb21tYScsXG4gICAgJ2h5cGhlbicsXG4gICAgJ3BlcmlvZCcsXG4gICAgJ2ZyYWN0aW9uJyxcbiAgICAnemVyb29sZHN0eWxlJyxcbiAgICAnb25lb2xkc3R5bGUnLFxuICAgICd0d29vbGRzdHlsZScsXG4gICAgJ3RocmVlb2xkc3R5bGUnLFxuICAgICdmb3Vyb2xkc3R5bGUnLFxuICAgICdmaXZlb2xkc3R5bGUnLFxuICAgICdzaXhvbGRzdHlsZScsXG4gICAgJ3NldmVub2xkc3R5bGUnLFxuICAgICdlaWdodG9sZHN0eWxlJyxcbiAgICAnbmluZW9sZHN0eWxlJyxcbiAgICAnY29sb24nLFxuICAgICdzZW1pY29sb24nLFxuICAgICdjb21tYXN1cGVyaW9yJyxcbiAgICAndGhyZWVxdWFydGVyc2VtZGFzaCcsXG4gICAgJ3BlcmlvZHN1cGVyaW9yJyxcbiAgICAncXVlc3Rpb25zbWFsbCcsXG4gICAgJ2FzdXBlcmlvcicsXG4gICAgJ2JzdXBlcmlvcicsXG4gICAgJ2NlbnRzdXBlcmlvcicsXG4gICAgJ2RzdXBlcmlvcicsXG4gICAgJ2VzdXBlcmlvcicsXG4gICAgJ2lzdXBlcmlvcicsXG4gICAgJ2xzdXBlcmlvcicsXG4gICAgJ21zdXBlcmlvcicsXG4gICAgJ25zdXBlcmlvcicsXG4gICAgJ29zdXBlcmlvcicsXG4gICAgJ3JzdXBlcmlvcicsXG4gICAgJ3NzdXBlcmlvcicsXG4gICAgJ3RzdXBlcmlvcicsXG4gICAgJ2ZmJyxcbiAgICAnZmknLFxuICAgICdmbCcsXG4gICAgJ2ZmaScsXG4gICAgJ2ZmbCcsXG4gICAgJ3BhcmVubGVmdGluZmVyaW9yJyxcbiAgICAncGFyZW5yaWdodGluZmVyaW9yJyxcbiAgICAnQ2lyY3VtZmxleHNtYWxsJyxcbiAgICAnaHlwaGVuc3VwZXJpb3InLFxuICAgICdHcmF2ZXNtYWxsJyxcbiAgICAnQXNtYWxsJyxcbiAgICAnQnNtYWxsJyxcbiAgICAnQ3NtYWxsJyxcbiAgICAnRHNtYWxsJyxcbiAgICAnRXNtYWxsJyxcbiAgICAnRnNtYWxsJyxcbiAgICAnR3NtYWxsJyxcbiAgICAnSHNtYWxsJyxcbiAgICAnSXNtYWxsJyxcbiAgICAnSnNtYWxsJyxcbiAgICAnS3NtYWxsJyxcbiAgICAnTHNtYWxsJyxcbiAgICAnTXNtYWxsJyxcbiAgICAnTnNtYWxsJyxcbiAgICAnT3NtYWxsJyxcbiAgICAnUHNtYWxsJyxcbiAgICAnUXNtYWxsJyxcbiAgICAnUnNtYWxsJyxcbiAgICAnU3NtYWxsJyxcbiAgICAnVHNtYWxsJyxcbiAgICAnVXNtYWxsJyxcbiAgICAnVnNtYWxsJyxcbiAgICAnV3NtYWxsJyxcbiAgICAnWHNtYWxsJyxcbiAgICAnWXNtYWxsJyxcbiAgICAnWnNtYWxsJyxcbiAgICAnY29sb25tb25ldGFyeScsXG4gICAgJ29uZWZpdHRlZCcsXG4gICAgJ3J1cGlhaCcsXG4gICAgJ1RpbGRlc21hbGwnLFxuICAgICdleGNsYW1kb3duc21hbGwnLFxuICAgICdjZW50b2xkc3R5bGUnLFxuICAgICdMc2xhc2hzbWFsbCcsXG4gICAgJ1NjYXJvbnNtYWxsJyxcbiAgICAnWmNhcm9uc21hbGwnLFxuICAgICdEaWVyZXNpc3NtYWxsJyxcbiAgICAnQnJldmVzbWFsbCcsXG4gICAgJ0Nhcm9uc21hbGwnLFxuICAgICdEb3RhY2NlbnRzbWFsbCcsXG4gICAgJ01hY3JvbnNtYWxsJyxcbiAgICAnZmlndXJlZGFzaCcsXG4gICAgJ2h5cGhlbmluZmVyaW9yJyxcbiAgICAnT2dvbmVrc21hbGwnLFxuICAgICdSaW5nc21hbGwnLFxuICAgICdDZWRpbGxhc21hbGwnLFxuICAgICdvbmVxdWFydGVyJyxcbiAgICAnb25laGFsZicsXG4gICAgJ3RocmVlcXVhcnRlcnMnLFxuICAgICdxdWVzdGlvbmRvd25zbWFsbCcsXG4gICAgJ29uZWVpZ2h0aCcsXG4gICAgJ3RocmVlZWlnaHRocycsXG4gICAgJ2ZpdmVlaWdodGhzJyxcbiAgICAnc2V2ZW5laWdodGhzJyxcbiAgICAnb25ldGhpcmQnLFxuICAgICd0d290aGlyZHMnLFxuICAgICd6ZXJvc3VwZXJpb3InLFxuICAgICdvbmVzdXBlcmlvcicsXG4gICAgJ3R3b3N1cGVyaW9yJyxcbiAgICAndGhyZWVzdXBlcmlvcicsXG4gICAgJ2ZvdXJzdXBlcmlvcicsXG4gICAgJ2ZpdmVzdXBlcmlvcicsXG4gICAgJ3NpeHN1cGVyaW9yJyxcbiAgICAnc2V2ZW5zdXBlcmlvcicsXG4gICAgJ2VpZ2h0c3VwZXJpb3InLFxuICAgICduaW5lc3VwZXJpb3InLFxuICAgICd6ZXJvaW5mZXJpb3InLFxuICAgICdvbmVpbmZlcmlvcicsXG4gICAgJ3R3b2luZmVyaW9yJyxcbiAgICAndGhyZWVpbmZlcmlvcicsXG4gICAgJ2ZvdXJpbmZlcmlvcicsXG4gICAgJ2ZpdmVpbmZlcmlvcicsXG4gICAgJ3NpeGluZmVyaW9yJyxcbiAgICAnc2V2ZW5pbmZlcmlvcicsXG4gICAgJ2VpZ2h0aW5mZXJpb3InLFxuICAgICduaW5laW5mZXJpb3InLFxuICAgICdjZW50aW5mZXJpb3InLFxuICAgICdkb2xsYXJpbmZlcmlvcicsXG4gICAgJ3BlcmlvZGluZmVyaW9yJyxcbiAgICAnY29tbWFpbmZlcmlvcicsXG4gICAgJ0FncmF2ZXNtYWxsJyxcbiAgICAnQWFjdXRlc21hbGwnLFxuICAgICdBY2lyY3VtZmxleHNtYWxsJyxcbiAgICAnQXRpbGRlc21hbGwnLFxuICAgICdBZGllcmVzaXNzbWFsbCcsXG4gICAgJ0FyaW5nc21hbGwnLFxuICAgICdBRXNtYWxsJyxcbiAgICAnQ2NlZGlsbGFzbWFsbCcsXG4gICAgJ0VncmF2ZXNtYWxsJyxcbiAgICAnRWFjdXRlc21hbGwnLFxuICAgICdFY2lyY3VtZmxleHNtYWxsJyxcbiAgICAnRWRpZXJlc2lzc21hbGwnLFxuICAgICdJZ3JhdmVzbWFsbCcsXG4gICAgJ0lhY3V0ZXNtYWxsJyxcbiAgICAnSWNpcmN1bWZsZXhzbWFsbCcsXG4gICAgJ0lkaWVyZXNpc3NtYWxsJyxcbiAgICAnRXRoc21hbGwnLFxuICAgICdOdGlsZGVzbWFsbCcsXG4gICAgJ09ncmF2ZXNtYWxsJyxcbiAgICAnT2FjdXRlc21hbGwnLFxuICAgICdPY2lyY3VtZmxleHNtYWxsJyxcbiAgICAnT3RpbGRlc21hbGwnLFxuICAgICdPZGllcmVzaXNzbWFsbCcsXG4gICAgJ09Fc21hbGwnLFxuICAgICdPc2xhc2hzbWFsbCcsXG4gICAgJ1VncmF2ZXNtYWxsJyxcbiAgICAnVWFjdXRlc21hbGwnLFxuICAgICdVY2lyY3VtZmxleHNtYWxsJyxcbiAgICAnVWRpZXJlc2lzc21hbGwnLFxuICAgICdZYWN1dGVzbWFsbCcsXG4gICAgJ1Rob3Juc21hbGwnLFxuICAgICdZZGllcmVzaXNzbWFsbCdcbl07XG5sZXQgJGVmNjU4ZjVjOWExNDg4YjIkZXhwb3J0JGRjMjhiZTExMTM5ZDQxMjAgPSBbXG4gICAgJy5ub3RkZWYnLFxuICAgICdzcGFjZScsXG4gICAgJ2RvbGxhcm9sZHN0eWxlJyxcbiAgICAnZG9sbGFyc3VwZXJpb3InLFxuICAgICdwYXJlbmxlZnRzdXBlcmlvcicsXG4gICAgJ3BhcmVucmlnaHRzdXBlcmlvcicsXG4gICAgJ3R3b2RvdGVubGVhZGVyJyxcbiAgICAnb25lZG90ZW5sZWFkZXInLFxuICAgICdjb21tYScsXG4gICAgJ2h5cGhlbicsXG4gICAgJ3BlcmlvZCcsXG4gICAgJ2ZyYWN0aW9uJyxcbiAgICAnemVyb29sZHN0eWxlJyxcbiAgICAnb25lb2xkc3R5bGUnLFxuICAgICd0d29vbGRzdHlsZScsXG4gICAgJ3RocmVlb2xkc3R5bGUnLFxuICAgICdmb3Vyb2xkc3R5bGUnLFxuICAgICdmaXZlb2xkc3R5bGUnLFxuICAgICdzaXhvbGRzdHlsZScsXG4gICAgJ3NldmVub2xkc3R5bGUnLFxuICAgICdlaWdodG9sZHN0eWxlJyxcbiAgICAnbmluZW9sZHN0eWxlJyxcbiAgICAnY29sb24nLFxuICAgICdzZW1pY29sb24nLFxuICAgICdjb21tYXN1cGVyaW9yJyxcbiAgICAndGhyZWVxdWFydGVyc2VtZGFzaCcsXG4gICAgJ3BlcmlvZHN1cGVyaW9yJyxcbiAgICAnYXN1cGVyaW9yJyxcbiAgICAnYnN1cGVyaW9yJyxcbiAgICAnY2VudHN1cGVyaW9yJyxcbiAgICAnZHN1cGVyaW9yJyxcbiAgICAnZXN1cGVyaW9yJyxcbiAgICAnaXN1cGVyaW9yJyxcbiAgICAnbHN1cGVyaW9yJyxcbiAgICAnbXN1cGVyaW9yJyxcbiAgICAnbnN1cGVyaW9yJyxcbiAgICAnb3N1cGVyaW9yJyxcbiAgICAncnN1cGVyaW9yJyxcbiAgICAnc3N1cGVyaW9yJyxcbiAgICAndHN1cGVyaW9yJyxcbiAgICAnZmYnLFxuICAgICdmaScsXG4gICAgJ2ZsJyxcbiAgICAnZmZpJyxcbiAgICAnZmZsJyxcbiAgICAncGFyZW5sZWZ0aW5mZXJpb3InLFxuICAgICdwYXJlbnJpZ2h0aW5mZXJpb3InLFxuICAgICdoeXBoZW5zdXBlcmlvcicsXG4gICAgJ2NvbG9ubW9uZXRhcnknLFxuICAgICdvbmVmaXR0ZWQnLFxuICAgICdydXBpYWgnLFxuICAgICdjZW50b2xkc3R5bGUnLFxuICAgICdmaWd1cmVkYXNoJyxcbiAgICAnaHlwaGVuaW5mZXJpb3InLFxuICAgICdvbmVxdWFydGVyJyxcbiAgICAnb25laGFsZicsXG4gICAgJ3RocmVlcXVhcnRlcnMnLFxuICAgICdvbmVlaWdodGgnLFxuICAgICd0aHJlZWVpZ2h0aHMnLFxuICAgICdmaXZlZWlnaHRocycsXG4gICAgJ3NldmVuZWlnaHRocycsXG4gICAgJ29uZXRoaXJkJyxcbiAgICAndHdvdGhpcmRzJyxcbiAgICAnemVyb3N1cGVyaW9yJyxcbiAgICAnb25lc3VwZXJpb3InLFxuICAgICd0d29zdXBlcmlvcicsXG4gICAgJ3RocmVlc3VwZXJpb3InLFxuICAgICdmb3Vyc3VwZXJpb3InLFxuICAgICdmaXZlc3VwZXJpb3InLFxuICAgICdzaXhzdXBlcmlvcicsXG4gICAgJ3NldmVuc3VwZXJpb3InLFxuICAgICdlaWdodHN1cGVyaW9yJyxcbiAgICAnbmluZXN1cGVyaW9yJyxcbiAgICAnemVyb2luZmVyaW9yJyxcbiAgICAnb25laW5mZXJpb3InLFxuICAgICd0d29pbmZlcmlvcicsXG4gICAgJ3RocmVlaW5mZXJpb3InLFxuICAgICdmb3VyaW5mZXJpb3InLFxuICAgICdmaXZlaW5mZXJpb3InLFxuICAgICdzaXhpbmZlcmlvcicsXG4gICAgJ3NldmVuaW5mZXJpb3InLFxuICAgICdlaWdodGluZmVyaW9yJyxcbiAgICAnbmluZWluZmVyaW9yJyxcbiAgICAnY2VudGluZmVyaW9yJyxcbiAgICAnZG9sbGFyaW5mZXJpb3InLFxuICAgICdwZXJpb2RpbmZlcmlvcicsXG4gICAgJ2NvbW1haW5mZXJpb3InXG5dO1xuXG5cblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIFNjcmlwdHMgYW5kIExhbmd1YWdlcyAjXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xubGV0ICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRMYW5nU3lzVGFibGUgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgcmVzZXJ2ZWQ6IG5ldyAkNTJaSWYkUmVzZXJ2ZWQoJDUyWklmJHVpbnQxNiksXG4gICAgcmVxRmVhdHVyZUluZGV4OiAkNTJaSWYkdWludDE2LFxuICAgIGZlYXR1cmVDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICBmZWF0dXJlSW5kZXhlczogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCAnZmVhdHVyZUNvdW50Jylcbn0pO1xubGV0ICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRMYW5nU3lzUmVjb3JkID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHRhZzogbmV3ICQ1MlpJZiRTdHJpbmcoNCksXG4gICAgbGFuZ1N5czogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRMYW5nU3lzVGFibGUsIHtcbiAgICAgICAgdHlwZTogJ3BhcmVudCdcbiAgICB9KVxufSk7XG5sZXQgJDdjYmJlNGUyNGVmM2NiNzUkdmFyJFNjcmlwdCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBkZWZhdWx0TGFuZ1N5czogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRMYW5nU3lzVGFibGUpLFxuICAgIGNvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIGxhbmdTeXNSZWNvcmRzOiBuZXcgJDUyWklmJEFycmF5KCQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRMYW5nU3lzUmVjb3JkLCAnY291bnQnKVxufSk7XG5sZXQgJDdjYmJlNGUyNGVmM2NiNzUkdmFyJFNjcmlwdFJlY29yZCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB0YWc6IG5ldyAkNTJaSWYkU3RyaW5nKDQpLFxuICAgIHNjcmlwdDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRTY3JpcHQsIHtcbiAgICAgICAgdHlwZTogJ3BhcmVudCdcbiAgICB9KVxufSk7XG5sZXQgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDNlMTVmYzA1Y2U4NjQyMjkgPSBuZXcgJDUyWklmJEFycmF5KCQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRTY3JpcHRSZWNvcmQsICQ1MlpJZiR1aW50MTYpO1xuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8gRmVhdHVyZXMgYW5kIExvb2t1cHMgI1xuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xubGV0ICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRGZWF0dXJlUGFyYW1zID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHZlcnNpb246ICQ1MlpJZiR1aW50MTYsXG4gICAgbmFtZUlEOiAkNTJaSWYkdWludDE2XG59KTtcbmxldCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkNmU5MWNmNzYxNjMzM2Q1ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGZlYXR1cmVQYXJhbXM6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkRmVhdHVyZVBhcmFtcyksXG4gICAgbG9va3VwQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgbG9va3VwTGlzdEluZGV4ZXM6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQxNiwgJ2xvb2t1cENvdW50Jylcbn0pO1xubGV0ICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRGZWF0dXJlUmVjb3JkID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHRhZzogbmV3ICQ1MlpJZiRTdHJpbmcoNCksXG4gICAgZmVhdHVyZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ2ZTkxY2Y3NjE2MzMzZDUsIHtcbiAgICAgICAgdHlwZTogJ3BhcmVudCdcbiAgICB9KVxufSk7XG5sZXQgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JGFhMTgxMzBkZWY0YjZjYjQgPSBuZXcgJDUyWklmJEFycmF5KCQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRGZWF0dXJlUmVjb3JkLCAkNTJaSWYkdWludDE2KTtcbmxldCAkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkTG9va3VwRmxhZ3MgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgbWFya0F0dGFjaG1lbnRUeXBlOiAkNTJaSWYkdWludDgsXG4gICAgZmxhZ3M6IG5ldyAkNTJaSWYkQml0ZmllbGQoJDUyWklmJHVpbnQ4LCBbXG4gICAgICAgICdyaWdodFRvTGVmdCcsXG4gICAgICAgICdpZ25vcmVCYXNlR2x5cGhzJyxcbiAgICAgICAgJ2lnbm9yZUxpZ2F0dXJlcycsXG4gICAgICAgICdpZ25vcmVNYXJrcycsXG4gICAgICAgICd1c2VNYXJrRmlsdGVyaW5nU2V0J1xuICAgIF0pXG59KTtcbmZ1bmN0aW9uICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCRkZjAwMDhjNmZmMmRhMjJhKFN1YlRhYmxlKSB7XG4gICAgbGV0IExvb2t1cCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICAgICAgbG9va3VwVHlwZTogJDUyWklmJHVpbnQxNixcbiAgICAgICAgZmxhZ3M6ICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRMb29rdXBGbGFncyxcbiAgICAgICAgc3ViVGFibGVDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgc3ViVGFibGVzOiBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCBTdWJUYWJsZSksICdzdWJUYWJsZUNvdW50JyksXG4gICAgICAgIG1hcmtGaWx0ZXJpbmdTZXQ6IG5ldyAkNTJaSWYkT3B0aW9uYWwoJDUyWklmJHVpbnQxNiwgKHQpPT50LmZsYWdzLmZsYWdzLnVzZU1hcmtGaWx0ZXJpbmdTZXQpXG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyAkNTJaSWYkTGF6eUFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCBMb29rdXApLCAkNTJaSWYkdWludDE2KTtcbn1cbi8vIyMjIyMjIyMjIyMjIyMjIyNcbi8vIENvdmVyYWdlIFRhYmxlICNcbi8vIyMjIyMjIyMjIyMjIyMjIyNcbmxldCAkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkUmFuZ2VSZWNvcmQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgc3RhcnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgZW5kOiAkNTJaSWYkdWludDE2LFxuICAgIHN0YXJ0Q292ZXJhZ2VJbmRleDogJDUyWklmJHVpbnQxNlxufSk7XG5sZXQgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSA9IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KCQ1MlpJZiR1aW50MTYsIHtcbiAgICAxOiB7XG4gICAgICAgIGdseXBoQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGdseXBoczogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCAnZ2x5cGhDb3VudCcpXG4gICAgfSxcbiAgICAyOiB7XG4gICAgICAgIHJhbmdlQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHJhbmdlUmVjb3JkczogbmV3ICQ1MlpJZiRBcnJheSgkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkUmFuZ2VSZWNvcmQsICdyYW5nZUNvdW50JylcbiAgICB9XG59KTtcbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8gQ2xhc3MgRGVmaW5pdGlvbiBUYWJsZSAjXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbmxldCAkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkQ2xhc3NSYW5nZVJlY29yZCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBzdGFydDogJDUyWklmJHVpbnQxNixcbiAgICBlbmQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgY2xhc3M6ICQ1MlpJZiR1aW50MTZcbn0pO1xubGV0ICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ4NDNkNTUxZmJiYWZlZjcxID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoJDUyWklmJHVpbnQxNiwge1xuICAgIDE6IHtcbiAgICAgICAgc3RhcnRHbHlwaDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgZ2x5cGhDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgY2xhc3NWYWx1ZUFycmF5OiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MTYsICdnbHlwaENvdW50JylcbiAgICB9LFxuICAgIDI6IHtcbiAgICAgICAgY2xhc3NSYW5nZUNvdW50OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBjbGFzc1JhbmdlUmVjb3JkOiBuZXcgJDUyWklmJEFycmF5KCQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRDbGFzc1JhbmdlUmVjb3JkLCAnY2xhc3NSYW5nZUNvdW50JylcbiAgICB9XG59KTtcbmxldCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkODIxNWQxNGE2M2Q5ZmIxMCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBhOiAkNTJaSWYkdWludDE2LFxuICAgIGI6ICQ1MlpJZiR1aW50MTYsXG4gICAgZGVsdGFGb3JtYXQ6ICQ1MlpJZiR1aW50MTZcbn0pO1xuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIENvbnRleHR1YWwgU3Vic3RpdHV0aW9uL1Bvc2l0aW9uaW5nIFRhYmxlcyAjXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xubGV0ICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRMb29rdXBSZWNvcmQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgc2VxdWVuY2VJbmRleDogJDUyWklmJHVpbnQxNixcbiAgICBsb29rdXBMaXN0SW5kZXg6ICQ1MlpJZiR1aW50MTZcbn0pO1xubGV0ICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRSdWxlID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGdseXBoQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgbG9va3VwQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgaW5wdXQ6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQxNiwgKHQpPT50LmdseXBoQ291bnQgLSAxKSxcbiAgICBsb29rdXBSZWNvcmRzOiBuZXcgJDUyWklmJEFycmF5KCQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRMb29rdXBSZWNvcmQsICdsb29rdXBDb3VudCcpXG59KTtcbmxldCAkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkUnVsZVNldCA9IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRSdWxlKSwgJDUyWklmJHVpbnQxNik7XG5sZXQgJDdjYmJlNGUyNGVmM2NiNzUkdmFyJENsYXNzUnVsZSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBnbHlwaENvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIGxvb2t1cENvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIGNsYXNzZXM6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQxNiwgKHQpPT50LmdseXBoQ291bnQgLSAxKSxcbiAgICBsb29rdXBSZWNvcmRzOiBuZXcgJDUyWklmJEFycmF5KCQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRMb29rdXBSZWNvcmQsICdsb29rdXBDb3VudCcpXG59KTtcbmxldCAkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkQ2xhc3NTZXQgPSBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkQ2xhc3NSdWxlKSwgJDUyWklmJHVpbnQxNik7XG5sZXQgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDg0MTg1OGI4OTJjZTFmNGMgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkdWludDE2LCB7XG4gICAgMToge1xuICAgICAgICBjb3ZlcmFnZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpLFxuICAgICAgICBydWxlU2V0Q291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHJ1bGVTZXRzOiBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkUnVsZVNldCksICdydWxlU2V0Q291bnQnKVxuICAgIH0sXG4gICAgMjoge1xuICAgICAgICBjb3ZlcmFnZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpLFxuICAgICAgICBjbGFzc0RlZjogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ4NDNkNTUxZmJiYWZlZjcxKSxcbiAgICAgICAgY2xhc3NTZXRDbnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGNsYXNzU2V0OiBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkQ2xhc3NTZXQpLCAnY2xhc3NTZXRDbnQnKVxuICAgIH0sXG4gICAgMzoge1xuICAgICAgICBnbHlwaENvdW50OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBsb29rdXBDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgY292ZXJhZ2VzOiBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkMTc2MDhjM2Y4MWE2MTExKSwgJ2dseXBoQ291bnQnKSxcbiAgICAgICAgbG9va3VwUmVjb3JkczogbmV3ICQ1MlpJZiRBcnJheSgkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkTG9va3VwUmVjb3JkLCAnbG9va3VwQ291bnQnKVxuICAgIH1cbn0pO1xuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIENoYWluaW5nIENvbnRleHR1YWwgU3Vic3RpdHV0aW9uL1Bvc2l0aW9uaW5nIFRhYmxlcyAjXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xubGV0ICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRDaGFpblJ1bGUgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgYmFja3RyYWNrR2x5cGhDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICBiYWNrdHJhY2s6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQxNiwgJ2JhY2t0cmFja0dseXBoQ291bnQnKSxcbiAgICBpbnB1dEdseXBoQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgaW5wdXQ6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQxNiwgKHQpPT50LmlucHV0R2x5cGhDb3VudCAtIDEpLFxuICAgIGxvb2thaGVhZEdseXBoQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgbG9va2FoZWFkOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MTYsICdsb29rYWhlYWRHbHlwaENvdW50JyksXG4gICAgbG9va3VwQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgbG9va3VwUmVjb3JkczogbmV3ICQ1MlpJZiRBcnJheSgkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkTG9va3VwUmVjb3JkLCAnbG9va3VwQ291bnQnKVxufSk7XG5sZXQgJDdjYmJlNGUyNGVmM2NiNzUkdmFyJENoYWluUnVsZVNldCA9IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRDaGFpblJ1bGUpLCAkNTJaSWYkdWludDE2KTtcbmxldCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkNWU2ZDA5ZTY4NjExNjJmNiA9IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KCQ1MlpJZiR1aW50MTYsIHtcbiAgICAxOiB7XG4gICAgICAgIGNvdmVyYWdlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSksXG4gICAgICAgIGNoYWluQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGNoYWluUnVsZVNldHM6IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRDaGFpblJ1bGVTZXQpLCAnY2hhaW5Db3VudCcpXG4gICAgfSxcbiAgICAyOiB7XG4gICAgICAgIGNvdmVyYWdlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSksXG4gICAgICAgIGJhY2t0cmFja0NsYXNzRGVmOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDg0M2Q1NTFmYmJhZmVmNzEpLFxuICAgICAgICBpbnB1dENsYXNzRGVmOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDg0M2Q1NTFmYmJhZmVmNzEpLFxuICAgICAgICBsb29rYWhlYWRDbGFzc0RlZjogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ4NDNkNTUxZmJiYWZlZjcxKSxcbiAgICAgICAgY2hhaW5Db3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgY2hhaW5DbGFzc1NldDogbmV3ICQ1MlpJZiRBcnJheShuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDdjYmJlNGUyNGVmM2NiNzUkdmFyJENoYWluUnVsZVNldCksICdjaGFpbkNvdW50JylcbiAgICB9LFxuICAgIDM6IHtcbiAgICAgICAgYmFja3RyYWNrR2x5cGhDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgYmFja3RyYWNrQ292ZXJhZ2U6IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpLCAnYmFja3RyYWNrR2x5cGhDb3VudCcpLFxuICAgICAgICBpbnB1dEdseXBoQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGlucHV0Q292ZXJhZ2U6IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpLCAnaW5wdXRHbHlwaENvdW50JyksXG4gICAgICAgIGxvb2thaGVhZEdseXBoQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGxvb2thaGVhZENvdmVyYWdlOiBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkMTc2MDhjM2Y4MWE2MTExKSwgJ2xvb2thaGVhZEdseXBoQ291bnQnKSxcbiAgICAgICAgbG9va3VwQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGxvb2t1cFJlY29yZHM6IG5ldyAkNTJaSWYkQXJyYXkoJDdjYmJlNGUyNGVmM2NiNzUkdmFyJExvb2t1cFJlY29yZCwgJ2xvb2t1cENvdW50JylcbiAgICB9XG59KTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKioqXG4gKiBWYXJpYXRpb24gU3RvcmUgKlxuICoqKioqKioqKioqKioqKioqKiovIGxldCAkMWE0N2IwYzQ1YzFjMjJmZSR2YXIkRjJET1QxNCA9IG5ldyAkNTJaSWYkRml4ZWQoMTYsICdCRScsIDE0KTtcbmxldCAkMWE0N2IwYzQ1YzFjMjJmZSR2YXIkUmVnaW9uQXhpc0Nvb3JkaW5hdGVzID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHN0YXJ0Q29vcmQ6ICQxYTQ3YjBjNDVjMWMyMmZlJHZhciRGMkRPVDE0LFxuICAgIHBlYWtDb29yZDogJDFhNDdiMGM0NWMxYzIyZmUkdmFyJEYyRE9UMTQsXG4gICAgZW5kQ29vcmQ6ICQxYTQ3YjBjNDVjMWMyMmZlJHZhciRGMkRPVDE0XG59KTtcbmxldCAkMWE0N2IwYzQ1YzFjMjJmZSR2YXIkVmFyaWF0aW9uUmVnaW9uTGlzdCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBheGlzQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgcmVnaW9uQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgdmFyaWF0aW9uUmVnaW9uczogbmV3ICQ1MlpJZiRBcnJheShuZXcgJDUyWklmJEFycmF5KCQxYTQ3YjBjNDVjMWMyMmZlJHZhciRSZWdpb25BeGlzQ29vcmRpbmF0ZXMsICdheGlzQ291bnQnKSwgJ3JlZ2lvbkNvdW50Jylcbn0pO1xubGV0ICQxYTQ3YjBjNDVjMWMyMmZlJHZhciREZWx0YVNldCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBzaG9ydERlbHRhczogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkaW50MTYsICh0KT0+dC5wYXJlbnQuc2hvcnREZWx0YUNvdW50KSxcbiAgICByZWdpb25EZWx0YXM6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJGludDgsICh0KT0+dC5wYXJlbnQucmVnaW9uSW5kZXhDb3VudCAtIHQucGFyZW50LnNob3J0RGVsdGFDb3VudCksXG4gICAgZGVsdGFzOiAodCk9PnQuc2hvcnREZWx0YXMuY29uY2F0KHQucmVnaW9uRGVsdGFzKVxufSk7XG5sZXQgJDFhNDdiMGM0NWMxYzIyZmUkdmFyJEl0ZW1WYXJpYXRpb25EYXRhID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGl0ZW1Db3VudDogJDUyWklmJHVpbnQxNixcbiAgICBzaG9ydERlbHRhQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgcmVnaW9uSW5kZXhDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICByZWdpb25JbmRleGVzOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MTYsICdyZWdpb25JbmRleENvdW50JyksXG4gICAgZGVsdGFTZXRzOiBuZXcgJDUyWklmJEFycmF5KCQxYTQ3YjBjNDVjMWMyMmZlJHZhciREZWx0YVNldCwgJ2l0ZW1Db3VudCcpXG59KTtcbmxldCAkMWE0N2IwYzQ1YzFjMjJmZSRleHBvcnQkZmUxYjEyMmEyNzEwZjI0MSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBmb3JtYXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgdmFyaWF0aW9uUmVnaW9uTGlzdDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsICQxYTQ3YjBjNDVjMWMyMmZlJHZhciRWYXJpYXRpb25SZWdpb25MaXN0KSxcbiAgICB2YXJpYXRpb25EYXRhQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgaXRlbVZhcmlhdGlvbkRhdGE6IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsICQxYTQ3YjBjNDVjMWMyMmZlJHZhciRJdGVtVmFyaWF0aW9uRGF0YSksICd2YXJpYXRpb25EYXRhQ291bnQnKVxufSk7XG4vKioqKioqKioqKioqKioqKioqKioqKlxuICogRmVhdHVyZSBWYXJpYXRpb25zICpcbiAqKioqKioqKioqKioqKioqKioqKioqLyBsZXQgJDFhNDdiMGM0NWMxYzIyZmUkdmFyJENvbmRpdGlvblRhYmxlID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoJDUyWklmJHVpbnQxNiwge1xuICAgIDE6IHtcbiAgICAgICAgYXhpc0luZGV4OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBheGlzSW5kZXg6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGZpbHRlclJhbmdlTWluVmFsdWU6ICQxYTQ3YjBjNDVjMWMyMmZlJHZhciRGMkRPVDE0LFxuICAgICAgICBmaWx0ZXJSYW5nZU1heFZhbHVlOiAkMWE0N2IwYzQ1YzFjMjJmZSR2YXIkRjJET1QxNFxuICAgIH1cbn0pO1xubGV0ICQxYTQ3YjBjNDVjMWMyMmZlJHZhciRDb25kaXRpb25TZXQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgY29uZGl0aW9uQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgY29uZGl0aW9uVGFibGU6IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsICQxYTQ3YjBjNDVjMWMyMmZlJHZhciRDb25kaXRpb25UYWJsZSksICdjb25kaXRpb25Db3VudCcpXG59KTtcbmxldCAkMWE0N2IwYzQ1YzFjMjJmZSR2YXIkRmVhdHVyZVRhYmxlU3Vic3RpdHV0aW9uUmVjb3JkID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGZlYXR1cmVJbmRleDogJDUyWklmJHVpbnQxNixcbiAgICBhbHRlcm5hdGVGZWF0dXJlVGFibGU6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDZlOTFjZjc2MTYzMzNkNSksIHtcbiAgICAgICAgdHlwZTogJ3BhcmVudCdcbiAgICB9KVxufSk7XG5sZXQgJDFhNDdiMGM0NWMxYzIyZmUkdmFyJEZlYXR1cmVUYWJsZVN1YnN0aXR1dGlvbiA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB2ZXJzaW9uOiAkNTJaSWYkZml4ZWQzMixcbiAgICBzdWJzdGl0dXRpb25Db3VudDogJDUyWklmJHVpbnQxNixcbiAgICBzdWJzdGl0dXRpb25zOiBuZXcgJDUyWklmJEFycmF5KCQxYTQ3YjBjNDVjMWMyMmZlJHZhciRGZWF0dXJlVGFibGVTdWJzdGl0dXRpb25SZWNvcmQsICdzdWJzdGl0dXRpb25Db3VudCcpXG59KTtcbmxldCAkMWE0N2IwYzQ1YzFjMjJmZSR2YXIkRmVhdHVyZVZhcmlhdGlvblJlY29yZCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBjb25kaXRpb25TZXQ6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCAkMWE0N2IwYzQ1YzFjMjJmZSR2YXIkQ29uZGl0aW9uU2V0LCB7XG4gICAgICAgIHR5cGU6ICdwYXJlbnQnXG4gICAgfSksXG4gICAgZmVhdHVyZVRhYmxlU3Vic3RpdHV0aW9uOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgJDFhNDdiMGM0NWMxYzIyZmUkdmFyJEZlYXR1cmVUYWJsZVN1YnN0aXR1dGlvbiwge1xuICAgICAgICB0eXBlOiAncGFyZW50J1xuICAgIH0pXG59KTtcbmxldCAkMWE0N2IwYzQ1YzFjMjJmZSRleHBvcnQkNDQxYjcwYjc5NzFkZDQxOSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBtYWpvclZlcnNpb246ICQ1MlpJZiR1aW50MTYsXG4gICAgbWlub3JWZXJzaW9uOiAkNTJaSWYkdWludDE2LFxuICAgIGZlYXR1cmVWYXJpYXRpb25SZWNvcmRDb3VudDogJDUyWklmJHVpbnQzMixcbiAgICBmZWF0dXJlVmFyaWF0aW9uUmVjb3JkczogbmV3ICQ1MlpJZiRBcnJheSgkMWE0N2IwYzQ1YzFjMjJmZSR2YXIkRmVhdHVyZVZhcmlhdGlvblJlY29yZCwgJ2ZlYXR1cmVWYXJpYXRpb25SZWNvcmRDb3VudCcpXG59KTtcblxuXG4vLyBDaGVja3MgaWYgYW4gb3BlcmFuZCBpcyBhbiBpbmRleCBvZiBhIHByZWRlZmluZWQgdmFsdWUsXG4vLyBvdGhlcndpc2UgZGVsZWdhdGVzIHRvIHRoZSBwcm92aWRlZCB0eXBlLlxuY2xhc3MgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJFByZWRlZmluZWRPcCB7XG4gICAgZGVjb2RlKHN0cmVhbSwgcGFyZW50LCBvcGVyYW5kcykge1xuICAgICAgICBpZiAodGhpcy5wcmVkZWZpbmVkT3BzW29wZXJhbmRzWzBdXSkgcmV0dXJuIHRoaXMucHJlZGVmaW5lZE9wc1tvcGVyYW5kc1swXV07XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUuZGVjb2RlKHN0cmVhbSwgcGFyZW50LCBvcGVyYW5kcyk7XG4gICAgfVxuICAgIHNpemUodmFsdWUsIGN0eCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlLnNpemUodmFsdWUsIGN0eCk7XG4gICAgfVxuICAgIGVuY29kZShzdHJlYW0sIHZhbHVlLCBjdHgpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5wcmVkZWZpbmVkT3BzLmluZGV4T2YodmFsdWUpO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSByZXR1cm4gaW5kZXg7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUuZW5jb2RlKHN0cmVhbSwgdmFsdWUsIGN0eCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHByZWRlZmluZWRPcHMsIHR5cGUpe1xuICAgICAgICB0aGlzLnByZWRlZmluZWRPcHMgPSBwcmVkZWZpbmVkT3BzO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIH1cbn1cbmNsYXNzICRiODRmZDNkZDlkOGVkZGIyJHZhciRDRkZFbmNvZGluZ1ZlcnNpb24gZXh0ZW5kcyAkNTJaSWYkTnVtYmVyIHtcbiAgICBkZWNvZGUoc3RyZWFtKSB7XG4gICAgICAgIHJldHVybiAkNTJaSWYkdWludDguZGVjb2RlKHN0cmVhbSkgJiAweDdmO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICBzdXBlcignVUludDgnKTtcbiAgICB9XG59XG5sZXQgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJFJhbmdlMSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBmaXJzdDogJDUyWklmJHVpbnQxNixcbiAgICBuTGVmdDogJDUyWklmJHVpbnQ4XG59KTtcbmxldCAkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkUmFuZ2UyID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGZpcnN0OiAkNTJaSWYkdWludDE2LFxuICAgIG5MZWZ0OiAkNTJaSWYkdWludDE2XG59KTtcbmxldCAkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkQ0ZGQ3VzdG9tRW5jb2RpbmcgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdChuZXcgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJENGRkVuY29kaW5nVmVyc2lvbigpLCB7XG4gICAgMDoge1xuICAgICAgICBuQ29kZXM6ICQ1MlpJZiR1aW50OCxcbiAgICAgICAgY29kZXM6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQ4LCAnbkNvZGVzJylcbiAgICB9LFxuICAgIDE6IHtcbiAgICAgICAgblJhbmdlczogJDUyWklmJHVpbnQ4LFxuICAgICAgICByYW5nZXM6IG5ldyAkNTJaSWYkQXJyYXkoJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJFJhbmdlMSwgJ25SYW5nZXMnKVxuICAgIH1cbn0pO1xubGV0ICRiODRmZDNkZDlkOGVkZGIyJHZhciRDRkZFbmNvZGluZyA9IG5ldyAkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkUHJlZGVmaW5lZE9wKFtcbiAgICAoMCwgJGJjMDQzM2Q5YjdlNDFmNWYkZXhwb3J0JGRlZTAwMjcwNjBmYTEzYmQpLFxuICAgICgwLCAkYmMwNDMzZDliN2U0MWY1ZiRleHBvcnQkNGY1OGY0OTdlMTRhNTNjMylcbl0sIG5ldyAoMCwgJDBlMzRhNDNkMDViZGU4MmMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJENGRkN1c3RvbUVuY29kaW5nLCB7XG4gICAgbGF6eTogdHJ1ZVxufSkpO1xuLy8gRGVjb2RlcyBhbiBhcnJheSBvZiByYW5nZXMgdW50aWwgdGhlIHRvdGFsXG4vLyBsZW5ndGggaXMgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIGxlbmd0aC5cbmNsYXNzICRiODRmZDNkZDlkOGVkZGIyJHZhciRSYW5nZUFycmF5IGV4dGVuZHMgJDUyWklmJEFycmF5IHtcbiAgICBkZWNvZGUoc3RyZWFtLCBwYXJlbnQpIHtcbiAgICAgICAgbGV0IGxlbmd0aCA9ICgwLCAkNTJaSWYkcmVzb2x2ZUxlbmd0aCkodGhpcy5sZW5ndGgsIHN0cmVhbSwgcGFyZW50KTtcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgbGV0IHJlcyA9IFtdO1xuICAgICAgICB3aGlsZShjb3VudCA8IGxlbmd0aCl7XG4gICAgICAgICAgICBsZXQgcmFuZ2UgPSB0aGlzLnR5cGUuZGVjb2RlKHN0cmVhbSwgcGFyZW50KTtcbiAgICAgICAgICAgIHJhbmdlLm9mZnNldCA9IGNvdW50O1xuICAgICAgICAgICAgY291bnQgKz0gcmFuZ2UubkxlZnQgKyAxO1xuICAgICAgICAgICAgcmVzLnB1c2gocmFuZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxufVxubGV0ICRiODRmZDNkZDlkOGVkZGIyJHZhciRDRkZDdXN0b21DaGFyc2V0ID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoJDUyWklmJHVpbnQ4LCB7XG4gICAgMDoge1xuICAgICAgICBnbHlwaHM6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQxNiwgKHQpPT50LnBhcmVudC5DaGFyU3RyaW5ncy5sZW5ndGggLSAxKVxuICAgIH0sXG4gICAgMToge1xuICAgICAgICByYW5nZXM6IG5ldyAkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkUmFuZ2VBcnJheSgkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkUmFuZ2UxLCAodCk9PnQucGFyZW50LkNoYXJTdHJpbmdzLmxlbmd0aCAtIDEpXG4gICAgfSxcbiAgICAyOiB7XG4gICAgICAgIHJhbmdlczogbmV3ICRiODRmZDNkZDlkOGVkZGIyJHZhciRSYW5nZUFycmF5KCRiODRmZDNkZDlkOGVkZGIyJHZhciRSYW5nZTIsICh0KT0+dC5wYXJlbnQuQ2hhclN0cmluZ3MubGVuZ3RoIC0gMSlcbiAgICB9XG59KTtcbmxldCAkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkQ0ZGQ2hhcnNldCA9IG5ldyAkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkUHJlZGVmaW5lZE9wKFtcbiAgICAoMCwgJGVmNjU4ZjVjOWExNDg4YjIkZXhwb3J0JGMzM2I1MDMzNmMyMzRmMTYpLFxuICAgICgwLCAkZWY2NThmNWM5YTE0ODhiMiRleHBvcnQkM2VkMGY5ZTFmZWU4ZDQ4OSksXG4gICAgKDAsICRlZjY1OGY1YzlhMTQ4OGIyJGV4cG9ydCRkYzI4YmUxMTEzOWQ0MTIwKVxuXSwgbmV3ICgwLCAkMGUzNGE0M2QwNWJkZTgyYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KSgkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkQ0ZGQ3VzdG9tQ2hhcnNldCwge1xuICAgIGxhenk6IHRydWVcbn0pKTtcbmxldCAkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkRkRSYW5nZTMgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZmlyc3Q6ICQ1MlpJZiR1aW50MTYsXG4gICAgZmQ6ICQ1MlpJZiR1aW50OFxufSk7XG5sZXQgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJEZEUmFuZ2U0ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGZpcnN0OiAkNTJaSWYkdWludDMyLFxuICAgIGZkOiAkNTJaSWYkdWludDE2XG59KTtcbmxldCAkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkRkRTZWxlY3QgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkdWludDgsIHtcbiAgICAwOiB7XG4gICAgICAgIGZkczogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDgsICh0KT0+dC5wYXJlbnQuQ2hhclN0cmluZ3MubGVuZ3RoKVxuICAgIH0sXG4gICAgMzoge1xuICAgICAgICBuUmFuZ2VzOiAkNTJaSWYkdWludDE2LFxuICAgICAgICByYW5nZXM6IG5ldyAkNTJaSWYkQXJyYXkoJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJEZEUmFuZ2UzLCAnblJhbmdlcycpLFxuICAgICAgICBzZW50aW5lbDogJDUyWklmJHVpbnQxNlxuICAgIH0sXG4gICAgNDoge1xuICAgICAgICBuUmFuZ2VzOiAkNTJaSWYkdWludDMyLFxuICAgICAgICByYW5nZXM6IG5ldyAkNTJaSWYkQXJyYXkoJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJEZEUmFuZ2U0LCAnblJhbmdlcycpLFxuICAgICAgICBzZW50aW5lbDogJDUyWklmJHVpbnQzMlxuICAgIH1cbn0pO1xubGV0ICRiODRmZDNkZDlkOGVkZGIyJHZhciRwdHIgPSBuZXcgKDAsICQwZTM0YTQzZDA1YmRlODJjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKCgwLCAkNmQ1OWRiMmUyOWNjNzdiMyRleHBvcnQkMmUyYmNkODczOWFlMDM5KSk7XG5jbGFzcyAkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkQ0ZGUHJpdmF0ZU9wIHtcbiAgICBkZWNvZGUoc3RyZWFtLCBwYXJlbnQsIG9wZXJhbmRzKSB7XG4gICAgICAgIHBhcmVudC5sZW5ndGggPSBvcGVyYW5kc1swXTtcbiAgICAgICAgcmV0dXJuICRiODRmZDNkZDlkOGVkZGIyJHZhciRwdHIuZGVjb2RlKHN0cmVhbSwgcGFyZW50LCBbXG4gICAgICAgICAgICBvcGVyYW5kc1sxXVxuICAgICAgICBdKTtcbiAgICB9XG4gICAgc2l6ZShkaWN0LCBjdHgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICgwLCAkNmQ1OWRiMmUyOWNjNzdiMyRleHBvcnQkMmUyYmNkODczOWFlMDM5KS5zaXplKGRpY3QsIGN0eCwgZmFsc2UpLFxuICAgICAgICAgICAgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJHB0ci5zaXplKGRpY3QsIGN0eClbMF1cbiAgICAgICAgXTtcbiAgICB9XG4gICAgZW5jb2RlKHN0cmVhbSwgZGljdCwgY3R4KSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAoMCwgJDZkNTlkYjJlMjljYzc3YjMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkuc2l6ZShkaWN0LCBjdHgsIGZhbHNlKSxcbiAgICAgICAgICAgICRiODRmZDNkZDlkOGVkZGIyJHZhciRwdHIuZW5jb2RlKHN0cmVhbSwgZGljdCwgY3R4KVswXVxuICAgICAgICBdO1xuICAgIH1cbn1cbmxldCAkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkRm9udERpY3QgPSBuZXcgKDAsICQ2MWFhNTQ5ZjE2ZDU4YjliJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKFtcbiAgICAvLyBrZXkgICAgICAgbmFtZSAgICAgICAgICAgICAgICAgICB0eXBlKHMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFxuICAgIFtcbiAgICAgICAgMTgsXG4gICAgICAgICdQcml2YXRlJyxcbiAgICAgICAgbmV3ICRiODRmZDNkZDlkOGVkZGIyJHZhciRDRkZQcml2YXRlT3AsXG4gICAgICAgIG51bGxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAzOFxuICAgICAgICBdLFxuICAgICAgICAnRm9udE5hbWUnLFxuICAgICAgICAnc2lkJyxcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDdcbiAgICAgICAgXSxcbiAgICAgICAgJ0ZvbnRNYXRyaXgnLFxuICAgICAgICAnYXJyYXknLFxuICAgICAgICBbXG4gICAgICAgICAgICAwLjAwMSxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgMC4wMDEsXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgMFxuICAgICAgICBdXG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgNVxuICAgICAgICBdLFxuICAgICAgICAnUGFpbnRUeXBlJyxcbiAgICAgICAgJ251bWJlcicsXG4gICAgICAgIDBcbiAgICBdXG5dKTtcbmxldCAkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkQ0ZGVG9wRGljdCA9IG5ldyAoMCwgJDYxYWE1NDlmMTZkNThiOWIkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoW1xuICAgIC8vIGtleSAgICAgICBuYW1lICAgICAgICAgICAgICAgICAgIHR5cGUocykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0XG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDMwXG4gICAgICAgIF0sXG4gICAgICAgICdST1MnLFxuICAgICAgICBbXG4gICAgICAgICAgICAnc2lkJyxcbiAgICAgICAgICAgICdzaWQnLFxuICAgICAgICAgICAgJ251bWJlcidcbiAgICAgICAgXSxcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICAwLFxuICAgICAgICAndmVyc2lvbicsXG4gICAgICAgICdzaWQnLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDEsXG4gICAgICAgICdOb3RpY2UnLFxuICAgICAgICAnc2lkJyxcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDBcbiAgICAgICAgXSxcbiAgICAgICAgJ0NvcHlyaWdodCcsXG4gICAgICAgICdzaWQnLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDIsXG4gICAgICAgICdGdWxsTmFtZScsXG4gICAgICAgICdzaWQnLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDMsXG4gICAgICAgICdGYW1pbHlOYW1lJyxcbiAgICAgICAgJ3NpZCcsXG4gICAgICAgIG51bGxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgNCxcbiAgICAgICAgJ1dlaWdodCcsXG4gICAgICAgICdzaWQnLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMVxuICAgICAgICBdLFxuICAgICAgICAnaXNGaXhlZFBpdGNoJyxcbiAgICAgICAgJ2Jvb2xlYW4nLFxuICAgICAgICBmYWxzZVxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDJcbiAgICAgICAgXSxcbiAgICAgICAgJ0l0YWxpY0FuZ2xlJyxcbiAgICAgICAgJ251bWJlcicsXG4gICAgICAgIDBcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAzXG4gICAgICAgIF0sXG4gICAgICAgICdVbmRlcmxpbmVQb3NpdGlvbicsXG4gICAgICAgICdudW1iZXInLFxuICAgICAgICAtMTAwXG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgNFxuICAgICAgICBdLFxuICAgICAgICAnVW5kZXJsaW5lVGhpY2tuZXNzJyxcbiAgICAgICAgJ251bWJlcicsXG4gICAgICAgIDUwXG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgNVxuICAgICAgICBdLFxuICAgICAgICAnUGFpbnRUeXBlJyxcbiAgICAgICAgJ251bWJlcicsXG4gICAgICAgIDBcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICA2XG4gICAgICAgIF0sXG4gICAgICAgICdDaGFyc3RyaW5nVHlwZScsXG4gICAgICAgICdudW1iZXInLFxuICAgICAgICAyXG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgN1xuICAgICAgICBdLFxuICAgICAgICAnRm9udE1hdHJpeCcsXG4gICAgICAgICdhcnJheScsXG4gICAgICAgIFtcbiAgICAgICAgICAgIDAuMDAxLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAwLjAwMSxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAwXG4gICAgICAgIF1cbiAgICBdLFxuICAgIFtcbiAgICAgICAgMTMsXG4gICAgICAgICdVbmlxdWVJRCcsXG4gICAgICAgICdudW1iZXInLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDUsXG4gICAgICAgICdGb250QkJveCcsXG4gICAgICAgICdhcnJheScsXG4gICAgICAgIFtcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIDBcbiAgICAgICAgXVxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDhcbiAgICAgICAgXSxcbiAgICAgICAgJ1N0cm9rZVdpZHRoJyxcbiAgICAgICAgJ251bWJlcicsXG4gICAgICAgIDBcbiAgICBdLFxuICAgIFtcbiAgICAgICAgMTQsXG4gICAgICAgICdYVUlEJyxcbiAgICAgICAgJ2FycmF5JyxcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICAxNSxcbiAgICAgICAgJ2NoYXJzZXQnLFxuICAgICAgICAkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkQ0ZGQ2hhcnNldCxcbiAgICAgICAgKDAsICRlZjY1OGY1YzlhMTQ4OGIyJGV4cG9ydCRjMzNiNTAzMzZjMjM0ZjE2KVxuICAgIF0sXG4gICAgW1xuICAgICAgICAxNixcbiAgICAgICAgJ0VuY29kaW5nJyxcbiAgICAgICAgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJENGRkVuY29kaW5nLFxuICAgICAgICAoMCwgJGJjMDQzM2Q5YjdlNDFmNWYkZXhwb3J0JGRlZTAwMjcwNjBmYTEzYmQpXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDE3LFxuICAgICAgICAnQ2hhclN0cmluZ3MnLFxuICAgICAgICBuZXcgKDAsICQwZTM0YTQzZDA1YmRlODJjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKG5ldyAoMCwgJDQzZTk4MjFlZjM3MTdlZWMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkpLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDE4LFxuICAgICAgICAnUHJpdmF0ZScsXG4gICAgICAgIG5ldyAkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkQ0ZGUHJpdmF0ZU9wLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMjBcbiAgICAgICAgXSxcbiAgICAgICAgJ1N5bnRoZXRpY0Jhc2UnLFxuICAgICAgICAnbnVtYmVyJyxcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDIxXG4gICAgICAgIF0sXG4gICAgICAgICdQb3N0U2NyaXB0JyxcbiAgICAgICAgJ3NpZCcsXG4gICAgICAgIG51bGxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAyMlxuICAgICAgICBdLFxuICAgICAgICAnQmFzZUZvbnROYW1lJyxcbiAgICAgICAgJ3NpZCcsXG4gICAgICAgIG51bGxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAyM1xuICAgICAgICBdLFxuICAgICAgICAnQmFzZUZvbnRCbGVuZCcsXG4gICAgICAgICdkZWx0YScsXG4gICAgICAgIG51bGxcbiAgICBdLFxuICAgIC8vIENJRCBmb250IHNwZWNpZmljXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDMxXG4gICAgICAgIF0sXG4gICAgICAgICdDSURGb250VmVyc2lvbicsXG4gICAgICAgICdudW1iZXInLFxuICAgICAgICAwXG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMzJcbiAgICAgICAgXSxcbiAgICAgICAgJ0NJREZvbnRSZXZpc2lvbicsXG4gICAgICAgICdudW1iZXInLFxuICAgICAgICAwXG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMzNcbiAgICAgICAgXSxcbiAgICAgICAgJ0NJREZvbnRUeXBlJyxcbiAgICAgICAgJ251bWJlcicsXG4gICAgICAgIDBcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAzNFxuICAgICAgICBdLFxuICAgICAgICAnQ0lEQ291bnQnLFxuICAgICAgICAnbnVtYmVyJyxcbiAgICAgICAgODcyMFxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDM1XG4gICAgICAgIF0sXG4gICAgICAgICdVSURCYXNlJyxcbiAgICAgICAgJ251bWJlcicsXG4gICAgICAgIG51bGxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAzN1xuICAgICAgICBdLFxuICAgICAgICAnRkRTZWxlY3QnLFxuICAgICAgICBuZXcgKDAsICQwZTM0YTQzZDA1YmRlODJjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKCRiODRmZDNkZDlkOGVkZGIyJHZhciRGRFNlbGVjdCksXG4gICAgICAgIG51bGxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAzNlxuICAgICAgICBdLFxuICAgICAgICAnRkRBcnJheScsXG4gICAgICAgIG5ldyAoMCwgJDBlMzRhNDNkMDViZGU4MmMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkobmV3ICgwLCAkNDNlOTgyMWVmMzcxN2VlYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KSgkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkRm9udERpY3QpKSxcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDM4XG4gICAgICAgIF0sXG4gICAgICAgICdGb250TmFtZScsXG4gICAgICAgICdzaWQnLFxuICAgICAgICBudWxsXG4gICAgXVxuXSk7XG5sZXQgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJFZhcmlhdGlvblN0b3JlID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGxlbmd0aDogJDUyWklmJHVpbnQxNixcbiAgICBpdGVtVmFyaWF0aW9uU3RvcmU6ICgwLCAkMWE0N2IwYzQ1YzFjMjJmZSRleHBvcnQkZmUxYjEyMmEyNzEwZjI0MSlcbn0pO1xubGV0ICRiODRmZDNkZDlkOGVkZGIyJHZhciRDRkYyVG9wRGljdCA9IG5ldyAoMCwgJDYxYWE1NDlmMTZkNThiOWIkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoW1xuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICA3XG4gICAgICAgIF0sXG4gICAgICAgICdGb250TWF0cml4JyxcbiAgICAgICAgJ2FycmF5JyxcbiAgICAgICAgW1xuICAgICAgICAgICAgMC4wMDEsXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIDAuMDAxLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIDBcbiAgICAgICAgXVxuICAgIF0sXG4gICAgW1xuICAgICAgICAxNyxcbiAgICAgICAgJ0NoYXJTdHJpbmdzJyxcbiAgICAgICAgbmV3ICgwLCAkMGUzNGE0M2QwNWJkZTgyYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KShuZXcgKDAsICQ0M2U5ODIxZWYzNzE3ZWVjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKSxcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDM3XG4gICAgICAgIF0sXG4gICAgICAgICdGRFNlbGVjdCcsXG4gICAgICAgIG5ldyAoMCwgJDBlMzRhNDNkMDViZGU4MmMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJEZEU2VsZWN0KSxcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDM2XG4gICAgICAgIF0sXG4gICAgICAgICdGREFycmF5JyxcbiAgICAgICAgbmV3ICgwLCAkMGUzNGE0M2QwNWJkZTgyYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KShuZXcgKDAsICQ0M2U5ODIxZWYzNzE3ZWVjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKCRiODRmZDNkZDlkOGVkZGIyJHZhciRGb250RGljdCkpLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDI0LFxuICAgICAgICAndnN0b3JlJyxcbiAgICAgICAgbmV3ICgwLCAkMGUzNGE0M2QwNWJkZTgyYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KSgkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkVmFyaWF0aW9uU3RvcmUpLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDI1LFxuICAgICAgICAnbWF4c3RhY2snLFxuICAgICAgICAnbnVtYmVyJyxcbiAgICAgICAgMTkzXG4gICAgXVxuXSk7XG5sZXQgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJENGRlRvcCA9IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KCQ1MlpJZiRmaXhlZDE2LCB7XG4gICAgMToge1xuICAgICAgICBoZHJTaXplOiAkNTJaSWYkdWludDgsXG4gICAgICAgIG9mZlNpemU6ICQ1MlpJZiR1aW50OCxcbiAgICAgICAgbmFtZUluZGV4OiBuZXcgKDAsICQ0M2U5ODIxZWYzNzE3ZWVjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKG5ldyAkNTJaSWYkU3RyaW5nKCdsZW5ndGgnKSksXG4gICAgICAgIHRvcERpY3RJbmRleDogbmV3ICgwLCAkNDNlOTgyMWVmMzcxN2VlYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KSgkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkQ0ZGVG9wRGljdCksXG4gICAgICAgIHN0cmluZ0luZGV4OiBuZXcgKDAsICQ0M2U5ODIxZWYzNzE3ZWVjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKG5ldyAkNTJaSWYkU3RyaW5nKCdsZW5ndGgnKSksXG4gICAgICAgIGdsb2JhbFN1YnJJbmRleDogbmV3ICgwLCAkNDNlOTgyMWVmMzcxN2VlYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KVxuICAgIH0sXG4gICAgMjoge1xuICAgICAgICBoZHJTaXplOiAkNTJaSWYkdWludDgsXG4gICAgICAgIGxlbmd0aDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgdG9wRGljdDogJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJENGRjJUb3BEaWN0LFxuICAgICAgICBnbG9iYWxTdWJySW5kZXg6IG5ldyAoMCwgJDQzZTk4MjFlZjM3MTdlZWMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSlcbiAgICB9XG59KTtcbnZhciAkYjg0ZmQzZGQ5ZDhlZGRiMiRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJENGRlRvcDtcblxuXG5cblxuY2xhc3MgJDgyMmFjMGQ1ODllNGUyMzckdmFyJENGRkZvbnQge1xuICAgIHN0YXRpYyBkZWNvZGUoc3RyZWFtKSB7XG4gICAgICAgIHJldHVybiBuZXcgJDgyMmFjMGQ1ODllNGUyMzckdmFyJENGRkZvbnQoc3RyZWFtKTtcbiAgICB9XG4gICAgZGVjb2RlKCkge1xuICAgICAgICBsZXQgc3RhcnQgPSB0aGlzLnN0cmVhbS5wb3M7XG4gICAgICAgIGxldCB0b3AgPSAoMCwgJGI4NGZkM2RkOWQ4ZWRkYjIkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkuZGVjb2RlKHRoaXMuc3RyZWFtKTtcbiAgICAgICAgZm9yKGxldCBrZXkgaW4gdG9wKXtcbiAgICAgICAgICAgIGxldCB2YWwgPSB0b3Bba2V5XTtcbiAgICAgICAgICAgIHRoaXNba2V5XSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy52ZXJzaW9uIDwgMikge1xuICAgICAgICAgICAgaWYgKHRoaXMudG9wRGljdEluZGV4Lmxlbmd0aCAhPT0gMSkgdGhyb3cgbmV3IEVycm9yKFwiT25seSBhIHNpbmdsZSBmb250IGlzIGFsbG93ZWQgaW4gQ0ZGXCIpO1xuICAgICAgICAgICAgdGhpcy50b3BEaWN0ID0gdGhpcy50b3BEaWN0SW5kZXhbMF07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc0NJREZvbnQgPSB0aGlzLnRvcERpY3QuUk9TICE9IG51bGw7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzdHJpbmcoc2lkKSB7XG4gICAgICAgIGlmICh0aGlzLnZlcnNpb24gPj0gMikgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmIChzaWQgPCAoMCwgJDIyOTIyNGFlYzQzNzgzYzUkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkubGVuZ3RoKSByZXR1cm4gKDAsICQyMjkyMjRhZWM0Mzc4M2M1JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpW3NpZF07XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmluZ0luZGV4W3NpZCAtICgwLCAkMjI5MjI0YWVjNDM3ODNjNSRleHBvcnQkMmUyYmNkODczOWFlMDM5KS5sZW5ndGhdO1xuICAgIH1cbiAgICBnZXQgcG9zdHNjcmlwdE5hbWUoKSB7XG4gICAgICAgIGlmICh0aGlzLnZlcnNpb24gPCAyKSByZXR1cm4gdGhpcy5uYW1lSW5kZXhbMF07XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBnZXQgZnVsbE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmluZyh0aGlzLnRvcERpY3QuRnVsbE5hbWUpO1xuICAgIH1cbiAgICBnZXQgZmFtaWx5TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyaW5nKHRoaXMudG9wRGljdC5GYW1pbHlOYW1lKTtcbiAgICB9XG4gICAgZ2V0Q2hhclN0cmluZyhnbHlwaCkge1xuICAgICAgICB0aGlzLnN0cmVhbS5wb3MgPSB0aGlzLnRvcERpY3QuQ2hhclN0cmluZ3NbZ2x5cGhdLm9mZnNldDtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLnJlYWRCdWZmZXIodGhpcy50b3BEaWN0LkNoYXJTdHJpbmdzW2dseXBoXS5sZW5ndGgpO1xuICAgIH1cbiAgICBnZXRHbHlwaE5hbWUoZ2lkKSB7XG4gICAgICAgIC8vIENGRjIgZ2x5cGggbmFtZXMgYXJlIGluIHRoZSBwb3N0IHRhYmxlLlxuICAgICAgICBpZiAodGhpcy52ZXJzaW9uID49IDIpIHJldHVybiBudWxsO1xuICAgICAgICAvLyBDSUQta2V5ZWQgZm9udHMgZG9uJ3QgaGF2ZSBnbHlwaCBuYW1lc1xuICAgICAgICBpZiAodGhpcy5pc0NJREZvbnQpIHJldHVybiBudWxsO1xuICAgICAgICBsZXQgeyBjaGFyc2V0OiBjaGFyc2V0IH0gPSB0aGlzLnRvcERpY3Q7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoYXJzZXQpKSByZXR1cm4gY2hhcnNldFtnaWRdO1xuICAgICAgICBpZiAoZ2lkID09PSAwKSByZXR1cm4gJy5ub3RkZWYnO1xuICAgICAgICBnaWQgLT0gMTtcbiAgICAgICAgc3dpdGNoKGNoYXJzZXQudmVyc2lvbil7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyaW5nKGNoYXJzZXQuZ2x5cGhzW2dpZF0pO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBjaGFyc2V0LnJhbmdlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIGxldCByYW5nZSA9IGNoYXJzZXQucmFuZ2VzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2Uub2Zmc2V0IDw9IGdpZCAmJiBnaWQgPD0gcmFuZ2Uub2Zmc2V0ICsgcmFuZ2UubkxlZnQpIHJldHVybiB0aGlzLnN0cmluZyhyYW5nZS5maXJzdCArIChnaWQgLSByYW5nZS5vZmZzZXQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGZkRm9yR2x5cGgoZ2lkKSB7XG4gICAgICAgIGlmICghdGhpcy50b3BEaWN0LkZEU2VsZWN0KSByZXR1cm4gbnVsbDtcbiAgICAgICAgc3dpdGNoKHRoaXMudG9wRGljdC5GRFNlbGVjdC52ZXJzaW9uKXtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b3BEaWN0LkZEU2VsZWN0LmZkc1tnaWRdO1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGxldCB7IHJhbmdlczogcmFuZ2VzIH0gPSB0aGlzLnRvcERpY3QuRkRTZWxlY3Q7XG4gICAgICAgICAgICAgICAgbGV0IGxvdyA9IDA7XG4gICAgICAgICAgICAgICAgbGV0IGhpZ2ggPSByYW5nZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICB3aGlsZShsb3cgPD0gaGlnaCl7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtaWQgPSBsb3cgKyBoaWdoID4+IDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnaWQgPCByYW5nZXNbbWlkXS5maXJzdCkgaGlnaCA9IG1pZCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1pZCA8IGhpZ2ggJiYgZ2lkID49IHJhbmdlc1ttaWQgKyAxXS5maXJzdCkgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gcmFuZ2VzW21pZF0uZmQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gRkRTZWxlY3QgdmVyc2lvbjogJHt0aGlzLnRvcERpY3QuRkRTZWxlY3QudmVyc2lvbn1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcml2YXRlRGljdEZvckdseXBoKGdpZCkge1xuICAgICAgICBpZiAodGhpcy50b3BEaWN0LkZEU2VsZWN0KSB7XG4gICAgICAgICAgICBsZXQgZmQgPSB0aGlzLmZkRm9yR2x5cGgoZ2lkKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnRvcERpY3QuRkRBcnJheVtmZF0pIHJldHVybiB0aGlzLnRvcERpY3QuRkRBcnJheVtmZF0uUHJpdmF0ZTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnZlcnNpb24gPCAyKSByZXR1cm4gdGhpcy50b3BEaWN0LlByaXZhdGU7XG4gICAgICAgIHJldHVybiB0aGlzLnRvcERpY3QuRkRBcnJheVswXS5Qcml2YXRlO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihzdHJlYW0pe1xuICAgICAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgdGhpcy5kZWNvZGUoKTtcbiAgICB9XG59XG52YXIgJDgyMmFjMGQ1ODllNGUyMzckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9ICQ4MjJhYzBkNTg5ZTRlMjM3JHZhciRDRkZGb250O1xuXG5cblxubGV0ICQyYmJmMmJjMWNlMzdjZDhmJHZhciRWZXJ0aWNhbE9yaWdpbiA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBnbHlwaEluZGV4OiAkNTJaSWYkdWludDE2LFxuICAgIHZlcnRPcmlnaW5ZOiAkNTJaSWYkaW50MTZcbn0pO1xudmFyICQyYmJmMmJjMWNlMzdjZDhmJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgbWFqb3JWZXJzaW9uOiAkNTJaSWYkdWludDE2LFxuICAgIG1pbm9yVmVyc2lvbjogJDUyWklmJHVpbnQxNixcbiAgICBkZWZhdWx0VmVydE9yaWdpblk6ICQ1MlpJZiRpbnQxNixcbiAgICBudW1WZXJ0T3JpZ2luWU1ldHJpY3M6ICQ1MlpJZiR1aW50MTYsXG4gICAgbWV0cmljczogbmV3ICQ1MlpJZiRBcnJheSgkMmJiZjJiYzFjZTM3Y2Q4ZiR2YXIkVmVydGljYWxPcmlnaW4sICdudW1WZXJ0T3JpZ2luWU1ldHJpY3MnKVxufSk7XG5cblxuXG5cbmxldCAkMDk0MTYxOGRjMjJhOTQ2ZCRleHBvcnQkMTZiMjI3Y2IxNWQ3MTZhMCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBoZWlnaHQ6ICQ1MlpJZiR1aW50OCxcbiAgICB3aWR0aDogJDUyWklmJHVpbnQ4LFxuICAgIGhvcmlCZWFyaW5nWDogJDUyWklmJGludDgsXG4gICAgaG9yaUJlYXJpbmdZOiAkNTJaSWYkaW50OCxcbiAgICBob3JpQWR2YW5jZTogJDUyWklmJHVpbnQ4LFxuICAgIHZlcnRCZWFyaW5nWDogJDUyWklmJGludDgsXG4gICAgdmVydEJlYXJpbmdZOiAkNTJaSWYkaW50OCxcbiAgICB2ZXJ0QWR2YW5jZTogJDUyWklmJHVpbnQ4XG59KTtcbmxldCAkMDk0MTYxOGRjMjJhOTQ2ZCRleHBvcnQkNjJjNTNlNzVmNjliZmUxMiA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBoZWlnaHQ6ICQ1MlpJZiR1aW50OCxcbiAgICB3aWR0aDogJDUyWklmJHVpbnQ4LFxuICAgIGJlYXJpbmdYOiAkNTJaSWYkaW50OCxcbiAgICBiZWFyaW5nWTogJDUyWklmJGludDgsXG4gICAgYWR2YW5jZTogJDUyWklmJHVpbnQ4XG59KTtcbmxldCAkMDk0MTYxOGRjMjJhOTQ2ZCR2YXIkRUJEVENvbXBvbmVudCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBnbHlwaDogJDUyWklmJHVpbnQxNixcbiAgICB4T2Zmc2V0OiAkNTJaSWYkaW50OCxcbiAgICB5T2Zmc2V0OiAkNTJaSWYkaW50OFxufSk7XG5jbGFzcyAkMDk0MTYxOGRjMjJhOTQ2ZCR2YXIkQnl0ZUFsaWduZWQge1xufVxuY2xhc3MgJDA5NDE2MThkYzIyYTk0NmQkdmFyJEJpdEFsaWduZWQge1xufVxubGV0ICQwOTQxNjE4ZGMyMmE5NDZkJGV4cG9ydCRmMWY1ZGRlYjIwZDE0ZiA9IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KCd2ZXJzaW9uJywge1xuICAgIDE6IHtcbiAgICAgICAgbWV0cmljczogJDA5NDE2MThkYzIyYTk0NmQkZXhwb3J0JDYyYzUzZTc1ZjY5YmZlMTIsXG4gICAgICAgIGRhdGE6ICQwOTQxNjE4ZGMyMmE5NDZkJHZhciRCeXRlQWxpZ25lZFxuICAgIH0sXG4gICAgMjoge1xuICAgICAgICBtZXRyaWNzOiAkMDk0MTYxOGRjMjJhOTQ2ZCRleHBvcnQkNjJjNTNlNzVmNjliZmUxMixcbiAgICAgICAgZGF0YTogJDA5NDE2MThkYzIyYTk0NmQkdmFyJEJpdEFsaWduZWRcbiAgICB9LFxuICAgIC8vIGZvcm1hdCAzIGlzIGRlcHJlY2F0ZWRcbiAgICAvLyBmb3JtYXQgNCBpcyBub3Qgc3VwcG9ydGVkIGJ5IE1pY3Jvc29mdFxuICAgIDU6IHtcbiAgICAgICAgZGF0YTogJDA5NDE2MThkYzIyYTk0NmQkdmFyJEJpdEFsaWduZWRcbiAgICB9LFxuICAgIDY6IHtcbiAgICAgICAgbWV0cmljczogJDA5NDE2MThkYzIyYTk0NmQkZXhwb3J0JDE2YjIyN2NiMTVkNzE2YTAsXG4gICAgICAgIGRhdGE6ICQwOTQxNjE4ZGMyMmE5NDZkJHZhciRCeXRlQWxpZ25lZFxuICAgIH0sXG4gICAgNzoge1xuICAgICAgICBtZXRyaWNzOiAkMDk0MTYxOGRjMjJhOTQ2ZCRleHBvcnQkMTZiMjI3Y2IxNWQ3MTZhMCxcbiAgICAgICAgZGF0YTogJDA5NDE2MThkYzIyYTk0NmQkdmFyJEJpdEFsaWduZWRcbiAgICB9LFxuICAgIDg6IHtcbiAgICAgICAgbWV0cmljczogJDA5NDE2MThkYzIyYTk0NmQkZXhwb3J0JDYyYzUzZTc1ZjY5YmZlMTIsXG4gICAgICAgIHBhZDogbmV3ICQ1MlpJZiRSZXNlcnZlZCgkNTJaSWYkdWludDgpLFxuICAgICAgICBudW1Db21wb25lbnRzOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBjb21wb25lbnRzOiBuZXcgJDUyWklmJEFycmF5KCQwOTQxNjE4ZGMyMmE5NDZkJHZhciRFQkRUQ29tcG9uZW50LCAnbnVtQ29tcG9uZW50cycpXG4gICAgfSxcbiAgICA5OiB7XG4gICAgICAgIG1ldHJpY3M6ICQwOTQxNjE4ZGMyMmE5NDZkJGV4cG9ydCQxNmIyMjdjYjE1ZDcxNmEwLFxuICAgICAgICBwYWQ6IG5ldyAkNTJaSWYkUmVzZXJ2ZWQoJDUyWklmJHVpbnQ4KSxcbiAgICAgICAgbnVtQ29tcG9uZW50czogJDUyWklmJHVpbnQxNixcbiAgICAgICAgY29tcG9uZW50czogbmV3ICQ1MlpJZiRBcnJheSgkMDk0MTYxOGRjMjJhOTQ2ZCR2YXIkRUJEVENvbXBvbmVudCwgJ251bUNvbXBvbmVudHMnKVxuICAgIH0sXG4gICAgMTc6IHtcbiAgICAgICAgbWV0cmljczogJDA5NDE2MThkYzIyYTk0NmQkZXhwb3J0JDYyYzUzZTc1ZjY5YmZlMTIsXG4gICAgICAgIGRhdGFMZW46ICQ1MlpJZiR1aW50MzIsXG4gICAgICAgIGRhdGE6IG5ldyAkNTJaSWYkQnVmZmVyKCdkYXRhTGVuJylcbiAgICB9LFxuICAgIDE4OiB7XG4gICAgICAgIG1ldHJpY3M6ICQwOTQxNjE4ZGMyMmE5NDZkJGV4cG9ydCQxNmIyMjdjYjE1ZDcxNmEwLFxuICAgICAgICBkYXRhTGVuOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBkYXRhOiBuZXcgJDUyWklmJEJ1ZmZlcignZGF0YUxlbicpXG4gICAgfSxcbiAgICAxOToge1xuICAgICAgICBkYXRhTGVuOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBkYXRhOiBuZXcgJDUyWklmJEJ1ZmZlcignZGF0YUxlbicpXG4gICAgfVxufSk7XG5cblxubGV0ICQ5OTExYzRjNzIwMWMxM2RlJHZhciRTQml0TGluZU1ldHJpY3MgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgYXNjZW5kZXI6ICQ1MlpJZiRpbnQ4LFxuICAgIGRlc2NlbmRlcjogJDUyWklmJGludDgsXG4gICAgd2lkdGhNYXg6ICQ1MlpJZiR1aW50OCxcbiAgICBjYXJldFNsb3BlTnVtZXJhdG9yOiAkNTJaSWYkaW50OCxcbiAgICBjYXJldFNsb3BlRGVub21pbmF0b3I6ICQ1MlpJZiRpbnQ4LFxuICAgIGNhcmV0T2Zmc2V0OiAkNTJaSWYkaW50OCxcbiAgICBtaW5PcmlnaW5TQjogJDUyWklmJGludDgsXG4gICAgbWluQWR2YW5jZVNCOiAkNTJaSWYkaW50OCxcbiAgICBtYXhCZWZvcmVCTDogJDUyWklmJGludDgsXG4gICAgbWluQWZ0ZXJCTDogJDUyWklmJGludDgsXG4gICAgcGFkOiBuZXcgJDUyWklmJFJlc2VydmVkKCQ1MlpJZiRpbnQ4LCAyKVxufSk7XG5sZXQgJDk5MTFjNGM3MjAxYzEzZGUkdmFyJENvZGVPZmZzZXRQYWlyID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGdseXBoQ29kZTogJDUyWklmJHVpbnQxNixcbiAgICBvZmZzZXQ6ICQ1MlpJZiR1aW50MTZcbn0pO1xubGV0ICQ5OTExYzRjNzIwMWMxM2RlJHZhciRJbmRleFN1YnRhYmxlID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoJDUyWklmJHVpbnQxNiwge1xuICAgIGhlYWRlcjoge1xuICAgICAgICBpbWFnZUZvcm1hdDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgaW1hZ2VEYXRhT2Zmc2V0OiAkNTJaSWYkdWludDMyXG4gICAgfSxcbiAgICAxOiB7XG4gICAgICAgIG9mZnNldEFycmF5OiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MzIsICh0KT0+dC5wYXJlbnQubGFzdEdseXBoSW5kZXggLSB0LnBhcmVudC5maXJzdEdseXBoSW5kZXggKyAxKVxuICAgIH0sXG4gICAgMjoge1xuICAgICAgICBpbWFnZVNpemU6ICQ1MlpJZiR1aW50MzIsXG4gICAgICAgIGJpZ01ldHJpY3M6ICgwLCAkMDk0MTYxOGRjMjJhOTQ2ZCRleHBvcnQkMTZiMjI3Y2IxNWQ3MTZhMClcbiAgICB9LFxuICAgIDM6IHtcbiAgICAgICAgb2Zmc2V0QXJyYXk6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQxNiwgKHQpPT50LnBhcmVudC5sYXN0R2x5cGhJbmRleCAtIHQucGFyZW50LmZpcnN0R2x5cGhJbmRleCArIDEpXG4gICAgfSxcbiAgICA0OiB7XG4gICAgICAgIG51bUdseXBoczogJDUyWklmJHVpbnQzMixcbiAgICAgICAgZ2x5cGhBcnJheTogbmV3ICQ1MlpJZiRBcnJheSgkOTkxMWM0YzcyMDFjMTNkZSR2YXIkQ29kZU9mZnNldFBhaXIsICh0KT0+dC5udW1HbHlwaHMgKyAxKVxuICAgIH0sXG4gICAgNToge1xuICAgICAgICBpbWFnZVNpemU6ICQ1MlpJZiR1aW50MzIsXG4gICAgICAgIGJpZ01ldHJpY3M6ICgwLCAkMDk0MTYxOGRjMjJhOTQ2ZCRleHBvcnQkMTZiMjI3Y2IxNWQ3MTZhMCksXG4gICAgICAgIG51bUdseXBoczogJDUyWklmJHVpbnQzMixcbiAgICAgICAgZ2x5cGhDb2RlQXJyYXk6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQxNiwgJ251bUdseXBocycpXG4gICAgfVxufSk7XG5sZXQgJDk5MTFjNGM3MjAxYzEzZGUkdmFyJEluZGV4U3VidGFibGVBcnJheSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBmaXJzdEdseXBoSW5kZXg6ICQ1MlpJZiR1aW50MTYsXG4gICAgbGFzdEdseXBoSW5kZXg6ICQ1MlpJZiR1aW50MTYsXG4gICAgc3VidGFibGU6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCAkOTkxMWM0YzcyMDFjMTNkZSR2YXIkSW5kZXhTdWJ0YWJsZSlcbn0pO1xubGV0ICQ5OTExYzRjNzIwMWMxM2RlJHZhciRCaXRtYXBTaXplVGFibGUgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgaW5kZXhTdWJUYWJsZUFycmF5OiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgbmV3ICQ1MlpJZiRBcnJheSgkOTkxMWM0YzcyMDFjMTNkZSR2YXIkSW5kZXhTdWJ0YWJsZUFycmF5LCAxKSwge1xuICAgICAgICB0eXBlOiAncGFyZW50J1xuICAgIH0pLFxuICAgIGluZGV4VGFibGVzU2l6ZTogJDUyWklmJHVpbnQzMixcbiAgICBudW1iZXJPZkluZGV4U3ViVGFibGVzOiAkNTJaSWYkdWludDMyLFxuICAgIGNvbG9yUmVmOiAkNTJaSWYkdWludDMyLFxuICAgIGhvcmk6ICQ5OTExYzRjNzIwMWMxM2RlJHZhciRTQml0TGluZU1ldHJpY3MsXG4gICAgdmVydDogJDk5MTFjNGM3MjAxYzEzZGUkdmFyJFNCaXRMaW5lTWV0cmljcyxcbiAgICBzdGFydEdseXBoSW5kZXg6ICQ1MlpJZiR1aW50MTYsXG4gICAgZW5kR2x5cGhJbmRleDogJDUyWklmJHVpbnQxNixcbiAgICBwcGVtWDogJDUyWklmJHVpbnQ4LFxuICAgIHBwZW1ZOiAkNTJaSWYkdWludDgsXG4gICAgYml0RGVwdGg6ICQ1MlpJZiR1aW50OCxcbiAgICBmbGFnczogbmV3ICQ1MlpJZiRCaXRmaWVsZCgkNTJaSWYkdWludDgsIFtcbiAgICAgICAgJ2hvcml6b250YWwnLFxuICAgICAgICAndmVydGljYWwnXG4gICAgXSlcbn0pO1xudmFyICQ5OTExYzRjNzIwMWMxM2RlJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJHVpbnQzMixcbiAgICBudW1TaXplczogJDUyWklmJHVpbnQzMixcbiAgICBzaXplczogbmV3ICQ1MlpJZiRBcnJheSgkOTkxMWM0YzcyMDFjMTNkZSR2YXIkQml0bWFwU2l6ZVRhYmxlLCAnbnVtU2l6ZXMnKVxufSk7XG5cblxuXG5sZXQgJGFiYjg0NzA1MWVmZDUxYjEkdmFyJEltYWdlVGFibGUgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgcHBlbTogJDUyWklmJHVpbnQxNixcbiAgICByZXNvbHV0aW9uOiAkNTJaSWYkdWludDE2LFxuICAgIGltYWdlT2Zmc2V0czogbmV3ICQ1MlpJZiRBcnJheShuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgJ3ZvaWQnKSwgKHQpPT50LnBhcmVudC5wYXJlbnQubWF4cC5udW1HbHlwaHMgKyAxKVxufSk7XG52YXIgLy8gVGhpcyBpcyB0aGUgQXBwbGUgc2JpeCB0YWJsZSwgdXNlZCBieSB0aGUgXCJBcHBsZSBDb2xvciBFbW9qaVwiIGZvbnQuXG4vLyBJdCBpbmNsdWRlcyBzZXZlcmFsIGltYWdlIHRhYmxlcyB3aXRoIGltYWdlcyBmb3IgZWFjaCBiaXRtYXAgZ2x5cGhcbi8vIG9mIHNldmVyYWwgZGlmZmVyZW50IHNpemVzLlxuJGFiYjg0NzA1MWVmZDUxYjEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB2ZXJzaW9uOiAkNTJaSWYkdWludDE2LFxuICAgIGZsYWdzOiBuZXcgJDUyWklmJEJpdGZpZWxkKCQ1MlpJZiR1aW50MTYsIFtcbiAgICAgICAgJ3JlbmRlck91dGxpbmVzJ1xuICAgIF0pLFxuICAgIG51bUltZ1RhYmxlczogJDUyWklmJHVpbnQzMixcbiAgICBpbWFnZVRhYmxlczogbmV3ICQ1MlpJZiRBcnJheShuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgJGFiYjg0NzA1MWVmZDUxYjEkdmFyJEltYWdlVGFibGUpLCAnbnVtSW1nVGFibGVzJylcbn0pO1xuXG5cblxubGV0ICRlYjYyOTE4OGYzZGZlZmRkJHZhciRMYXllclJlY29yZCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBnaWQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgcGFsZXR0ZUluZGV4OiAkNTJaSWYkdWludDE2IC8vIEluZGV4IHZhbHVlIHRvIHVzZSBpbiB0aGUgYXBwcm9wcmlhdGUgcGFsZXR0ZS4gVGhpcyB2YWx1ZSBtdXN0XG59KTsgLy8gYmUgbGVzcyB0aGFuIG51bVBhbGV0dGVFbnRyaWVzIGluIHRoZSBDUEFMIHRhYmxlLCBleGNlcHQgZm9yXG4vLyB0aGUgc3BlY2lhbCBjYXNlIG5vdGVkIGJlbG93LiBFYWNoIHBhbGV0dGUgZW50cnkgaXMgMTYgYml0cy5cbi8vIEEgcGFsZXR0ZSBpbmRleCBvZiAweEZGRkYgaXMgYSBzcGVjaWFsIGNhc2UgaW5kaWNhdGluZyB0aGF0XG4vLyB0aGUgdGV4dCBmb3JlZ3JvdW5kIGNvbG9yIHNob3VsZCBiZSB1c2VkLlxubGV0ICRlYjYyOTE4OGYzZGZlZmRkJHZhciRCYXNlR2x5cGhSZWNvcmQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZ2lkOiAkNTJaSWYkdWludDE2LFxuICAgIC8vIGFuZCBpcyBub3QgcmVuZGVyZWQgZm9yIGNvbG9yLlxuICAgIGZpcnN0TGF5ZXJJbmRleDogJDUyWklmJHVpbnQxNixcbiAgICAvLyBUaGVyZSB3aWxsIGJlIG51bUxheWVycyBjb25zZWN1dGl2ZSBlbnRyaWVzIGZvciB0aGlzIGJhc2UgZ2x5cGguXG4gICAgbnVtTGF5ZXJzOiAkNTJaSWYkdWludDE2XG59KTtcbnZhciAkZWI2MjkxODhmM2RmZWZkZCRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHZlcnNpb246ICQ1MlpJZiR1aW50MTYsXG4gICAgbnVtQmFzZUdseXBoUmVjb3JkczogJDUyWklmJHVpbnQxNixcbiAgICBiYXNlR2x5cGhSZWNvcmQ6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCBuZXcgJDUyWklmJEFycmF5KCRlYjYyOTE4OGYzZGZlZmRkJHZhciRCYXNlR2x5cGhSZWNvcmQsICdudW1CYXNlR2x5cGhSZWNvcmRzJykpLFxuICAgIGxheWVyUmVjb3JkczogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsIG5ldyAkNTJaSWYkQXJyYXkoJGViNjI5MTg4ZjNkZmVmZGQkdmFyJExheWVyUmVjb3JkLCAnbnVtTGF5ZXJSZWNvcmRzJyksIHtcbiAgICAgICAgbGF6eTogdHJ1ZVxuICAgIH0pLFxuICAgIG51bUxheWVyUmVjb3JkczogJDUyWklmJHVpbnQxNlxufSk7XG5cblxuXG5sZXQgJDA4NzM0YjhlN2RjNjQ1ODckdmFyJENvbG9yUmVjb3JkID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGJsdWU6ICQ1MlpJZiR1aW50OCxcbiAgICBncmVlbjogJDUyWklmJHVpbnQ4LFxuICAgIHJlZDogJDUyWklmJHVpbnQ4LFxuICAgIGFscGhhOiAkNTJaSWYkdWludDhcbn0pO1xudmFyICQwODczNGI4ZTdkYzY0NTg3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkdWludDE2LCB7XG4gICAgaGVhZGVyOiB7XG4gICAgICAgIG51bVBhbGV0dGVFbnRyaWVzOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBudW1QYWxldHRlczogJDUyWklmJHVpbnQxNixcbiAgICAgICAgbnVtQ29sb3JSZWNvcmRzOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBjb2xvclJlY29yZHM6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCBuZXcgJDUyWklmJEFycmF5KCQwODczNGI4ZTdkYzY0NTg3JHZhciRDb2xvclJlY29yZCwgJ251bUNvbG9yUmVjb3JkcycpKSxcbiAgICAgICAgY29sb3JSZWNvcmRJbmRpY2VzOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MTYsICdudW1QYWxldHRlcycpXG4gICAgfSxcbiAgICAwOiB7fSxcbiAgICAxOiB7XG4gICAgICAgIG9mZnNldFBhbGV0dGVUeXBlQXJyYXk6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MzIsICdudW1QYWxldHRlcycpKSxcbiAgICAgICAgb2Zmc2V0UGFsZXR0ZUxhYmVsQXJyYXk6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MTYsICdudW1QYWxldHRlcycpKSxcbiAgICAgICAgb2Zmc2V0UGFsZXR0ZUVudHJ5TGFiZWxBcnJheTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsIG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQxNiwgJ251bVBhbGV0dGVFbnRyaWVzJykpXG4gICAgfVxufSk7XG5cblxuXG5cblxubGV0ICQ0OTdjZWY0MTFkODg0ZTM0JHZhciRCYXNlQ29vcmQgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkdWludDE2LCB7XG4gICAgMToge1xuICAgICAgICBjb29yZGluYXRlOiAkNTJaSWYkaW50MTYgLy8gWCBvciBZIHZhbHVlLCBpbiBkZXNpZ24gdW5pdHNcbiAgICB9LFxuICAgIDI6IHtcbiAgICAgICAgY29vcmRpbmF0ZTogJDUyWklmJGludDE2LFxuICAgICAgICByZWZlcmVuY2VHbHlwaDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgYmFzZUNvb3JkUG9pbnQ6ICQ1MlpJZiR1aW50MTYgLy8gSW5kZXggb2YgY29udG91ciBwb2ludCBvbiB0aGUgcmVmZXJlbmNlR2x5cGhcbiAgICB9LFxuICAgIDM6IHtcbiAgICAgICAgY29vcmRpbmF0ZTogJDUyWklmJGludDE2LFxuICAgICAgICBkZXZpY2VUYWJsZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkODIxNWQxNGE2M2Q5ZmIxMCkpIC8vIERldmljZSB0YWJsZSBmb3IgWCBvciBZIHZhbHVlXG4gICAgfVxufSk7XG5sZXQgJDQ5N2NlZjQxMWQ4ODRlMzQkdmFyJEJhc2VWYWx1ZXMgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZGVmYXVsdEluZGV4OiAkNTJaSWYkdWludDE2LFxuICAgIGJhc2VDb29yZENvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIGJhc2VDb29yZHM6IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0OTdjZWY0MTFkODg0ZTM0JHZhciRCYXNlQ29vcmQpLCAnYmFzZUNvb3JkQ291bnQnKVxufSk7XG5sZXQgJDQ5N2NlZjQxMWQ4ODRlMzQkdmFyJEZlYXRNaW5NYXhSZWNvcmQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdGFnOiBuZXcgJDUyWklmJFN0cmluZyg0KSxcbiAgICBtaW5Db29yZDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0OTdjZWY0MTFkODg0ZTM0JHZhciRCYXNlQ29vcmQsIHtcbiAgICAgICAgdHlwZTogJ3BhcmVudCdcbiAgICB9KSxcbiAgICBtYXhDb29yZDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0OTdjZWY0MTFkODg0ZTM0JHZhciRCYXNlQ29vcmQsIHtcbiAgICAgICAgdHlwZTogJ3BhcmVudCdcbiAgICB9KSAvLyBNYXkgYmUgTlVMTFxufSk7XG5sZXQgJDQ5N2NlZjQxMWQ4ODRlMzQkdmFyJE1pbk1heCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBtaW5Db29yZDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0OTdjZWY0MTFkODg0ZTM0JHZhciRCYXNlQ29vcmQpLFxuICAgIG1heENvb3JkOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDQ5N2NlZjQxMWQ4ODRlMzQkdmFyJEJhc2VDb29yZCksXG4gICAgZmVhdE1pbk1heENvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIGZlYXRNaW5NYXhSZWNvcmRzOiBuZXcgJDUyWklmJEFycmF5KCQ0OTdjZWY0MTFkODg0ZTM0JHZhciRGZWF0TWluTWF4UmVjb3JkLCAnZmVhdE1pbk1heENvdW50JykgLy8gSW4gYWxwaGFiZXRpY2FsIG9yZGVyXG59KTtcbmxldCAkNDk3Y2VmNDExZDg4NGUzNCR2YXIkQmFzZUxhbmdTeXNSZWNvcmQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdGFnOiBuZXcgJDUyWklmJFN0cmluZyg0KSxcbiAgICBtaW5NYXg6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkNDk3Y2VmNDExZDg4NGUzNCR2YXIkTWluTWF4LCB7XG4gICAgICAgIHR5cGU6ICdwYXJlbnQnXG4gICAgfSlcbn0pO1xubGV0ICQ0OTdjZWY0MTFkODg0ZTM0JHZhciRCYXNlU2NyaXB0ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGJhc2VWYWx1ZXM6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkNDk3Y2VmNDExZDg4NGUzNCR2YXIkQmFzZVZhbHVlcyksXG4gICAgZGVmYXVsdE1pbk1heDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0OTdjZWY0MTFkODg0ZTM0JHZhciRNaW5NYXgpLFxuICAgIGJhc2VMYW5nU3lzQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgYmFzZUxhbmdTeXNSZWNvcmRzOiBuZXcgJDUyWklmJEFycmF5KCQ0OTdjZWY0MTFkODg0ZTM0JHZhciRCYXNlTGFuZ1N5c1JlY29yZCwgJ2Jhc2VMYW5nU3lzQ291bnQnKSAvLyBpbiBhbHBoYWJldGljYWwgb3JkZXIgYnkgQmFzZUxhbmdTeXNUYWdcbn0pO1xubGV0ICQ0OTdjZWY0MTFkODg0ZTM0JHZhciRCYXNlU2NyaXB0UmVjb3JkID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHRhZzogbmV3ICQ1MlpJZiRTdHJpbmcoNCksXG4gICAgc2NyaXB0OiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDQ5N2NlZjQxMWQ4ODRlMzQkdmFyJEJhc2VTY3JpcHQsIHtcbiAgICAgICAgdHlwZTogJ3BhcmVudCdcbiAgICB9KVxufSk7XG5sZXQgJDQ5N2NlZjQxMWQ4ODRlMzQkdmFyJEJhc2VTY3JpcHRMaXN0ID0gbmV3ICQ1MlpJZiRBcnJheSgkNDk3Y2VmNDExZDg4NGUzNCR2YXIkQmFzZVNjcmlwdFJlY29yZCwgJDUyWklmJHVpbnQxNik7XG4vLyBBcnJheSBvZiA0LWJ5dGUgYmFzZWxpbmUgaWRlbnRpZmljYXRpb24gdGFncy1tdXN0IGJlIGluIGFscGhhYmV0aWNhbCBvcmRlclxubGV0ICQ0OTdjZWY0MTFkODg0ZTM0JHZhciRCYXNlVGFnTGlzdCA9IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRTdHJpbmcoNCksICQ1MlpJZiR1aW50MTYpO1xubGV0ICQ0OTdjZWY0MTFkODg0ZTM0JHZhciRBeGlzID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGJhc2VUYWdMaXN0OiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDQ5N2NlZjQxMWQ4ODRlMzQkdmFyJEJhc2VUYWdMaXN0KSxcbiAgICBiYXNlU2NyaXB0TGlzdDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0OTdjZWY0MTFkODg0ZTM0JHZhciRCYXNlU2NyaXB0TGlzdClcbn0pO1xudmFyICQ0OTdjZWY0MTFkODg0ZTM0JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkdWludDMyLCB7XG4gICAgaGVhZGVyOiB7XG4gICAgICAgIGhvcml6QXhpczogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0OTdjZWY0MTFkODg0ZTM0JHZhciRBeGlzKSxcbiAgICAgICAgdmVydEF4aXM6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkNDk3Y2VmNDExZDg4NGUzNCR2YXIkQXhpcykgLy8gTWF5IGJlIE5VTExcbiAgICB9LFxuICAgIDB4MDAwMTAwMDA6IHt9LFxuICAgIDB4MDAwMTAwMDE6IHtcbiAgICAgICAgaXRlbVZhcmlhdGlvblN0b3JlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgKDAsICQxYTQ3YjBjNDVjMWMyMmZlJGV4cG9ydCRmZTFiMTIyYTI3MTBmMjQxKSlcbiAgICB9XG59KTtcblxuXG5cblxuXG5sZXQgJGNmNWYzM2M2M2VmMjA5ZTYkdmFyJEF0dGFjaFBvaW50ID0gbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCAkNTJaSWYkdWludDE2KTtcbmxldCAkY2Y1ZjMzYzYzZWYyMDllNiR2YXIkQXR0YWNoTGlzdCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBjb3ZlcmFnZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkMTc2MDhjM2Y4MWE2MTExKSksXG4gICAgZ2x5cGhDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICBhdHRhY2hQb2ludHM6IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICRjZjVmMzNjNjNlZjIwOWU2JHZhciRBdHRhY2hQb2ludCksICdnbHlwaENvdW50Jylcbn0pO1xubGV0ICRjZjVmMzNjNjNlZjIwOWU2JHZhciRDYXJldFZhbHVlID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoJDUyWklmJHVpbnQxNiwge1xuICAgIDE6IHtcbiAgICAgICAgY29vcmRpbmF0ZTogJDUyWklmJGludDE2XG4gICAgfSxcbiAgICAyOiB7XG4gICAgICAgIGNhcmV0VmFsdWVQb2ludDogJDUyWklmJHVpbnQxNlxuICAgIH0sXG4gICAgMzoge1xuICAgICAgICBjb29yZGluYXRlOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIGRldmljZVRhYmxlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ4MjE1ZDE0YTYzZDlmYjEwKSlcbiAgICB9XG59KTtcbmxldCAkY2Y1ZjMzYzYzZWYyMDllNiR2YXIkTGlnR2x5cGggPSBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkY2Y1ZjMzYzYzZWYyMDllNiR2YXIkQ2FyZXRWYWx1ZSksICQ1MlpJZiR1aW50MTYpO1xubGV0ICRjZjVmMzNjNjNlZjIwOWU2JHZhciRMaWdDYXJldExpc3QgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgY292ZXJhZ2U6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSkpLFxuICAgIGxpZ0dseXBoQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgbGlnR2x5cGhzOiBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkY2Y1ZjMzYzYzZWYyMDllNiR2YXIkTGlnR2x5cGgpLCAnbGlnR2x5cGhDb3VudCcpXG59KTtcbmxldCAkY2Y1ZjMzYzYzZWYyMDllNiR2YXIkTWFya0dseXBoU2V0c0RlZiA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBtYXJrU2V0VGFibGVGb3JtYXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgbWFya1NldENvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIGNvdmVyYWdlOiBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSkpLCAnbWFya1NldENvdW50Jylcbn0pO1xudmFyICRjZjVmMzNjNjNlZjIwOWU2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkdWludDMyLCB7XG4gICAgaGVhZGVyOiB7XG4gICAgICAgIGdseXBoQ2xhc3NEZWY6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDg0M2Q1NTFmYmJhZmVmNzEpKSxcbiAgICAgICAgYXR0YWNoTGlzdDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICRjZjVmMzNjNjNlZjIwOWU2JHZhciRBdHRhY2hMaXN0KSxcbiAgICAgICAgbGlnQ2FyZXRMaXN0OiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJGNmNWYzM2M2M2VmMjA5ZTYkdmFyJExpZ0NhcmV0TGlzdCksXG4gICAgICAgIG1hcmtBdHRhY2hDbGFzc0RlZjogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkODQzZDU1MWZiYmFmZWY3MSkpXG4gICAgfSxcbiAgICAweDAwMDEwMDAwOiB7fSxcbiAgICAweDAwMDEwMDAyOiB7XG4gICAgICAgIG1hcmtHbHlwaFNldHNEZWY6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkY2Y1ZjMzYzYzZWYyMDllNiR2YXIkTWFya0dseXBoU2V0c0RlZilcbiAgICB9LFxuICAgIDB4MDAwMTAwMDM6IHtcbiAgICAgICAgbWFya0dseXBoU2V0c0RlZjogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICRjZjVmMzNjNjNlZjIwOWU2JHZhciRNYXJrR2x5cGhTZXRzRGVmKSxcbiAgICAgICAgaXRlbVZhcmlhdGlvblN0b3JlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgKDAsICQxYTQ3YjBjNDVjMWMyMmZlJGV4cG9ydCRmZTFiMTIyYTI3MTBmMjQxKSlcbiAgICB9XG59KTtcblxuXG5cblxuXG5sZXQgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJFZhbHVlRm9ybWF0ID0gbmV3ICQ1MlpJZiRCaXRmaWVsZCgkNTJaSWYkdWludDE2LCBbXG4gICAgJ3hQbGFjZW1lbnQnLFxuICAgICd5UGxhY2VtZW50JyxcbiAgICAneEFkdmFuY2UnLFxuICAgICd5QWR2YW5jZScsXG4gICAgJ3hQbGFEZXZpY2UnLFxuICAgICd5UGxhRGV2aWNlJyxcbiAgICAneEFkdkRldmljZScsXG4gICAgJ3lBZHZEZXZpY2UnXG5dKTtcbmxldCAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkdHlwZXMgPSB7XG4gICAgeFBsYWNlbWVudDogJDUyWklmJGludDE2LFxuICAgIHlQbGFjZW1lbnQ6ICQ1MlpJZiRpbnQxNixcbiAgICB4QWR2YW5jZTogJDUyWklmJGludDE2LFxuICAgIHlBZHZhbmNlOiAkNTJaSWYkaW50MTYsXG4gICAgeFBsYURldmljZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkODIxNWQxNGE2M2Q5ZmIxMCksIHtcbiAgICAgICAgdHlwZTogJ2dsb2JhbCcsXG4gICAgICAgIHJlbGF0aXZlVG86IChjdHgpPT5jdHgucmVsXG4gICAgfSksXG4gICAgeVBsYURldmljZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkODIxNWQxNGE2M2Q5ZmIxMCksIHtcbiAgICAgICAgdHlwZTogJ2dsb2JhbCcsXG4gICAgICAgIHJlbGF0aXZlVG86IChjdHgpPT5jdHgucmVsXG4gICAgfSksXG4gICAgeEFkdkRldmljZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkODIxNWQxNGE2M2Q5ZmIxMCksIHtcbiAgICAgICAgdHlwZTogJ2dsb2JhbCcsXG4gICAgICAgIHJlbGF0aXZlVG86IChjdHgpPT5jdHgucmVsXG4gICAgfSksXG4gICAgeUFkdkRldmljZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkODIxNWQxNGE2M2Q5ZmIxMCksIHtcbiAgICAgICAgdHlwZTogJ2dsb2JhbCcsXG4gICAgICAgIHJlbGF0aXZlVG86IChjdHgpPT5jdHgucmVsXG4gICAgfSlcbn07XG5jbGFzcyAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkVmFsdWVSZWNvcmQge1xuICAgIGJ1aWxkU3RydWN0KHBhcmVudCkge1xuICAgICAgICBsZXQgc3RydWN0ID0gcGFyZW50O1xuICAgICAgICB3aGlsZSghc3RydWN0W3RoaXMua2V5XSAmJiBzdHJ1Y3QucGFyZW50KXN0cnVjdCA9IHN0cnVjdC5wYXJlbnQ7XG4gICAgICAgIGlmICghc3RydWN0W3RoaXMua2V5XSkgcmV0dXJuO1xuICAgICAgICBsZXQgZmllbGRzID0ge307XG4gICAgICAgIGZpZWxkcy5yZWwgPSAoKT0+c3RydWN0Ll9zdGFydE9mZnNldDtcbiAgICAgICAgbGV0IGZvcm1hdCA9IHN0cnVjdFt0aGlzLmtleV07XG4gICAgICAgIGZvcihsZXQga2V5IGluIGZvcm1hdClpZiAoZm9ybWF0W2tleV0pIGZpZWxkc1trZXldID0gJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJHR5cGVzW2tleV07XG4gICAgICAgIHJldHVybiBuZXcgJDUyWklmJFN0cnVjdChmaWVsZHMpO1xuICAgIH1cbiAgICBzaXplKHZhbCwgY3R4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1aWxkU3RydWN0KGN0eCkuc2l6ZSh2YWwsIGN0eCk7XG4gICAgfVxuICAgIGRlY29kZShzdHJlYW0sIHBhcmVudCkge1xuICAgICAgICBsZXQgcmVzID0gdGhpcy5idWlsZFN0cnVjdChwYXJlbnQpLmRlY29kZShzdHJlYW0sIHBhcmVudCk7XG4gICAgICAgIGRlbGV0ZSByZXMucmVsO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihrZXkgPSAndmFsdWVGb3JtYXQnKXtcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgfVxufVxubGV0ICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRQYWlyVmFsdWVSZWNvcmQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgc2Vjb25kR2x5cGg6ICQ1MlpJZiR1aW50MTYsXG4gICAgdmFsdWUxOiBuZXcgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJFZhbHVlUmVjb3JkKCd2YWx1ZUZvcm1hdDEnKSxcbiAgICB2YWx1ZTI6IG5ldyAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkVmFsdWVSZWNvcmQoJ3ZhbHVlRm9ybWF0MicpXG59KTtcbmxldCAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkUGFpclNldCA9IG5ldyAkNTJaSWYkQXJyYXkoJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJFBhaXJWYWx1ZVJlY29yZCwgJDUyWklmJHVpbnQxNik7XG5sZXQgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJENsYXNzMlJlY29yZCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB2YWx1ZTE6IG5ldyAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkVmFsdWVSZWNvcmQoJ3ZhbHVlRm9ybWF0MScpLFxuICAgIHZhbHVlMjogbmV3ICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRWYWx1ZVJlY29yZCgndmFsdWVGb3JtYXQyJylcbn0pO1xubGV0ICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRBbmNob3IgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkdWludDE2LCB7XG4gICAgMToge1xuICAgICAgICB4Q29vcmRpbmF0ZTogJDUyWklmJGludDE2LFxuICAgICAgICB5Q29vcmRpbmF0ZTogJDUyWklmJGludDE2XG4gICAgfSxcbiAgICAyOiB7XG4gICAgICAgIHhDb29yZGluYXRlOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHlDb29yZGluYXRlOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIGFuY2hvclBvaW50OiAkNTJaSWYkdWludDE2XG4gICAgfSxcbiAgICAzOiB7XG4gICAgICAgIHhDb29yZGluYXRlOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHlDb29yZGluYXRlOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHhEZXZpY2VUYWJsZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkODIxNWQxNGE2M2Q5ZmIxMCkpLFxuICAgICAgICB5RGV2aWNlVGFibGU6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDgyMTVkMTRhNjNkOWZiMTApKVxuICAgIH1cbn0pO1xubGV0ICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRFbnRyeUV4aXRSZWNvcmQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZW50cnlBbmNob3I6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkQW5jaG9yLCB7XG4gICAgICAgIHR5cGU6ICdwYXJlbnQnXG4gICAgfSksXG4gICAgZXhpdEFuY2hvcjogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRBbmNob3IsIHtcbiAgICAgICAgdHlwZTogJ3BhcmVudCdcbiAgICB9KVxufSk7XG5sZXQgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJE1hcmtSZWNvcmQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgY2xhc3M6ICQ1MlpJZiR1aW50MTYsXG4gICAgbWFya0FuY2hvcjogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRBbmNob3IsIHtcbiAgICAgICAgdHlwZTogJ3BhcmVudCdcbiAgICB9KVxufSk7XG5sZXQgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJE1hcmtBcnJheSA9IG5ldyAkNTJaSWYkQXJyYXkoJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJE1hcmtSZWNvcmQsICQ1MlpJZiR1aW50MTYpO1xubGV0ICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRCYXNlUmVjb3JkID0gbmV3ICQ1MlpJZiRBcnJheShuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJEFuY2hvciksICh0KT0+dC5wYXJlbnQuY2xhc3NDb3VudCk7XG5sZXQgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJEJhc2VBcnJheSA9IG5ldyAkNTJaSWYkQXJyYXkoJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJEJhc2VSZWNvcmQsICQ1MlpJZiR1aW50MTYpO1xubGV0ICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRDb21wb25lbnRSZWNvcmQgPSBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkQW5jaG9yKSwgKHQpPT50LnBhcmVudC5wYXJlbnQuY2xhc3NDb3VudCk7XG5sZXQgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJExpZ2F0dXJlQXR0YWNoID0gbmV3ICQ1MlpJZiRBcnJheSgkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkQ29tcG9uZW50UmVjb3JkLCAkNTJaSWYkdWludDE2KTtcbmxldCAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkTGlnYXR1cmVBcnJheSA9IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRMaWdhdHVyZUF0dGFjaCksICQ1MlpJZiR1aW50MTYpO1xubGV0ICQ0N2UwZThlZjUxNWQ5OTAzJGV4cG9ydCQ3M2E4Y2ZiMTljZDQzYTBmID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoJ2xvb2t1cFR5cGUnLCB7XG4gICAgMTogbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoJDUyWklmJHVpbnQxNiwge1xuICAgICAgICAxOiB7XG4gICAgICAgICAgICBjb3ZlcmFnZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkMTc2MDhjM2Y4MWE2MTExKSksXG4gICAgICAgICAgICB2YWx1ZUZvcm1hdDogJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJFZhbHVlRm9ybWF0LFxuICAgICAgICAgICAgdmFsdWU6IG5ldyAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkVmFsdWVSZWNvcmQoKVxuICAgICAgICB9LFxuICAgICAgICAyOiB7XG4gICAgICAgICAgICBjb3ZlcmFnZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkMTc2MDhjM2Y4MWE2MTExKSksXG4gICAgICAgICAgICB2YWx1ZUZvcm1hdDogJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJFZhbHVlRm9ybWF0LFxuICAgICAgICAgICAgdmFsdWVDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgICAgIHZhbHVlczogbmV3ICQ1MlpJZiRMYXp5QXJyYXkobmV3ICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRWYWx1ZVJlY29yZCgpLCAndmFsdWVDb3VudCcpXG4gICAgICAgIH1cbiAgICB9KSxcbiAgICAyOiBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkdWludDE2LCB7XG4gICAgICAgIDE6IHtcbiAgICAgICAgICAgIGNvdmVyYWdlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpKSxcbiAgICAgICAgICAgIHZhbHVlRm9ybWF0MTogJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJFZhbHVlRm9ybWF0LFxuICAgICAgICAgICAgdmFsdWVGb3JtYXQyOiAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkVmFsdWVGb3JtYXQsXG4gICAgICAgICAgICBwYWlyU2V0Q291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgICAgICBwYWlyU2V0czogbmV3ICQ1MlpJZiRMYXp5QXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRQYWlyU2V0KSwgJ3BhaXJTZXRDb3VudCcpXG4gICAgICAgIH0sXG4gICAgICAgIDI6IHtcbiAgICAgICAgICAgIGNvdmVyYWdlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpKSxcbiAgICAgICAgICAgIHZhbHVlRm9ybWF0MTogJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJFZhbHVlRm9ybWF0LFxuICAgICAgICAgICAgdmFsdWVGb3JtYXQyOiAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkVmFsdWVGb3JtYXQsXG4gICAgICAgICAgICBjbGFzc0RlZjE6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDg0M2Q1NTFmYmJhZmVmNzEpKSxcbiAgICAgICAgICAgIGNsYXNzRGVmMjogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkODQzZDU1MWZiYmFmZWY3MSkpLFxuICAgICAgICAgICAgY2xhc3MxQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgICAgICBjbGFzczJDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgICAgIGNsYXNzUmVjb3JkczogbmV3ICQ1MlpJZiRMYXp5QXJyYXkobmV3ICQ1MlpJZiRMYXp5QXJyYXkoJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJENsYXNzMlJlY29yZCwgJ2NsYXNzMkNvdW50JyksICdjbGFzczFDb3VudCcpXG4gICAgICAgIH1cbiAgICB9KSxcbiAgICAzOiB7XG4gICAgICAgIGZvcm1hdDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgY292ZXJhZ2U6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSkpLFxuICAgICAgICBlbnRyeUV4aXRDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgZW50cnlFeGl0UmVjb3JkczogbmV3ICQ1MlpJZiRBcnJheSgkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkRW50cnlFeGl0UmVjb3JkLCAnZW50cnlFeGl0Q291bnQnKVxuICAgIH0sXG4gICAgNDoge1xuICAgICAgICBmb3JtYXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIG1hcmtDb3ZlcmFnZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkMTc2MDhjM2Y4MWE2MTExKSksXG4gICAgICAgIGJhc2VDb3ZlcmFnZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkMTc2MDhjM2Y4MWE2MTExKSksXG4gICAgICAgIGNsYXNzQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIG1hcmtBcnJheTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRNYXJrQXJyYXkpLFxuICAgICAgICBiYXNlQXJyYXk6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkQmFzZUFycmF5KVxuICAgIH0sXG4gICAgNToge1xuICAgICAgICBmb3JtYXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIG1hcmtDb3ZlcmFnZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkMTc2MDhjM2Y4MWE2MTExKSksXG4gICAgICAgIGxpZ2F0dXJlQ292ZXJhZ2U6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSkpLFxuICAgICAgICBjbGFzc0NvdW50OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBtYXJrQXJyYXk6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkTWFya0FycmF5KSxcbiAgICAgICAgbGlnYXR1cmVBcnJheTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRMaWdhdHVyZUFycmF5KVxuICAgIH0sXG4gICAgNjoge1xuICAgICAgICBmb3JtYXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIG1hcmsxQ292ZXJhZ2U6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSkpLFxuICAgICAgICBtYXJrMkNvdmVyYWdlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpKSxcbiAgICAgICAgY2xhc3NDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgbWFyazFBcnJheTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRNYXJrQXJyYXkpLFxuICAgICAgICBtYXJrMkFycmF5OiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJEJhc2VBcnJheSlcbiAgICB9LFxuICAgIDc6ICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkODQxODU4Yjg5MmNlMWY0YyksXG4gICAgODogKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ1ZTZkMDllNjg2MTE2MmY2KSxcbiAgICA5OiB7XG4gICAgICAgIHBvc0Zvcm1hdDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgbG9va3VwVHlwZTogJDUyWklmJHVpbnQxNixcbiAgICAgICAgZXh0ZW5zaW9uOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgbnVsbClcbiAgICB9XG59KTtcbi8vIEZpeCBjaXJjdWxhciByZWZlcmVuY2VcbiQ0N2UwZThlZjUxNWQ5OTAzJGV4cG9ydCQ3M2E4Y2ZiMTljZDQzYTBmLnZlcnNpb25zWzldLmV4dGVuc2lvbi50eXBlID0gJDQ3ZTBlOGVmNTE1ZDk5MDMkZXhwb3J0JDczYThjZmIxOWNkNDNhMGY7XG52YXIgJDQ3ZTBlOGVmNTE1ZDk5MDMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KCQ1MlpJZiR1aW50MzIsIHtcbiAgICBoZWFkZXI6IHtcbiAgICAgICAgc2NyaXB0TGlzdDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkM2UxNWZjMDVjZTg2NDIyOSkpLFxuICAgICAgICBmZWF0dXJlTGlzdDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkYWExODEzMGRlZjRiNmNiNCkpLFxuICAgICAgICBsb29rdXBMaXN0OiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgbmV3ICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkZGYwMDA4YzZmZjJkYTIyYSkoJDQ3ZTBlOGVmNTE1ZDk5MDMkZXhwb3J0JDczYThjZmIxOWNkNDNhMGYpKVxuICAgIH0sXG4gICAgMHgwMDAxMDAwMDoge30sXG4gICAgMHgwMDAxMDAwMToge1xuICAgICAgICBmZWF0dXJlVmFyaWF0aW9uczogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsICgwLCAkMWE0N2IwYzQ1YzFjMjJmZSRleHBvcnQkNDQxYjcwYjc5NzFkZDQxOSkpXG4gICAgfVxufSk7XG5cblxuXG5cblxubGV0ICRkM2Y0NDIwNjRhZjY2ZTA2JHZhciRTZXF1ZW5jZSA9IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQxNiwgJDUyWklmJHVpbnQxNik7XG5sZXQgJGQzZjQ0MjA2NGFmNjZlMDYkdmFyJEFsdGVybmF0ZVNldCA9ICRkM2Y0NDIwNjRhZjY2ZTA2JHZhciRTZXF1ZW5jZTtcbmxldCAkZDNmNDQyMDY0YWY2NmUwNiR2YXIkTGlnYXR1cmUgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZ2x5cGg6ICQ1MlpJZiR1aW50MTYsXG4gICAgY29tcENvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIGNvbXBvbmVudHM6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQxNiwgKHQpPT50LmNvbXBDb3VudCAtIDEpXG59KTtcbmxldCAkZDNmNDQyMDY0YWY2NmUwNiR2YXIkTGlnYXR1cmVTZXQgPSBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkZDNmNDQyMDY0YWY2NmUwNiR2YXIkTGlnYXR1cmUpLCAkNTJaSWYkdWludDE2KTtcbmxldCAkZDNmNDQyMDY0YWY2NmUwNiR2YXIkR1NVQkxvb2t1cCA9IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KCdsb29rdXBUeXBlJywge1xuICAgIDE6IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KCQ1MlpJZiR1aW50MTYsIHtcbiAgICAgICAgMToge1xuICAgICAgICAgICAgY292ZXJhZ2U6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSkpLFxuICAgICAgICAgICAgZGVsdGFHbHlwaElEOiAkNTJaSWYkaW50MTZcbiAgICAgICAgfSxcbiAgICAgICAgMjoge1xuICAgICAgICAgICAgY292ZXJhZ2U6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSkpLFxuICAgICAgICAgICAgZ2x5cGhDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgICAgIHN1YnN0aXR1dGU6IG5ldyAkNTJaSWYkTGF6eUFycmF5KCQ1MlpJZiR1aW50MTYsICdnbHlwaENvdW50JylcbiAgICAgICAgfVxuICAgIH0pLFxuICAgIDI6IHtcbiAgICAgICAgc3Vic3RGb3JtYXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGNvdmVyYWdlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpKSxcbiAgICAgICAgY291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHNlcXVlbmNlczogbmV3ICQ1MlpJZiRMYXp5QXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICRkM2Y0NDIwNjRhZjY2ZTA2JHZhciRTZXF1ZW5jZSksICdjb3VudCcpXG4gICAgfSxcbiAgICAzOiB7XG4gICAgICAgIHN1YnN0Rm9ybWF0OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBjb3ZlcmFnZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkMTc2MDhjM2Y4MWE2MTExKSksXG4gICAgICAgIGNvdW50OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBhbHRlcm5hdGVTZXQ6IG5ldyAkNTJaSWYkTGF6eUFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkZDNmNDQyMDY0YWY2NmUwNiR2YXIkQWx0ZXJuYXRlU2V0KSwgJ2NvdW50JylcbiAgICB9LFxuICAgIDQ6IHtcbiAgICAgICAgc3Vic3RGb3JtYXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGNvdmVyYWdlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpKSxcbiAgICAgICAgY291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGxpZ2F0dXJlU2V0czogbmV3ICQ1MlpJZiRMYXp5QXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICRkM2Y0NDIwNjRhZjY2ZTA2JHZhciRMaWdhdHVyZVNldCksICdjb3VudCcpXG4gICAgfSxcbiAgICA1OiAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDg0MTg1OGI4OTJjZTFmNGMpLFxuICAgIDY6ICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkNWU2ZDA5ZTY4NjExNjJmNiksXG4gICAgNzoge1xuICAgICAgICBzdWJzdEZvcm1hdDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgbG9va3VwVHlwZTogJDUyWklmJHVpbnQxNixcbiAgICAgICAgZXh0ZW5zaW9uOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgbnVsbClcbiAgICB9LFxuICAgIDg6IHtcbiAgICAgICAgc3Vic3RGb3JtYXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGNvdmVyYWdlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpKSxcbiAgICAgICAgYmFja3RyYWNrQ292ZXJhZ2U6IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkMTc2MDhjM2Y4MWE2MTExKSksICdiYWNrdHJhY2tHbHlwaENvdW50JyksXG4gICAgICAgIGxvb2thaGVhZEdseXBoQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGxvb2thaGVhZENvdmVyYWdlOiBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSkpLCAnbG9va2FoZWFkR2x5cGhDb3VudCcpLFxuICAgICAgICBnbHlwaENvdW50OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBzdWJzdGl0dXRlczogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCAnZ2x5cGhDb3VudCcpXG4gICAgfVxufSk7XG4vLyBGaXggY2lyY3VsYXIgcmVmZXJlbmNlXG4kZDNmNDQyMDY0YWY2NmUwNiR2YXIkR1NVQkxvb2t1cC52ZXJzaW9uc1s3XS5leHRlbnNpb24udHlwZSA9ICRkM2Y0NDIwNjRhZjY2ZTA2JHZhciRHU1VCTG9va3VwO1xudmFyICRkM2Y0NDIwNjRhZjY2ZTA2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkdWludDMyLCB7XG4gICAgaGVhZGVyOiB7XG4gICAgICAgIHNjcmlwdExpc3Q6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDNlMTVmYzA1Y2U4NjQyMjkpKSxcbiAgICAgICAgZmVhdHVyZUxpc3Q6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JGFhMTgxMzBkZWY0YjZjYjQpKSxcbiAgICAgICAgbG9va3VwTGlzdDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsIG5ldyAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JGRmMDAwOGM2ZmYyZGEyMmEpKCRkM2Y0NDIwNjRhZjY2ZTA2JHZhciRHU1VCTG9va3VwKSlcbiAgICB9LFxuICAgIDB4MDAwMTAwMDA6IHt9LFxuICAgIDB4MDAwMTAwMDE6IHtcbiAgICAgICAgZmVhdHVyZVZhcmlhdGlvbnM6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCAoMCwgJDFhNDdiMGM0NWMxYzIyZmUkZXhwb3J0JDQ0MWI3MGI3OTcxZGQ0MTkpKVxuICAgIH1cbn0pO1xuXG5cblxuXG5cbmxldCAkNzFjZmIzYzQ3NjdmYmQwYyR2YXIkSnN0ZkdTVUJNb2RMaXN0ID0gbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCAkNTJaSWYkdWludDE2KTtcbmxldCAkNzFjZmIzYzQ3NjdmYmQwYyR2YXIkSnN0ZlByaW9yaXR5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHNocmlua2FnZUVuYWJsZUdTVUI6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkNzFjZmIzYzQ3NjdmYmQwYyR2YXIkSnN0ZkdTVUJNb2RMaXN0KSxcbiAgICBzaHJpbmthZ2VEaXNhYmxlR1NVQjogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3MWNmYjNjNDc2N2ZiZDBjJHZhciRKc3RmR1NVQk1vZExpc3QpLFxuICAgIHNocmlua2FnZUVuYWJsZUdQT1M6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkNzFjZmIzYzQ3NjdmYmQwYyR2YXIkSnN0ZkdTVUJNb2RMaXN0KSxcbiAgICBzaHJpbmthZ2VEaXNhYmxlR1BPUzogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3MWNmYjNjNDc2N2ZiZDBjJHZhciRKc3RmR1NVQk1vZExpc3QpLFxuICAgIHNocmlua2FnZUpzdGZNYXg6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCBuZXcgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCRkZjAwMDhjNmZmMmRhMjJhKSgoMCwgJDQ3ZTBlOGVmNTE1ZDk5MDMkZXhwb3J0JDczYThjZmIxOWNkNDNhMGYpKSksXG4gICAgZXh0ZW5zaW9uRW5hYmxlR1NVQjogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3MWNmYjNjNDc2N2ZiZDBjJHZhciRKc3RmR1NVQk1vZExpc3QpLFxuICAgIGV4dGVuc2lvbkRpc2FibGVHU1VCOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDcxY2ZiM2M0NzY3ZmJkMGMkdmFyJEpzdGZHU1VCTW9kTGlzdCksXG4gICAgZXh0ZW5zaW9uRW5hYmxlR1BPUzogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3MWNmYjNjNDc2N2ZiZDBjJHZhciRKc3RmR1NVQk1vZExpc3QpLFxuICAgIGV4dGVuc2lvbkRpc2FibGVHUE9TOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDcxY2ZiM2M0NzY3ZmJkMGMkdmFyJEpzdGZHU1VCTW9kTGlzdCksXG4gICAgZXh0ZW5zaW9uSnN0Zk1heDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsIG5ldyAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JGRmMDAwOGM2ZmYyZGEyMmEpKCgwLCAkNDdlMGU4ZWY1MTVkOTkwMyRleHBvcnQkNzNhOGNmYjE5Y2Q0M2EwZikpKVxufSk7XG5sZXQgJDcxY2ZiM2M0NzY3ZmJkMGMkdmFyJEpzdGZMYW5nU3lzID0gbmV3ICQ1MlpJZiRBcnJheShuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDcxY2ZiM2M0NzY3ZmJkMGMkdmFyJEpzdGZQcmlvcml0eSksICQ1MlpJZiR1aW50MTYpO1xubGV0ICQ3MWNmYjNjNDc2N2ZiZDBjJHZhciRKc3RmTGFuZ1N5c1JlY29yZCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB0YWc6IG5ldyAkNTJaSWYkU3RyaW5nKDQpLFxuICAgIGpzdGZMYW5nU3lzOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDcxY2ZiM2M0NzY3ZmJkMGMkdmFyJEpzdGZMYW5nU3lzKVxufSk7XG5sZXQgJDcxY2ZiM2M0NzY3ZmJkMGMkdmFyJEpzdGZTY3JpcHQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZXh0ZW5kZXJHbHlwaHM6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MTYsICQ1MlpJZiR1aW50MTYpKSxcbiAgICBkZWZhdWx0TGFuZ1N5czogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3MWNmYjNjNDc2N2ZiZDBjJHZhciRKc3RmTGFuZ1N5cyksXG4gICAgbGFuZ1N5c0NvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIGxhbmdTeXNSZWNvcmRzOiBuZXcgJDUyWklmJEFycmF5KCQ3MWNmYjNjNDc2N2ZiZDBjJHZhciRKc3RmTGFuZ1N5c1JlY29yZCwgJ2xhbmdTeXNDb3VudCcpXG59KTtcbmxldCAkNzFjZmIzYzQ3NjdmYmQwYyR2YXIkSnN0ZlNjcmlwdFJlY29yZCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB0YWc6IG5ldyAkNTJaSWYkU3RyaW5nKDQpLFxuICAgIHNjcmlwdDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3MWNmYjNjNDc2N2ZiZDBjJHZhciRKc3RmU2NyaXB0LCB7XG4gICAgICAgIHR5cGU6ICdwYXJlbnQnXG4gICAgfSlcbn0pO1xudmFyICQ3MWNmYjNjNDc2N2ZiZDBjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJHVpbnQzMixcbiAgICBzY3JpcHRDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICBzY3JpcHRMaXN0OiBuZXcgJDUyWklmJEFycmF5KCQ3MWNmYjNjNDc2N2ZiZDBjJHZhciRKc3RmU2NyaXB0UmVjb3JkLCAnc2NyaXB0Q291bnQnKVxufSk7XG5cblxuXG5cbi8vIFRPRE86IGFkZCB0aGlzIHRvIHJlc3RydWN0dXJlXG5jbGFzcyAkZDA1OWE2YmQyZDNiNWI2MyR2YXIkVmFyaWFibGVTaXplTnVtYmVyIHtcbiAgICBkZWNvZGUoc3RyZWFtLCBwYXJlbnQpIHtcbiAgICAgICAgc3dpdGNoKHRoaXMuc2l6ZSgwLCBwYXJlbnQpKXtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyZWFtLnJlYWRVSW50OCgpO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJldHVybiBzdHJlYW0ucmVhZFVJbnQxNkJFKCk7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cmVhbS5yZWFkVUludDI0QkUoKTtcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyZWFtLnJlYWRVSW50MzJCRSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNpemUodmFsLCBwYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuICgwLCAkNTJaSWYkcmVzb2x2ZUxlbmd0aCkodGhpcy5fc2l6ZSwgbnVsbCwgcGFyZW50KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3Ioc2l6ZSl7XG4gICAgICAgIHRoaXMuX3NpemUgPSBzaXplO1xuICAgIH1cbn1cbmxldCAkZDA1OWE2YmQyZDNiNWI2MyR2YXIkTWFwRGF0YUVudHJ5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGVudHJ5OiBuZXcgJGQwNTlhNmJkMmQzYjViNjMkdmFyJFZhcmlhYmxlU2l6ZU51bWJlcigodCk9PigodC5wYXJlbnQuZW50cnlGb3JtYXQgJiAweDAwMzApID4+IDQpICsgMSksXG4gICAgb3V0ZXJJbmRleDogKHQpPT50LmVudHJ5ID4+ICh0LnBhcmVudC5lbnRyeUZvcm1hdCAmIDB4MDAwRikgKyAxLFxuICAgIGlubmVySW5kZXg6ICh0KT0+dC5lbnRyeSAmICgxIDw8ICh0LnBhcmVudC5lbnRyeUZvcm1hdCAmIDB4MDAwRikgKyAxKSAtIDFcbn0pO1xubGV0ICRkMDU5YTZiZDJkM2I1YjYzJHZhciREZWx0YVNldEluZGV4TWFwID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGVudHJ5Rm9ybWF0OiAkNTJaSWYkdWludDE2LFxuICAgIG1hcENvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIG1hcERhdGE6IG5ldyAkNTJaSWYkQXJyYXkoJGQwNTlhNmJkMmQzYjViNjMkdmFyJE1hcERhdGFFbnRyeSwgJ21hcENvdW50Jylcbn0pO1xudmFyICRkMDU5YTZiZDJkM2I1YjYzJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgbWFqb3JWZXJzaW9uOiAkNTJaSWYkdWludDE2LFxuICAgIG1pbm9yVmVyc2lvbjogJDUyWklmJHVpbnQxNixcbiAgICBpdGVtVmFyaWF0aW9uU3RvcmU6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCAoMCwgJDFhNDdiMGM0NWMxYzIyZmUkZXhwb3J0JGZlMWIxMjJhMjcxMGYyNDEpKSxcbiAgICBhZHZhbmNlV2lkdGhNYXBwaW5nOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgJGQwNTlhNmJkMmQzYjViNjMkdmFyJERlbHRhU2V0SW5kZXhNYXApLFxuICAgIExTQk1hcHBpbmc6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCAkZDA1OWE2YmQyZDNiNWI2MyR2YXIkRGVsdGFTZXRJbmRleE1hcCksXG4gICAgUlNCTWFwcGluZzogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsICRkMDU5YTZiZDJkM2I1YjYzJHZhciREZWx0YVNldEluZGV4TWFwKVxufSk7XG5cblxuXG5sZXQgJGRjZWVjYTNlMTk3N2NlMzAkdmFyJFNpZ25hdHVyZSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBmb3JtYXQ6ICQ1MlpJZiR1aW50MzIsXG4gICAgbGVuZ3RoOiAkNTJaSWYkdWludDMyLFxuICAgIG9mZnNldDogJDUyWklmJHVpbnQzMlxufSk7XG5sZXQgJGRjZWVjYTNlMTk3N2NlMzAkdmFyJFNpZ25hdHVyZUJsb2NrID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHJlc2VydmVkOiBuZXcgJDUyWklmJFJlc2VydmVkKCQ1MlpJZiR1aW50MTYsIDIpLFxuICAgIGNiU2lnbmF0dXJlOiAkNTJaSWYkdWludDMyLFxuICAgIHNpZ25hdHVyZTogbmV3ICQ1MlpJZiRCdWZmZXIoJ2NiU2lnbmF0dXJlJylcbn0pO1xudmFyICRkY2VlY2EzZTE5NzdjZTMwJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdWxWZXJzaW9uOiAkNTJaSWYkdWludDMyLFxuICAgIHVzTnVtU2lnczogJDUyWklmJHVpbnQxNixcbiAgICB1c0ZsYWc6ICQ1MlpJZiR1aW50MTYsXG4gICAgc2lnbmF0dXJlczogbmV3ICQ1MlpJZiRBcnJheSgkZGNlZWNhM2UxOTc3Y2UzMCR2YXIkU2lnbmF0dXJlLCAndXNOdW1TaWdzJyksXG4gICAgc2lnbmF0dXJlQmxvY2tzOiBuZXcgJDUyWklmJEFycmF5KCRkY2VlY2EzZTE5NzdjZTMwJHZhciRTaWduYXR1cmVCbG9jaywgJ3VzTnVtU2lncycpXG59KTtcblxuXG5cbmxldCAkOGFjZDc0MGE5NDM1YWFkMCR2YXIkR2FzcFJhbmdlID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHJhbmdlTWF4UFBFTTogJDUyWklmJHVpbnQxNixcbiAgICByYW5nZUdhc3BCZWhhdmlvcjogbmV3ICQ1MlpJZiRCaXRmaWVsZCgkNTJaSWYkdWludDE2LCBbXG4gICAgICAgICdncmF5c2NhbGUnLFxuICAgICAgICAnZ3JpZGZpdCcsXG4gICAgICAgICdzeW1tZXRyaWNTbW9vdGhpbmcnLFxuICAgICAgICAnc3ltbWV0cmljR3JpZGZpdCcgLy8gb25seSBpbiB2ZXJzaW9uIDEsIGZvciBDbGVhclR5cGVcbiAgICBdKVxufSk7XG52YXIgJDhhY2Q3NDBhOTQzNWFhZDAkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB2ZXJzaW9uOiAkNTJaSWYkdWludDE2LFxuICAgIG51bVJhbmdlczogJDUyWklmJHVpbnQxNixcbiAgICBnYXNwUmFuZ2VzOiBuZXcgJDUyWklmJEFycmF5KCQ4YWNkNzQwYTk0MzVhYWQwJHZhciRHYXNwUmFuZ2UsICdudW1SYW5nZXMnKSAvLyBTb3J0ZWQgYnkgcHBlbVxufSk7XG5cblxuXG5sZXQgJGI1ZjM4MDI0M2MzNGQ2YTAkdmFyJERldmljZVJlY29yZCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBwaXhlbFNpemU6ICQ1MlpJZiR1aW50OCxcbiAgICBtYXhpbXVtV2lkdGg6ICQ1MlpJZiR1aW50OCxcbiAgICB3aWR0aHM6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQ4LCAodCk9PnQucGFyZW50LnBhcmVudC5tYXhwLm51bUdseXBocylcbn0pO1xudmFyIC8vIFRoZSBIb3Jpem9udGFsIERldmljZSBNZXRyaWNzIHRhYmxlIHN0b3JlcyBpbnRlZ2VyIGFkdmFuY2Ugd2lkdGhzIHNjYWxlZCB0byBwYXJ0aWN1bGFyIHBpeGVsIHNpemVzXG4kYjVmMzgwMjQzYzM0ZDZhMCRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHZlcnNpb246ICQ1MlpJZiR1aW50MTYsXG4gICAgbnVtUmVjb3JkczogJDUyWklmJGludDE2LFxuICAgIHNpemVEZXZpY2VSZWNvcmQ6ICQ1MlpJZiRpbnQzMixcbiAgICByZWNvcmRzOiBuZXcgJDUyWklmJEFycmF5KCRiNWYzODAyNDNjMzRkNmEwJHZhciREZXZpY2VSZWNvcmQsICdudW1SZWNvcmRzJylcbn0pO1xuXG5cblxubGV0ICRjYTJkZjEyNTY5NjZlMzEzJHZhciRLZXJuUGFpciA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBsZWZ0OiAkNTJaSWYkdWludDE2LFxuICAgIHJpZ2h0OiAkNTJaSWYkdWludDE2LFxuICAgIHZhbHVlOiAkNTJaSWYkaW50MTZcbn0pO1xubGV0ICRjYTJkZjEyNTY5NjZlMzEzJHZhciRDbGFzc1RhYmxlID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGZpcnN0R2x5cGg6ICQ1MlpJZiR1aW50MTYsXG4gICAgbkdseXBoczogJDUyWklmJHVpbnQxNixcbiAgICBvZmZzZXRzOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MTYsICduR2x5cGhzJyksXG4gICAgbWF4OiAodCk9PnQub2Zmc2V0cy5sZW5ndGggJiYgTWF0aC5tYXguYXBwbHkoTWF0aCwgdC5vZmZzZXRzKVxufSk7XG5sZXQgJGNhMmRmMTI1Njk2NmUzMTMkdmFyJEtlcm4yQXJyYXkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgb2ZmOiAodCk9PnQuX3N0YXJ0T2Zmc2V0IC0gdC5wYXJlbnQucGFyZW50Ll9zdGFydE9mZnNldCxcbiAgICBsZW46ICh0KT0+KCh0LnBhcmVudC5sZWZ0VGFibGUubWF4IC0gdC5vZmYpIC8gdC5wYXJlbnQucm93V2lkdGggKyAxKSAqICh0LnBhcmVudC5yb3dXaWR0aCAvIDIpLFxuICAgIHZhbHVlczogbmV3ICQ1MlpJZiRMYXp5QXJyYXkoJDUyWklmJGludDE2LCAnbGVuJylcbn0pO1xubGV0ICRjYTJkZjEyNTY5NjZlMzEzJHZhciRLZXJuU3VidGFibGUgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgnZm9ybWF0Jywge1xuICAgIDA6IHtcbiAgICAgICAgblBhaXJzOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBzZWFyY2hSYW5nZTogJDUyWklmJHVpbnQxNixcbiAgICAgICAgZW50cnlTZWxlY3RvcjogJDUyWklmJHVpbnQxNixcbiAgICAgICAgcmFuZ2VTaGlmdDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgcGFpcnM6IG5ldyAkNTJaSWYkQXJyYXkoJGNhMmRmMTI1Njk2NmUzMTMkdmFyJEtlcm5QYWlyLCAnblBhaXJzJylcbiAgICB9LFxuICAgIDI6IHtcbiAgICAgICAgcm93V2lkdGg6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGxlZnRUYWJsZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICRjYTJkZjEyNTY5NjZlMzEzJHZhciRDbGFzc1RhYmxlLCB7XG4gICAgICAgICAgICB0eXBlOiAncGFyZW50J1xuICAgICAgICB9KSxcbiAgICAgICAgcmlnaHRUYWJsZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICRjYTJkZjEyNTY5NjZlMzEzJHZhciRDbGFzc1RhYmxlLCB7XG4gICAgICAgICAgICB0eXBlOiAncGFyZW50J1xuICAgICAgICB9KSxcbiAgICAgICAgYXJyYXk6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkY2EyZGYxMjU2OTY2ZTMxMyR2YXIkS2VybjJBcnJheSwge1xuICAgICAgICAgICAgdHlwZTogJ3BhcmVudCdcbiAgICAgICAgfSlcbiAgICB9LFxuICAgIDM6IHtcbiAgICAgICAgZ2x5cGhDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAga2VyblZhbHVlQ291bnQ6ICQ1MlpJZiR1aW50OCxcbiAgICAgICAgbGVmdENsYXNzQ291bnQ6ICQ1MlpJZiR1aW50OCxcbiAgICAgICAgcmlnaHRDbGFzc0NvdW50OiAkNTJaSWYkdWludDgsXG4gICAgICAgIGZsYWdzOiAkNTJaSWYkdWludDgsXG4gICAgICAgIGtlcm5WYWx1ZTogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkaW50MTYsICdrZXJuVmFsdWVDb3VudCcpLFxuICAgICAgICBsZWZ0Q2xhc3M6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQ4LCAnZ2x5cGhDb3VudCcpLFxuICAgICAgICByaWdodENsYXNzOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50OCwgJ2dseXBoQ291bnQnKSxcbiAgICAgICAga2VybkluZGV4OiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50OCwgKHQpPT50LmxlZnRDbGFzc0NvdW50ICogdC5yaWdodENsYXNzQ291bnQpXG4gICAgfVxufSk7XG5sZXQgJGNhMmRmMTI1Njk2NmUzMTMkdmFyJEtlcm5UYWJsZSA9IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KCd2ZXJzaW9uJywge1xuICAgIDA6IHtcbiAgICAgICAgc3ViVmVyc2lvbjogJDUyWklmJHVpbnQxNixcbiAgICAgICAgbGVuZ3RoOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBmb3JtYXQ6ICQ1MlpJZiR1aW50OCxcbiAgICAgICAgY292ZXJhZ2U6IG5ldyAkNTJaSWYkQml0ZmllbGQoJDUyWklmJHVpbnQ4LCBbXG4gICAgICAgICAgICAnaG9yaXpvbnRhbCcsXG4gICAgICAgICAgICAnbWluaW11bScsXG4gICAgICAgICAgICAnY3Jvc3NTdHJlYW0nLFxuICAgICAgICAgICAgJ292ZXJyaWRlJyAvLyBJZiBzZXQgdG8gMSB0aGUgdmFsdWUgaW4gdGhpcyB0YWJsZSByZXBsYWNlcyB0aGUgYWNjdW11bGF0ZWQgdmFsdWVcbiAgICAgICAgXSksXG4gICAgICAgIHN1YnRhYmxlOiAkY2EyZGYxMjU2OTY2ZTMxMyR2YXIkS2VyblN1YnRhYmxlLFxuICAgICAgICBwYWRkaW5nOiBuZXcgJDUyWklmJFJlc2VydmVkKCQ1MlpJZiR1aW50OCwgKHQpPT50Lmxlbmd0aCAtIHQuX2N1cnJlbnRPZmZzZXQpXG4gICAgfSxcbiAgICAxOiB7XG4gICAgICAgIGxlbmd0aDogJDUyWklmJHVpbnQzMixcbiAgICAgICAgY292ZXJhZ2U6IG5ldyAkNTJaSWYkQml0ZmllbGQoJDUyWklmJHVpbnQ4LCBbXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICd2YXJpYXRpb24nLFxuICAgICAgICAgICAgJ2Nyb3NzU3RyZWFtJyxcbiAgICAgICAgICAgICd2ZXJ0aWNhbCcgLy8gU2V0IGlmIHRhYmxlIGhhcyB2ZXJ0aWNhbCBrZXJuaW5nIHZhbHVlc1xuICAgICAgICBdKSxcbiAgICAgICAgZm9ybWF0OiAkNTJaSWYkdWludDgsXG4gICAgICAgIHR1cGxlSW5kZXg6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHN1YnRhYmxlOiAkY2EyZGYxMjU2OTY2ZTMxMyR2YXIkS2VyblN1YnRhYmxlLFxuICAgICAgICBwYWRkaW5nOiBuZXcgJDUyWklmJFJlc2VydmVkKCQ1MlpJZiR1aW50OCwgKHQpPT50Lmxlbmd0aCAtIHQuX2N1cnJlbnRPZmZzZXQpXG4gICAgfVxufSk7XG52YXIgJGNhMmRmMTI1Njk2NmUzMTMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KCQ1MlpJZiR1aW50MTYsIHtcbiAgICAwOiB7XG4gICAgICAgIG5UYWJsZXM6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHRhYmxlczogbmV3ICQ1MlpJZiRBcnJheSgkY2EyZGYxMjU2OTY2ZTMxMyR2YXIkS2VyblRhYmxlLCAnblRhYmxlcycpXG4gICAgfSxcbiAgICAxOiB7XG4gICAgICAgIHJlc2VydmVkOiBuZXcgJDUyWklmJFJlc2VydmVkKCQ1MlpJZiR1aW50MTYpLFxuICAgICAgICBuVGFibGVzOiAkNTJaSWYkdWludDMyLFxuICAgICAgICB0YWJsZXM6IG5ldyAkNTJaSWYkQXJyYXkoJGNhMmRmMTI1Njk2NmUzMTMkdmFyJEtlcm5UYWJsZSwgJ25UYWJsZXMnKVxuICAgIH1cbn0pO1xuXG5cblxudmFyIC8vIExpbmVhciBUaHJlc2hvbGQgdGFibGVcbi8vIFJlY29yZHMgdGhlIHBwZW0gZm9yIGVhY2ggZ2x5cGggYXQgd2hpY2ggdGhlIHNjYWxpbmcgYmVjb21lcyBsaW5lYXIgYWdhaW4sXG4vLyBkZXNwaXRlIGluc3RydWN0aW9ucyBlZmZlY3RpbmcgdGhlIGFkdmFuY2Ugd2lkdGhcbiQ3YTlmOTJiMGM0NmViZTMzJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJHVpbnQxNixcbiAgICBudW1HbHlwaHM6ICQ1MlpJZiR1aW50MTYsXG4gICAgeVBlbHM6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQ4LCAnbnVtR2x5cGhzJylcbn0pO1xuXG5cblxudmFyIC8vIFBDTCA1IFRhYmxlXG4vLyBOT1RFOiBUaGUgUENMVCB0YWJsZSBpcyBzdHJvbmdseSBkaXNjb3VyYWdlZCBmb3IgT3BlblR5cGUgZm9udHMgd2l0aCBUcnVlVHlwZSBvdXRsaW5lc1xuJDJiMmNjYzQxOWQxNTI2MzEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB2ZXJzaW9uOiAkNTJaSWYkdWludDE2LFxuICAgIGZvbnROdW1iZXI6ICQ1MlpJZiR1aW50MzIsXG4gICAgcGl0Y2g6ICQ1MlpJZiR1aW50MTYsXG4gICAgeEhlaWdodDogJDUyWklmJHVpbnQxNixcbiAgICBzdHlsZTogJDUyWklmJHVpbnQxNixcbiAgICB0eXBlRmFtaWx5OiAkNTJaSWYkdWludDE2LFxuICAgIGNhcEhlaWdodDogJDUyWklmJHVpbnQxNixcbiAgICBzeW1ib2xTZXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgdHlwZWZhY2U6IG5ldyAkNTJaSWYkU3RyaW5nKDE2KSxcbiAgICBjaGFyYWN0ZXJDb21wbGVtZW50OiBuZXcgJDUyWklmJFN0cmluZyg4KSxcbiAgICBmaWxlTmFtZTogbmV3ICQ1MlpJZiRTdHJpbmcoNiksXG4gICAgc3Ryb2tlV2VpZ2h0OiBuZXcgJDUyWklmJFN0cmluZygxKSxcbiAgICB3aWR0aFR5cGU6IG5ldyAkNTJaSWYkU3RyaW5nKDEpLFxuICAgIHNlcmlmU3R5bGU6ICQ1MlpJZiR1aW50OCxcbiAgICByZXNlcnZlZDogbmV3ICQ1MlpJZiRSZXNlcnZlZCgkNTJaSWYkdWludDgpXG59KTtcblxuXG5cbi8vIFZETVggdGFibGVzIGNvbnRhaW4gYXNjZW5kZXIvZGVzY2VuZGVyIG92ZXJyaWRlcyBmb3IgY2VydGFpbiAodXN1YWxseSBzbWFsbClcbi8vIHNpemVzLiBUaGlzIGlzIG5lZWRlZCBpbiBvcmRlciB0byBtYXRjaCBmb250IG1ldHJpY3Mgb24gV2luZG93cy5cbmxldCAkY2E1YjQwYjliY2RhOWM5YiR2YXIkUmF0aW8gPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgYkNoYXJTZXQ6ICQ1MlpJZiR1aW50OCxcbiAgICB4UmF0aW86ICQ1MlpJZiR1aW50OCxcbiAgICB5U3RhcnRSYXRpbzogJDUyWklmJHVpbnQ4LFxuICAgIHlFbmRSYXRpbzogJDUyWklmJHVpbnQ4IC8vIEVuZGluZyB5LVJhdGlvIHZhbHVlXG59KTtcbmxldCAkY2E1YjQwYjliY2RhOWM5YiR2YXIkdlRhYmxlID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHlQZWxIZWlnaHQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgeU1heDogJDUyWklmJGludDE2LFxuICAgIHlNaW46ICQ1MlpJZiRpbnQxNiAvLyBNaW5pbXVtIHZhbHVlIChpbiBwZWxzKSBmb3IgdGhpcyB5UGVsSGVpZ2h0XG59KTtcbmxldCAkY2E1YjQwYjliY2RhOWM5YiR2YXIkVmRteEdyb3VwID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHJlY3M6ICQ1MlpJZiR1aW50MTYsXG4gICAgc3RhcnRzejogJDUyWklmJHVpbnQ4LFxuICAgIGVuZHN6OiAkNTJaSWYkdWludDgsXG4gICAgZW50cmllczogbmV3ICQ1MlpJZiRBcnJheSgkY2E1YjQwYjliY2RhOWM5YiR2YXIkdlRhYmxlLCAncmVjcycpIC8vIFRoZSBWRE1YIHJlY29yZHNcbn0pO1xudmFyICRjYTViNDBiOWJjZGE5YzliJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJHVpbnQxNixcbiAgICBudW1SZWNzOiAkNTJaSWYkdWludDE2LFxuICAgIG51bVJhdGlvczogJDUyWklmJHVpbnQxNixcbiAgICByYXRpb1JhbmdlczogbmV3ICQ1MlpJZiRBcnJheSgkY2E1YjQwYjliY2RhOWM5YiR2YXIkUmF0aW8sICdudW1SYXRpb3MnKSxcbiAgICBvZmZzZXRzOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MTYsICdudW1SYXRpb3MnKSxcbiAgICBncm91cHM6IG5ldyAkNTJaSWYkQXJyYXkoJGNhNWI0MGI5YmNkYTljOWIkdmFyJFZkbXhHcm91cCwgJ251bVJlY3MnKSAvLyBUaGUgYWN0dWFsIFZETVggZ3JvdXBpbmdzXG59KTtcblxuXG5cbnZhciAvLyBWZXJ0aWNhbCBIZWFkZXIgVGFibGVcbiQ2OTUzMGEzYzQwNzU1YWYwJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJHVpbnQxNixcbiAgICBhc2NlbnQ6ICQ1MlpJZiRpbnQxNixcbiAgICBkZXNjZW50OiAkNTJaSWYkaW50MTYsXG4gICAgbGluZUdhcDogJDUyWklmJGludDE2LFxuICAgIGFkdmFuY2VIZWlnaHRNYXg6ICQ1MlpJZiRpbnQxNixcbiAgICBtaW5Ub3BTaWRlQmVhcmluZzogJDUyWklmJGludDE2LFxuICAgIG1pbkJvdHRvbVNpZGVCZWFyaW5nOiAkNTJaSWYkaW50MTYsXG4gICAgeU1heEV4dGVudDogJDUyWklmJGludDE2LFxuICAgIGNhcmV0U2xvcGVSaXNlOiAkNTJaSWYkaW50MTYsXG4gICAgY2FyZXRTbG9wZVJ1bjogJDUyWklmJGludDE2LFxuICAgIGNhcmV0T2Zmc2V0OiAkNTJaSWYkaW50MTYsXG4gICAgcmVzZXJ2ZWQ6IG5ldyAkNTJaSWYkUmVzZXJ2ZWQoJDUyWklmJGludDE2LCA0KSxcbiAgICBtZXRyaWNEYXRhRm9ybWF0OiAkNTJaSWYkaW50MTYsXG4gICAgbnVtYmVyT2ZNZXRyaWNzOiAkNTJaSWYkdWludDE2IC8vIE51bWJlciBvZiBhZHZhbmNlIGhlaWdodHMgaW4gdGhlIFZlcnRpY2FsIE1ldHJpY3MgdGFibGVcbn0pO1xuXG5cblxubGV0ICQzNDQwNzNkZDI3MGYwZTYyJHZhciRWbXR4RW50cnkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgYWR2YW5jZTogJDUyWklmJHVpbnQxNixcbiAgICBiZWFyaW5nOiAkNTJaSWYkaW50MTYgLy8gVGhlIHRvcCBzaWRlYmVhcmluZyBvZiB0aGUgZ2x5cGhcbn0pO1xudmFyIC8vIFZlcnRpY2FsIE1ldHJpY3MgVGFibGVcbiQzNDQwNzNkZDI3MGYwZTYyJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgbWV0cmljczogbmV3ICQ1MlpJZiRMYXp5QXJyYXkoJDM0NDA3M2RkMjcwZjBlNjIkdmFyJFZtdHhFbnRyeSwgKHQpPT50LnBhcmVudC52aGVhLm51bWJlck9mTWV0cmljcyksXG4gICAgYmVhcmluZ3M6IG5ldyAkNTJaSWYkTGF6eUFycmF5KCQ1MlpJZiRpbnQxNiwgKHQpPT50LnBhcmVudC5tYXhwLm51bUdseXBocyAtIHQucGFyZW50LnZoZWEubnVtYmVyT2ZNZXRyaWNzKVxufSk7XG5cblxuXG5sZXQgJDM3OTNiNzgxOTE4Y2ZjZWQkdmFyJHNob3J0RnJhYyA9IG5ldyAkNTJaSWYkRml4ZWQoMTYsICdCRScsIDE0KTtcbmxldCAkMzc5M2I3ODE5MThjZmNlZCR2YXIkQ29ycmVzcG9uZGVuY2UgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZnJvbUNvb3JkOiAkMzc5M2I3ODE5MThjZmNlZCR2YXIkc2hvcnRGcmFjLFxuICAgIHRvQ29vcmQ6ICQzNzkzYjc4MTkxOGNmY2VkJHZhciRzaG9ydEZyYWNcbn0pO1xubGV0ICQzNzkzYjc4MTkxOGNmY2VkJHZhciRTZWdtZW50ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHBhaXJDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICBjb3JyZXNwb25kZW5jZTogbmV3ICQ1MlpJZiRBcnJheSgkMzc5M2I3ODE5MThjZmNlZCR2YXIkQ29ycmVzcG9uZGVuY2UsICdwYWlyQ291bnQnKVxufSk7XG52YXIgJDM3OTNiNzgxOTE4Y2ZjZWQkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB2ZXJzaW9uOiAkNTJaSWYkZml4ZWQzMixcbiAgICBheGlzQ291bnQ6ICQ1MlpJZiR1aW50MzIsXG4gICAgc2VnbWVudDogbmV3ICQ1MlpJZiRBcnJheSgkMzc5M2I3ODE5MThjZmNlZCR2YXIkU2VnbWVudCwgJ2F4aXNDb3VudCcpXG59KTtcblxuXG5cblxuY2xhc3MgJDZjYjdkZDVmNDdkODI1ODAkdmFyJFVuYm91bmRlZEFycmF5QWNjZXNzb3Ige1xuICAgIGdldEl0ZW0oaW5kZXgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2l0ZW1zW2luZGV4XSA9PSBudWxsKSB7XG4gICAgICAgICAgICBsZXQgcG9zID0gdGhpcy5zdHJlYW0ucG9zO1xuICAgICAgICAgICAgdGhpcy5zdHJlYW0ucG9zID0gdGhpcy5iYXNlICsgdGhpcy50eXBlLnNpemUobnVsbCwgdGhpcy5wYXJlbnQpICogaW5kZXg7XG4gICAgICAgICAgICB0aGlzLl9pdGVtc1tpbmRleF0gPSB0aGlzLnR5cGUuZGVjb2RlKHRoaXMuc3RyZWFtLCB0aGlzLnBhcmVudCk7XG4gICAgICAgICAgICB0aGlzLnN0cmVhbS5wb3MgPSBwb3M7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zW2luZGV4XTtcbiAgICB9XG4gICAgaW5zcGVjdCgpIHtcbiAgICAgICAgcmV0dXJuIGBbVW5ib3VuZGVkQXJyYXkgJHt0aGlzLnR5cGUuY29uc3RydWN0b3IubmFtZX1dYDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IodHlwZSwgc3RyZWFtLCBwYXJlbnQpe1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMuYmFzZSA9IHRoaXMuc3RyZWFtLnBvcztcbiAgICAgICAgdGhpcy5faXRlbXMgPSBbXTtcbiAgICB9XG59XG5jbGFzcyAkNmNiN2RkNWY0N2Q4MjU4MCRleHBvcnQkYzVhZjFlZWJjODgyZTM5YSBleHRlbmRzICQ1MlpJZiRBcnJheSB7XG4gICAgZGVjb2RlKHN0cmVhbSwgcGFyZW50KSB7XG4gICAgICAgIHJldHVybiBuZXcgJDZjYjdkZDVmNDdkODI1ODAkdmFyJFVuYm91bmRlZEFycmF5QWNjZXNzb3IodGhpcy50eXBlLCBzdHJlYW0sIHBhcmVudCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHR5cGUpe1xuICAgICAgICBzdXBlcih0eXBlLCAwKTtcbiAgICB9XG59XG5sZXQgJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JDgzNTFmOGMyYWUyZjEwM2MgPSBmdW5jdGlvbihWYWx1ZVR5cGUgPSAkNTJaSWYkdWludDE2KSB7XG4gICAgLy8gSGVscGVyIGNsYXNzIHRoYXQgbWFrZXMgaW50ZXJuYWwgc3RydWN0dXJlcyBpbnZpc2libGUgdG8gcG9pbnRlcnNcbiAgICBjbGFzcyBTaGFkb3cge1xuICAgICAgICBkZWNvZGUoc3RyZWFtLCBjdHgpIHtcbiAgICAgICAgICAgIGN0eCA9IGN0eC5wYXJlbnQucGFyZW50O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHlwZS5kZWNvZGUoc3RyZWFtLCBjdHgpO1xuICAgICAgICB9XG4gICAgICAgIHNpemUodmFsLCBjdHgpIHtcbiAgICAgICAgICAgIGN0eCA9IGN0eC5wYXJlbnQucGFyZW50O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHlwZS5zaXplKHZhbCwgY3R4KTtcbiAgICAgICAgfVxuICAgICAgICBlbmNvZGUoc3RyZWFtLCB2YWwsIGN0eCkge1xuICAgICAgICAgICAgY3R4ID0gY3R4LnBhcmVudC5wYXJlbnQ7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50eXBlLmVuY29kZShzdHJlYW0sIHZhbCwgY3R4KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdHJ1Y3Rvcih0eXBlKXtcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgVmFsdWVUeXBlID0gbmV3IFNoYWRvdyhWYWx1ZVR5cGUpO1xuICAgIGxldCBCaW5hcnlTZWFyY2hIZWFkZXIgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgICAgIHVuaXRTaXplOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBuVW5pdHM6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHNlYXJjaFJhbmdlOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBlbnRyeVNlbGVjdG9yOiAkNTJaSWYkdWludDE2LFxuICAgICAgICByYW5nZVNoaWZ0OiAkNTJaSWYkdWludDE2XG4gICAgfSk7XG4gICAgbGV0IExvb2t1cFNlZ21lbnRTaW5nbGUgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgICAgIGxhc3RHbHlwaDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgZmlyc3RHbHlwaDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgdmFsdWU6IFZhbHVlVHlwZVxuICAgIH0pO1xuICAgIGxldCBMb29rdXBTZWdtZW50QXJyYXkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgICAgIGxhc3RHbHlwaDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgZmlyc3RHbHlwaDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgdmFsdWVzOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgbmV3ICQ1MlpJZiRBcnJheShWYWx1ZVR5cGUsICh0KT0+dC5sYXN0R2x5cGggLSB0LmZpcnN0R2x5cGggKyAxKSwge1xuICAgICAgICAgICAgdHlwZTogJ3BhcmVudCdcbiAgICAgICAgfSlcbiAgICB9KTtcbiAgICBsZXQgTG9va3VwU2luZ2xlID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgICAgICBnbHlwaDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgdmFsdWU6IFZhbHVlVHlwZVxuICAgIH0pO1xuICAgIHJldHVybiBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkdWludDE2LCB7XG4gICAgICAgIDA6IHtcbiAgICAgICAgICAgIHZhbHVlczogbmV3ICQ2Y2I3ZGQ1ZjQ3ZDgyNTgwJGV4cG9ydCRjNWFmMWVlYmM4ODJlMzlhKFZhbHVlVHlwZSkgLy8gbGVuZ3RoID09IG51bWJlciBvZiBnbHlwaHMgbWF5YmU/XG4gICAgICAgIH0sXG4gICAgICAgIDI6IHtcbiAgICAgICAgICAgIGJpbmFyeVNlYXJjaEhlYWRlcjogQmluYXJ5U2VhcmNoSGVhZGVyLFxuICAgICAgICAgICAgc2VnbWVudHM6IG5ldyAkNTJaSWYkQXJyYXkoTG9va3VwU2VnbWVudFNpbmdsZSwgKHQpPT50LmJpbmFyeVNlYXJjaEhlYWRlci5uVW5pdHMpXG4gICAgICAgIH0sXG4gICAgICAgIDQ6IHtcbiAgICAgICAgICAgIGJpbmFyeVNlYXJjaEhlYWRlcjogQmluYXJ5U2VhcmNoSGVhZGVyLFxuICAgICAgICAgICAgc2VnbWVudHM6IG5ldyAkNTJaSWYkQXJyYXkoTG9va3VwU2VnbWVudEFycmF5LCAodCk9PnQuYmluYXJ5U2VhcmNoSGVhZGVyLm5Vbml0cylcbiAgICAgICAgfSxcbiAgICAgICAgNjoge1xuICAgICAgICAgICAgYmluYXJ5U2VhcmNoSGVhZGVyOiBCaW5hcnlTZWFyY2hIZWFkZXIsXG4gICAgICAgICAgICBzZWdtZW50czogbmV3ICQ1MlpJZiRBcnJheShMb29rdXBTaW5nbGUsICh0KT0+dC5iaW5hcnlTZWFyY2hIZWFkZXIublVuaXRzKVxuICAgICAgICB9LFxuICAgICAgICA4OiB7XG4gICAgICAgICAgICBmaXJzdEdseXBoOiAkNTJaSWYkdWludDE2LFxuICAgICAgICAgICAgY291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgICAgICB2YWx1ZXM6IG5ldyAkNTJaSWYkQXJyYXkoVmFsdWVUeXBlLCAnY291bnQnKVxuICAgICAgICB9XG4gICAgfSk7XG59O1xuZnVuY3Rpb24gJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JDc5ZjdkOTNkNzkwOTM0YmEoZW50cnlEYXRhID0ge30sIGxvb2t1cFR5cGUgPSAkNTJaSWYkdWludDE2KSB7XG4gICAgbGV0IGVudHJ5ID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIG5ld1N0YXRlOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBmbGFnczogJDUyWklmJHVpbnQxNlxuICAgIH0sIGVudHJ5RGF0YSk7XG4gICAgbGV0IEVudHJ5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3QoZW50cnkpO1xuICAgIGxldCBTdGF0ZUFycmF5ID0gbmV3ICQ2Y2I3ZGQ1ZjQ3ZDgyNTgwJGV4cG9ydCRjNWFmMWVlYmM4ODJlMzlhKG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQxNiwgKHQpPT50Lm5DbGFzc2VzKSk7XG4gICAgbGV0IFN0YXRlSGVhZGVyID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgICAgICBuQ2xhc3NlczogJDUyWklmJHVpbnQzMixcbiAgICAgICAgY2xhc3NUYWJsZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsIG5ldyAkNmNiN2RkNWY0N2Q4MjU4MCRleHBvcnQkODM1MWY4YzJhZTJmMTAzYyhsb29rdXBUeXBlKSksXG4gICAgICAgIHN0YXRlQXJyYXk6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCBTdGF0ZUFycmF5KSxcbiAgICAgICAgZW50cnlUYWJsZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsIG5ldyAkNmNiN2RkNWY0N2Q4MjU4MCRleHBvcnQkYzVhZjFlZWJjODgyZTM5YShFbnRyeSkpXG4gICAgfSk7XG4gICAgcmV0dXJuIFN0YXRlSGVhZGVyO1xufVxuZnVuY3Rpb24gJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JDEwNTAyNzQyNTE5OWNjNTEoZW50cnlEYXRhID0ge30sIGxvb2t1cFR5cGUgPSAkNTJaSWYkdWludDE2KSB7XG4gICAgbGV0IENsYXNzTG9va3VwVGFibGUgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgICAgIHZlcnNpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIDg7XG4gICAgICAgIH0sXG4gICAgICAgIGZpcnN0R2x5cGg6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHZhbHVlczogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDgsICQ1MlpJZiR1aW50MTYpXG4gICAgfSk7XG4gICAgbGV0IGVudHJ5ID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIG5ld1N0YXRlT2Zmc2V0OiAkNTJaSWYkdWludDE2LFxuICAgICAgICAvLyBjb252ZXJ0IG9mZnNldCB0byBzdGF0ZUFycmF5IGluZGV4XG4gICAgICAgIG5ld1N0YXRlOiAodCk9Pih0Lm5ld1N0YXRlT2Zmc2V0IC0gKHQucGFyZW50LnN0YXRlQXJyYXkuYmFzZSAtIHQucGFyZW50Ll9zdGFydE9mZnNldCkpIC8gdC5wYXJlbnQubkNsYXNzZXMsXG4gICAgICAgIGZsYWdzOiAkNTJaSWYkdWludDE2XG4gICAgfSwgZW50cnlEYXRhKTtcbiAgICBsZXQgRW50cnkgPSBuZXcgJDUyWklmJFN0cnVjdChlbnRyeSk7XG4gICAgbGV0IFN0YXRlQXJyYXkgPSBuZXcgJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JGM1YWYxZWViYzg4MmUzOWEobmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDgsICh0KT0+dC5uQ2xhc3NlcykpO1xuICAgIGxldCBTdGF0ZUhlYWRlcjEgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgICAgIG5DbGFzc2VzOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBjbGFzc1RhYmxlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgQ2xhc3NMb29rdXBUYWJsZSksXG4gICAgICAgIHN0YXRlQXJyYXk6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCBTdGF0ZUFycmF5KSxcbiAgICAgICAgZW50cnlUYWJsZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsIG5ldyAkNmNiN2RkNWY0N2Q4MjU4MCRleHBvcnQkYzVhZjFlZWJjODgyZTM5YShFbnRyeSkpXG4gICAgfSk7XG4gICAgcmV0dXJuIFN0YXRlSGVhZGVyMTtcbn1cblxuXG5sZXQgJDZhMzc0NmU4YzcwOGY1YTMkdmFyJEJzbG5TdWJ0YWJsZSA9IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KCdmb3JtYXQnLCB7XG4gICAgMDoge1xuICAgICAgICBkZWx0YXM6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJGludDE2LCAzMilcbiAgICB9LFxuICAgIDE6IHtcbiAgICAgICAgZGVsdGFzOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiRpbnQxNiwgMzIpLFxuICAgICAgICBtYXBwaW5nRGF0YTogbmV3ICgwLCAkNmNiN2RkNWY0N2Q4MjU4MCRleHBvcnQkODM1MWY4YzJhZTJmMTAzYykoJDUyWklmJHVpbnQxNilcbiAgICB9LFxuICAgIDI6IHtcbiAgICAgICAgc3RhbmRhcmRHbHlwaDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgY29udHJvbFBvaW50czogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCAzMilcbiAgICB9LFxuICAgIDM6IHtcbiAgICAgICAgc3RhbmRhcmRHbHlwaDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgY29udHJvbFBvaW50czogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCAzMiksXG4gICAgICAgIG1hcHBpbmdEYXRhOiBuZXcgKDAsICQ2Y2I3ZGQ1ZjQ3ZDgyNTgwJGV4cG9ydCQ4MzUxZjhjMmFlMmYxMDNjKSgkNTJaSWYkdWludDE2KVxuICAgIH1cbn0pO1xudmFyICQ2YTM3NDZlOGM3MDhmNWEzJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJGZpeGVkMzIsXG4gICAgZm9ybWF0OiAkNTJaSWYkdWludDE2LFxuICAgIGRlZmF1bHRCYXNlbGluZTogJDUyWklmJHVpbnQxNixcbiAgICBzdWJ0YWJsZTogJDZhMzc0NmU4YzcwOGY1YTMkdmFyJEJzbG5TdWJ0YWJsZVxufSk7XG5cblxuXG5sZXQgJGQwYzc2ZmFjNjE3YjMwOGEkdmFyJFNldHRpbmcgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgc2V0dGluZzogJDUyWklmJHVpbnQxNixcbiAgICBuYW1lSW5kZXg6ICQ1MlpJZiRpbnQxNixcbiAgICBuYW1lOiAodCk9PnQucGFyZW50LnBhcmVudC5wYXJlbnQubmFtZS5yZWNvcmRzLmZvbnRGZWF0dXJlc1t0Lm5hbWVJbmRleF1cbn0pO1xubGV0ICRkMGM3NmZhYzYxN2IzMDhhJHZhciRGZWF0dXJlTmFtZSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBmZWF0dXJlOiAkNTJaSWYkdWludDE2LFxuICAgIG5TZXR0aW5nczogJDUyWklmJHVpbnQxNixcbiAgICBzZXR0aW5nVGFibGU6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCBuZXcgJDUyWklmJEFycmF5KCRkMGM3NmZhYzYxN2IzMDhhJHZhciRTZXR0aW5nLCAnblNldHRpbmdzJyksIHtcbiAgICAgICAgdHlwZTogJ3BhcmVudCdcbiAgICB9KSxcbiAgICBmZWF0dXJlRmxhZ3M6IG5ldyAkNTJaSWYkQml0ZmllbGQoJDUyWklmJHVpbnQ4LCBbXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICAgICdoYXNEZWZhdWx0JyxcbiAgICAgICAgJ2V4Y2x1c2l2ZSdcbiAgICBdKSxcbiAgICBkZWZhdWx0U2V0dGluZzogJDUyWklmJHVpbnQ4LFxuICAgIG5hbWVJbmRleDogJDUyWklmJGludDE2LFxuICAgIG5hbWU6ICh0KT0+dC5wYXJlbnQucGFyZW50Lm5hbWUucmVjb3Jkcy5mb250RmVhdHVyZXNbdC5uYW1lSW5kZXhdXG59KTtcbnZhciAkZDBjNzZmYWM2MTdiMzA4YSRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHZlcnNpb246ICQ1MlpJZiRmaXhlZDMyLFxuICAgIGZlYXR1cmVOYW1lQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgcmVzZXJ2ZWQxOiBuZXcgJDUyWklmJFJlc2VydmVkKCQ1MlpJZiR1aW50MTYpLFxuICAgIHJlc2VydmVkMjogbmV3ICQ1MlpJZiRSZXNlcnZlZCgkNTJaSWYkdWludDMyKSxcbiAgICBmZWF0dXJlTmFtZXM6IG5ldyAkNTJaSWYkQXJyYXkoJGQwYzc2ZmFjNjE3YjMwOGEkdmFyJEZlYXR1cmVOYW1lLCAnZmVhdHVyZU5hbWVDb3VudCcpXG59KTtcblxuXG5cbmxldCAkZTgzZmQwNjVmMDBmY2QwMSR2YXIkQXhpcyA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBheGlzVGFnOiBuZXcgJDUyWklmJFN0cmluZyg0KSxcbiAgICBtaW5WYWx1ZTogJDUyWklmJGZpeGVkMzIsXG4gICAgZGVmYXVsdFZhbHVlOiAkNTJaSWYkZml4ZWQzMixcbiAgICBtYXhWYWx1ZTogJDUyWklmJGZpeGVkMzIsXG4gICAgZmxhZ3M6ICQ1MlpJZiR1aW50MTYsXG4gICAgbmFtZUlEOiAkNTJaSWYkdWludDE2LFxuICAgIG5hbWU6ICh0KT0+dC5wYXJlbnQucGFyZW50Lm5hbWUucmVjb3Jkcy5mb250RmVhdHVyZXNbdC5uYW1lSURdXG59KTtcbmxldCAkZTgzZmQwNjVmMDBmY2QwMSR2YXIkSW5zdGFuY2UgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgbmFtZUlEOiAkNTJaSWYkdWludDE2LFxuICAgIG5hbWU6ICh0KT0+dC5wYXJlbnQucGFyZW50Lm5hbWUucmVjb3Jkcy5mb250RmVhdHVyZXNbdC5uYW1lSURdLFxuICAgIGZsYWdzOiAkNTJaSWYkdWludDE2LFxuICAgIGNvb3JkOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiRmaXhlZDMyLCAodCk9PnQucGFyZW50LmF4aXNDb3VudCksXG4gICAgcG9zdHNjcmlwdE5hbWVJRDogbmV3ICQ1MlpJZiRPcHRpb25hbCgkNTJaSWYkdWludDE2LCAodCk9PnQucGFyZW50Lmluc3RhbmNlU2l6ZSAtIHQuX2N1cnJlbnRPZmZzZXQgPiAwKVxufSk7XG52YXIgJGU4M2ZkMDY1ZjAwZmNkMDEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB2ZXJzaW9uOiAkNTJaSWYkZml4ZWQzMixcbiAgICBvZmZzZXRUb0RhdGE6ICQ1MlpJZiR1aW50MTYsXG4gICAgY291bnRTaXplUGFpcnM6ICQ1MlpJZiR1aW50MTYsXG4gICAgYXhpc0NvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIGF4aXNTaXplOiAkNTJaSWYkdWludDE2LFxuICAgIGluc3RhbmNlQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgaW5zdGFuY2VTaXplOiAkNTJaSWYkdWludDE2LFxuICAgIGF4aXM6IG5ldyAkNTJaSWYkQXJyYXkoJGU4M2ZkMDY1ZjAwZmNkMDEkdmFyJEF4aXMsICdheGlzQ291bnQnKSxcbiAgICBpbnN0YW5jZTogbmV3ICQ1MlpJZiRBcnJheSgkZTgzZmQwNjVmMDBmY2QwMSR2YXIkSW5zdGFuY2UsICdpbnN0YW5jZUNvdW50Jylcbn0pO1xuXG5cblxubGV0ICRkYmUzM2M4ZDNhN2YxMzFjJHZhciRzaG9ydEZyYWMgPSBuZXcgJDUyWklmJEZpeGVkKDE2LCAnQkUnLCAxNCk7XG5jbGFzcyAkZGJlMzNjOGQzYTdmMTMxYyR2YXIkT2Zmc2V0IHtcbiAgICBzdGF0aWMgZGVjb2RlKHN0cmVhbSwgcGFyZW50KSB7XG4gICAgICAgIC8vIEluIHNob3J0IGZvcm1hdCwgb2Zmc2V0cyBhcmUgbXVsdGlwbGllZCBieSAyLlxuICAgICAgICAvLyBUaGlzIGRvZXNuJ3Qgc2VlbSB0byBiZSBkb2N1bWVudGVkIGJ5IEFwcGxlLCBidXQgaXRcbiAgICAgICAgLy8gaXMgaW1wbGVtZW50ZWQgdGhpcyB3YXkgaW4gRnJlZXR5cGUuXG4gICAgICAgIHJldHVybiBwYXJlbnQuZmxhZ3MgPyBzdHJlYW0ucmVhZFVJbnQzMkJFKCkgOiBzdHJlYW0ucmVhZFVJbnQxNkJFKCkgKiAyO1xuICAgIH1cbn1cbmxldCAkZGJlMzNjOGQzYTdmMTMxYyR2YXIkZ3ZhciA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB2ZXJzaW9uOiAkNTJaSWYkdWludDE2LFxuICAgIHJlc2VydmVkOiBuZXcgJDUyWklmJFJlc2VydmVkKCQ1MlpJZiR1aW50MTYpLFxuICAgIGF4aXNDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICBnbG9iYWxDb29yZENvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIGdsb2JhbENvb3JkczogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsIG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRBcnJheSgkZGJlMzNjOGQzYTdmMTMxYyR2YXIkc2hvcnRGcmFjLCAnYXhpc0NvdW50JyksICdnbG9iYWxDb29yZENvdW50JykpLFxuICAgIGdseXBoQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgZmxhZ3M6ICQ1MlpJZiR1aW50MTYsXG4gICAgb2Zmc2V0VG9EYXRhOiAkNTJaSWYkdWludDMyLFxuICAgIG9mZnNldHM6IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCRkYmUzM2M4ZDNhN2YxMzFjJHZhciRPZmZzZXQsICd2b2lkJywge1xuICAgICAgICByZWxhdGl2ZVRvOiAoY3R4KT0+Y3R4Lm9mZnNldFRvRGF0YSxcbiAgICAgICAgYWxsb3dOdWxsOiBmYWxzZVxuICAgIH0pLCAodCk9PnQuZ2x5cGhDb3VudCArIDEpXG59KTtcbnZhciAkZGJlMzNjOGQzYTdmMTMxYyRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gJGRiZTMzYzhkM2E3ZjEzMWMkdmFyJGd2YXI7XG5cblxuXG5cbmxldCAkMDViMDE4ODdkZjk2YzRlZSR2YXIkQ2xhc3NUYWJsZSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBsZW5ndGg6ICQ1MlpJZiR1aW50MTYsXG4gICAgY292ZXJhZ2U6ICQ1MlpJZiR1aW50MTYsXG4gICAgc3ViRmVhdHVyZUZsYWdzOiAkNTJaSWYkdWludDMyLFxuICAgIHN0YXRlVGFibGU6IG5ldyAoMCwgJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JDEwNTAyNzQyNTE5OWNjNTEpXG59KTtcbmxldCAkMDViMDE4ODdkZjk2YzRlZSR2YXIkV2lkdGhEZWx0YVJlY29yZCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBqdXN0Q2xhc3M6ICQ1MlpJZiR1aW50MzIsXG4gICAgYmVmb3JlR3Jvd0xpbWl0OiAkNTJaSWYkZml4ZWQzMixcbiAgICBiZWZvcmVTaHJpbmtMaW1pdDogJDUyWklmJGZpeGVkMzIsXG4gICAgYWZ0ZXJHcm93TGltaXQ6ICQ1MlpJZiRmaXhlZDMyLFxuICAgIGFmdGVyU2hyaW5rTGltaXQ6ICQ1MlpJZiRmaXhlZDMyLFxuICAgIGdyb3dGbGFnczogJDUyWklmJHVpbnQxNixcbiAgICBzaHJpbmtGbGFnczogJDUyWklmJHVpbnQxNlxufSk7XG5sZXQgJDA1YjAxODg3ZGY5NmM0ZWUkdmFyJFdpZHRoRGVsdGFDbHVzdGVyID0gbmV3ICQ1MlpJZiRBcnJheSgkMDViMDE4ODdkZjk2YzRlZSR2YXIkV2lkdGhEZWx0YVJlY29yZCwgJDUyWklmJHVpbnQzMik7XG5sZXQgJDA1YjAxODg3ZGY5NmM0ZWUkdmFyJEFjdGlvbkRhdGEgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgnYWN0aW9uVHlwZScsIHtcbiAgICAwOiB7XG4gICAgICAgIGxvd2VyTGltaXQ6ICQ1MlpJZiRmaXhlZDMyLFxuICAgICAgICB1cHBlckxpbWl0OiAkNTJaSWYkZml4ZWQzMixcbiAgICAgICAgb3JkZXI6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGdseXBoczogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCAkNTJaSWYkdWludDE2KVxuICAgIH0sXG4gICAgMToge1xuICAgICAgICBhZGRHbHlwaDogJDUyWklmJHVpbnQxNlxuICAgIH0sXG4gICAgMjoge1xuICAgICAgICBzdWJzdFRocmVzaG9sZDogJDUyWklmJGZpeGVkMzIsXG4gICAgICAgIGFkZEdseXBoOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBzdWJzdEdseXBoOiAkNTJaSWYkdWludDE2XG4gICAgfSxcbiAgICAzOiB7fSxcbiAgICA0OiB7XG4gICAgICAgIHZhcmlhdGlvbkF4aXM6ICQ1MlpJZiR1aW50MzIsXG4gICAgICAgIG1pbmltdW1MaW1pdDogJDUyWklmJGZpeGVkMzIsXG4gICAgICAgIG5vU3RyZXRjaFZhbHVlOiAkNTJaSWYkZml4ZWQzMixcbiAgICAgICAgbWF4aW11bUxpbWl0OiAkNTJaSWYkZml4ZWQzMlxuICAgIH0sXG4gICAgNToge1xuICAgICAgICBmbGFnczogJDUyWklmJHVpbnQxNixcbiAgICAgICAgZ2x5cGg6ICQ1MlpJZiR1aW50MTZcbiAgICB9XG59KTtcbmxldCAkMDViMDE4ODdkZjk2YzRlZSR2YXIkQWN0aW9uID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGFjdGlvbkNsYXNzOiAkNTJaSWYkdWludDE2LFxuICAgIGFjdGlvblR5cGU6ICQ1MlpJZiR1aW50MTYsXG4gICAgYWN0aW9uTGVuZ3RoOiAkNTJaSWYkdWludDMyLFxuICAgIGFjdGlvbkRhdGE6ICQwNWIwMTg4N2RmOTZjNGVlJHZhciRBY3Rpb25EYXRhLFxuICAgIHBhZGRpbmc6IG5ldyAkNTJaSWYkUmVzZXJ2ZWQoJDUyWklmJHVpbnQ4LCAodCk9PnQuYWN0aW9uTGVuZ3RoIC0gdC5fY3VycmVudE9mZnNldClcbn0pO1xubGV0ICQwNWIwMTg4N2RmOTZjNGVlJHZhciRQb3N0Y29tcGVuc2F0aW9uQWN0aW9uID0gbmV3ICQ1MlpJZiRBcnJheSgkMDViMDE4ODdkZjk2YzRlZSR2YXIkQWN0aW9uLCAkNTJaSWYkdWludDMyKTtcbmxldCAkMDViMDE4ODdkZjk2YzRlZSR2YXIkUG9zdENvbXBlbnNhdGlvblRhYmxlID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGxvb2t1cFRhYmxlOiBuZXcgKDAsICQ2Y2I3ZGQ1ZjQ3ZDgyNTgwJGV4cG9ydCQ4MzUxZjhjMmFlMmYxMDNjKShuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDA1YjAxODg3ZGY5NmM0ZWUkdmFyJFBvc3Rjb21wZW5zYXRpb25BY3Rpb24pKVxufSk7XG5sZXQgJDA1YjAxODg3ZGY5NmM0ZWUkdmFyJEp1c3RpZmljYXRpb25UYWJsZSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBjbGFzc1RhYmxlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDA1YjAxODg3ZGY5NmM0ZWUkdmFyJENsYXNzVGFibGUsIHtcbiAgICAgICAgdHlwZTogJ3BhcmVudCdcbiAgICB9KSxcbiAgICB3ZGNPZmZzZXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgcG9zdENvbXBlbnNhdGlvblRhYmxlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDA1YjAxODg3ZGY5NmM0ZWUkdmFyJFBvc3RDb21wZW5zYXRpb25UYWJsZSwge1xuICAgICAgICB0eXBlOiAncGFyZW50J1xuICAgIH0pLFxuICAgIHdpZHRoRGVsdGFDbHVzdGVyczogbmV3ICgwLCAkNmNiN2RkNWY0N2Q4MjU4MCRleHBvcnQkODM1MWY4YzJhZTJmMTAzYykobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQwNWIwMTg4N2RmOTZjNGVlJHZhciRXaWR0aERlbHRhQ2x1c3Rlciwge1xuICAgICAgICB0eXBlOiAncGFyZW50JyxcbiAgICAgICAgcmVsYXRpdmVUbzogKGN0eCk9PmN0eC53ZGNPZmZzZXRcbiAgICB9KSlcbn0pO1xudmFyICQwNWIwMTg4N2RmOTZjNGVlJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJHVpbnQzMixcbiAgICBmb3JtYXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgaG9yaXpvbnRhbDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQwNWIwMTg4N2RmOTZjNGVlJHZhciRKdXN0aWZpY2F0aW9uVGFibGUpLFxuICAgIHZlcnRpY2FsOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDA1YjAxODg3ZGY5NmM0ZWUkdmFyJEp1c3RpZmljYXRpb25UYWJsZSlcbn0pO1xuXG5cblxuXG5sZXQgJDAzZWU2ZWJkNTRkYjEwNTMkdmFyJExpZ2F0dXJlRGF0YSA9IHtcbiAgICBhY3Rpb246ICQ1MlpJZiR1aW50MTZcbn07XG5sZXQgJDAzZWU2ZWJkNTRkYjEwNTMkdmFyJENvbnRleHR1YWxEYXRhID0ge1xuICAgIG1hcmtJbmRleDogJDUyWklmJHVpbnQxNixcbiAgICBjdXJyZW50SW5kZXg6ICQ1MlpJZiR1aW50MTZcbn07XG5sZXQgJDAzZWU2ZWJkNTRkYjEwNTMkdmFyJEluc2VydGlvbkRhdGEgPSB7XG4gICAgY3VycmVudEluc2VydEluZGV4OiAkNTJaSWYkdWludDE2LFxuICAgIG1hcmtlZEluc2VydEluZGV4OiAkNTJaSWYkdWludDE2XG59O1xubGV0ICQwM2VlNmViZDU0ZGIxMDUzJHZhciRTdWJzdGl0dXRpb25UYWJsZSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBpdGVtczogbmV3ICgwLCAkNmNiN2RkNWY0N2Q4MjU4MCRleHBvcnQkYzVhZjFlZWJjODgyZTM5YSkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsIG5ldyAoMCwgJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JDgzNTFmOGMyYWUyZjEwM2MpKSlcbn0pO1xubGV0ICQwM2VlNmViZDU0ZGIxMDUzJHZhciRTdWJ0YWJsZURhdGEgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgndHlwZScsIHtcbiAgICAwOiB7XG4gICAgICAgIHN0YXRlVGFibGU6IG5ldyAoMCwgJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JDc5ZjdkOTNkNzkwOTM0YmEpXG4gICAgfSxcbiAgICAxOiB7XG4gICAgICAgIHN0YXRlVGFibGU6IG5ldyAoMCwgJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JDc5ZjdkOTNkNzkwOTM0YmEpKCQwM2VlNmViZDU0ZGIxMDUzJHZhciRDb250ZXh0dWFsRGF0YSksXG4gICAgICAgIHN1YnN0aXR1dGlvblRhYmxlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgJDAzZWU2ZWJkNTRkYjEwNTMkdmFyJFN1YnN0aXR1dGlvblRhYmxlKVxuICAgIH0sXG4gICAgMjoge1xuICAgICAgICBzdGF0ZVRhYmxlOiBuZXcgKDAsICQ2Y2I3ZGQ1ZjQ3ZDgyNTgwJGV4cG9ydCQ3OWY3ZDkzZDc5MDkzNGJhKSgkMDNlZTZlYmQ1NGRiMTA1MyR2YXIkTGlnYXR1cmVEYXRhKSxcbiAgICAgICAgbGlnYXR1cmVBY3Rpb25zOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgbmV3ICgwLCAkNmNiN2RkNWY0N2Q4MjU4MCRleHBvcnQkYzVhZjFlZWJjODgyZTM5YSkoJDUyWklmJHVpbnQzMikpLFxuICAgICAgICBjb21wb25lbnRzOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgbmV3ICgwLCAkNmNiN2RkNWY0N2Q4MjU4MCRleHBvcnQkYzVhZjFlZWJjODgyZTM5YSkoJDUyWklmJHVpbnQxNikpLFxuICAgICAgICBsaWdhdHVyZUxpc3Q6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCBuZXcgKDAsICQ2Y2I3ZGQ1ZjQ3ZDgyNTgwJGV4cG9ydCRjNWFmMWVlYmM4ODJlMzlhKSgkNTJaSWYkdWludDE2KSlcbiAgICB9LFxuICAgIDQ6IHtcbiAgICAgICAgbG9va3VwVGFibGU6IG5ldyAoMCwgJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JDgzNTFmOGMyYWUyZjEwM2MpXG4gICAgfSxcbiAgICA1OiB7XG4gICAgICAgIHN0YXRlVGFibGU6IG5ldyAoMCwgJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JDc5ZjdkOTNkNzkwOTM0YmEpKCQwM2VlNmViZDU0ZGIxMDUzJHZhciRJbnNlcnRpb25EYXRhKSxcbiAgICAgICAgaW5zZXJ0aW9uQWN0aW9uczogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsIG5ldyAoMCwgJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JGM1YWYxZWViYzg4MmUzOWEpKCQ1MlpJZiR1aW50MTYpKVxuICAgIH1cbn0pO1xubGV0ICQwM2VlNmViZDU0ZGIxMDUzJHZhciRTdWJ0YWJsZSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBsZW5ndGg6ICQ1MlpJZiR1aW50MzIsXG4gICAgY292ZXJhZ2U6ICQ1MlpJZiR1aW50MjQsXG4gICAgdHlwZTogJDUyWklmJHVpbnQ4LFxuICAgIHN1YkZlYXR1cmVGbGFnczogJDUyWklmJHVpbnQzMixcbiAgICB0YWJsZTogJDAzZWU2ZWJkNTRkYjEwNTMkdmFyJFN1YnRhYmxlRGF0YSxcbiAgICBwYWRkaW5nOiBuZXcgJDUyWklmJFJlc2VydmVkKCQ1MlpJZiR1aW50OCwgKHQpPT50Lmxlbmd0aCAtIHQuX2N1cnJlbnRPZmZzZXQpXG59KTtcbmxldCAkMDNlZTZlYmQ1NGRiMTA1MyR2YXIkRmVhdHVyZUVudHJ5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGZlYXR1cmVUeXBlOiAkNTJaSWYkdWludDE2LFxuICAgIGZlYXR1cmVTZXR0aW5nOiAkNTJaSWYkdWludDE2LFxuICAgIGVuYWJsZUZsYWdzOiAkNTJaSWYkdWludDMyLFxuICAgIGRpc2FibGVGbGFnczogJDUyWklmJHVpbnQzMlxufSk7XG5sZXQgJDAzZWU2ZWJkNTRkYjEwNTMkdmFyJE1vcnhDaGFpbiA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBkZWZhdWx0RmxhZ3M6ICQ1MlpJZiR1aW50MzIsXG4gICAgY2hhaW5MZW5ndGg6ICQ1MlpJZiR1aW50MzIsXG4gICAgbkZlYXR1cmVFbnRyaWVzOiAkNTJaSWYkdWludDMyLFxuICAgIG5TdWJ0YWJsZXM6ICQ1MlpJZiR1aW50MzIsXG4gICAgZmVhdHVyZXM6IG5ldyAkNTJaSWYkQXJyYXkoJDAzZWU2ZWJkNTRkYjEwNTMkdmFyJEZlYXR1cmVFbnRyeSwgJ25GZWF0dXJlRW50cmllcycpLFxuICAgIHN1YnRhYmxlczogbmV3ICQ1MlpJZiRBcnJheSgkMDNlZTZlYmQ1NGRiMTA1MyR2YXIkU3VidGFibGUsICduU3VidGFibGVzJylcbn0pO1xudmFyICQwM2VlNmViZDU0ZGIxMDUzJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJHVpbnQxNixcbiAgICB1bnVzZWQ6IG5ldyAkNTJaSWYkUmVzZXJ2ZWQoJDUyWklmJHVpbnQxNiksXG4gICAgbkNoYWluczogJDUyWklmJHVpbnQzMixcbiAgICBjaGFpbnM6IG5ldyAkNTJaSWYkQXJyYXkoJDAzZWU2ZWJkNTRkYjEwNTMkdmFyJE1vcnhDaGFpbiwgJ25DaGFpbnMnKVxufSk7XG5cblxuXG5cbmxldCAkYjc0OTJhODBiMGQxYTA1NiR2YXIkT3B0aWNhbEJvdW5kcyA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBsZWZ0OiAkNTJaSWYkaW50MTYsXG4gICAgdG9wOiAkNTJaSWYkaW50MTYsXG4gICAgcmlnaHQ6ICQ1MlpJZiRpbnQxNixcbiAgICBib3R0b206ICQ1MlpJZiRpbnQxNlxufSk7XG52YXIgJGI3NDkyYTgwYjBkMWEwNTYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB2ZXJzaW9uOiAkNTJaSWYkZml4ZWQzMixcbiAgICBmb3JtYXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgbG9va3VwVGFibGU6IG5ldyAoMCwgJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JDgzNTFmOGMyYWUyZjEwM2MpKCRiNzQ5MmE4MGIwZDFhMDU2JHZhciRPcHRpY2FsQm91bmRzKVxufSk7XG5cblxubGV0ICRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMgPSB7fTtcbnZhciAkYzMzOTU3MjJiZWE3NTFlMiRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gJGMzMzk1NzIyYmVhNzUxZTIkdmFyJHRhYmxlcztcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuY21hcCA9ICgwLCAkMjZhNjIyMDVhZDA2NTc0ZSRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuaGVhZCA9ICgwLCAkZjI2MTJhMjlmOTJhYzA2MiRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuaGhlYSA9ICgwLCAkMmMxNzlkZDU5MzU4MzA3MyRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuaG10eCA9ICgwLCAkYmRjOTA2MDU0MjI2NGI4NSRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMubWF4cCA9ICgwLCAkZGJmNTFjYjNkM2ZlNDA5ZCRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMubmFtZSA9ICgwLCAkMmJjZjIyMTc1M2VjOGUzMiRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXNbJ09TLzInXSA9ICgwLCAkODRiMjcyYWEzMWI3MDYwNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMucG9zdCA9ICgwLCAkMzJkOWUyZWI5NTY1ZDkzYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuZnBnbSA9ICgwLCAkNWMwZjM3Y2E1ZmZiMTg1MCRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMubG9jYSA9ICgwLCAkMmIyYjI2MDkwMmIxYzU3ZSRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMucHJlcCA9ICgwLCAkN2FmYjg3OGM3YmVhNGY2NiRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXNbJ2N2dCAnXSA9ICgwLCAkNTIwMmJkOWQ5YWQ4ZWFhYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuZ2x5ZiA9ICgwLCAkNmM5MmI2MzcxYmNlOGJkOSRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXNbJ0NGRiAnXSA9ICgwLCAkODIyYWMwZDU4OWU0ZTIzNyRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXNbJ0NGRjInXSA9ICgwLCAkODIyYWMwZDU4OWU0ZTIzNyRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuVk9SRyA9ICgwLCAkMmJiZjJiYzFjZTM3Y2Q4ZiRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuRUJMQyA9ICgwLCAkOTkxMWM0YzcyMDFjMTNkZSRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuQ0JMQyA9ICRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuRUJMQztcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuc2JpeCA9ICgwLCAkYWJiODQ3MDUxZWZkNTFiMSRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuQ09MUiA9ICgwLCAkZWI2MjkxODhmM2RmZWZkZCRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuQ1BBTCA9ICgwLCAkMDg3MzRiOGU3ZGM2NDU4NyRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuQkFTRSA9ICgwLCAkNDk3Y2VmNDExZDg4NGUzNCRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuR0RFRiA9ICgwLCAkY2Y1ZjMzYzYzZWYyMDllNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuR1BPUyA9ICgwLCAkNDdlMGU4ZWY1MTVkOTkwMyRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuR1NVQiA9ICgwLCAkZDNmNDQyMDY0YWY2NmUwNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuSlNURiA9ICgwLCAkNzFjZmIzYzQ3NjdmYmQwYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuSFZBUiA9ICgwLCAkZDA1OWE2YmQyZDNiNWI2MyRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuRFNJRyA9ICgwLCAkZGNlZWNhM2UxOTc3Y2UzMCRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuZ2FzcCA9ICgwLCAkOGFjZDc0MGE5NDM1YWFkMCRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuaGRteCA9ICgwLCAkYjVmMzgwMjQzYzM0ZDZhMCRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMua2VybiA9ICgwLCAkY2EyZGYxMjU2OTY2ZTMxMyRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuTFRTSCA9ICgwLCAkN2E5ZjkyYjBjNDZlYmUzMyRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuUENMVCA9ICgwLCAkMmIyY2NjNDE5ZDE1MjYzMSRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuVkRNWCA9ICgwLCAkY2E1YjQwYjliY2RhOWM5YiRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMudmhlYSA9ICgwLCAkNjk1MzBhM2M0MDc1NWFmMCRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMudm10eCA9ICgwLCAkMzQ0MDczZGQyNzBmMGU2MiRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuYXZhciA9ICgwLCAkMzc5M2I3ODE5MThjZmNlZCRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuYnNsbiA9ICgwLCAkNmEzNzQ2ZThjNzA4ZjVhMyRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuZmVhdCA9ICgwLCAkZDBjNzZmYWM2MTdiMzA4YSRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuZnZhciA9ICgwLCAkZTgzZmQwNjVmMDBmY2QwMSRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuZ3ZhciA9ICgwLCAkZGJlMzNjOGQzYTdmMTMxYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuanVzdCA9ICgwLCAkMDViMDE4ODdkZjk2YzRlZSRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMubW9yeCA9ICgwLCAkMDNlZTZlYmQ1NGRiMTA1MyRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMub3BiZCA9ICgwLCAkYjc0OTJhODBiMGQxYTA1NiRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcblxuXG5sZXQgJDgxNmMwN2EwNGI2ZGJhODckdmFyJFRhYmxlRW50cnkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdGFnOiBuZXcgJDUyWklmJFN0cmluZyg0KSxcbiAgICBjaGVja1N1bTogJDUyWklmJHVpbnQzMixcbiAgICBvZmZzZXQ6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCAndm9pZCcsIHtcbiAgICAgICAgdHlwZTogJ2dsb2JhbCdcbiAgICB9KSxcbiAgICBsZW5ndGg6ICQ1MlpJZiR1aW50MzJcbn0pO1xubGV0ICQ4MTZjMDdhMDRiNmRiYTg3JHZhciREaXJlY3RvcnkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdGFnOiBuZXcgJDUyWklmJFN0cmluZyg0KSxcbiAgICBudW1UYWJsZXM6ICQ1MlpJZiR1aW50MTYsXG4gICAgc2VhcmNoUmFuZ2U6ICQ1MlpJZiR1aW50MTYsXG4gICAgZW50cnlTZWxlY3RvcjogJDUyWklmJHVpbnQxNixcbiAgICByYW5nZVNoaWZ0OiAkNTJaSWYkdWludDE2LFxuICAgIHRhYmxlczogbmV3ICQ1MlpJZiRBcnJheSgkODE2YzA3YTA0YjZkYmE4NyR2YXIkVGFibGVFbnRyeSwgJ251bVRhYmxlcycpXG59KTtcbiQ4MTZjMDdhMDRiNmRiYTg3JHZhciREaXJlY3RvcnkucHJvY2VzcyA9IGZ1bmN0aW9uKCkge1xuICAgIGxldCB0YWJsZXMgPSB7fTtcbiAgICBmb3IgKGxldCB0YWJsZSBvZiB0aGlzLnRhYmxlcyl0YWJsZXNbdGFibGUudGFnXSA9IHRhYmxlO1xuICAgIHRoaXMudGFibGVzID0gdGFibGVzO1xufTtcbiQ4MTZjMDdhMDRiNmRiYTg3JHZhciREaXJlY3RvcnkucHJlRW5jb2RlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMudGFibGVzKSkge1xuICAgICAgICBsZXQgdGFibGVzID0gW107XG4gICAgICAgIGZvcihsZXQgdGFnIGluIHRoaXMudGFibGVzKXtcbiAgICAgICAgICAgIGxldCB0YWJsZSA9IHRoaXMudGFibGVzW3RhZ107XG4gICAgICAgICAgICBpZiAodGFibGUpIHRhYmxlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0YWc6IHRhZyxcbiAgICAgICAgICAgICAgICBjaGVja1N1bTogMCxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IG5ldyAkNTJaSWYkVm9pZFBvaW50ZXIoKDAsICRjMzM5NTcyMmJlYTc1MWUyJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpW3RhZ10sIHRhYmxlKSxcbiAgICAgICAgICAgICAgICBsZW5ndGg6ICgwLCAkYzMzOTU3MjJiZWE3NTFlMiRleHBvcnQkMmUyYmNkODczOWFlMDM5KVt0YWddLnNpemUodGFibGUpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRhYmxlcyA9IHRhYmxlcztcbiAgICB9XG4gICAgdGhpcy50YWcgPSAndHJ1ZSc7XG4gICAgdGhpcy5udW1UYWJsZXMgPSB0aGlzLnRhYmxlcy5sZW5ndGg7XG4gICAgbGV0IG1heEV4cG9uZW50Rm9yMiA9IE1hdGguZmxvb3IoTWF0aC5sb2codGhpcy5udW1UYWJsZXMpIC8gTWF0aC5MTjIpO1xuICAgIGxldCBtYXhQb3dlck9mMiA9IE1hdGgucG93KDIsIG1heEV4cG9uZW50Rm9yMik7XG4gICAgdGhpcy5zZWFyY2hSYW5nZSA9IG1heFBvd2VyT2YyICogMTY7XG4gICAgdGhpcy5lbnRyeVNlbGVjdG9yID0gTWF0aC5sb2cobWF4UG93ZXJPZjIpIC8gTWF0aC5MTjI7XG4gICAgdGhpcy5yYW5nZVNoaWZ0ID0gdGhpcy5udW1UYWJsZXMgKiAxNiAtIHRoaXMuc2VhcmNoUmFuZ2U7XG59O1xudmFyICQ4MTZjMDdhMDRiNmRiYTg3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSAkODE2YzA3YTA0YjZkYmE4NyR2YXIkRGlyZWN0b3J5O1xuXG5cblxuXG5mdW5jdGlvbiAkMTI3Mjc3MzBkZGZjOGJmZSRleHBvcnQkMmUwYWU2NzMzOWQ1ZjFhYyhhcnIsIGNtcCkge1xuICAgIGxldCBtaW4gPSAwO1xuICAgIGxldCBtYXggPSBhcnIubGVuZ3RoIC0gMTtcbiAgICB3aGlsZShtaW4gPD0gbWF4KXtcbiAgICAgICAgbGV0IG1pZCA9IG1pbiArIG1heCA+PiAxO1xuICAgICAgICBsZXQgcmVzID0gY21wKGFyclttaWRdKTtcbiAgICAgICAgaWYgKHJlcyA8IDApIG1heCA9IG1pZCAtIDE7XG4gICAgICAgIGVsc2UgaWYgKHJlcyA+IDApIG1pbiA9IG1pZCArIDE7XG4gICAgICAgIGVsc2UgcmV0dXJuIG1pZDtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuZnVuY3Rpb24gJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JGQwMjYzMWNjY2Y3ODk3MjMoaW5kZXgsIGVuZCkge1xuICAgIGxldCByYW5nZSA9IFtdO1xuICAgIHdoaWxlKGluZGV4IDwgZW5kKXJhbmdlLnB1c2goaW5kZXgrKyk7XG4gICAgcmV0dXJuIHJhbmdlO1xufVxuY29uc3QgJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JDNkMjhjMTk5NmNlZDFmMTQgPSBuZXcgVGV4dERlY29kZXIoJ2FzY2lpJyk7XG4vLyBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vbmlrbGFzdmgvYmFzZTY0LWFycmF5YnVmZmVyLiBNSVQgbGljZW5zZS5cbmNvbnN0ICQxMjcyNzczMGRkZmM4YmZlJHZhciRDSEFSUyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJztcbmNvbnN0ICQxMjcyNzczMGRkZmM4YmZlJHZhciRMT09LVVAgPSBuZXcgVWludDhBcnJheSgyNTYpO1xuZm9yKGxldCBpID0gMDsgaSA8ICQxMjcyNzczMGRkZmM4YmZlJHZhciRDSEFSUy5sZW5ndGg7IGkrKykkMTI3Mjc3MzBkZGZjOGJmZSR2YXIkTE9PS1VQWyQxMjcyNzczMGRkZmM4YmZlJHZhciRDSEFSUy5jaGFyQ29kZUF0KGkpXSA9IGk7XG5mdW5jdGlvbiAkMTI3Mjc3MzBkZGZjOGJmZSRleHBvcnQkOTRmZGYxMWJhZmM4ZGU2YihiYXNlNjQpIHtcbiAgICBsZXQgYnVmZmVyTGVuZ3RoID0gYmFzZTY0Lmxlbmd0aCAqIDAuNzU7XG4gICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMV0gPT09ICc9Jykge1xuICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMl0gPT09ICc9JykgYnVmZmVyTGVuZ3RoLS07XG4gICAgfVxuICAgIGxldCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlckxlbmd0aCk7XG4gICAgbGV0IHAgPSAwO1xuICAgIGZvcihsZXQgaSA9IDAsIGxlbiA9IGJhc2U2NC5sZW5ndGg7IGkgPCBsZW47IGkgKz0gNCl7XG4gICAgICAgIGxldCBlbmNvZGVkMSA9ICQxMjcyNzczMGRkZmM4YmZlJHZhciRMT09LVVBbYmFzZTY0LmNoYXJDb2RlQXQoaSldO1xuICAgICAgICBsZXQgZW5jb2RlZDIgPSAkMTI3Mjc3MzBkZGZjOGJmZSR2YXIkTE9PS1VQW2Jhc2U2NC5jaGFyQ29kZUF0KGkgKyAxKV07XG4gICAgICAgIGxldCBlbmNvZGVkMyA9ICQxMjcyNzczMGRkZmM4YmZlJHZhciRMT09LVVBbYmFzZTY0LmNoYXJDb2RlQXQoaSArIDIpXTtcbiAgICAgICAgbGV0IGVuY29kZWQ0ID0gJDEyNzI3NzMwZGRmYzhiZmUkdmFyJExPT0tVUFtiYXNlNjQuY2hhckNvZGVBdChpICsgMyldO1xuICAgICAgICBieXRlc1twKytdID0gZW5jb2RlZDEgPDwgMiB8IGVuY29kZWQyID4+IDQ7XG4gICAgICAgIGJ5dGVzW3ArK10gPSAoZW5jb2RlZDIgJiAxNSkgPDwgNCB8IGVuY29kZWQzID4+IDI7XG4gICAgICAgIGJ5dGVzW3ArK10gPSAoZW5jb2RlZDMgJiAzKSA8PCA2IHwgZW5jb2RlZDQgJiA2MztcbiAgICB9XG4gICAgcmV0dXJuIGJ5dGVzO1xufVxuXG5cblxuXG5jbGFzcyAkZjA4ZGQ0MWVmMTBiNjk0YyRleHBvcnQkMmUyYmNkODczOWFlMDM5IHtcbiAgICBmaW5kU3VidGFibGUoY21hcFRhYmxlLCBwYWlycykge1xuICAgICAgICBmb3IgKGxldCBbcGxhdGZvcm1JRCwgZW5jb2RpbmdJRF0gb2YgcGFpcnMpZm9yIChsZXQgY21hcCBvZiBjbWFwVGFibGUudGFibGVzKXtcbiAgICAgICAgICAgIGlmIChjbWFwLnBsYXRmb3JtSUQgPT09IHBsYXRmb3JtSUQgJiYgY21hcC5lbmNvZGluZ0lEID09PSBlbmNvZGluZ0lEKSByZXR1cm4gY21hcC50YWJsZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgbG9va3VwKGNvZGVwb2ludCwgdmFyaWF0aW9uU2VsZWN0b3IpIHtcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gVW5pY29kZSBjbWFwIGluIHRoaXMgZm9udCwgd2UgbmVlZCB0byByZS1lbmNvZGVcbiAgICAgICAgLy8gdGhlIGNvZGVwb2ludCBpbiB0aGUgZW5jb2RpbmcgdGhhdCB0aGUgY21hcCBzdXBwb3J0cy5cbiAgICAgICAgaWYgKHRoaXMuZW5jb2RpbmcpIGNvZGVwb2ludCA9IHRoaXMuZW5jb2RpbmcuZ2V0KGNvZGVwb2ludCkgfHwgY29kZXBvaW50O1xuICAgICAgICBlbHNlIGlmICh2YXJpYXRpb25TZWxlY3Rvcikge1xuICAgICAgICAgICAgbGV0IGdpZCA9IHRoaXMuZ2V0VmFyaWF0aW9uU2VsZWN0b3IoY29kZXBvaW50LCB2YXJpYXRpb25TZWxlY3Rvcik7XG4gICAgICAgICAgICBpZiAoZ2lkKSByZXR1cm4gZ2lkO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjbWFwID0gdGhpcy5jbWFwO1xuICAgICAgICBzd2l0Y2goY21hcC52ZXJzaW9uKXtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gY21hcC5jb2RlTWFwLmdldChjb2RlcG9pbnQpIHx8IDA7XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWluID0gMDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1heCA9IGNtYXAuc2VnQ291bnQgLSAxO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZShtaW4gPD0gbWF4KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtaWQgPSBtaW4gKyBtYXggPj4gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2RlcG9pbnQgPCBjbWFwLnN0YXJ0Q29kZS5nZXQobWlkKSkgbWF4ID0gbWlkIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvZGVwb2ludCA+IGNtYXAuZW5kQ29kZS5nZXQobWlkKSkgbWluID0gbWlkICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByYW5nZU9mZnNldCA9IGNtYXAuaWRSYW5nZU9mZnNldC5nZXQobWlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZ2lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZU9mZnNldCA9PT0gMCkgZ2lkID0gY29kZXBvaW50ICsgY21hcC5pZERlbHRhLmdldChtaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSByYW5nZU9mZnNldCAvIDIgKyAoY29kZXBvaW50IC0gY21hcC5zdGFydENvZGUuZ2V0KG1pZCkpIC0gKGNtYXAuc2VnQ291bnQgLSBtaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnaWQgPSBjbWFwLmdseXBoSW5kZXhBcnJheS5nZXQoaW5kZXgpIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnaWQgIT09IDApIGdpZCArPSBjbWFwLmlkRGVsdGEuZ2V0KG1pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnaWQgJiAweGZmZmY7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVE9ETzogY21hcCBmb3JtYXQgOCcpO1xuICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gY21hcC5nbHlwaEluZGljZXMuZ2V0KGNvZGVwb2ludCAtIGNtYXAuZmlyc3RDb2RlKSB8fCAwO1xuICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWluID0gMDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1heCA9IGNtYXAubkdyb3VwcyAtIDE7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKG1pbiA8PSBtYXgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1pZCA9IG1pbiArIG1heCA+PiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGdyb3VwID0gY21hcC5ncm91cHMuZ2V0KG1pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29kZXBvaW50IDwgZ3JvdXAuc3RhcnRDaGFyQ29kZSkgbWF4ID0gbWlkIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvZGVwb2ludCA+IGdyb3VwLmVuZENoYXJDb2RlKSBtaW4gPSBtaWQgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNtYXAudmVyc2lvbiA9PT0gMTIpIHJldHVybiBncm91cC5nbHlwaElEICsgKGNvZGVwb2ludCAtIGdyb3VwLnN0YXJ0Q2hhckNvZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIGdyb3VwLmdseXBoSUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RPRE86IGNtYXAgZm9ybWF0IDE0Jyk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBjbWFwIGZvcm1hdCAke2NtYXAudmVyc2lvbn1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRWYXJpYXRpb25TZWxlY3Rvcihjb2RlcG9pbnQsIHZhcmlhdGlvblNlbGVjdG9yKSB7XG4gICAgICAgIGlmICghdGhpcy51dnMpIHJldHVybiAwO1xuICAgICAgICBsZXQgc2VsZWN0b3JzID0gdGhpcy51dnMudmFyU2VsZWN0b3JzLnRvQXJyYXkoKTtcbiAgICAgICAgbGV0IGkgPSAoMCwgJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JDJlMGFlNjczMzlkNWYxYWMpKHNlbGVjdG9ycywgKHgpPT52YXJpYXRpb25TZWxlY3RvciAtIHgudmFyU2VsZWN0b3IpO1xuICAgICAgICBsZXQgc2VsID0gc2VsZWN0b3JzW2ldO1xuICAgICAgICBpZiAoaSAhPT0gLTEgJiYgc2VsLmRlZmF1bHRVVlMpIGkgPSAoMCwgJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JDJlMGFlNjczMzlkNWYxYWMpKHNlbC5kZWZhdWx0VVZTLCAoeCk9PmNvZGVwb2ludCA8IHguc3RhcnRVbmljb2RlVmFsdWUgPyAtMSA6IGNvZGVwb2ludCA+IHguc3RhcnRVbmljb2RlVmFsdWUgKyB4LmFkZGl0aW9uYWxDb3VudCA/IDEgOiAwKTtcbiAgICAgICAgaWYgKGkgIT09IC0xICYmIHNlbC5ub25EZWZhdWx0VVZTKSB7XG4gICAgICAgICAgICBpID0gKDAsICQxMjcyNzczMGRkZmM4YmZlJGV4cG9ydCQyZTBhZTY3MzM5ZDVmMWFjKShzZWwubm9uRGVmYXVsdFVWUywgKHgpPT5jb2RlcG9pbnQgLSB4LnVuaWNvZGVWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoaSAhPT0gLTEpIHJldHVybiBzZWwubm9uRGVmYXVsdFVWU1tpXS5nbHlwaElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBnZXRDaGFyYWN0ZXJTZXQoKSB7XG4gICAgICAgIGxldCBjbWFwID0gdGhpcy5jbWFwO1xuICAgICAgICBzd2l0Y2goY21hcC52ZXJzaW9uKXtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsICQxMjcyNzczMGRkZmM4YmZlJGV4cG9ydCRkMDI2MzFjY2NmNzg5NzIzKSgwLCBjbWFwLmNvZGVNYXAubGVuZ3RoKTtcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVuZENvZGVzID0gY21hcC5lbmRDb2RlLnRvQXJyYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGVuZENvZGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0YWlsID0gZW5kQ29kZXNbaV0gKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0ID0gY21hcC5zdGFydENvZGUuZ2V0KGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goLi4uKDAsICQxMjcyNzczMGRkZmM4YmZlJGV4cG9ydCRkMDI2MzFjY2NmNzg5NzIzKShzdGFydCwgdGFpbCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVE9ETzogY21hcCBmb3JtYXQgOCcpO1xuICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsICQxMjcyNzczMGRkZmM4YmZlJGV4cG9ydCRkMDI2MzFjY2NmNzg5NzIzKShjbWFwLmZpcnN0Q29kZSwgY21hcC5maXJzdENvZGUgKyBjbWFwLmdseXBoSW5kaWNlcy5sZW5ndGgpO1xuICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGdyb3VwIG9mIGNtYXAuZ3JvdXBzLnRvQXJyYXkoKSlyZXMucHVzaCguLi4oMCwgJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JGQwMjYzMWNjY2Y3ODk3MjMpKGdyb3VwLnN0YXJ0Q2hhckNvZGUsIGdyb3VwLmVuZENoYXJDb2RlICsgMSkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUT0RPOiBjbWFwIGZvcm1hdCAxNCcpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gY21hcCBmb3JtYXQgJHtjbWFwLnZlcnNpb259YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29kZVBvaW50c0ZvckdseXBoKGdpZCkge1xuICAgICAgICBsZXQgY21hcCA9IHRoaXMuY21hcDtcbiAgICAgICAgc3dpdGNoKGNtYXAudmVyc2lvbil7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCAyNTY7IGkrKylpZiAoY21hcC5jb2RlTWFwLmdldChpKSA9PT0gZ2lkKSByZXMucHVzaChpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBjbWFwLnNlZ0NvdW50OyBpKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVuZCA9IGNtYXAuZW5kQ29kZS5nZXQoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RhcnQgPSBjbWFwLnN0YXJ0Q29kZS5nZXQoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmFuZ2VPZmZzZXQgPSBjbWFwLmlkUmFuZ2VPZmZzZXQuZ2V0KGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRlbHRhID0gY21hcC5pZERlbHRhLmdldChpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgYyA9IHN0YXJ0OyBjIDw9IGVuZDsgYysrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlT2Zmc2V0ID09PSAwKSBnID0gYyArIGRlbHRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSByYW5nZU9mZnNldCAvIDIgKyAoYyAtIHN0YXJ0KSAtIChjbWFwLnNlZ0NvdW50IC0gaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcgPSBjbWFwLmdseXBoSW5kZXhBcnJheS5nZXQoaW5kZXgpIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnICE9PSAwKSBnICs9IGRlbHRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZyA9PT0gZ2lkKSByZXMucHVzaChjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGdyb3VwIG9mIGNtYXAuZ3JvdXBzLnRvQXJyYXkoKSlpZiAoZ2lkID49IGdyb3VwLmdseXBoSUQgJiYgZ2lkIDw9IGdyb3VwLmdseXBoSUQgKyAoZ3JvdXAuZW5kQ2hhckNvZGUgLSBncm91cC5zdGFydENoYXJDb2RlKSkgcmVzLnB1c2goZ3JvdXAuc3RhcnRDaGFyQ29kZSArIChnaWQgLSBncm91cC5nbHlwaElEKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgZ3JvdXAgb2YgY21hcC5ncm91cHMudG9BcnJheSgpKWlmIChnaWQgPT09IGdyb3VwLmdseXBoSUQpIHJlcy5wdXNoKC4uLigwLCAkMTI3Mjc3MzBkZGZjOGJmZSRleHBvcnQkZDAyNjMxY2NjZjc4OTcyMykoZ3JvdXAuc3RhcnRDaGFyQ29kZSwgZ3JvdXAuZW5kQ2hhckNvZGUgKyAxKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gY21hcCBmb3JtYXQgJHtjbWFwLnZlcnNpb259YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3RydWN0b3IoY21hcFRhYmxlKXtcbiAgICAgICAgLy8gQXR0ZW1wdCB0byBmaW5kIGEgVW5pY29kZSBjbWFwIGZpcnN0XG4gICAgICAgIHRoaXMuZW5jb2RpbmcgPSBudWxsO1xuICAgICAgICB0aGlzLmNtYXAgPSB0aGlzLmZpbmRTdWJ0YWJsZShjbWFwVGFibGUsIFtcbiAgICAgICAgICAgIC8vIDMyLWJpdCBzdWJ0YWJsZXNcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAzLFxuICAgICAgICAgICAgICAgIDEwXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgNlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIDRcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAvLyAxNi1iaXQgc3VidGFibGVzXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgMyxcbiAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgM1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgXVxuICAgICAgICBdKTtcbiAgICAgICAgLy8gSWYgbm90IHVuaWNvZGUgY21hcCB3YXMgZm91bmQsIHRha2UgdGhlIGZpcnN0IHRhYmxlIHdpdGggYSBzdXBwb3J0ZWQgZW5jb2RpbmcuXG4gICAgICAgIGlmICghdGhpcy5jbWFwKSBmb3IgKGxldCBjbWFwIG9mIGNtYXBUYWJsZS50YWJsZXMpe1xuICAgICAgICAgICAgbGV0IGVuY29kaW5nID0gKDAsICRlNDQ5YWQ3OGQ1MDg0NWZlJGV4cG9ydCRiYWRjNTQ0ZTA2NTFiNmIxKShjbWFwLnBsYXRmb3JtSUQsIGNtYXAuZW5jb2RpbmdJRCwgY21hcC50YWJsZS5sYW5ndWFnZSAtIDEpO1xuICAgICAgICAgICAgbGV0IG1hcHBpbmcgPSAoMCwgJGU0NDlhZDc4ZDUwODQ1ZmUkZXhwb3J0JDFkY2ViM2MxNGVkNjhiZWUpKGVuY29kaW5nKTtcbiAgICAgICAgICAgIGlmIChtYXBwaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbWFwID0gY21hcC50YWJsZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVuY29kaW5nID0gbWFwcGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuY21hcCkgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgYSBzdXBwb3J0ZWQgY21hcCB0YWJsZVwiKTtcbiAgICAgICAgdGhpcy51dnMgPSB0aGlzLmZpbmRTdWJ0YWJsZShjbWFwVGFibGUsIFtcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIDVcbiAgICAgICAgICAgIF1cbiAgICAgICAgXSk7XG4gICAgICAgIGlmICh0aGlzLnV2cyAmJiB0aGlzLnV2cy52ZXJzaW9uICE9PSAxNCkgdGhpcy51dnMgPSBudWxsO1xuICAgIH1cbn1cbigwLCAkNTJaSWYkXzEpKFtcbiAgICAoMCwgJGU3MTU2NWYyY2UwOWNiNmIkZXhwb3J0JDY5YTMyMDlmMWEwNmMwNGQpXG5dLCAkZjA4ZGQ0MWVmMTBiNjk0YyRleHBvcnQkMmUyYmNkODczOWFlMDM5LnByb3RvdHlwZSwgXCJnZXRDaGFyYWN0ZXJTZXRcIiwgbnVsbCk7XG4oMCwgJDUyWklmJF8xKShbXG4gICAgKDAsICRlNzE1NjVmMmNlMDljYjZiJGV4cG9ydCQ2OWEzMjA5ZjFhMDZjMDRkKVxuXSwgJGYwOGRkNDFlZjEwYjY5NGMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5wcm90b3R5cGUsIFwiY29kZVBvaW50c0ZvckdseXBoXCIsIG51bGwpO1xuXG5cblxuY2xhc3MgJDBiYmEzYTlkYjU3NjM3ZjMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSB7XG4gICAgcHJvY2VzcyhnbHlwaHMsIHBvc2l0aW9ucykge1xuICAgICAgICBmb3IobGV0IGdseXBoSW5kZXggPSAwOyBnbHlwaEluZGV4IDwgZ2x5cGhzLmxlbmd0aCAtIDE7IGdseXBoSW5kZXgrKyl7XG4gICAgICAgICAgICBsZXQgbGVmdCA9IGdseXBoc1tnbHlwaEluZGV4XS5pZDtcbiAgICAgICAgICAgIGxldCByaWdodCA9IGdseXBoc1tnbHlwaEluZGV4ICsgMV0uaWQ7XG4gICAgICAgICAgICBwb3NpdGlvbnNbZ2x5cGhJbmRleF0ueEFkdmFuY2UgKz0gdGhpcy5nZXRLZXJuaW5nKGxlZnQsIHJpZ2h0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRLZXJuaW5nKGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIGxldCByZXMgPSAwO1xuICAgICAgICBmb3IgKGxldCB0YWJsZSBvZiB0aGlzLmtlcm4udGFibGVzKXtcbiAgICAgICAgICAgIGlmICh0YWJsZS5jb3ZlcmFnZS5jcm9zc1N0cmVhbSkgY29udGludWU7XG4gICAgICAgICAgICBzd2l0Y2godGFibGUudmVyc2lvbil7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRhYmxlLmNvdmVyYWdlLmhvcml6b250YWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZS5jb3ZlcmFnZS52ZXJ0aWNhbCB8fCB0YWJsZS5jb3ZlcmFnZS52YXJpYXRpb24pIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGtlcm5pbmcgdGFibGUgdmVyc2lvbiAke3RhYmxlLnZlcnNpb259YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdmFsID0gMDtcbiAgICAgICAgICAgIGxldCBzID0gdGFibGUuc3VidGFibGU7XG4gICAgICAgICAgICBzd2l0Y2godGFibGUuZm9ybWF0KXtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGxldCBwYWlySWR4ID0gKDAsICQxMjcyNzczMGRkZmM4YmZlJGV4cG9ydCQyZTBhZTY3MzM5ZDVmMWFjKShzLnBhaXJzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGVmdCAtIHBhaXIubGVmdCB8fCByaWdodCAtIHBhaXIucmlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFpcklkeCA+PSAwKSB2YWwgPSBzLnBhaXJzW3BhaXJJZHhdLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGxldCBsZWZ0T2Zmc2V0ID0gMCwgcmlnaHRPZmZzZXQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGVmdCA+PSBzLmxlZnRUYWJsZS5maXJzdEdseXBoICYmIGxlZnQgPCBzLmxlZnRUYWJsZS5maXJzdEdseXBoICsgcy5sZWZ0VGFibGUubkdseXBocykgbGVmdE9mZnNldCA9IHMubGVmdFRhYmxlLm9mZnNldHNbbGVmdCAtIHMubGVmdFRhYmxlLmZpcnN0R2x5cGhdO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGxlZnRPZmZzZXQgPSBzLmFycmF5Lm9mZjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJpZ2h0ID49IHMucmlnaHRUYWJsZS5maXJzdEdseXBoICYmIHJpZ2h0IDwgcy5yaWdodFRhYmxlLmZpcnN0R2x5cGggKyBzLnJpZ2h0VGFibGUubkdseXBocykgcmlnaHRPZmZzZXQgPSBzLnJpZ2h0VGFibGUub2Zmc2V0c1tyaWdodCAtIHMucmlnaHRUYWJsZS5maXJzdEdseXBoXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gKGxlZnRPZmZzZXQgKyByaWdodE9mZnNldCAtIHMuYXJyYXkub2ZmKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IHMuYXJyYXkudmFsdWVzLmdldChpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxlZnQgPj0gcy5nbHlwaENvdW50IHx8IHJpZ2h0ID49IHMuZ2x5cGhDb3VudCkgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IHMua2VyblZhbHVlW3Mua2VybkluZGV4W3MubGVmdENsYXNzW2xlZnRdICogcy5yaWdodENsYXNzQ291bnQgKyBzLnJpZ2h0Q2xhc3NbcmlnaHRdXV07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQga2VybmluZyBzdWItdGFibGUgZm9ybWF0ICR7dGFibGUuZm9ybWF0fWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTWljcm9zb2Z0IHN1cHBvcnRzIHRoZSBvdmVycmlkZSBmbGFnLCB3aGljaCByZXNldHMgdGhlIHJlc3VsdFxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCB0aGUgc3VtIG9mIHRoZSByZXN1bHRzIGZyb20gYWxsIHN1YnRhYmxlcyBpcyByZXR1cm5lZFxuICAgICAgICAgICAgaWYgKHRhYmxlLmNvdmVyYWdlLm92ZXJyaWRlKSByZXMgPSB2YWw7XG4gICAgICAgICAgICBlbHNlIHJlcyArPSB2YWw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZm9udCl7XG4gICAgICAgIHRoaXMua2VybiA9IGZvbnQua2VybjtcbiAgICB9XG59XG5cblxuXG5jbGFzcyAkMGE0YmRmZWI2ZGZkNmY1ZSRleHBvcnQkMmUyYmNkODczOWFlMDM5IHtcbiAgICBwb3NpdGlvbkdseXBocyhnbHlwaHMsIHBvc2l0aW9ucykge1xuICAgICAgICAvLyBmaW5kIGVhY2ggYmFzZSArIG1hcmsgY2x1c3RlciwgYW5kIHBvc2l0aW9uIHRoZSBtYXJrcyByZWxhdGl2ZSB0byB0aGUgYmFzZVxuICAgICAgICBsZXQgY2x1c3RlclN0YXJ0ID0gMDtcbiAgICAgICAgbGV0IGNsdXN0ZXJFbmQgPSAwO1xuICAgICAgICBmb3IobGV0IGluZGV4ID0gMDsgaW5kZXggPCBnbHlwaHMubGVuZ3RoOyBpbmRleCsrKXtcbiAgICAgICAgICAgIGxldCBnbHlwaCA9IGdseXBoc1tpbmRleF07XG4gICAgICAgICAgICBpZiAoZ2x5cGguaXNNYXJrKSBjbHVzdGVyRW5kID0gaW5kZXg7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoY2x1c3RlclN0YXJ0ICE9PSBjbHVzdGVyRW5kKSB0aGlzLnBvc2l0aW9uQ2x1c3RlcihnbHlwaHMsIHBvc2l0aW9ucywgY2x1c3RlclN0YXJ0LCBjbHVzdGVyRW5kKTtcbiAgICAgICAgICAgICAgICBjbHVzdGVyU3RhcnQgPSBjbHVzdGVyRW5kID0gaW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNsdXN0ZXJTdGFydCAhPT0gY2x1c3RlckVuZCkgdGhpcy5wb3NpdGlvbkNsdXN0ZXIoZ2x5cGhzLCBwb3NpdGlvbnMsIGNsdXN0ZXJTdGFydCwgY2x1c3RlckVuZCk7XG4gICAgICAgIHJldHVybiBwb3NpdGlvbnM7XG4gICAgfVxuICAgIHBvc2l0aW9uQ2x1c3RlcihnbHlwaHMsIHBvc2l0aW9ucywgY2x1c3RlclN0YXJ0LCBjbHVzdGVyRW5kKSB7XG4gICAgICAgIGxldCBiYXNlID0gZ2x5cGhzW2NsdXN0ZXJTdGFydF07XG4gICAgICAgIGxldCBiYXNlQm94ID0gYmFzZS5jYm94LmNvcHkoKTtcbiAgICAgICAgLy8gYWRqdXN0IGJvdW5kaW5nIGJveCBmb3IgbGlnYXR1cmUgZ2x5cGhzXG4gICAgICAgIGlmIChiYXNlLmNvZGVQb2ludHMubGVuZ3RoID4gMSkgLy8gTFRSLiBUT0RPOiBSVEwgc3VwcG9ydC5cbiAgICAgICAgYmFzZUJveC5taW5YICs9IChiYXNlLmNvZGVQb2ludHMubGVuZ3RoIC0gMSkgKiBiYXNlQm94LndpZHRoIC8gYmFzZS5jb2RlUG9pbnRzLmxlbmd0aDtcbiAgICAgICAgbGV0IHhPZmZzZXQgPSAtcG9zaXRpb25zW2NsdXN0ZXJTdGFydF0ueEFkdmFuY2U7XG4gICAgICAgIGxldCB5T2Zmc2V0ID0gMDtcbiAgICAgICAgbGV0IHlHYXAgPSB0aGlzLmZvbnQudW5pdHNQZXJFbSAvIDE2O1xuICAgICAgICAvLyBwb3NpdGlvbiBlYWNoIG9mIHRoZSBtYXJrIGdseXBocyByZWxhdGl2ZSB0byB0aGUgYmFzZSBnbHlwaFxuICAgICAgICBmb3IobGV0IGluZGV4ID0gY2x1c3RlclN0YXJ0ICsgMTsgaW5kZXggPD0gY2x1c3RlckVuZDsgaW5kZXgrKyl7XG4gICAgICAgICAgICBsZXQgbWFyayA9IGdseXBoc1tpbmRleF07XG4gICAgICAgICAgICBsZXQgbWFya0JveCA9IG1hcmsuY2JveDtcbiAgICAgICAgICAgIGxldCBwb3NpdGlvbiA9IHBvc2l0aW9uc1tpbmRleF07XG4gICAgICAgICAgICBsZXQgY29tYmluaW5nQ2xhc3MgPSB0aGlzLmdldENvbWJpbmluZ0NsYXNzKG1hcmsuY29kZVBvaW50c1swXSk7XG4gICAgICAgICAgICBpZiAoY29tYmluaW5nQ2xhc3MgIT09ICdOb3RfUmVvcmRlcmVkJykge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uLnhPZmZzZXQgPSBwb3NpdGlvbi55T2Zmc2V0ID0gMDtcbiAgICAgICAgICAgICAgICAvLyB4IHBvc2l0aW9uaW5nXG4gICAgICAgICAgICAgICAgc3dpdGNoKGNvbWJpbmluZ0NsYXNzKXtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnRG91YmxlX0Fib3ZlJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnRG91YmxlX0JlbG93JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIExUUi4gVE9ETzogUlRMIHN1cHBvcnQuXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi54T2Zmc2V0ICs9IGJhc2VCb3gubWluWCAtIG1hcmtCb3gud2lkdGggLyAyIC0gbWFya0JveC5taW5YO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0F0dGFjaGVkX0JlbG93X0xlZnQnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCZWxvd19MZWZ0JzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQWJvdmVfTGVmdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsZWZ0IGFsaWduXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi54T2Zmc2V0ICs9IGJhc2VCb3gubWluWCAtIG1hcmtCb3gubWluWDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdBdHRhY2hlZF9BYm92ZV9SaWdodCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0JlbG93X1JpZ2h0JzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQWJvdmVfUmlnaHQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmlnaHQgYWxpZ25cbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLnhPZmZzZXQgKz0gYmFzZUJveC5tYXhYIC0gbWFya0JveC53aWR0aCAtIG1hcmtCb3gubWluWDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2VudGVyIGFsaWduXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi54T2Zmc2V0ICs9IGJhc2VCb3gubWluWCArIChiYXNlQm94LndpZHRoIC0gbWFya0JveC53aWR0aCkgLyAyIC0gbWFya0JveC5taW5YO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyB5IHBvc2l0aW9uaW5nXG4gICAgICAgICAgICAgICAgc3dpdGNoKGNvbWJpbmluZ0NsYXNzKXtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnRG91YmxlX0JlbG93JzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQmVsb3dfTGVmdCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0JlbG93JzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQmVsb3dfUmlnaHQnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdBdHRhY2hlZF9CZWxvd19MZWZ0JzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQXR0YWNoZWRfQmVsb3cnOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIGEgc21hbGwgZ2FwIGJldHdlZW4gdGhlIGdseXBocyBpZiB0aGV5IGFyZSBub3QgYXR0YWNoZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21iaW5pbmdDbGFzcyA9PT0gJ0F0dGFjaGVkX0JlbG93X0xlZnQnIHx8IGNvbWJpbmluZ0NsYXNzID09PSAnQXR0YWNoZWRfQmVsb3cnKSBiYXNlQm94Lm1pblkgKz0geUdhcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLnlPZmZzZXQgPSAtYmFzZUJveC5taW5ZIC0gbWFya0JveC5tYXhZO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZUJveC5taW5ZICs9IG1hcmtCb3guaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0RvdWJsZV9BYm92ZSc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0Fib3ZlX0xlZnQnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdBYm92ZSc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0Fib3ZlX1JpZ2h0JzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQXR0YWNoZWRfQWJvdmUnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdBdHRhY2hlZF9BYm92ZV9SaWdodCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgYSBzbWFsbCBnYXAgYmV0d2VlbiB0aGUgZ2x5cGhzIGlmIHRoZXkgYXJlIG5vdCBhdHRhY2hlZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbWJpbmluZ0NsYXNzID09PSAnQXR0YWNoZWRfQWJvdmUnIHx8IGNvbWJpbmluZ0NsYXNzID09PSAnQXR0YWNoZWRfQWJvdmVfUmlnaHQnKSBiYXNlQm94Lm1heFkgKz0geUdhcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLnlPZmZzZXQgPSBiYXNlQm94Lm1heFkgLSBtYXJrQm94Lm1pblk7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYXNlQm94Lm1heFkgKz0gbWFya0JveC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcG9zaXRpb24ueEFkdmFuY2UgPSBwb3NpdGlvbi55QWR2YW5jZSA9IDA7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24ueE9mZnNldCArPSB4T2Zmc2V0O1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uLnlPZmZzZXQgKz0geU9mZnNldDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeE9mZnNldCAtPSBwb3NpdGlvbi54QWR2YW5jZTtcbiAgICAgICAgICAgICAgICB5T2Zmc2V0IC09IHBvc2l0aW9uLnlBZHZhbmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZ2V0Q29tYmluaW5nQ2xhc3MoY29kZVBvaW50KSB7XG4gICAgICAgIGxldCBjb21iaW5pbmdDbGFzcyA9ICgwLCAkNTJaSWYkZ2V0Q29tYmluaW5nQ2xhc3MpKGNvZGVQb2ludCk7XG4gICAgICAgIC8vIFRoYWkgLyBMYW8gbmVlZCBzb21lIHBlci1jaGFyYWN0ZXIgd29ya1xuICAgICAgICBpZiAoKGNvZGVQb2ludCAmIC0yNTYpID09PSAweDBlMDApIHtcbiAgICAgICAgICAgIGlmIChjb21iaW5pbmdDbGFzcyA9PT0gJ05vdF9SZW9yZGVyZWQnKSBzd2l0Y2goY29kZVBvaW50KXtcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGUzMTpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGUzNDpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGUzNTpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGUzNjpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGUzNzpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGU0NzpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGU0YzpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGUzZDpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGU0ZTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdBYm92ZV9SaWdodCc7XG4gICAgICAgICAgICAgICAgY2FzZSAweDBlYjE6XG4gICAgICAgICAgICAgICAgY2FzZSAweDBlYjQ6XG4gICAgICAgICAgICAgICAgY2FzZSAweDBlYjU6XG4gICAgICAgICAgICAgICAgY2FzZSAweDBlYjY6XG4gICAgICAgICAgICAgICAgY2FzZSAweDBlYjc6XG4gICAgICAgICAgICAgICAgY2FzZSAweDBlYmI6XG4gICAgICAgICAgICAgICAgY2FzZSAweDBlY2M6XG4gICAgICAgICAgICAgICAgY2FzZSAweDBlY2Q6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnQWJvdmUnO1xuICAgICAgICAgICAgICAgIGNhc2UgMHgwZWJjOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0JlbG93JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvZGVQb2ludCA9PT0gMHgwZTNhKSByZXR1cm4gJ0JlbG93X1JpZ2h0JztcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2goY29tYmluaW5nQ2xhc3Mpe1xuICAgICAgICAgICAgLy8gSGVicmV3XG4gICAgICAgICAgICBjYXNlICdDQ0MxMCc6XG4gICAgICAgICAgICBjYXNlICdDQ0MxMSc6XG4gICAgICAgICAgICBjYXNlICdDQ0MxMic6XG4gICAgICAgICAgICBjYXNlICdDQ0MxMyc6XG4gICAgICAgICAgICBjYXNlICdDQ0MxNCc6XG4gICAgICAgICAgICBjYXNlICdDQ0MxNSc6XG4gICAgICAgICAgICBjYXNlICdDQ0MxNic6XG4gICAgICAgICAgICBjYXNlICdDQ0MxNyc6XG4gICAgICAgICAgICBjYXNlICdDQ0MxOCc6XG4gICAgICAgICAgICBjYXNlICdDQ0MyMCc6XG4gICAgICAgICAgICBjYXNlICdDQ0MyMic6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdCZWxvdyc7XG4gICAgICAgICAgICBjYXNlICdDQ0MyMyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdBdHRhY2hlZF9BYm92ZSc7XG4gICAgICAgICAgICBjYXNlICdDQ0MyNCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdBYm92ZV9SaWdodCc7XG4gICAgICAgICAgICBjYXNlICdDQ0MyNSc6XG4gICAgICAgICAgICBjYXNlICdDQ0MxOSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdBYm92ZV9MZWZ0JztcbiAgICAgICAgICAgIGNhc2UgJ0NDQzI2JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0Fib3ZlJztcbiAgICAgICAgICAgIGNhc2UgJ0NDQzIxJzpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8vIEFyYWJpYyBhbmQgU3lyaWFjXG4gICAgICAgICAgICBjYXNlICdDQ0MyNyc6XG4gICAgICAgICAgICBjYXNlICdDQ0MyOCc6XG4gICAgICAgICAgICBjYXNlICdDQ0MzMCc6XG4gICAgICAgICAgICBjYXNlICdDQ0MzMSc6XG4gICAgICAgICAgICBjYXNlICdDQ0MzMyc6XG4gICAgICAgICAgICBjYXNlICdDQ0MzNCc6XG4gICAgICAgICAgICBjYXNlICdDQ0MzNSc6XG4gICAgICAgICAgICBjYXNlICdDQ0MzNic6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdBYm92ZSc7XG4gICAgICAgICAgICBjYXNlICdDQ0MyOSc6XG4gICAgICAgICAgICBjYXNlICdDQ0MzMic6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdCZWxvdyc7XG4gICAgICAgICAgICAvLyBUaGFpXG4gICAgICAgICAgICBjYXNlICdDQ0MxMDMnOlxuICAgICAgICAgICAgICAgIHJldHVybiAnQmVsb3dfUmlnaHQnO1xuICAgICAgICAgICAgY2FzZSAnQ0NDMTA3JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0Fib3ZlX1JpZ2h0JztcbiAgICAgICAgICAgIC8vIExhb1xuICAgICAgICAgICAgY2FzZSAnQ0NDMTE4JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0JlbG93JztcbiAgICAgICAgICAgIGNhc2UgJ0NDQzEyMic6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdBYm92ZSc7XG4gICAgICAgICAgICAvLyBUaWJldGFuXG4gICAgICAgICAgICBjYXNlICdDQ0MxMjknOlxuICAgICAgICAgICAgY2FzZSAnQ0NDMTMyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0JlbG93JztcbiAgICAgICAgICAgIGNhc2UgJ0NDQzEzMCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdBYm92ZSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbWJpbmluZ0NsYXNzO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihmb250KXtcbiAgICAgICAgdGhpcy5mb250ID0gZm9udDtcbiAgICB9XG59XG5cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgZ2x5cGggYm91bmRpbmcgYm94XG4gKi8gY2xhc3MgJGYzNDYwMGFiOWQ3ZjcwZDgkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSB7XG4gICAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiB0aGUgYm91bmRpbmcgYm94XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqLyBnZXQgd2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heFggLSB0aGlzLm1pblg7XG4gICAgfVxuICAgIC8qKlxuICAgKiBUaGUgaGVpZ2h0IG9mIHRoZSBib3VuZGluZyBib3hcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovIGdldCBoZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heFkgLSB0aGlzLm1pblk7XG4gICAgfVxuICAgIGFkZFBvaW50KHgsIHkpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKHgpICE9PSBJbmZpbml0eSkge1xuICAgICAgICAgICAgaWYgKHggPCB0aGlzLm1pblgpIHRoaXMubWluWCA9IHg7XG4gICAgICAgICAgICBpZiAoeCA+IHRoaXMubWF4WCkgdGhpcy5tYXhYID0geDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoTWF0aC5hYnMoeSkgIT09IEluZmluaXR5KSB7XG4gICAgICAgICAgICBpZiAoeSA8IHRoaXMubWluWSkgdGhpcy5taW5ZID0geTtcbiAgICAgICAgICAgIGlmICh5ID4gdGhpcy5tYXhZKSB0aGlzLm1heFkgPSB5O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvcHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgJGYzNDYwMGFiOWQ3ZjcwZDgkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSh0aGlzLm1pblgsIHRoaXMubWluWSwgdGhpcy5tYXhYLCB0aGlzLm1heFkpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihtaW5YID0gSW5maW5pdHksIG1pblkgPSBJbmZpbml0eSwgbWF4WCA9IC1JbmZpbml0eSwgbWF4WSA9IC1JbmZpbml0eSl7XG4gICAgICAgIC8qKlxuICAgICAqIFRoZSBtaW5pbXVtIFggcG9zaXRpb24gaW4gdGhlIGJvdW5kaW5nIGJveFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovIHRoaXMubWluWCA9IG1pblg7XG4gICAgICAgIC8qKlxuICAgICAqIFRoZSBtaW5pbXVtIFkgcG9zaXRpb24gaW4gdGhlIGJvdW5kaW5nIGJveFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovIHRoaXMubWluWSA9IG1pblk7XG4gICAgICAgIC8qKlxuICAgICAqIFRoZSBtYXhtaW11bSBYIHBvc2l0aW9uIGluIHRoZSBib3VuZGluZyBib3hcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqLyB0aGlzLm1heFggPSBtYXhYO1xuICAgICAgICAvKipcbiAgICAgKiBUaGUgbWF4bWltdW0gWSBwb3NpdGlvbiBpbiB0aGUgYm91bmRpbmcgYm94XG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi8gdGhpcy5tYXhZID0gbWF4WTtcbiAgICB9XG59XG5cblxuXG4vLyBUaGlzIG1hcHMgdGhlIFVuaWNvZGUgU2NyaXB0IHByb3BlcnR5IHRvIGFuIE9wZW5UeXBlIHNjcmlwdCB0YWdcbi8vIERhdGEgZnJvbSBodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vdHlwb2dyYXBoeS9vdHNwZWMvc2NyaXB0dGFncy5odG1cbi8vIGFuZCBodHRwOi8vd3d3LnVuaWNvZGUub3JnL1B1YmxpYy9VTklEQVRBL1Byb3BlcnR5VmFsdWVBbGlhc2VzLnR4dC5cbmNvbnN0ICQxMzBkMWE2NDJlYmNkMmI3JHZhciRVTklDT0RFX1NDUklQVFMgPSB7XG4gICAgQ2F1Y2FzaWFuX0FsYmFuaWFuOiAnYWdoYicsXG4gICAgQXJhYmljOiAnYXJhYicsXG4gICAgSW1wZXJpYWxfQXJhbWFpYzogJ2FybWknLFxuICAgIEFybWVuaWFuOiAnYXJtbicsXG4gICAgQXZlc3RhbjogJ2F2c3QnLFxuICAgIEJhbGluZXNlOiAnYmFsaScsXG4gICAgQmFtdW06ICdiYW11JyxcbiAgICBCYXNzYV9WYWg6ICdiYXNzJyxcbiAgICBCYXRhazogJ2JhdGsnLFxuICAgIEJlbmdhbGk6IFtcbiAgICAgICAgJ2JuZzInLFxuICAgICAgICAnYmVuZydcbiAgICBdLFxuICAgIEJvcG9tb2ZvOiAnYm9wbycsXG4gICAgQnJhaG1pOiAnYnJhaCcsXG4gICAgQnJhaWxsZTogJ2JyYWknLFxuICAgIEJ1Z2luZXNlOiAnYnVnaScsXG4gICAgQnVoaWQ6ICdidWhkJyxcbiAgICBDaGFrbWE6ICdjYWttJyxcbiAgICBDYW5hZGlhbl9BYm9yaWdpbmFsOiAnY2FucycsXG4gICAgQ2FyaWFuOiAnY2FyaScsXG4gICAgQ2hhbTogJ2NoYW0nLFxuICAgIENoZXJva2VlOiAnY2hlcicsXG4gICAgQ29wdGljOiAnY29wdCcsXG4gICAgQ3lwcmlvdDogJ2NwcnQnLFxuICAgIEN5cmlsbGljOiAnY3lybCcsXG4gICAgRGV2YW5hZ2FyaTogW1xuICAgICAgICAnZGV2MicsXG4gICAgICAgICdkZXZhJ1xuICAgIF0sXG4gICAgRGVzZXJldDogJ2RzcnQnLFxuICAgIER1cGxveWFuOiAnZHVwbCcsXG4gICAgRWd5cHRpYW5fSGllcm9nbHlwaHM6ICdlZ3lwJyxcbiAgICBFbGJhc2FuOiAnZWxiYScsXG4gICAgRXRoaW9waWM6ICdldGhpJyxcbiAgICBHZW9yZ2lhbjogJ2dlb3InLFxuICAgIEdsYWdvbGl0aWM6ICdnbGFnJyxcbiAgICBHb3RoaWM6ICdnb3RoJyxcbiAgICBHcmFudGhhOiAnZ3JhbicsXG4gICAgR3JlZWs6ICdncmVrJyxcbiAgICBHdWphcmF0aTogW1xuICAgICAgICAnZ2pyMicsXG4gICAgICAgICdndWpyJ1xuICAgIF0sXG4gICAgR3VybXVraGk6IFtcbiAgICAgICAgJ2d1cjInLFxuICAgICAgICAnZ3VydSdcbiAgICBdLFxuICAgIEhhbmd1bDogJ2hhbmcnLFxuICAgIEhhbjogJ2hhbmknLFxuICAgIEhhbnVub286ICdoYW5vJyxcbiAgICBIZWJyZXc6ICdoZWJyJyxcbiAgICBIaXJhZ2FuYTogJ2hpcmEnLFxuICAgIFBhaGF3aF9IbW9uZzogJ2htbmcnLFxuICAgIEthdGFrYW5hX09yX0hpcmFnYW5hOiAnaHJrdCcsXG4gICAgT2xkX0l0YWxpYzogJ2l0YWwnLFxuICAgIEphdmFuZXNlOiAnamF2YScsXG4gICAgS2F5YWhfTGk6ICdrYWxpJyxcbiAgICBLYXRha2FuYTogJ2thbmEnLFxuICAgIEtoYXJvc2h0aGk6ICdraGFyJyxcbiAgICBLaG1lcjogJ2tobXInLFxuICAgIEtob2praTogJ2tob2onLFxuICAgIEthbm5hZGE6IFtcbiAgICAgICAgJ2tuZDInLFxuICAgICAgICAna25kYSdcbiAgICBdLFxuICAgIEthaXRoaTogJ2t0aGknLFxuICAgIFRhaV9UaGFtOiAnbGFuYScsXG4gICAgTGFvOiAnbGFvICcsXG4gICAgTGF0aW46ICdsYXRuJyxcbiAgICBMZXBjaGE6ICdsZXBjJyxcbiAgICBMaW1idTogJ2xpbWInLFxuICAgIExpbmVhcl9BOiAnbGluYScsXG4gICAgTGluZWFyX0I6ICdsaW5iJyxcbiAgICBMaXN1OiAnbGlzdScsXG4gICAgTHljaWFuOiAnbHljaScsXG4gICAgTHlkaWFuOiAnbHlkaScsXG4gICAgTWFoYWphbmk6ICdtYWhqJyxcbiAgICBNYW5kYWljOiAnbWFuZCcsXG4gICAgTWFuaWNoYWVhbjogJ21hbmknLFxuICAgIE1lbmRlX0tpa2FrdWk6ICdtZW5kJyxcbiAgICBNZXJvaXRpY19DdXJzaXZlOiAnbWVyYycsXG4gICAgTWVyb2l0aWNfSGllcm9nbHlwaHM6ICdtZXJvJyxcbiAgICBNYWxheWFsYW06IFtcbiAgICAgICAgJ21sbTInLFxuICAgICAgICAnbWx5bSdcbiAgICBdLFxuICAgIE1vZGk6ICdtb2RpJyxcbiAgICBNb25nb2xpYW46ICdtb25nJyxcbiAgICBNcm86ICdtcm9vJyxcbiAgICBNZWV0ZWlfTWF5ZWs6ICdtdGVpJyxcbiAgICBNeWFubWFyOiBbXG4gICAgICAgICdteW0yJyxcbiAgICAgICAgJ215bXInXG4gICAgXSxcbiAgICBPbGRfTm9ydGhfQXJhYmlhbjogJ25hcmInLFxuICAgIE5hYmF0YWVhbjogJ25iYXQnLFxuICAgIE5rbzogJ25rbyAnLFxuICAgIE9naGFtOiAnb2dhbScsXG4gICAgT2xfQ2hpa2k6ICdvbGNrJyxcbiAgICBPbGRfVHVya2ljOiAnb3JraCcsXG4gICAgT3JpeWE6IFtcbiAgICAgICAgJ29yeTInLFxuICAgICAgICAnb3J5YSdcbiAgICBdLFxuICAgIE9zbWFueWE6ICdvc21hJyxcbiAgICBQYWxteXJlbmU6ICdwYWxtJyxcbiAgICBQYXVfQ2luX0hhdTogJ3BhdWMnLFxuICAgIE9sZF9QZXJtaWM6ICdwZXJtJyxcbiAgICBQaGFnc19QYTogJ3BoYWcnLFxuICAgIEluc2NyaXB0aW9uYWxfUGFobGF2aTogJ3BobGknLFxuICAgIFBzYWx0ZXJfUGFobGF2aTogJ3BobHAnLFxuICAgIFBob2VuaWNpYW46ICdwaG54JyxcbiAgICBNaWFvOiAncGxyZCcsXG4gICAgSW5zY3JpcHRpb25hbF9QYXJ0aGlhbjogJ3BydGknLFxuICAgIFJlamFuZzogJ3JqbmcnLFxuICAgIFJ1bmljOiAncnVucicsXG4gICAgU2FtYXJpdGFuOiAnc2FtcicsXG4gICAgT2xkX1NvdXRoX0FyYWJpYW46ICdzYXJiJyxcbiAgICBTYXVyYXNodHJhOiAnc2F1cicsXG4gICAgU2hhdmlhbjogJ3NoYXcnLFxuICAgIFNoYXJhZGE6ICdzaHJkJyxcbiAgICBTaWRkaGFtOiAnc2lkZCcsXG4gICAgS2h1ZGF3YWRpOiAnc2luZCcsXG4gICAgU2luaGFsYTogJ3NpbmgnLFxuICAgIFNvcmFfU29tcGVuZzogJ3NvcmEnLFxuICAgIFN1bmRhbmVzZTogJ3N1bmQnLFxuICAgIFN5bG90aV9OYWdyaTogJ3N5bG8nLFxuICAgIFN5cmlhYzogJ3N5cmMnLFxuICAgIFRhZ2JhbndhOiAndGFnYicsXG4gICAgVGFrcmk6ICd0YWtyJyxcbiAgICBUYWlfTGU6ICd0YWxlJyxcbiAgICBOZXdfVGFpX0x1ZTogJ3RhbHUnLFxuICAgIFRhbWlsOiBbXG4gICAgICAgICd0bWwyJyxcbiAgICAgICAgJ3RhbWwnXG4gICAgXSxcbiAgICBUYWlfVmlldDogJ3RhdnQnLFxuICAgIFRlbHVndTogW1xuICAgICAgICAndGVsMicsXG4gICAgICAgICd0ZWx1J1xuICAgIF0sXG4gICAgVGlmaW5hZ2g6ICd0Zm5nJyxcbiAgICBUYWdhbG9nOiAndGdsZycsXG4gICAgVGhhYW5hOiAndGhhYScsXG4gICAgVGhhaTogJ3RoYWknLFxuICAgIFRpYmV0YW46ICd0aWJ0JyxcbiAgICBUaXJodXRhOiAndGlyaCcsXG4gICAgVWdhcml0aWM6ICd1Z2FyJyxcbiAgICBWYWk6ICd2YWkgJyxcbiAgICBXYXJhbmdfQ2l0aTogJ3dhcmEnLFxuICAgIE9sZF9QZXJzaWFuOiAneHBlbycsXG4gICAgQ3VuZWlmb3JtOiAneHN1eCcsXG4gICAgWWk6ICd5aSAgJyxcbiAgICBJbmhlcml0ZWQ6ICd6aW5oJyxcbiAgICBDb21tb246ICd6eXl5JyxcbiAgICBVbmtub3duOiAnenp6eidcbn07XG5jb25zdCAkMTMwZDFhNjQyZWJjZDJiNyR2YXIkT1BFTlRZUEVfU0NSSVBUUyA9IHt9O1xuZm9yKGxldCBzY3JpcHQgaW4gJDEzMGQxYTY0MmViY2QyYjckdmFyJFVOSUNPREVfU0NSSVBUUyl7XG4gICAgbGV0IHRhZyA9ICQxMzBkMWE2NDJlYmNkMmI3JHZhciRVTklDT0RFX1NDUklQVFNbc2NyaXB0XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0YWcpKSBmb3IgKGxldCB0IG9mIHRhZykkMTMwZDFhNjQyZWJjZDJiNyR2YXIkT1BFTlRZUEVfU0NSSVBUU1t0XSA9IHNjcmlwdDtcbiAgICBlbHNlICQxMzBkMWE2NDJlYmNkMmI3JHZhciRPUEVOVFlQRV9TQ1JJUFRTW3RhZ10gPSBzY3JpcHQ7XG59XG5mdW5jdGlvbiAkMTMwZDFhNjQyZWJjZDJiNyRleHBvcnQkYjMyZjBiNWY2OWQ2NWU1MShzY3JpcHQpIHtcbiAgICByZXR1cm4gJDEzMGQxYTY0MmViY2QyYjckdmFyJFVOSUNPREVfU0NSSVBUU1tzY3JpcHRdO1xufVxuZnVuY3Rpb24gJDEzMGQxYTY0MmViY2QyYjckZXhwb3J0JGNlNTBlODJmMTJhODI3YTQodGFnKSB7XG4gICAgcmV0dXJuICQxMzBkMWE2NDJlYmNkMmI3JHZhciRPUEVOVFlQRV9TQ1JJUFRTW3RhZ107XG59XG5mdW5jdGlvbiAkMTMwZDFhNjQyZWJjZDJiNyRleHBvcnQkZTVjYjI1ZTIwNGZiODQ1MChzdHJpbmcpIHtcbiAgICBsZXQgbGVuID0gc3RyaW5nLmxlbmd0aDtcbiAgICBsZXQgaWR4ID0gMDtcbiAgICB3aGlsZShpZHggPCBsZW4pe1xuICAgICAgICBsZXQgY29kZSA9IHN0cmluZy5jaGFyQ29kZUF0KGlkeCsrKTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhIGhpZ2ggc3Vycm9nYXRlXG4gICAgICAgIGlmICgweGQ4MDAgPD0gY29kZSAmJiBjb2RlIDw9IDB4ZGJmZiAmJiBpZHggPCBsZW4pIHtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gc3RyaW5nLmNoYXJDb2RlQXQoaWR4KTtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgYSBsb3cgc3Vycm9nYXRlXG4gICAgICAgICAgICBpZiAoMHhkYzAwIDw9IG5leHQgJiYgbmV4dCA8PSAweGRmZmYpIHtcbiAgICAgICAgICAgICAgICBpZHgrKztcbiAgICAgICAgICAgICAgICBjb2RlID0gKChjb2RlICYgMHgzRkYpIDw8IDEwKSArIChuZXh0ICYgMHgzRkYpICsgMHgxMDAwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgc2NyaXB0ID0gKDAsICQ1MlpJZiRnZXRTY3JpcHQpKGNvZGUpO1xuICAgICAgICBpZiAoc2NyaXB0ICE9PSAnQ29tbW9uJyAmJiBzY3JpcHQgIT09ICdJbmhlcml0ZWQnICYmIHNjcmlwdCAhPT0gJ1Vua25vd24nKSByZXR1cm4gJDEzMGQxYTY0MmViY2QyYjckdmFyJFVOSUNPREVfU0NSSVBUU1tzY3JpcHRdO1xuICAgIH1cbiAgICByZXR1cm4gJDEzMGQxYTY0MmViY2QyYjckdmFyJFVOSUNPREVfU0NSSVBUUy5Vbmtub3duO1xufVxuZnVuY3Rpb24gJDEzMGQxYTY0MmViY2QyYjckZXhwb3J0JDE2ZmFiMDc1N2NmYzIyM2QoY29kZVBvaW50cykge1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBjb2RlUG9pbnRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgbGV0IGNvZGVQb2ludCA9IGNvZGVQb2ludHNbaV07XG4gICAgICAgIGxldCBzY3JpcHQgPSAoMCwgJDUyWklmJGdldFNjcmlwdCkoY29kZVBvaW50KTtcbiAgICAgICAgaWYgKHNjcmlwdCAhPT0gJ0NvbW1vbicgJiYgc2NyaXB0ICE9PSAnSW5oZXJpdGVkJyAmJiBzY3JpcHQgIT09ICdVbmtub3duJykgcmV0dXJuICQxMzBkMWE2NDJlYmNkMmI3JHZhciRVTklDT0RFX1NDUklQVFNbc2NyaXB0XTtcbiAgICB9XG4gICAgcmV0dXJuICQxMzBkMWE2NDJlYmNkMmI3JHZhciRVTklDT0RFX1NDUklQVFMuVW5rbm93bjtcbn1cbi8vIFRoZSBzY3JpcHRzIGluIHRoaXMgbWFwIGFyZSB3cml0dGVuIGZyb20gcmlnaHQgdG8gbGVmdFxuY29uc3QgJDEzMGQxYTY0MmViY2QyYjckdmFyJFJUTCA9IHtcbiAgICBhcmFiOiB0cnVlLFxuICAgIGhlYnI6IHRydWUsXG4gICAgc3lyYzogdHJ1ZSxcbiAgICB0aGFhOiB0cnVlLFxuICAgIGNwcnQ6IHRydWUsXG4gICAga2hhcjogdHJ1ZSxcbiAgICBwaG54OiB0cnVlLFxuICAgICdua28gJzogdHJ1ZSxcbiAgICBseWRpOiB0cnVlLFxuICAgIGF2c3Q6IHRydWUsXG4gICAgYXJtaTogdHJ1ZSxcbiAgICBwaGxpOiB0cnVlLFxuICAgIHBydGk6IHRydWUsXG4gICAgc2FyYjogdHJ1ZSxcbiAgICBvcmtoOiB0cnVlLFxuICAgIHNhbXI6IHRydWUsXG4gICAgbWFuZDogdHJ1ZSxcbiAgICBtZXJjOiB0cnVlLFxuICAgIG1lcm86IHRydWUsXG4gICAgLy8gVW5pY29kZSA3LjAgKG5vdCBsaXN0ZWQgb24gaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3R5cG9ncmFwaHkvb3RzcGVjL3NjcmlwdHRhZ3MuaHRtKVxuICAgIG1hbmk6IHRydWUsXG4gICAgbWVuZDogdHJ1ZSxcbiAgICBuYmF0OiB0cnVlLFxuICAgIG5hcmI6IHRydWUsXG4gICAgcGFsbTogdHJ1ZSxcbiAgICBwaGxwOiB0cnVlIC8vIFBzYWx0ZXIgUGFobGF2aVxufTtcbmZ1bmN0aW9uICQxMzBkMWE2NDJlYmNkMmI3JGV4cG9ydCQ5ZmRkYjlkMGRkN2Q4YTU0KHNjcmlwdCkge1xuICAgIGlmICgkMTMwZDFhNjQyZWJjZDJiNyR2YXIkUlRMW3NjcmlwdF0pIHJldHVybiAncnRsJztcbiAgICByZXR1cm4gJ2x0cic7XG59XG5cblxuY2xhc3MgJGJlMDdiM2U5N2E0MjY4N2EkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSB7XG4gICAgLyoqXG4gICAqIFRoZSB0b3RhbCBhZHZhbmNlIHdpZHRoIG9mIHRoZSBydW4uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqLyBnZXQgYWR2YW5jZVdpZHRoKCkge1xuICAgICAgICBsZXQgd2lkdGggPSAwO1xuICAgICAgICBmb3IgKGxldCBwb3NpdGlvbiBvZiB0aGlzLnBvc2l0aW9ucyl3aWR0aCArPSBwb3NpdGlvbi54QWR2YW5jZTtcbiAgICAgICAgcmV0dXJuIHdpZHRoO1xuICAgIH1cbiAgICAvKipcbiAgKiBUaGUgdG90YWwgYWR2YW5jZSBoZWlnaHQgb2YgdGhlIHJ1bi5cbiAgKiBAdHlwZSB7bnVtYmVyfVxuICAqLyBnZXQgYWR2YW5jZUhlaWdodCgpIHtcbiAgICAgICAgbGV0IGhlaWdodCA9IDA7XG4gICAgICAgIGZvciAobGV0IHBvc2l0aW9uIG9mIHRoaXMucG9zaXRpb25zKWhlaWdodCArPSBwb3NpdGlvbi55QWR2YW5jZTtcbiAgICAgICAgcmV0dXJuIGhlaWdodDtcbiAgICB9XG4gICAgLyoqXG4gICogVGhlIGJvdW5kaW5nIGJveCBjb250YWluaW5nIGFsbCBnbHlwaHMgaW4gdGhlIHJ1bi5cbiAgKiBAdHlwZSB7QkJveH1cbiAgKi8gZ2V0IGJib3goKSB7XG4gICAgICAgIGxldCBiYm94ID0gbmV3ICgwLCAkZjM0NjAwYWI5ZDdmNzBkOCRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiAgICAgICAgbGV0IHggPSAwO1xuICAgICAgICBsZXQgeSA9IDA7XG4gICAgICAgIGZvcihsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuZ2x5cGhzLmxlbmd0aDsgaW5kZXgrKyl7XG4gICAgICAgICAgICBsZXQgZ2x5cGggPSB0aGlzLmdseXBoc1tpbmRleF07XG4gICAgICAgICAgICBsZXQgcCA9IHRoaXMucG9zaXRpb25zW2luZGV4XTtcbiAgICAgICAgICAgIGxldCBiID0gZ2x5cGguYmJveDtcbiAgICAgICAgICAgIGJib3guYWRkUG9pbnQoYi5taW5YICsgeCArIHAueE9mZnNldCwgYi5taW5ZICsgeSArIHAueU9mZnNldCk7XG4gICAgICAgICAgICBiYm94LmFkZFBvaW50KGIubWF4WCArIHggKyBwLnhPZmZzZXQsIGIubWF4WSArIHkgKyBwLnlPZmZzZXQpO1xuICAgICAgICAgICAgeCArPSBwLnhBZHZhbmNlO1xuICAgICAgICAgICAgeSArPSBwLnlBZHZhbmNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYm94O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihnbHlwaHMsIGZlYXR1cmVzLCBzY3JpcHQsIGxhbmd1YWdlLCBkaXJlY3Rpb24pe1xuICAgICAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBHbHlwaCBvYmplY3RzIGluIHRoZSBydW5cbiAgICAgKiBAdHlwZSB7R2x5cGhbXX1cbiAgICAgKi8gdGhpcy5nbHlwaHMgPSBnbHlwaHM7XG4gICAgICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIEdseXBoUG9zaXRpb24gb2JqZWN0cyBmb3IgZWFjaCBnbHlwaCBpbiB0aGUgcnVuXG4gICAgICogQHR5cGUge0dseXBoUG9zaXRpb25bXX1cbiAgICAgKi8gdGhpcy5wb3NpdGlvbnMgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgKiBUaGUgc2NyaXB0IHRoYXQgd2FzIHJlcXVlc3RlZCBmb3Igc2hhcGluZy4gVGhpcyB3YXMgZWl0aGVyIHBhc3NlZCBpbiBvciBkZXRlY3RlZCBhdXRvbWF0aWNhbGx5LlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovIHRoaXMuc2NyaXB0ID0gc2NyaXB0O1xuICAgICAgICAvKipcbiAgICAgKiBUaGUgbGFuZ3VhZ2UgcmVxdWVzdGVkIGZvciBzaGFwaW5nLCBhcyBwYXNzZWQgaW4uIElmIGBudWxsYCwgdGhlIGRlZmF1bHQgbGFuZ3VhZ2UgZm9yIHRoZVxuICAgICAqIHNjcmlwdCB3YXMgdXNlZC5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqLyB0aGlzLmxhbmd1YWdlID0gbGFuZ3VhZ2UgfHwgbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICogVGhlIGRpcmVjdGlvbiByZXF1ZXN0ZWQgZm9yIHNoYXBpbmcsIGFzIHBhc3NlZCBpbiAoZWl0aGVyIGx0ciBvciBydGwpLlxuICAgICAqIElmIGBudWxsYCwgdGhlIGRlZmF1bHQgZGlyZWN0aW9uIG9mIHRoZSBzY3JpcHQgaXMgdXNlZC5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqLyB0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbiB8fCAkMTMwZDFhNjQyZWJjZDJiNyRleHBvcnQkOWZkZGI5ZDBkZDdkOGE1NChzY3JpcHQpO1xuICAgICAgICAvKipcbiAgICAgKiBUaGUgZmVhdHVyZXMgcmVxdWVzdGVkIGR1cmluZyBzaGFwaW5nLiBUaGlzIGlzIGEgY29tYmluYXRpb24gb2YgdXNlclxuICAgICAqIHNwZWNpZmllZCBmZWF0dXJlcyBhbmQgZmVhdHVyZXMgY2hvc2VuIGJ5IHRoZSBzaGFwZXIuXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKi8gdGhpcy5mZWF0dXJlcyA9IHt9O1xuICAgICAgICAvLyBDb252ZXJ0IGZlYXR1cmVzIHRvIGFuIG9iamVjdFxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmZWF0dXJlcykpIGZvciAobGV0IHRhZyBvZiBmZWF0dXJlcyl0aGlzLmZlYXR1cmVzW3RhZ10gPSB0cnVlO1xuICAgICAgICBlbHNlIGlmICh0eXBlb2YgZmVhdHVyZXMgPT09ICdvYmplY3QnKSB0aGlzLmZlYXR1cmVzID0gZmVhdHVyZXM7XG4gICAgfVxufVxuXG5cbi8qKlxuICogUmVwcmVzZW50cyBwb3NpdGlvbmluZyBpbmZvcm1hdGlvbiBmb3IgYSBnbHlwaCBpbiBhIEdseXBoUnVuLlxuICovIGNsYXNzICQxYWM3NWQ5YTU1YjY3ZjAxJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIGNvbnN0cnVjdG9yKHhBZHZhbmNlID0gMCwgeUFkdmFuY2UgPSAwLCB4T2Zmc2V0ID0gMCwgeU9mZnNldCA9IDApe1xuICAgICAgICAvKipcbiAgICAgKiBUaGUgYW1vdW50IHRvIG1vdmUgdGhlIHZpcnR1YWwgcGVuIGluIHRoZSBYIGRpcmVjdGlvbiBhZnRlciByZW5kZXJpbmcgdGhpcyBnbHlwaC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqLyB0aGlzLnhBZHZhbmNlID0geEFkdmFuY2U7XG4gICAgICAgIC8qKlxuICAgICAqIFRoZSBhbW91bnQgdG8gbW92ZSB0aGUgdmlydHVhbCBwZW4gaW4gdGhlIFkgZGlyZWN0aW9uIGFmdGVyIHJlbmRlcmluZyB0aGlzIGdseXBoLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovIHRoaXMueUFkdmFuY2UgPSB5QWR2YW5jZTtcbiAgICAgICAgLyoqXG4gICAgICogVGhlIG9mZnNldCBmcm9tIHRoZSBwZW4gcG9zaXRpb24gaW4gdGhlIFggZGlyZWN0aW9uIGF0IHdoaWNoIHRvIHJlbmRlciB0aGlzIGdseXBoLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovIHRoaXMueE9mZnNldCA9IHhPZmZzZXQ7XG4gICAgICAgIC8qKlxuICAgICAqIFRoZSBvZmZzZXQgZnJvbSB0aGUgcGVuIHBvc2l0aW9uIGluIHRoZSBZIGRpcmVjdGlvbiBhdCB3aGljaCB0byByZW5kZXIgdGhpcyBnbHlwaC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqLyB0aGlzLnlPZmZzZXQgPSB5T2Zmc2V0O1xuICAgIH1cbn1cblxuXG5cbi8vIHNlZSBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZm9udHMvVHJ1ZVR5cGUtUmVmZXJlbmNlLU1hbnVhbC9STTA5L0FwcGVuZGl4Ri5odG1sXG4vLyBhbmQgL1N5c3RlbS9MaWJyYXJ5L0ZyYW1ld29ya3MvQ29yZVRleHQuZnJhbWV3b3JrL1ZlcnNpb25zL0EvSGVhZGVycy9TRk5UTGF5b3V0VHlwZXMuaCBvbiBhIE1hY1xuY29uc3QgJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmVzID0ge1xuICAgIGFsbFR5cG9ncmFwaGljRmVhdHVyZXM6IHtcbiAgICAgICAgY29kZTogMCxcbiAgICAgICAgZXhjbHVzaXZlOiBmYWxzZSxcbiAgICAgICAgYWxsVHlwZUZlYXR1cmVzOiAwXG4gICAgfSxcbiAgICBsaWdhdHVyZXM6IHtcbiAgICAgICAgY29kZTogMSxcbiAgICAgICAgZXhjbHVzaXZlOiBmYWxzZSxcbiAgICAgICAgcmVxdWlyZWRMaWdhdHVyZXM6IDAsXG4gICAgICAgIGNvbW1vbkxpZ2F0dXJlczogMixcbiAgICAgICAgcmFyZUxpZ2F0dXJlczogNCxcbiAgICAgICAgLy8gbG9nb3M6IDZcbiAgICAgICAgcmVidXNQaWN0dXJlczogOCxcbiAgICAgICAgZGlwaHRob25nTGlnYXR1cmVzOiAxMCxcbiAgICAgICAgc3F1YXJlZExpZ2F0dXJlczogMTIsXG4gICAgICAgIGFiYnJldlNxdWFyZWRMaWdhdHVyZXM6IDE0LFxuICAgICAgICBzeW1ib2xMaWdhdHVyZXM6IDE2LFxuICAgICAgICBjb250ZXh0dWFsTGlnYXR1cmVzOiAxOCxcbiAgICAgICAgaGlzdG9yaWNhbExpZ2F0dXJlczogMjBcbiAgICB9LFxuICAgIGN1cnNpdmVDb25uZWN0aW9uOiB7XG4gICAgICAgIGNvZGU6IDIsXG4gICAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgdW5jb25uZWN0ZWQ6IDAsXG4gICAgICAgIHBhcnRpYWxseUNvbm5lY3RlZDogMSxcbiAgICAgICAgY3Vyc2l2ZTogMlxuICAgIH0sXG4gICAgbGV0dGVyQ2FzZToge1xuICAgICAgICBjb2RlOiAzLFxuICAgICAgICBleGNsdXNpdmU6IHRydWVcbiAgICB9LFxuICAgIC8vIHVwcGVyQW5kTG93ZXJDYXNlOiAwICAgICAgICAgICMgZGVwcmVjYXRlZFxuICAgIC8vIGFsbENhcHM6IDEgICAgICAgICAgICAgICAgICAgICMgZGVwcmVjYXRlZFxuICAgIC8vIGFsbExvd2VyQ2FzZTogMiAgICAgICAgICAgICAgICMgZGVwcmVjYXRlZFxuICAgIC8vIHNtYWxsQ2FwczogMyAgICAgICAgICAgICAgICAgICMgZGVwcmVjYXRlZFxuICAgIC8vIGluaXRpYWxDYXBzOiA0ICAgICAgICAgICAgICAgICMgZGVwcmVjYXRlZFxuICAgIC8vIGluaXRpYWxDYXBzQW5kU21hbGxDYXBzOiA1ICAgICMgZGVwcmVjYXRlZFxuICAgIHZlcnRpY2FsU3Vic3RpdHV0aW9uOiB7XG4gICAgICAgIGNvZGU6IDQsXG4gICAgICAgIGV4Y2x1c2l2ZTogZmFsc2UsXG4gICAgICAgIHN1YnN0aXR1dGVWZXJ0aWNhbEZvcm1zOiAwXG4gICAgfSxcbiAgICBsaW5ndWlzdGljUmVhcnJhbmdlbWVudDoge1xuICAgICAgICBjb2RlOiA1LFxuICAgICAgICBleGNsdXNpdmU6IGZhbHNlLFxuICAgICAgICBsaW5ndWlzdGljUmVhcnJhbmdlbWVudDogMFxuICAgIH0sXG4gICAgbnVtYmVyU3BhY2luZzoge1xuICAgICAgICBjb2RlOiA2LFxuICAgICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICAgIG1vbm9zcGFjZWROdW1iZXJzOiAwLFxuICAgICAgICBwcm9wb3J0aW9uYWxOdW1iZXJzOiAxLFxuICAgICAgICB0aGlyZFdpZHRoTnVtYmVyczogMixcbiAgICAgICAgcXVhcnRlcldpZHRoTnVtYmVyczogM1xuICAgIH0sXG4gICAgc21hcnRTd2FzaDoge1xuICAgICAgICBjb2RlOiA4LFxuICAgICAgICBleGNsdXNpdmU6IGZhbHNlLFxuICAgICAgICB3b3JkSW5pdGlhbFN3YXNoZXM6IDAsXG4gICAgICAgIHdvcmRGaW5hbFN3YXNoZXM6IDIsXG4gICAgICAgIC8vIGxpbmVJbml0aWFsU3dhc2hlczogNFxuICAgICAgICAvLyBsaW5lRmluYWxTd2FzaGVzOiA2XG4gICAgICAgIG5vbkZpbmFsU3dhc2hlczogOFxuICAgIH0sXG4gICAgZGlhY3JpdGljczoge1xuICAgICAgICBjb2RlOiA5LFxuICAgICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICAgIHNob3dEaWFjcml0aWNzOiAwLFxuICAgICAgICBoaWRlRGlhY3JpdGljczogMSxcbiAgICAgICAgZGVjb21wb3NlRGlhY3JpdGljczogMlxuICAgIH0sXG4gICAgdmVydGljYWxQb3NpdGlvbjoge1xuICAgICAgICBjb2RlOiAxMCxcbiAgICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgICBub3JtYWxQb3NpdGlvbjogMCxcbiAgICAgICAgc3VwZXJpb3JzOiAxLFxuICAgICAgICBpbmZlcmlvcnM6IDIsXG4gICAgICAgIG9yZGluYWxzOiAzLFxuICAgICAgICBzY2llbnRpZmljSW5mZXJpb3JzOiA0XG4gICAgfSxcbiAgICBmcmFjdGlvbnM6IHtcbiAgICAgICAgY29kZTogMTEsXG4gICAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgbm9GcmFjdGlvbnM6IDAsXG4gICAgICAgIHZlcnRpY2FsRnJhY3Rpb25zOiAxLFxuICAgICAgICBkaWFnb25hbEZyYWN0aW9uczogMlxuICAgIH0sXG4gICAgb3ZlcmxhcHBpbmdDaGFyYWN0ZXJzOiB7XG4gICAgICAgIGNvZGU6IDEzLFxuICAgICAgICBleGNsdXNpdmU6IGZhbHNlLFxuICAgICAgICBwcmV2ZW50T3ZlcmxhcDogMFxuICAgIH0sXG4gICAgdHlwb2dyYXBoaWNFeHRyYXM6IHtcbiAgICAgICAgY29kZTogMTQsXG4gICAgICAgIGV4Y2x1c2l2ZTogZmFsc2UsXG4gICAgICAgIC8vIGh5cGhlbnNUb0VtRGFzaDogMFxuICAgICAgICAvLyBoeXBoZW5Ub0VuRGFzaDogMlxuICAgICAgICBzbGFzaGVkWmVybzogNFxuICAgIH0sXG4gICAgLy8gZm9ybUludGVycm9iYW5nOiA2XG4gICAgLy8gc21hcnRRdW90ZXM6IDhcbiAgICAvLyBwZXJpb2RzVG9FbGxpcHNpczogMTBcbiAgICBtYXRoZW1hdGljYWxFeHRyYXM6IHtcbiAgICAgICAgY29kZTogMTUsXG4gICAgICAgIGV4Y2x1c2l2ZTogZmFsc2UsXG4gICAgICAgIC8vIGh5cGhlblRvTWludXM6IDBcbiAgICAgICAgLy8gYXN0ZXJpc3RvTXVsdGlwbHk6IDJcbiAgICAgICAgLy8gc2xhc2hUb0RpdmlkZTogNFxuICAgICAgICAvLyBpbmVxdWFsaXR5TGlnYXR1cmVzOiA2XG4gICAgICAgIC8vIGV4cG9uZW50czogOFxuICAgICAgICBtYXRoZW1hdGljYWxHcmVlazogMTBcbiAgICB9LFxuICAgIG9ybmFtZW50U2V0czoge1xuICAgICAgICBjb2RlOiAxNixcbiAgICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgICBub09ybmFtZW50czogMCxcbiAgICAgICAgZGluZ2JhdHM6IDEsXG4gICAgICAgIHBpQ2hhcmFjdGVyczogMixcbiAgICAgICAgZmxldXJvbnM6IDMsXG4gICAgICAgIGRlY29yYXRpdmVCb3JkZXJzOiA0LFxuICAgICAgICBpbnRlcm5hdGlvbmFsU3ltYm9sczogNSxcbiAgICAgICAgbWF0aFN5bWJvbHM6IDZcbiAgICB9LFxuICAgIGNoYXJhY3RlckFsdGVybmF0aXZlczoge1xuICAgICAgICBjb2RlOiAxNyxcbiAgICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgICBub0FsdGVybmF0ZXM6IDBcbiAgICB9LFxuICAgIC8vIHVzZXIgZGVmaW5lZCBvcHRpb25zXG4gICAgZGVzaWduQ29tcGxleGl0eToge1xuICAgICAgICBjb2RlOiAxOCxcbiAgICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgICBkZXNpZ25MZXZlbDE6IDAsXG4gICAgICAgIGRlc2lnbkxldmVsMjogMSxcbiAgICAgICAgZGVzaWduTGV2ZWwzOiAyLFxuICAgICAgICBkZXNpZ25MZXZlbDQ6IDMsXG4gICAgICAgIGRlc2lnbkxldmVsNTogNFxuICAgIH0sXG4gICAgc3R5bGVPcHRpb25zOiB7XG4gICAgICAgIGNvZGU6IDE5LFxuICAgICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICAgIG5vU3R5bGVPcHRpb25zOiAwLFxuICAgICAgICBkaXNwbGF5VGV4dDogMSxcbiAgICAgICAgZW5ncmF2ZWRUZXh0OiAyLFxuICAgICAgICBpbGx1bWluYXRlZENhcHM6IDMsXG4gICAgICAgIHRpdGxpbmdDYXBzOiA0LFxuICAgICAgICB0YWxsQ2FwczogNVxuICAgIH0sXG4gICAgY2hhcmFjdGVyU2hhcGU6IHtcbiAgICAgICAgY29kZTogMjAsXG4gICAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgdHJhZGl0aW9uYWxDaGFyYWN0ZXJzOiAwLFxuICAgICAgICBzaW1wbGlmaWVkQ2hhcmFjdGVyczogMSxcbiAgICAgICAgSklTMTk3OENoYXJhY3RlcnM6IDIsXG4gICAgICAgIEpJUzE5ODNDaGFyYWN0ZXJzOiAzLFxuICAgICAgICBKSVMxOTkwQ2hhcmFjdGVyczogNCxcbiAgICAgICAgdHJhZGl0aW9uYWxBbHRPbmU6IDUsXG4gICAgICAgIHRyYWRpdGlvbmFsQWx0VHdvOiA2LFxuICAgICAgICB0cmFkaXRpb25hbEFsdFRocmVlOiA3LFxuICAgICAgICB0cmFkaXRpb25hbEFsdEZvdXI6IDgsXG4gICAgICAgIHRyYWRpdGlvbmFsQWx0Rml2ZTogOSxcbiAgICAgICAgZXhwZXJ0Q2hhcmFjdGVyczogMTAsXG4gICAgICAgIEpJUzIwMDRDaGFyYWN0ZXJzOiAxMSxcbiAgICAgICAgaG9qb0NoYXJhY3RlcnM6IDEyLFxuICAgICAgICBOTENDaGFyYWN0ZXJzOiAxMyxcbiAgICAgICAgdHJhZGl0aW9uYWxOYW1lc0NoYXJhY3RlcnM6IDE0XG4gICAgfSxcbiAgICBudW1iZXJDYXNlOiB7XG4gICAgICAgIGNvZGU6IDIxLFxuICAgICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICAgIGxvd2VyQ2FzZU51bWJlcnM6IDAsXG4gICAgICAgIHVwcGVyQ2FzZU51bWJlcnM6IDFcbiAgICB9LFxuICAgIHRleHRTcGFjaW5nOiB7XG4gICAgICAgIGNvZGU6IDIyLFxuICAgICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICAgIHByb3BvcnRpb25hbFRleHQ6IDAsXG4gICAgICAgIG1vbm9zcGFjZWRUZXh0OiAxLFxuICAgICAgICBoYWxmV2lkdGhUZXh0OiAyLFxuICAgICAgICB0aGlyZFdpZHRoVGV4dDogMyxcbiAgICAgICAgcXVhcnRlcldpZHRoVGV4dDogNCxcbiAgICAgICAgYWx0UHJvcG9ydGlvbmFsVGV4dDogNSxcbiAgICAgICAgYWx0SGFsZldpZHRoVGV4dDogNlxuICAgIH0sXG4gICAgdHJhbnNsaXRlcmF0aW9uOiB7XG4gICAgICAgIGNvZGU6IDIzLFxuICAgICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICAgIG5vVHJhbnNsaXRlcmF0aW9uOiAwXG4gICAgfSxcbiAgICAvLyBoYW5qYVRvSGFuZ3VsOiAxXG4gICAgLy8gaGlyYWdhbmFUb0thdGFrYW5hOiAyXG4gICAgLy8ga2F0YWthbmFUb0hpcmFnYW5hOiAzXG4gICAgLy8ga2FuYVRvUm9tYW5pemF0aW9uOiA0XG4gICAgLy8gcm9tYW5pemF0aW9uVG9IaXJhZ2FuYTogNVxuICAgIC8vIHJvbWFuaXphdGlvblRvS2F0YWthbmE6IDZcbiAgICAvLyBoYW5qYVRvSGFuZ3VsQWx0T25lOiA3XG4gICAgLy8gaGFuamFUb0hhbmd1bEFsdFR3bzogOFxuICAgIC8vIGhhbmphVG9IYW5ndWxBbHRUaHJlZTogOVxuICAgIGFubm90YXRpb246IHtcbiAgICAgICAgY29kZTogMjQsXG4gICAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgbm9Bbm5vdGF0aW9uOiAwLFxuICAgICAgICBib3hBbm5vdGF0aW9uOiAxLFxuICAgICAgICByb3VuZGVkQm94QW5ub3RhdGlvbjogMixcbiAgICAgICAgY2lyY2xlQW5ub3RhdGlvbjogMyxcbiAgICAgICAgaW52ZXJ0ZWRDaXJjbGVBbm5vdGF0aW9uOiA0LFxuICAgICAgICBwYXJlbnRoZXNpc0Fubm90YXRpb246IDUsXG4gICAgICAgIHBlcmlvZEFubm90YXRpb246IDYsXG4gICAgICAgIHJvbWFuTnVtZXJhbEFubm90YXRpb246IDcsXG4gICAgICAgIGRpYW1vbmRBbm5vdGF0aW9uOiA4LFxuICAgICAgICBpbnZlcnRlZEJveEFubm90YXRpb246IDksXG4gICAgICAgIGludmVydGVkUm91bmRlZEJveEFubm90YXRpb246IDEwXG4gICAgfSxcbiAgICBrYW5hU3BhY2luZzoge1xuICAgICAgICBjb2RlOiAyNSxcbiAgICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgICBmdWxsV2lkdGhLYW5hOiAwLFxuICAgICAgICBwcm9wb3J0aW9uYWxLYW5hOiAxXG4gICAgfSxcbiAgICBpZGVvZ3JhcGhpY1NwYWNpbmc6IHtcbiAgICAgICAgY29kZTogMjYsXG4gICAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgZnVsbFdpZHRoSWRlb2dyYXBoczogMCxcbiAgICAgICAgcHJvcG9ydGlvbmFsSWRlb2dyYXBoczogMSxcbiAgICAgICAgaGFsZldpZHRoSWRlb2dyYXBoczogMlxuICAgIH0sXG4gICAgdW5pY29kZURlY29tcG9zaXRpb246IHtcbiAgICAgICAgY29kZTogMjcsXG4gICAgICAgIGV4Y2x1c2l2ZTogZmFsc2UsXG4gICAgICAgIGNhbm9uaWNhbENvbXBvc2l0aW9uOiAwLFxuICAgICAgICBjb21wYXRpYmlsaXR5Q29tcG9zaXRpb246IDIsXG4gICAgICAgIHRyYW5zY29kaW5nQ29tcG9zaXRpb246IDRcbiAgICB9LFxuICAgIHJ1YnlLYW5hOiB7XG4gICAgICAgIGNvZGU6IDI4LFxuICAgICAgICBleGNsdXNpdmU6IGZhbHNlLFxuICAgICAgICAvLyBub1J1YnlLYW5hOiAwICAgICAjIGRlcHJlY2F0ZWQgLSB1c2UgcnVieUthbmFPZmYgaW5zdGVhZFxuICAgICAgICAvLyBydWJ5S2FuYTogMSAgICAgIyBkZXByZWNhdGVkIC0gdXNlIHJ1YnlLYW5hT24gaW5zdGVhZFxuICAgICAgICBydWJ5S2FuYTogMlxuICAgIH0sXG4gICAgQ0pLU3ltYm9sQWx0ZXJuYXRpdmVzOiB7XG4gICAgICAgIGNvZGU6IDI5LFxuICAgICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICAgIG5vQ0pLU3ltYm9sQWx0ZXJuYXRpdmVzOiAwLFxuICAgICAgICBDSktTeW1ib2xBbHRPbmU6IDEsXG4gICAgICAgIENKS1N5bWJvbEFsdFR3bzogMixcbiAgICAgICAgQ0pLU3ltYm9sQWx0VGhyZWU6IDMsXG4gICAgICAgIENKS1N5bWJvbEFsdEZvdXI6IDQsXG4gICAgICAgIENKS1N5bWJvbEFsdEZpdmU6IDVcbiAgICB9LFxuICAgIGlkZW9ncmFwaGljQWx0ZXJuYXRpdmVzOiB7XG4gICAgICAgIGNvZGU6IDMwLFxuICAgICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICAgIG5vSWRlb2dyYXBoaWNBbHRlcm5hdGl2ZXM6IDAsXG4gICAgICAgIGlkZW9ncmFwaGljQWx0T25lOiAxLFxuICAgICAgICBpZGVvZ3JhcGhpY0FsdFR3bzogMixcbiAgICAgICAgaWRlb2dyYXBoaWNBbHRUaHJlZTogMyxcbiAgICAgICAgaWRlb2dyYXBoaWNBbHRGb3VyOiA0LFxuICAgICAgICBpZGVvZ3JhcGhpY0FsdEZpdmU6IDVcbiAgICB9LFxuICAgIENKS1ZlcnRpY2FsUm9tYW5QbGFjZW1lbnQ6IHtcbiAgICAgICAgY29kZTogMzEsXG4gICAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgQ0pLVmVydGljYWxSb21hbkNlbnRlcmVkOiAwLFxuICAgICAgICBDSktWZXJ0aWNhbFJvbWFuSEJhc2VsaW5lOiAxXG4gICAgfSxcbiAgICBpdGFsaWNDSktSb21hbjoge1xuICAgICAgICBjb2RlOiAzMixcbiAgICAgICAgZXhjbHVzaXZlOiBmYWxzZSxcbiAgICAgICAgLy8gbm9DSktJdGFsaWNSb21hbjogMCAgICAgIyBkZXByZWNhdGVkIC0gdXNlIENKS0l0YWxpY1JvbWFuT2ZmIGluc3RlYWRcbiAgICAgICAgLy8gQ0pLSXRhbGljUm9tYW46IDEgICAgICMgZGVwcmVjYXRlZCAtIHVzZSBDSktJdGFsaWNSb21hbk9uIGluc3RlYWRcbiAgICAgICAgQ0pLSXRhbGljUm9tYW46IDJcbiAgICB9LFxuICAgIGNhc2VTZW5zaXRpdmVMYXlvdXQ6IHtcbiAgICAgICAgY29kZTogMzMsXG4gICAgICAgIGV4Y2x1c2l2ZTogZmFsc2UsXG4gICAgICAgIGNhc2VTZW5zaXRpdmVMYXlvdXQ6IDAsXG4gICAgICAgIGNhc2VTZW5zaXRpdmVTcGFjaW5nOiAyXG4gICAgfSxcbiAgICBhbHRlcm5hdGVLYW5hOiB7XG4gICAgICAgIGNvZGU6IDM0LFxuICAgICAgICBleGNsdXNpdmU6IGZhbHNlLFxuICAgICAgICBhbHRlcm5hdGVIb3JpekthbmE6IDAsXG4gICAgICAgIGFsdGVybmF0ZVZlcnRLYW5hOiAyXG4gICAgfSxcbiAgICBzdHlsaXN0aWNBbHRlcm5hdGl2ZXM6IHtcbiAgICAgICAgY29kZTogMzUsXG4gICAgICAgIGV4Y2x1c2l2ZTogZmFsc2UsXG4gICAgICAgIG5vU3R5bGlzdGljQWx0ZXJuYXRlczogMCxcbiAgICAgICAgc3R5bGlzdGljQWx0T25lOiAyLFxuICAgICAgICBzdHlsaXN0aWNBbHRUd286IDQsXG4gICAgICAgIHN0eWxpc3RpY0FsdFRocmVlOiA2LFxuICAgICAgICBzdHlsaXN0aWNBbHRGb3VyOiA4LFxuICAgICAgICBzdHlsaXN0aWNBbHRGaXZlOiAxMCxcbiAgICAgICAgc3R5bGlzdGljQWx0U2l4OiAxMixcbiAgICAgICAgc3R5bGlzdGljQWx0U2V2ZW46IDE0LFxuICAgICAgICBzdHlsaXN0aWNBbHRFaWdodDogMTYsXG4gICAgICAgIHN0eWxpc3RpY0FsdE5pbmU6IDE4LFxuICAgICAgICBzdHlsaXN0aWNBbHRUZW46IDIwLFxuICAgICAgICBzdHlsaXN0aWNBbHRFbGV2ZW46IDIyLFxuICAgICAgICBzdHlsaXN0aWNBbHRUd2VsdmU6IDI0LFxuICAgICAgICBzdHlsaXN0aWNBbHRUaGlydGVlbjogMjYsXG4gICAgICAgIHN0eWxpc3RpY0FsdEZvdXJ0ZWVuOiAyOCxcbiAgICAgICAgc3R5bGlzdGljQWx0RmlmdGVlbjogMzAsXG4gICAgICAgIHN0eWxpc3RpY0FsdFNpeHRlZW46IDMyLFxuICAgICAgICBzdHlsaXN0aWNBbHRTZXZlbnRlZW46IDM0LFxuICAgICAgICBzdHlsaXN0aWNBbHRFaWdodGVlbjogMzYsXG4gICAgICAgIHN0eWxpc3RpY0FsdE5pbmV0ZWVuOiAzOCxcbiAgICAgICAgc3R5bGlzdGljQWx0VHdlbnR5OiA0MFxuICAgIH0sXG4gICAgY29udGV4dHVhbEFsdGVybmF0ZXM6IHtcbiAgICAgICAgY29kZTogMzYsXG4gICAgICAgIGV4Y2x1c2l2ZTogZmFsc2UsXG4gICAgICAgIGNvbnRleHR1YWxBbHRlcm5hdGVzOiAwLFxuICAgICAgICBzd2FzaEFsdGVybmF0ZXM6IDIsXG4gICAgICAgIGNvbnRleHR1YWxTd2FzaEFsdGVybmF0ZXM6IDRcbiAgICB9LFxuICAgIGxvd2VyQ2FzZToge1xuICAgICAgICBjb2RlOiAzNyxcbiAgICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgICBkZWZhdWx0TG93ZXJDYXNlOiAwLFxuICAgICAgICBsb3dlckNhc2VTbWFsbENhcHM6IDEsXG4gICAgICAgIGxvd2VyQ2FzZVBldGl0ZUNhcHM6IDJcbiAgICB9LFxuICAgIHVwcGVyQ2FzZToge1xuICAgICAgICBjb2RlOiAzOCxcbiAgICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgICBkZWZhdWx0VXBwZXJDYXNlOiAwLFxuICAgICAgICB1cHBlckNhc2VTbWFsbENhcHM6IDEsXG4gICAgICAgIHVwcGVyQ2FzZVBldGl0ZUNhcHM6IDJcbiAgICB9LFxuICAgIGxhbmd1YWdlVGFnOiB7XG4gICAgICAgIGNvZGU6IDM5LFxuICAgICAgICBleGNsdXNpdmU6IHRydWVcbiAgICB9LFxuICAgIENKS1JvbWFuU3BhY2luZzoge1xuICAgICAgICBjb2RlOiAxMDMsXG4gICAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgaGFsZldpZHRoQ0pLUm9tYW46IDAsXG4gICAgICAgIHByb3BvcnRpb25hbENKS1JvbWFuOiAxLFxuICAgICAgICBkZWZhdWx0Q0pLUm9tYW46IDIsXG4gICAgICAgIGZ1bGxXaWR0aENKS1JvbWFuOiAzXG4gICAgfVxufTtcbmNvbnN0ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlID0gKG5hbWUsIHNlbGVjdG9yKT0+W1xuICAgICAgICAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZXNbbmFtZV0uY29kZSxcbiAgICAgICAgJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmVzW25hbWVdW3NlbGVjdG9yXVxuICAgIF07XG5jb25zdCAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkT1RNYXBwaW5nID0ge1xuICAgIHJsaWc6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdsaWdhdHVyZXMnLCAncmVxdWlyZWRMaWdhdHVyZXMnKSxcbiAgICBjbGlnOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnbGlnYXR1cmVzJywgJ2NvbnRleHR1YWxMaWdhdHVyZXMnKSxcbiAgICBkbGlnOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnbGlnYXR1cmVzJywgJ3JhcmVMaWdhdHVyZXMnKSxcbiAgICBobGlnOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnbGlnYXR1cmVzJywgJ2hpc3RvcmljYWxMaWdhdHVyZXMnKSxcbiAgICBsaWdhOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnbGlnYXR1cmVzJywgJ2NvbW1vbkxpZ2F0dXJlcycpLFxuICAgIGhpc3Q6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdsaWdhdHVyZXMnLCAnaGlzdG9yaWNhbExpZ2F0dXJlcycpLFxuICAgIHNtY3A6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdsb3dlckNhc2UnLCAnbG93ZXJDYXNlU21hbGxDYXBzJyksXG4gICAgcGNhcDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ2xvd2VyQ2FzZScsICdsb3dlckNhc2VQZXRpdGVDYXBzJyksXG4gICAgZnJhYzogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ2ZyYWN0aW9ucycsICdkaWFnb25hbEZyYWN0aW9ucycpLFxuICAgIGRub206ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdmcmFjdGlvbnMnLCAnZGlhZ29uYWxGcmFjdGlvbnMnKSxcbiAgICBudW1yOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnZnJhY3Rpb25zJywgJ2RpYWdvbmFsRnJhY3Rpb25zJyksXG4gICAgYWZyYzogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ2ZyYWN0aW9ucycsICd2ZXJ0aWNhbEZyYWN0aW9ucycpLFxuICAgIC8vIGFhbHRcbiAgICAvLyBhYnZmLCBhYnZtLCBhYnZzLCBha2huLCBibHdmLCBibHdtLCBibHdzLCBjZmFyLCBjamN0LCBjcHNwLCBmYWx0LCBpc29sLCBqYWx0LCBsam1vLCBtc2V0P1xuICAgIC8vIGx0cmEsIGx0cm0sIG51a3QsIHByZWYsIHByZXMsIHBzdGYsIHBzdHMsIHJhbmQsIHJrcmYsIHJwaGYsIHJ0bGEsIHJ0bG0sIHNpemUsIHRqbW8sIHRudW0/XG4gICAgLy8gdW5pYywgdmF0dSwgdmhhbCwgdmptbywgdnBhbCwgdnJ0MlxuICAgIC8vIGRpc3QgLT4gdHJhayB0YWJsZT9cbiAgICAvLyBrZXJuLCB2a3JuIC0+IGtlcm4gdGFibGVcbiAgICAvLyBsZmJkICsgb3BiZCArIHJ0YmQgLT4gb3BiZCB0YWJsZT9cbiAgICAvLyBtYXJrLCBta21rIC0+IGFjbnQgdGFibGU/XG4gICAgLy8gbG9jbCAtPiBsYW5ndWFnZVRhZyArIGx0YWcgdGFibGVcbiAgICBjYXNlOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnY2FzZVNlbnNpdGl2ZUxheW91dCcsICdjYXNlU2Vuc2l0aXZlTGF5b3V0JyksXG4gICAgY2NtcDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ3VuaWNvZGVEZWNvbXBvc2l0aW9uJywgJ2Nhbm9uaWNhbENvbXBvc2l0aW9uJyksXG4gICAgY3BjdDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ0NKS1ZlcnRpY2FsUm9tYW5QbGFjZW1lbnQnLCAnQ0pLVmVydGljYWxSb21hbkNlbnRlcmVkJyksXG4gICAgdmFsdDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ0NKS1ZlcnRpY2FsUm9tYW5QbGFjZW1lbnQnLCAnQ0pLVmVydGljYWxSb21hbkNlbnRlcmVkJyksXG4gICAgc3dzaDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ2NvbnRleHR1YWxBbHRlcm5hdGVzJywgJ3N3YXNoQWx0ZXJuYXRlcycpLFxuICAgIGNzd2g6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdjb250ZXh0dWFsQWx0ZXJuYXRlcycsICdjb250ZXh0dWFsU3dhc2hBbHRlcm5hdGVzJyksXG4gICAgY3VyczogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ2N1cnNpdmVDb25uZWN0aW9uJywgJ2N1cnNpdmUnKSxcbiAgICBjMnBjOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgndXBwZXJDYXNlJywgJ3VwcGVyQ2FzZVBldGl0ZUNhcHMnKSxcbiAgICBjMnNjOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgndXBwZXJDYXNlJywgJ3VwcGVyQ2FzZVNtYWxsQ2FwcycpLFxuICAgIGluaXQ6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdzbWFydFN3YXNoJywgJ3dvcmRJbml0aWFsU3dhc2hlcycpLFxuICAgIGZpbjI6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdzbWFydFN3YXNoJywgJ3dvcmRGaW5hbFN3YXNoZXMnKSxcbiAgICBtZWRpOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnc21hcnRTd2FzaCcsICdub25GaW5hbFN3YXNoZXMnKSxcbiAgICBtZWQyOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnc21hcnRTd2FzaCcsICdub25GaW5hbFN3YXNoZXMnKSxcbiAgICBmaW4zOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnc21hcnRTd2FzaCcsICd3b3JkRmluYWxTd2FzaGVzJyksXG4gICAgZmluYTogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ3NtYXJ0U3dhc2gnLCAnd29yZEZpbmFsU3dhc2hlcycpLFxuICAgIHBrbmE6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdrYW5hU3BhY2luZycsICdwcm9wb3J0aW9uYWxLYW5hJyksXG4gICAgaGFsZjogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ3RleHRTcGFjaW5nJywgJ2hhbGZXaWR0aFRleHQnKSxcbiAgICBoYWx0OiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgndGV4dFNwYWNpbmcnLCAnYWx0SGFsZldpZHRoVGV4dCcpLFxuICAgIGhrbmE6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdhbHRlcm5hdGVLYW5hJywgJ2FsdGVybmF0ZUhvcml6S2FuYScpLFxuICAgIHZrbmE6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdhbHRlcm5hdGVLYW5hJywgJ2FsdGVybmF0ZVZlcnRLYW5hJyksXG4gICAgLy8gaG5nbDogZmVhdHVyZSAndHJhbnNsaXRlcmF0aW9uJywgJ2hhbmphVG9IYW5ndWxTZWxlY3RvcicgIyBkZXByZWNhdGVkXG4gICAgaXRhbDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ2l0YWxpY0NKS1JvbWFuJywgJ0NKS0l0YWxpY1JvbWFuJyksXG4gICAgbG51bTogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ251bWJlckNhc2UnLCAndXBwZXJDYXNlTnVtYmVycycpLFxuICAgIG9udW06ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdudW1iZXJDYXNlJywgJ2xvd2VyQ2FzZU51bWJlcnMnKSxcbiAgICBtZ3JrOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnbWF0aGVtYXRpY2FsRXh0cmFzJywgJ21hdGhlbWF0aWNhbEdyZWVrJyksXG4gICAgLy8gbmFsdDogbm90IGVub3VnaCBpbmZvLiB3aGF0IHR5cGUgb2YgYW5ub3RhdGlvbj9cbiAgICAvLyBvcm5tOiBkaXR0bywgd2hpY2ggb3JuYW1lbnQgc3R5bGU/XG4gICAgY2FsdDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ2NvbnRleHR1YWxBbHRlcm5hdGVzJywgJ2NvbnRleHR1YWxBbHRlcm5hdGVzJyksXG4gICAgdnJ0MjogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ3ZlcnRpY2FsU3Vic3RpdHV0aW9uJywgJ3N1YnN0aXR1dGVWZXJ0aWNhbEZvcm1zJyksXG4gICAgdmVydDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ3ZlcnRpY2FsU3Vic3RpdHV0aW9uJywgJ3N1YnN0aXR1dGVWZXJ0aWNhbEZvcm1zJyksXG4gICAgdG51bTogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ251bWJlclNwYWNpbmcnLCAnbW9ub3NwYWNlZE51bWJlcnMnKSxcbiAgICBwbnVtOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnbnVtYmVyU3BhY2luZycsICdwcm9wb3J0aW9uYWxOdW1iZXJzJyksXG4gICAgc3VwczogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ3ZlcnRpY2FsUG9zaXRpb24nLCAnc3VwZXJpb3JzJyksXG4gICAgc3ViczogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ3ZlcnRpY2FsUG9zaXRpb24nLCAnaW5mZXJpb3JzJyksXG4gICAgb3JkbjogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ3ZlcnRpY2FsUG9zaXRpb24nLCAnb3JkaW5hbHMnKSxcbiAgICBwd2lkOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgndGV4dFNwYWNpbmcnLCAncHJvcG9ydGlvbmFsVGV4dCcpLFxuICAgIGh3aWQ6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCd0ZXh0U3BhY2luZycsICdoYWxmV2lkdGhUZXh0JyksXG4gICAgcXdpZDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ3RleHRTcGFjaW5nJywgJ3F1YXJ0ZXJXaWR0aFRleHQnKSxcbiAgICB0d2lkOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgndGV4dFNwYWNpbmcnLCAndGhpcmRXaWR0aFRleHQnKSxcbiAgICBmd2lkOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgndGV4dFNwYWNpbmcnLCAncHJvcG9ydGlvbmFsVGV4dCcpLFxuICAgIHBhbHQ6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCd0ZXh0U3BhY2luZycsICdhbHRQcm9wb3J0aW9uYWxUZXh0JyksXG4gICAgdHJhZDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ2NoYXJhY3RlclNoYXBlJywgJ3RyYWRpdGlvbmFsQ2hhcmFjdGVycycpLFxuICAgIHNtcGw6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdjaGFyYWN0ZXJTaGFwZScsICdzaW1wbGlmaWVkQ2hhcmFjdGVycycpLFxuICAgIGpwNzg6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdjaGFyYWN0ZXJTaGFwZScsICdKSVMxOTc4Q2hhcmFjdGVycycpLFxuICAgIGpwODM6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdjaGFyYWN0ZXJTaGFwZScsICdKSVMxOTgzQ2hhcmFjdGVycycpLFxuICAgIGpwOTA6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdjaGFyYWN0ZXJTaGFwZScsICdKSVMxOTkwQ2hhcmFjdGVycycpLFxuICAgIGpwMDQ6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdjaGFyYWN0ZXJTaGFwZScsICdKSVMyMDA0Q2hhcmFjdGVycycpLFxuICAgIGV4cHQ6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdjaGFyYWN0ZXJTaGFwZScsICdleHBlcnRDaGFyYWN0ZXJzJyksXG4gICAgaG9qbzogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ2NoYXJhY3RlclNoYXBlJywgJ2hvam9DaGFyYWN0ZXJzJyksXG4gICAgbmxjazogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ2NoYXJhY3RlclNoYXBlJywgJ05MQ0NoYXJhY3RlcnMnKSxcbiAgICB0bmFtOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnY2hhcmFjdGVyU2hhcGUnLCAndHJhZGl0aW9uYWxOYW1lc0NoYXJhY3RlcnMnKSxcbiAgICBydWJ5OiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgncnVieUthbmEnLCAncnVieUthbmEnKSxcbiAgICB0aXRsOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnc3R5bGVPcHRpb25zJywgJ3RpdGxpbmdDYXBzJyksXG4gICAgemVybzogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ3R5cG9ncmFwaGljRXh0cmFzJywgJ3NsYXNoZWRaZXJvJyksXG4gICAgc3MwMTogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ3N0eWxpc3RpY0FsdGVybmF0aXZlcycsICdzdHlsaXN0aWNBbHRPbmUnKSxcbiAgICBzczAyOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnc3R5bGlzdGljQWx0ZXJuYXRpdmVzJywgJ3N0eWxpc3RpY0FsdFR3bycpLFxuICAgIHNzMDM6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdzdHlsaXN0aWNBbHRlcm5hdGl2ZXMnLCAnc3R5bGlzdGljQWx0VGhyZWUnKSxcbiAgICBzczA0OiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnc3R5bGlzdGljQWx0ZXJuYXRpdmVzJywgJ3N0eWxpc3RpY0FsdEZvdXInKSxcbiAgICBzczA1OiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnc3R5bGlzdGljQWx0ZXJuYXRpdmVzJywgJ3N0eWxpc3RpY0FsdEZpdmUnKSxcbiAgICBzczA2OiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnc3R5bGlzdGljQWx0ZXJuYXRpdmVzJywgJ3N0eWxpc3RpY0FsdFNpeCcpLFxuICAgIHNzMDc6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdzdHlsaXN0aWNBbHRlcm5hdGl2ZXMnLCAnc3R5bGlzdGljQWx0U2V2ZW4nKSxcbiAgICBzczA4OiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnc3R5bGlzdGljQWx0ZXJuYXRpdmVzJywgJ3N0eWxpc3RpY0FsdEVpZ2h0JyksXG4gICAgc3MwOTogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ3N0eWxpc3RpY0FsdGVybmF0aXZlcycsICdzdHlsaXN0aWNBbHROaW5lJyksXG4gICAgc3MxMDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ3N0eWxpc3RpY0FsdGVybmF0aXZlcycsICdzdHlsaXN0aWNBbHRUZW4nKSxcbiAgICBzczExOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnc3R5bGlzdGljQWx0ZXJuYXRpdmVzJywgJ3N0eWxpc3RpY0FsdEVsZXZlbicpLFxuICAgIHNzMTI6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdzdHlsaXN0aWNBbHRlcm5hdGl2ZXMnLCAnc3R5bGlzdGljQWx0VHdlbHZlJyksXG4gICAgc3MxMzogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ3N0eWxpc3RpY0FsdGVybmF0aXZlcycsICdzdHlsaXN0aWNBbHRUaGlydGVlbicpLFxuICAgIHNzMTQ6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdzdHlsaXN0aWNBbHRlcm5hdGl2ZXMnLCAnc3R5bGlzdGljQWx0Rm91cnRlZW4nKSxcbiAgICBzczE1OiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnc3R5bGlzdGljQWx0ZXJuYXRpdmVzJywgJ3N0eWxpc3RpY0FsdEZpZnRlZW4nKSxcbiAgICBzczE2OiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnc3R5bGlzdGljQWx0ZXJuYXRpdmVzJywgJ3N0eWxpc3RpY0FsdFNpeHRlZW4nKSxcbiAgICBzczE3OiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnc3R5bGlzdGljQWx0ZXJuYXRpdmVzJywgJ3N0eWxpc3RpY0FsdFNldmVudGVlbicpLFxuICAgIHNzMTg6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKCdzdHlsaXN0aWNBbHRlcm5hdGl2ZXMnLCAnc3R5bGlzdGljQWx0RWlnaHRlZW4nKSxcbiAgICBzczE5OiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZSgnc3R5bGlzdGljQWx0ZXJuYXRpdmVzJywgJ3N0eWxpc3RpY0FsdE5pbmV0ZWVuJyksXG4gICAgc3MyMDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoJ3N0eWxpc3RpY0FsdGVybmF0aXZlcycsICdzdHlsaXN0aWNBbHRUd2VudHknKVxufTtcbi8vIHNhbHQ6IGZlYXR1cmUgJ3N0eWxpc3RpY0FsdGVybmF0aXZlcycsICdzdHlsaXN0aWNBbHRPbmUnICMgaG1tLCB3aGljaCBvbmUgdG8gY2hvb3NlXG4vLyBBZGQgY3YwMS1jdjk5IGZlYXR1cmVzXG5mb3IobGV0IGkgPSAxOyBpIDw9IDk5OyBpKyspJDNiNjMwMmI2NGVjY2MzMmMkdmFyJE9UTWFwcGluZ1tgY3Yke2AwMCR7aX1gLnNsaWNlKC0yKX1gXSA9IFtcbiAgICAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZXMuY2hhcmFjdGVyQWx0ZXJuYXRpdmVzLmNvZGUsXG4gICAgaVxuXTtcbi8vIGNyZWF0ZSBpbnZlcnNlIG1hcHBpbmdcbmxldCAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkQUFUTWFwcGluZyA9IHt9O1xuZm9yKGxldCBvdCBpbiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkT1RNYXBwaW5nKXtcbiAgICBsZXQgYWF0ID0gJDNiNjMwMmI2NGVjY2MzMmMkdmFyJE9UTWFwcGluZ1tvdF07XG4gICAgaWYgKCQzYjYzMDJiNjRlY2NjMzJjJHZhciRBQVRNYXBwaW5nW2FhdFswXV0gPT0gbnVsbCkgJDNiNjMwMmI2NGVjY2MzMmMkdmFyJEFBVE1hcHBpbmdbYWF0WzBdXSA9IHt9O1xuICAgICQzYjYzMDJiNjRlY2NjMzJjJHZhciRBQVRNYXBwaW5nW2FhdFswXV1bYWF0WzFdXSA9IG90O1xufVxuZnVuY3Rpb24gJDNiNjMwMmI2NGVjY2MzMmMkZXhwb3J0JGI4MTNmN2QyYTE2NzdjMTYoZmVhdHVyZXMpIHtcbiAgICBsZXQgcmVzID0ge307XG4gICAgZm9yKGxldCBrIGluIGZlYXR1cmVzKXtcbiAgICAgICAgbGV0IHI7XG4gICAgICAgIGlmIChyID0gJDNiNjMwMmI2NGVjY2MzMmMkdmFyJE9UTWFwcGluZ1trXSkge1xuICAgICAgICAgICAgaWYgKHJlc1tyWzBdXSA9PSBudWxsKSByZXNbclswXV0gPSB7fTtcbiAgICAgICAgICAgIHJlc1tyWzBdXVtyWzFdXSA9IGZlYXR1cmVzW2tdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG4vLyBNYXBzIHN0cmluZ3MgaW4gYSBbZmVhdHVyZVR5cGUsIGZlYXR1cmVTZXR0aW5nXVxuLy8gdG8gdGhlaXIgZXF1aXZhbGVudCBudW1iZXIgY29kZXNcbmZ1bmN0aW9uICQzYjYzMDJiNjRlY2NjMzJjJHZhciRtYXBGZWF0dXJlU3RyaW5ncyhmKSB7XG4gICAgbGV0IFt0eXBlLCBzZXR0aW5nXSA9IGY7XG4gICAgaWYgKGlzTmFOKHR5cGUpKSB2YXIgdHlwZUNvZGUgPSAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZXNbdHlwZV0gJiYgJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmVzW3R5cGVdLmNvZGU7XG4gICAgZWxzZSB2YXIgdHlwZUNvZGUgPSB0eXBlO1xuICAgIGlmIChpc05hTihzZXR0aW5nKSkgdmFyIHNldHRpbmdDb2RlID0gJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmVzW3R5cGVdICYmICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlc1t0eXBlXVtzZXR0aW5nXTtcbiAgICBlbHNlIHZhciBzZXR0aW5nQ29kZSA9IHNldHRpbmc7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgdHlwZUNvZGUsXG4gICAgICAgIHNldHRpbmdDb2RlXG4gICAgXTtcbn1cbmZ1bmN0aW9uICQzYjYzMDJiNjRlY2NjMzJjJGV4cG9ydCRiZDZkZjM0N2E0ZjM5MWM0KGZlYXR1cmVzKSB7XG4gICAgbGV0IHJlcyA9IHt9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KGZlYXR1cmVzKSkgZm9yKGxldCBrID0gMDsgayA8IGZlYXR1cmVzLmxlbmd0aDsgaysrKXtcbiAgICAgICAgbGV0IHI7XG4gICAgICAgIGxldCBmID0gJDNiNjMwMmI2NGVjY2MzMmMkdmFyJG1hcEZlYXR1cmVTdHJpbmdzKGZlYXR1cmVzW2tdKTtcbiAgICAgICAgaWYgKHIgPSAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkQUFUTWFwcGluZ1tmWzBdXSAmJiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkQUFUTWFwcGluZ1tmWzBdXVtmWzFdXSkgcmVzW3JdID0gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGZlYXR1cmVzID09PSAnb2JqZWN0JykgZm9yKGxldCB0eXBlIGluIGZlYXR1cmVzKXtcbiAgICAgICAgbGV0IGZlYXR1cmUgPSBmZWF0dXJlc1t0eXBlXTtcbiAgICAgICAgZm9yKGxldCBzZXR0aW5nIGluIGZlYXR1cmUpe1xuICAgICAgICAgICAgbGV0IHI7XG4gICAgICAgICAgICBsZXQgZiA9ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRtYXBGZWF0dXJlU3RyaW5ncyhbXG4gICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICBzZXR0aW5nXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGlmIChmZWF0dXJlW3NldHRpbmddICYmIChyID0gJDNiNjMwMmI2NGVjY2MzMmMkdmFyJEFBVE1hcHBpbmdbZlswXV0gJiYgJDNiNjMwMmI2NGVjY2MzMmMkdmFyJEFBVE1hcHBpbmdbZlswXV1bZlsxXV0pKSByZXNbcl0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBPYmplY3Qua2V5cyhyZXMpO1xufVxuXG5cblxuXG5cblxuXG5jbGFzcyAkZmY1Y2UwNzdkYWUwZjE0NCRleHBvcnQkMmUyYmNkODczOWFlMDM5IHtcbiAgICBsb29rdXAoZ2x5cGgpIHtcbiAgICAgICAgc3dpdGNoKHRoaXMudGFibGUudmVyc2lvbil7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFibGUudmFsdWVzLmdldEl0ZW0oZ2x5cGgpO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1pbiA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXggPSB0aGlzLnRhYmxlLmJpbmFyeVNlYXJjaEhlYWRlci5uVW5pdHMgLSAxO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZShtaW4gPD0gbWF4KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtaWQgPSBtaW4gKyBtYXggPj4gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWcgPSB0aGlzLnRhYmxlLnNlZ21lbnRzW21pZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzcGVjaWFsIGVuZCBvZiBzZWFyY2ggdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWcuZmlyc3RHbHlwaCA9PT0gMHhmZmZmKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnbHlwaCA8IHNlZy5maXJzdEdseXBoKSBtYXggPSBtaWQgLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZ2x5cGggPiBzZWcubGFzdEdseXBoKSBtaW4gPSBtaWQgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudGFibGUudmVyc2lvbiA9PT0gMikgcmV0dXJuIHNlZy52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBzZWcudmFsdWVzW2dseXBoIC0gc2VnLmZpcnN0R2x5cGhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtaW4gPSAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWF4ID0gdGhpcy50YWJsZS5iaW5hcnlTZWFyY2hIZWFkZXIublVuaXRzIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUobWluIDw9IG1heCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWlkID0gbWluICsgbWF4ID4+IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VnID0gdGhpcy50YWJsZS5zZWdtZW50c1ttaWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3BlY2lhbCBlbmQgb2Ygc2VhcmNoIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VnLmdseXBoID09PSAweGZmZmYpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdseXBoIDwgc2VnLmdseXBoKSBtYXggPSBtaWQgLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZ2x5cGggPiBzZWcuZ2x5cGgpIG1pbiA9IG1pZCArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBzZWcudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRhYmxlLnZhbHVlc1tnbHlwaCAtIHRoaXMudGFibGUuZmlyc3RHbHlwaF07XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBsb29rdXAgdGFibGUgZm9ybWF0OiAke3RoaXMudGFibGUudmVyc2lvbn1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnbHlwaHNGb3JWYWx1ZShjbGFzc1ZhbHVlKSB7XG4gICAgICAgIGxldCByZXMgPSBbXTtcbiAgICAgICAgc3dpdGNoKHRoaXMudGFibGUudmVyc2lvbil7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2VnbWVudCBvZiB0aGlzLnRhYmxlLnNlZ21lbnRzKWlmICh0aGlzLnRhYmxlLnZlcnNpb24gPT09IDIgJiYgc2VnbWVudC52YWx1ZSA9PT0gY2xhc3NWYWx1ZSkgcmVzLnB1c2goLi4uKDAsICQxMjcyNzczMGRkZmM4YmZlJGV4cG9ydCRkMDI2MzFjY2NmNzg5NzIzKShzZWdtZW50LmZpcnN0R2x5cGgsIHNlZ21lbnQubGFzdEdseXBoICsgMSkpO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGluZGV4ID0gMDsgaW5kZXggPCBzZWdtZW50LnZhbHVlcy5sZW5ndGg7IGluZGV4KyspaWYgKHNlZ21lbnQudmFsdWVzW2luZGV4XSA9PT0gY2xhc3NWYWx1ZSkgcmVzLnB1c2goc2VnbWVudC5maXJzdEdseXBoICsgaW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBzZWdtZW50IG9mIHRoaXMudGFibGUuc2VnbWVudHMpaWYgKHNlZ21lbnQudmFsdWUgPT09IGNsYXNzVmFsdWUpIHJlcy5wdXNoKHNlZ21lbnQuZ2x5cGgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLnRhYmxlLnZhbHVlcy5sZW5ndGg7IGkrKylpZiAodGhpcy50YWJsZS52YWx1ZXNbaV0gPT09IGNsYXNzVmFsdWUpIHJlcy5wdXNoKHRoaXMudGFibGUuZmlyc3RHbHlwaCArIGkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gbG9va3VwIHRhYmxlIGZvcm1hdDogJHt0aGlzLnRhYmxlLnZlcnNpb259YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgY29uc3RydWN0b3IodGFibGUpe1xuICAgICAgICB0aGlzLnRhYmxlID0gdGFibGU7XG4gICAgfVxufVxuKDAsICQ1MlpJZiRfMSkoW1xuICAgICgwLCAkZTcxNTY1ZjJjZTA5Y2I2YiRleHBvcnQkNjlhMzIwOWYxYTA2YzA0ZClcbl0sICRmZjVjZTA3N2RhZTBmMTQ0JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkucHJvdG90eXBlLCBcImdseXBoc0ZvclZhbHVlXCIsIG51bGwpO1xuXG5cbmNvbnN0ICQ1MGM3YWFjOTMxNmYyOTQ4JHZhciRTVEFSVF9PRl9URVhUX1NUQVRFID0gMDtcbmNvbnN0ICQ1MGM3YWFjOTMxNmYyOTQ4JHZhciRTVEFSVF9PRl9MSU5FX1NUQVRFID0gMTtcbmNvbnN0ICQ1MGM3YWFjOTMxNmYyOTQ4JHZhciRFTkRfT0ZfVEVYVF9DTEFTUyA9IDA7XG5jb25zdCAkNTBjN2FhYzkzMTZmMjk0OCR2YXIkT1VUX09GX0JPVU5EU19DTEFTUyA9IDE7XG5jb25zdCAkNTBjN2FhYzkzMTZmMjk0OCR2YXIkREVMRVRFRF9HTFlQSF9DTEFTUyA9IDI7XG5jb25zdCAkNTBjN2FhYzkzMTZmMjk0OCR2YXIkRU5EX09GX0xJTkVfQ0xBU1MgPSAzO1xuY29uc3QgJDUwYzdhYWM5MzE2ZjI5NDgkdmFyJERPTlRfQURWQU5DRSA9IDB4NDAwMDtcbmNsYXNzICQ1MGM3YWFjOTMxNmYyOTQ4JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIHByb2Nlc3MoZ2x5cGhzLCByZXZlcnNlLCBwcm9jZXNzRW50cnkpIHtcbiAgICAgICAgbGV0IGN1cnJlbnRTdGF0ZSA9ICQ1MGM3YWFjOTMxNmYyOTQ4JHZhciRTVEFSVF9PRl9URVhUX1NUQVRFOyAvLyBTVEFSVF9PRl9MSU5FX1NUQVRFIGlzIHVzZWQgZm9yIGthc2hpZGEgZ2x5cGggaW5zZXJ0aW9ucyBzb21ldGltZXMgSSB0aGluaz9cbiAgICAgICAgbGV0IGluZGV4ID0gcmV2ZXJzZSA/IGdseXBocy5sZW5ndGggLSAxIDogMDtcbiAgICAgICAgbGV0IGRpciA9IHJldmVyc2UgPyAtMSA6IDE7XG4gICAgICAgIHdoaWxlKGRpciA9PT0gMSAmJiBpbmRleCA8PSBnbHlwaHMubGVuZ3RoIHx8IGRpciA9PT0gLTEgJiYgaW5kZXggPj0gLTEpe1xuICAgICAgICAgICAgbGV0IGdseXBoID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBjbGFzc0NvZGUgPSAkNTBjN2FhYzkzMTZmMjk0OCR2YXIkT1VUX09GX0JPVU5EU19DTEFTUztcbiAgICAgICAgICAgIGxldCBzaG91bGRBZHZhbmNlID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gZ2x5cGhzLmxlbmd0aCB8fCBpbmRleCA9PT0gLTEpIGNsYXNzQ29kZSA9ICQ1MGM3YWFjOTMxNmYyOTQ4JHZhciRFTkRfT0ZfVEVYVF9DTEFTUztcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdseXBoID0gZ2x5cGhzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoZ2x5cGguaWQgPT09IDB4ZmZmZikgY2xhc3NDb2RlID0gJDUwYzdhYWM5MzE2ZjI5NDgkdmFyJERFTEVURURfR0xZUEhfQ0xBU1M7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZSA9IHRoaXMubG9va3VwVGFibGUubG9va3VwKGdseXBoLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzQ29kZSA9PSBudWxsKSBjbGFzc0NvZGUgPSAkNTBjN2FhYzkzMTZmMjk0OCR2YXIkT1VUX09GX0JPVU5EU19DTEFTUztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcm93ID0gdGhpcy5zdGF0ZVRhYmxlLnN0YXRlQXJyYXkuZ2V0SXRlbShjdXJyZW50U3RhdGUpO1xuICAgICAgICAgICAgbGV0IGVudHJ5SW5kZXggPSByb3dbY2xhc3NDb2RlXTtcbiAgICAgICAgICAgIGxldCBlbnRyeSA9IHRoaXMuc3RhdGVUYWJsZS5lbnRyeVRhYmxlLmdldEl0ZW0oZW50cnlJbmRleCk7XG4gICAgICAgICAgICBpZiAoY2xhc3NDb2RlICE9PSAkNTBjN2FhYzkzMTZmMjk0OCR2YXIkRU5EX09GX1RFWFRfQ0xBU1MgJiYgY2xhc3NDb2RlICE9PSAkNTBjN2FhYzkzMTZmMjk0OCR2YXIkREVMRVRFRF9HTFlQSF9DTEFTUykge1xuICAgICAgICAgICAgICAgIHByb2Nlc3NFbnRyeShnbHlwaCwgZW50cnksIGluZGV4KTtcbiAgICAgICAgICAgICAgICBzaG91bGRBZHZhbmNlID0gIShlbnRyeS5mbGFncyAmICQ1MGM3YWFjOTMxNmYyOTQ4JHZhciRET05UX0FEVkFOQ0UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudFN0YXRlID0gZW50cnkubmV3U3RhdGU7XG4gICAgICAgICAgICBpZiAoc2hvdWxkQWR2YW5jZSkgaW5kZXggKz0gZGlyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnbHlwaHM7XG4gICAgfVxuICAgIC8qKlxuICAgKiBQZXJmb3JtcyBhIGRlcHRoLWZpcnN0IHRyYXZlcnNhbCBvZiB0aGUgZ2x5cGggc3RyaW5nc1xuICAgKiByZXByZXNlbnRlZCBieSB0aGUgc3RhdGUgbWFjaGluZS5cbiAgICovIHRyYXZlcnNlKG9wdHMsIHN0YXRlID0gMCwgdmlzaXRlZCA9IG5ldyBTZXQpIHtcbiAgICAgICAgaWYgKHZpc2l0ZWQuaGFzKHN0YXRlKSkgcmV0dXJuO1xuICAgICAgICB2aXNpdGVkLmFkZChzdGF0ZSk7XG4gICAgICAgIGxldCB7IG5DbGFzc2VzOiBuQ2xhc3Nlcywgc3RhdGVBcnJheTogc3RhdGVBcnJheSwgZW50cnlUYWJsZTogZW50cnlUYWJsZSB9ID0gdGhpcy5zdGF0ZVRhYmxlO1xuICAgICAgICBsZXQgcm93ID0gc3RhdGVBcnJheS5nZXRJdGVtKHN0YXRlKTtcbiAgICAgICAgLy8gU2tpcCBwcmVkZWZpbmVkIGNsYXNzZXNcbiAgICAgICAgZm9yKGxldCBjbGFzc0NvZGUgPSA0OyBjbGFzc0NvZGUgPCBuQ2xhc3NlczsgY2xhc3NDb2RlKyspe1xuICAgICAgICAgICAgbGV0IGVudHJ5SW5kZXggPSByb3dbY2xhc3NDb2RlXTtcbiAgICAgICAgICAgIGxldCBlbnRyeSA9IGVudHJ5VGFibGUuZ2V0SXRlbShlbnRyeUluZGV4KTtcbiAgICAgICAgICAgIC8vIFRyeSBhbGwgZ2x5cGhzIGluIHRoZSBjbGFzc1xuICAgICAgICAgICAgZm9yIChsZXQgZ2x5cGggb2YgdGhpcy5sb29rdXBUYWJsZS5nbHlwaHNGb3JWYWx1ZShjbGFzc0NvZGUpKXtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5lbnRlcikgb3B0cy5lbnRlcihnbHlwaCwgZW50cnkpO1xuICAgICAgICAgICAgICAgIGlmIChlbnRyeS5uZXdTdGF0ZSAhPT0gMCkgdGhpcy50cmF2ZXJzZShvcHRzLCBlbnRyeS5uZXdTdGF0ZSwgdmlzaXRlZCk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuZXhpdCkgb3B0cy5leGl0KGdseXBoLCBlbnRyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3RydWN0b3Ioc3RhdGVUYWJsZSl7XG4gICAgICAgIHRoaXMuc3RhdGVUYWJsZSA9IHN0YXRlVGFibGU7XG4gICAgICAgIHRoaXMubG9va3VwVGFibGUgPSBuZXcgKDAsICRmZjVjZTA3N2RhZTBmMTQ0JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKHN0YXRlVGFibGUuY2xhc3NUYWJsZSk7XG4gICAgfVxufVxuXG5cblxuXG4vLyBpbmRpYyByZXBsYWNlbWVudCBmbGFnc1xuY29uc3QgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJE1BUktfRklSU1QgPSAweDgwMDA7XG5jb25zdCAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkTUFSS19MQVNUID0gMHgyMDAwO1xuY29uc3QgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJFZFUkIgPSAweDAwMEY7XG4vLyBjb250ZXh0dWFsIHN1YnN0aXR1dGlvbiBhbmQgZ2x5cGggaW5zZXJ0aW9uIGZsYWdcbmNvbnN0ICQ1NWY3MTQzM2E2MDVjODdkJHZhciRTRVRfTUFSSyA9IDB4ODAwMDtcbi8vIGxpZ2F0dXJlIGVudHJ5IGZsYWdzXG5jb25zdCAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkU0VUX0NPTVBPTkVOVCA9IDB4ODAwMDtcbmNvbnN0ICQ1NWY3MTQzM2E2MDVjODdkJHZhciRQRVJGT1JNX0FDVElPTiA9IDB4MjAwMDtcbi8vIGxpZ2F0dXJlIGFjdGlvbiBtYXNrc1xuY29uc3QgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJExBU1RfTUFTSyA9IDB4ODAwMDAwMDA7XG5jb25zdCAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkU1RPUkVfTUFTSyA9IDB4NDAwMDAwMDA7XG5jb25zdCAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkT0ZGU0VUX01BU0sgPSAweDNGRkZGRkZGO1xuY29uc3QgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJFZFUlRJQ0FMX09OTFkgPSAweDgwMDAwMDtcbmNvbnN0ICQ1NWY3MTQzM2E2MDVjODdkJHZhciRSRVZFUlNFX0RJUkVDVElPTiA9IDB4NDAwMDAwO1xuY29uc3QgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJEhPUklaT05UQUxfQU5EX1ZFUlRJQ0FMID0gMHgyMDAwMDA7XG4vLyBnbHlwaCBpbnNlcnRpb24gZmxhZ3NcbmNvbnN0ICQ1NWY3MTQzM2E2MDVjODdkJHZhciRDVVJSRU5UX0lTX0tBU0hJREFfTElLRSA9IDB4MjAwMDtcbmNvbnN0ICQ1NWY3MTQzM2E2MDVjODdkJHZhciRNQVJLRURfSVNfS0FTSElEQV9MSUtFID0gMHgxMDAwO1xuY29uc3QgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJENVUlJFTlRfSU5TRVJUX0JFRk9SRSA9IDB4MDgwMDtcbmNvbnN0ICQ1NWY3MTQzM2E2MDVjODdkJHZhciRNQVJLRURfSU5TRVJUX0JFRk9SRSA9IDB4MDQwMDtcbmNvbnN0ICQ1NWY3MTQzM2E2MDVjODdkJHZhciRDVVJSRU5UX0lOU0VSVF9DT1VOVCA9IDB4MDNFMDtcbmNvbnN0ICQ1NWY3MTQzM2E2MDVjODdkJHZhciRNQVJLRURfSU5TRVJUX0NPVU5UID0gMHgwMDFGO1xuY2xhc3MgJDU1ZjcxNDMzYTYwNWM4N2QkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSB7XG4gICAgLy8gUHJvY2Vzc2VzIGFuIGFycmF5IG9mIGdseXBocyBhbmQgYXBwbGllcyB0aGUgc3BlY2lmaWVkIGZlYXR1cmVzXG4gICAgLy8gRmVhdHVyZXMgc2hvdWxkIGJlIGluIHRoZSBmb3JtIG9mIHtmZWF0dXJlVHlwZTp7ZmVhdHVyZVNldHRpbmc6Ym9vbGVhbn19XG4gICAgcHJvY2VzcyhnbHlwaHMsIGZlYXR1cmVzID0ge30pIHtcbiAgICAgICAgZm9yIChsZXQgY2hhaW4gb2YgdGhpcy5tb3J4LmNoYWlucyl7XG4gICAgICAgICAgICBsZXQgZmxhZ3MgPSBjaGFpbi5kZWZhdWx0RmxhZ3M7XG4gICAgICAgICAgICAvLyBlbmFibGUvZGlzYWJsZSB0aGUgcmVxdWVzdGVkIGZlYXR1cmVzXG4gICAgICAgICAgICBmb3IgKGxldCBmZWF0dXJlIG9mIGNoYWluLmZlYXR1cmVzKXtcbiAgICAgICAgICAgICAgICBsZXQgZjtcbiAgICAgICAgICAgICAgICBpZiAoZiA9IGZlYXR1cmVzW2ZlYXR1cmUuZmVhdHVyZVR5cGVdKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmW2ZlYXR1cmUuZmVhdHVyZVNldHRpbmddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbGFncyAmPSBmZWF0dXJlLmRpc2FibGVGbGFncztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYWdzIHw9IGZlYXR1cmUuZW5hYmxlRmxhZ3M7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZltmZWF0dXJlLmZlYXR1cmVTZXR0aW5nXSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYWdzIHw9IH5mZWF0dXJlLmRpc2FibGVGbGFncztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYWdzICY9IH5mZWF0dXJlLmVuYWJsZUZsYWdzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgc3VidGFibGUgb2YgY2hhaW4uc3VidGFibGVzKWlmIChzdWJ0YWJsZS5zdWJGZWF0dXJlRmxhZ3MgJiBmbGFncykgdGhpcy5wcm9jZXNzU3VidGFibGUoc3VidGFibGUsIGdseXBocyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVtb3ZlIGRlbGV0ZWQgZ2x5cGhzXG4gICAgICAgIGxldCBpbmRleCA9IGdseXBocy5sZW5ndGggLSAxO1xuICAgICAgICB3aGlsZShpbmRleCA+PSAwKXtcbiAgICAgICAgICAgIGlmIChnbHlwaHNbaW5kZXhdLmlkID09PSAweGZmZmYpIGdseXBocy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2x5cGhzO1xuICAgIH1cbiAgICBwcm9jZXNzU3VidGFibGUoc3VidGFibGUsIGdseXBocykge1xuICAgICAgICB0aGlzLnN1YnRhYmxlID0gc3VidGFibGU7XG4gICAgICAgIHRoaXMuZ2x5cGhzID0gZ2x5cGhzO1xuICAgICAgICBpZiAodGhpcy5zdWJ0YWJsZS50eXBlID09PSA0KSB7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NOb25jb250ZXh0dWFsU3Vic3RpdHV0aW9ucyh0aGlzLnN1YnRhYmxlLCB0aGlzLmdseXBocyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5saWdhdHVyZVN0YWNrID0gW107XG4gICAgICAgIHRoaXMubWFya2VkR2x5cGggPSBudWxsO1xuICAgICAgICB0aGlzLmZpcnN0R2x5cGggPSBudWxsO1xuICAgICAgICB0aGlzLmxhc3RHbHlwaCA9IG51bGw7XG4gICAgICAgIHRoaXMubWFya2VkSW5kZXggPSBudWxsO1xuICAgICAgICBsZXQgc3RhdGVNYWNoaW5lID0gdGhpcy5nZXRTdGF0ZU1hY2hpbmUoc3VidGFibGUpO1xuICAgICAgICBsZXQgcHJvY2VzcyA9IHRoaXMuZ2V0UHJvY2Vzc29yKCk7XG4gICAgICAgIGxldCByZXZlcnNlID0gISEodGhpcy5zdWJ0YWJsZS5jb3ZlcmFnZSAmICQ1NWY3MTQzM2E2MDVjODdkJHZhciRSRVZFUlNFX0RJUkVDVElPTik7XG4gICAgICAgIHJldHVybiBzdGF0ZU1hY2hpbmUucHJvY2Vzcyh0aGlzLmdseXBocywgcmV2ZXJzZSwgcHJvY2Vzcyk7XG4gICAgfVxuICAgIGdldFN0YXRlTWFjaGluZShzdWJ0YWJsZSkge1xuICAgICAgICByZXR1cm4gbmV3ICgwLCAkNTBjN2FhYzkzMTZmMjk0OCRleHBvcnQkMmUyYmNkODczOWFlMDM5KShzdWJ0YWJsZS50YWJsZS5zdGF0ZVRhYmxlKTtcbiAgICB9XG4gICAgZ2V0UHJvY2Vzc29yKCkge1xuICAgICAgICBzd2l0Y2godGhpcy5zdWJ0YWJsZS50eXBlKXtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzSW5kaWNSZWFycmFnZW1lbnQ7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc0NvbnRleHR1YWxTdWJzdGl0dXRpb247XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc0xpZ2F0dXJlO1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NOb25jb250ZXh0dWFsU3Vic3RpdHV0aW9ucztcbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzR2x5cGhJbnNlcnRpb247XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBtb3J4IHN1YnRhYmxlIHR5cGU6ICR7dGhpcy5zdWJ0YWJsZS50eXBlfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByb2Nlc3NJbmRpY1JlYXJyYWdlbWVudChnbHlwaCwgZW50cnksIGluZGV4KSB7XG4gICAgICAgIGlmIChlbnRyeS5mbGFncyAmICQ1NWY3MTQzM2E2MDVjODdkJHZhciRNQVJLX0ZJUlNUKSB0aGlzLmZpcnN0R2x5cGggPSBpbmRleDtcbiAgICAgICAgaWYgKGVudHJ5LmZsYWdzICYgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJE1BUktfTEFTVCkgdGhpcy5sYXN0R2x5cGggPSBpbmRleDtcbiAgICAgICAgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJHJlb3JkZXJHbHlwaHModGhpcy5nbHlwaHMsIGVudHJ5LmZsYWdzICYgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJFZFUkIsIHRoaXMuZmlyc3RHbHlwaCwgdGhpcy5sYXN0R2x5cGgpO1xuICAgIH1cbiAgICBwcm9jZXNzQ29udGV4dHVhbFN1YnN0aXR1dGlvbihnbHlwaCwgZW50cnksIGluZGV4KSB7XG4gICAgICAgIGxldCBzdWJzaXR1dGlvbnMgPSB0aGlzLnN1YnRhYmxlLnRhYmxlLnN1YnN0aXR1dGlvblRhYmxlLml0ZW1zO1xuICAgICAgICBpZiAoZW50cnkubWFya0luZGV4ICE9PSAweGZmZmYpIHtcbiAgICAgICAgICAgIGxldCBsb29rdXAgPSBzdWJzaXR1dGlvbnMuZ2V0SXRlbShlbnRyeS5tYXJrSW5kZXgpO1xuICAgICAgICAgICAgbGV0IGxvb2t1cFRhYmxlID0gbmV3ICgwLCAkZmY1Y2UwNzdkYWUwZjE0NCRleHBvcnQkMmUyYmNkODczOWFlMDM5KShsb29rdXApO1xuICAgICAgICAgICAgZ2x5cGggPSB0aGlzLmdseXBoc1t0aGlzLm1hcmtlZEdseXBoXTtcbiAgICAgICAgICAgIHZhciBnaWQgPSBsb29rdXBUYWJsZS5sb29rdXAoZ2x5cGguaWQpO1xuICAgICAgICAgICAgaWYgKGdpZCkgdGhpcy5nbHlwaHNbdGhpcy5tYXJrZWRHbHlwaF0gPSB0aGlzLmZvbnQuZ2V0R2x5cGgoZ2lkLCBnbHlwaC5jb2RlUG9pbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW50cnkuY3VycmVudEluZGV4ICE9PSAweGZmZmYpIHtcbiAgICAgICAgICAgIGxldCBsb29rdXAgPSBzdWJzaXR1dGlvbnMuZ2V0SXRlbShlbnRyeS5jdXJyZW50SW5kZXgpO1xuICAgICAgICAgICAgbGV0IGxvb2t1cFRhYmxlID0gbmV3ICgwLCAkZmY1Y2UwNzdkYWUwZjE0NCRleHBvcnQkMmUyYmNkODczOWFlMDM5KShsb29rdXApO1xuICAgICAgICAgICAgZ2x5cGggPSB0aGlzLmdseXBoc1tpbmRleF07XG4gICAgICAgICAgICB2YXIgZ2lkID0gbG9va3VwVGFibGUubG9va3VwKGdseXBoLmlkKTtcbiAgICAgICAgICAgIGlmIChnaWQpIHRoaXMuZ2x5cGhzW2luZGV4XSA9IHRoaXMuZm9udC5nZXRHbHlwaChnaWQsIGdseXBoLmNvZGVQb2ludHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbnRyeS5mbGFncyAmICQ1NWY3MTQzM2E2MDVjODdkJHZhciRTRVRfTUFSSykgdGhpcy5tYXJrZWRHbHlwaCA9IGluZGV4O1xuICAgIH1cbiAgICBwcm9jZXNzTGlnYXR1cmUoZ2x5cGgsIGVudHJ5LCBpbmRleCkge1xuICAgICAgICBpZiAoZW50cnkuZmxhZ3MgJiAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkU0VUX0NPTVBPTkVOVCkgdGhpcy5saWdhdHVyZVN0YWNrLnB1c2goaW5kZXgpO1xuICAgICAgICBpZiAoZW50cnkuZmxhZ3MgJiAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkUEVSRk9STV9BQ1RJT04pIHtcbiAgICAgICAgICAgIGxldCBhY3Rpb25zID0gdGhpcy5zdWJ0YWJsZS50YWJsZS5saWdhdHVyZUFjdGlvbnM7XG4gICAgICAgICAgICBsZXQgY29tcG9uZW50cyA9IHRoaXMuc3VidGFibGUudGFibGUuY29tcG9uZW50cztcbiAgICAgICAgICAgIGxldCBsaWdhdHVyZUxpc3QgPSB0aGlzLnN1YnRhYmxlLnRhYmxlLmxpZ2F0dXJlTGlzdDtcbiAgICAgICAgICAgIGxldCBhY3Rpb25JbmRleCA9IGVudHJ5LmFjdGlvbjtcbiAgICAgICAgICAgIGxldCBsYXN0ID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgbGlnYXR1cmVJbmRleCA9IDA7XG4gICAgICAgICAgICBsZXQgY29kZVBvaW50cyA9IFtdO1xuICAgICAgICAgICAgbGV0IGxpZ2F0dXJlR2x5cGhzID0gW107XG4gICAgICAgICAgICB3aGlsZSghbGFzdCl7XG4gICAgICAgICAgICAgICAgbGV0IGNvbXBvbmVudEdseXBoID0gdGhpcy5saWdhdHVyZVN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgIGNvZGVQb2ludHMudW5zaGlmdCguLi50aGlzLmdseXBoc1tjb21wb25lbnRHbHlwaF0uY29kZVBvaW50cyk7XG4gICAgICAgICAgICAgICAgbGV0IGFjdGlvbiA9IGFjdGlvbnMuZ2V0SXRlbShhY3Rpb25JbmRleCsrKTtcbiAgICAgICAgICAgICAgICBsYXN0ID0gISEoYWN0aW9uICYgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJExBU1RfTUFTSyk7XG4gICAgICAgICAgICAgICAgbGV0IHN0b3JlID0gISEoYWN0aW9uICYgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJFNUT1JFX01BU0spO1xuICAgICAgICAgICAgICAgIGxldCBvZmZzZXQgPSAoYWN0aW9uICYgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJE9GRlNFVF9NQVNLKSA8PCAyID4+IDI7IC8vIHNpZ24gZXh0ZW5kIDMwIHRvIDMyIGJpdHNcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gdGhpcy5nbHlwaHNbY29tcG9uZW50R2x5cGhdLmlkO1xuICAgICAgICAgICAgICAgIGxldCBjb21wb25lbnQgPSBjb21wb25lbnRzLmdldEl0ZW0ob2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBsaWdhdHVyZUluZGV4ICs9IGNvbXBvbmVudDtcbiAgICAgICAgICAgICAgICBpZiAobGFzdCB8fCBzdG9yZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGlnYXR1cmVFbnRyeSA9IGxpZ2F0dXJlTGlzdC5nZXRJdGVtKGxpZ2F0dXJlSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdseXBoc1tjb21wb25lbnRHbHlwaF0gPSB0aGlzLmZvbnQuZ2V0R2x5cGgobGlnYXR1cmVFbnRyeSwgY29kZVBvaW50cyk7XG4gICAgICAgICAgICAgICAgICAgIGxpZ2F0dXJlR2x5cGhzLnB1c2goY29tcG9uZW50R2x5cGgpO1xuICAgICAgICAgICAgICAgICAgICBsaWdhdHVyZUluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgY29kZVBvaW50cyA9IFtdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLmdseXBoc1tjb21wb25lbnRHbHlwaF0gPSB0aGlzLmZvbnQuZ2V0R2x5cGgoMHhmZmZmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFB1dCBsaWdhdHVyZSBnbHlwaCBpbmRleGVzIGJhY2sgb24gdGhlIHN0YWNrXG4gICAgICAgICAgICB0aGlzLmxpZ2F0dXJlU3RhY2sucHVzaCguLi5saWdhdHVyZUdseXBocyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJvY2Vzc05vbmNvbnRleHR1YWxTdWJzdGl0dXRpb25zKHN1YnRhYmxlLCBnbHlwaHMsIGluZGV4KSB7XG4gICAgICAgIGxldCBsb29rdXBUYWJsZSA9IG5ldyAoMCwgJGZmNWNlMDc3ZGFlMGYxNDQkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoc3VidGFibGUudGFibGUubG9va3VwVGFibGUpO1xuICAgICAgICBmb3IoaW5kZXggPSAwOyBpbmRleCA8IGdseXBocy5sZW5ndGg7IGluZGV4Kyspe1xuICAgICAgICAgICAgbGV0IGdseXBoID0gZ2x5cGhzW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChnbHlwaC5pZCAhPT0gMHhmZmZmKSB7XG4gICAgICAgICAgICAgICAgbGV0IGdpZCA9IGxvb2t1cFRhYmxlLmxvb2t1cChnbHlwaC5pZCk7XG4gICAgICAgICAgICAgICAgaWYgKGdpZCkgZ2x5cGhzW2luZGV4XSA9IHRoaXMuZm9udC5nZXRHbHlwaChnaWQsIGdseXBoLmNvZGVQb2ludHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF9pbnNlcnRHbHlwaHMoZ2x5cGhJbmRleCwgaW5zZXJ0aW9uQWN0aW9uSW5kZXgsIGNvdW50LCBpc0JlZm9yZSkge1xuICAgICAgICBsZXQgaW5zZXJ0aW9ucyA9IFtdO1xuICAgICAgICB3aGlsZShjb3VudC0tKXtcbiAgICAgICAgICAgIGxldCBnaWQgPSB0aGlzLnN1YnRhYmxlLnRhYmxlLmluc2VydGlvbkFjdGlvbnMuZ2V0SXRlbShpbnNlcnRpb25BY3Rpb25JbmRleCsrKTtcbiAgICAgICAgICAgIGluc2VydGlvbnMucHVzaCh0aGlzLmZvbnQuZ2V0R2x5cGgoZ2lkKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0JlZm9yZSkgZ2x5cGhJbmRleCsrO1xuICAgICAgICB0aGlzLmdseXBocy5zcGxpY2UoZ2x5cGhJbmRleCwgMCwgLi4uaW5zZXJ0aW9ucyk7XG4gICAgfVxuICAgIHByb2Nlc3NHbHlwaEluc2VydGlvbihnbHlwaCwgZW50cnksIGluZGV4KSB7XG4gICAgICAgIGlmIChlbnRyeS5mbGFncyAmICQ1NWY3MTQzM2E2MDVjODdkJHZhciRTRVRfTUFSSykgdGhpcy5tYXJrZWRJbmRleCA9IGluZGV4O1xuICAgICAgICBpZiAoZW50cnkubWFya2VkSW5zZXJ0SW5kZXggIT09IDB4ZmZmZikge1xuICAgICAgICAgICAgbGV0IGNvdW50ID0gKGVudHJ5LmZsYWdzICYgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJE1BUktFRF9JTlNFUlRfQ09VTlQpID4+PiA1O1xuICAgICAgICAgICAgbGV0IGlzQmVmb3JlID0gISEoZW50cnkuZmxhZ3MgJiAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkTUFSS0VEX0lOU0VSVF9CRUZPUkUpO1xuICAgICAgICAgICAgdGhpcy5faW5zZXJ0R2x5cGhzKHRoaXMubWFya2VkSW5kZXgsIGVudHJ5Lm1hcmtlZEluc2VydEluZGV4LCBjb3VudCwgaXNCZWZvcmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbnRyeS5jdXJyZW50SW5zZXJ0SW5kZXggIT09IDB4ZmZmZikge1xuICAgICAgICAgICAgbGV0IGNvdW50ID0gKGVudHJ5LmZsYWdzICYgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJENVUlJFTlRfSU5TRVJUX0NPVU5UKSA+Pj4gNTtcbiAgICAgICAgICAgIGxldCBpc0JlZm9yZSA9ICEhKGVudHJ5LmZsYWdzICYgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJENVUlJFTlRfSU5TRVJUX0JFRk9SRSk7XG4gICAgICAgICAgICB0aGlzLl9pbnNlcnRHbHlwaHMoaW5kZXgsIGVudHJ5LmN1cnJlbnRJbnNlcnRJbmRleCwgY291bnQsIGlzQmVmb3JlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRTdXBwb3J0ZWRGZWF0dXJlcygpIHtcbiAgICAgICAgbGV0IGZlYXR1cmVzID0gW107XG4gICAgICAgIGZvciAobGV0IGNoYWluIG9mIHRoaXMubW9yeC5jaGFpbnMpZm9yIChsZXQgZmVhdHVyZSBvZiBjaGFpbi5mZWF0dXJlcylmZWF0dXJlcy5wdXNoKFtcbiAgICAgICAgICAgIGZlYXR1cmUuZmVhdHVyZVR5cGUsXG4gICAgICAgICAgICBmZWF0dXJlLmZlYXR1cmVTZXR0aW5nXG4gICAgICAgIF0pO1xuICAgICAgICByZXR1cm4gZmVhdHVyZXM7XG4gICAgfVxuICAgIGdlbmVyYXRlSW5wdXRzKGdpZCkge1xuICAgICAgICBpZiAoIXRoaXMuaW5wdXRDYWNoZSkgdGhpcy5nZW5lcmF0ZUlucHV0Q2FjaGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRDYWNoZVtnaWRdIHx8IFtdO1xuICAgIH1cbiAgICBnZW5lcmF0ZUlucHV0Q2FjaGUoKSB7XG4gICAgICAgIHRoaXMuaW5wdXRDYWNoZSA9IHt9O1xuICAgICAgICBmb3IgKGxldCBjaGFpbiBvZiB0aGlzLm1vcnguY2hhaW5zKXtcbiAgICAgICAgICAgIGxldCBmbGFncyA9IGNoYWluLmRlZmF1bHRGbGFncztcbiAgICAgICAgICAgIGZvciAobGV0IHN1YnRhYmxlIG9mIGNoYWluLnN1YnRhYmxlcylpZiAoc3VidGFibGUuc3ViRmVhdHVyZUZsYWdzICYgZmxhZ3MpIHRoaXMuZ2VuZXJhdGVJbnB1dHNGb3JTdWJ0YWJsZShzdWJ0YWJsZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2VuZXJhdGVJbnB1dHNGb3JTdWJ0YWJsZShzdWJ0YWJsZSkge1xuICAgICAgICAvLyBDdXJyZW50bHksIG9ubHkgc3VwcG9ydGluZyBsaWdhdHVyZSBzdWJ0YWJsZXMuXG4gICAgICAgIGlmIChzdWJ0YWJsZS50eXBlICE9PSAyKSByZXR1cm47XG4gICAgICAgIGxldCByZXZlcnNlID0gISEoc3VidGFibGUuY292ZXJhZ2UgJiAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkUkVWRVJTRV9ESVJFQ1RJT04pO1xuICAgICAgICBpZiAocmV2ZXJzZSkgdGhyb3cgbmV3IEVycm9yKCdSZXZlcnNlIHN1YnRhYmxlLCBub3Qgc3VwcG9ydGVkLicpO1xuICAgICAgICB0aGlzLnN1YnRhYmxlID0gc3VidGFibGU7XG4gICAgICAgIHRoaXMubGlnYXR1cmVTdGFjayA9IFtdO1xuICAgICAgICBsZXQgc3RhdGVNYWNoaW5lID0gdGhpcy5nZXRTdGF0ZU1hY2hpbmUoc3VidGFibGUpO1xuICAgICAgICBsZXQgcHJvY2VzcyA9IHRoaXMuZ2V0UHJvY2Vzc29yKCk7XG4gICAgICAgIGxldCBpbnB1dCA9IFtdO1xuICAgICAgICBsZXQgc3RhY2sgPSBbXTtcbiAgICAgICAgdGhpcy5nbHlwaHMgPSBbXTtcbiAgICAgICAgc3RhdGVNYWNoaW5lLnRyYXZlcnNlKHtcbiAgICAgICAgICAgIGVudGVyOiAoZ2x5cGgsIGVudHJ5KT0+e1xuICAgICAgICAgICAgICAgIGxldCBnbHlwaHMgPSB0aGlzLmdseXBocztcbiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgZ2x5cGhzOiBnbHlwaHMuc2xpY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgbGlnYXR1cmVTdGFjazogdGhpcy5saWdhdHVyZVN0YWNrLnNsaWNlKClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBBZGQgZ2x5cGggdG8gaW5wdXQgYW5kIGdseXBocyB0byBwcm9jZXNzLlxuICAgICAgICAgICAgICAgIGxldCBnID0gdGhpcy5mb250LmdldEdseXBoKGdseXBoKTtcbiAgICAgICAgICAgICAgICBpbnB1dC5wdXNoKGcpO1xuICAgICAgICAgICAgICAgIGdseXBocy5wdXNoKGlucHV0W2lucHV0Lmxlbmd0aCAtIDFdKTtcbiAgICAgICAgICAgICAgICAvLyBQcm9jZXNzIGxpZ2F0dXJlIHN1YnN0aXR1dGlvblxuICAgICAgICAgICAgICAgIHByb2Nlc3MoZ2x5cGhzW2dseXBocy5sZW5ndGggLSAxXSwgZW50cnksIGdseXBocy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICAvLyBBZGQgaW5wdXQgdG8gcmVzdWx0IGlmIG9ubHkgb25lIG1hdGNoaW5nIChub24tZGVsZXRlZCkgZ2x5cGggcmVtYWlucy5cbiAgICAgICAgICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICAgICAgICAgIGxldCBmb3VuZCA9IDA7XG4gICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGdseXBocy5sZW5ndGggJiYgY291bnQgPD0gMTsgaSsrKWlmIChnbHlwaHNbaV0uaWQgIT09IDB4ZmZmZikge1xuICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IGdseXBoc1tpXS5pZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBpbnB1dC5tYXAoKGcpPT5nLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNhY2hlID0gdGhpcy5pbnB1dENhY2hlW2ZvdW5kXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlKSBjYWNoZS5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgdGhpcy5pbnB1dENhY2hlW2ZvdW5kXSA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBleGl0OiAoKT0+e1xuICAgICAgICAgICAgICAgICh7IGdseXBoczogdGhpcy5nbHlwaHMsIGxpZ2F0dXJlU3RhY2s6IHRoaXMubGlnYXR1cmVTdGFjayB9ID0gc3RhY2sucG9wKCkpO1xuICAgICAgICAgICAgICAgIGlucHV0LnBvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZm9udCl7XG4gICAgICAgIHRoaXMucHJvY2Vzc0luZGljUmVhcnJhZ2VtZW50ID0gdGhpcy5wcm9jZXNzSW5kaWNSZWFycmFnZW1lbnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5wcm9jZXNzQ29udGV4dHVhbFN1YnN0aXR1dGlvbiA9IHRoaXMucHJvY2Vzc0NvbnRleHR1YWxTdWJzdGl0dXRpb24uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5wcm9jZXNzTGlnYXR1cmUgPSB0aGlzLnByb2Nlc3NMaWdhdHVyZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnByb2Nlc3NOb25jb250ZXh0dWFsU3Vic3RpdHV0aW9ucyA9IHRoaXMucHJvY2Vzc05vbmNvbnRleHR1YWxTdWJzdGl0dXRpb25zLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucHJvY2Vzc0dseXBoSW5zZXJ0aW9uID0gdGhpcy5wcm9jZXNzR2x5cGhJbnNlcnRpb24uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5mb250ID0gZm9udDtcbiAgICAgICAgdGhpcy5tb3J4ID0gZm9udC5tb3J4O1xuICAgICAgICB0aGlzLmlucHV0Q2FjaGUgPSBudWxsO1xuICAgIH1cbn1cbigwLCAkNTJaSWYkXzEpKFtcbiAgICAoMCwgJGU3MTU2NWYyY2UwOWNiNmIkZXhwb3J0JDY5YTMyMDlmMWEwNmMwNGQpXG5dLCAkNTVmNzE0MzNhNjA1Yzg3ZCRleHBvcnQkMmUyYmNkODczOWFlMDM5LnByb3RvdHlwZSwgXCJnZXRTdGF0ZU1hY2hpbmVcIiwgbnVsbCk7XG4vLyBzd2FwcyB0aGUgZ2x5cGhzIGluIHJhbmdlQSB3aXRoIHRob3NlIGluIHJhbmdlQlxuLy8gcmV2ZXJzZSB0aGUgZ2x5cGhzIGluc2lkZSB0aG9zZSByYW5nZXMgaWYgc3BlY2lmaWVkXG4vLyByYW5nZXMgYXJlIGluIFtvZmZzZXQsIGxlbmd0aF0gZm9ybWF0XG5mdW5jdGlvbiAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkc3dhcChnbHlwaHMsIHJhbmdlQSwgcmFuZ2VCLCByZXZlcnNlQSA9IGZhbHNlLCByZXZlcnNlQiA9IGZhbHNlKSB7XG4gICAgbGV0IGVuZCA9IGdseXBocy5zcGxpY2UocmFuZ2VCWzBdIC0gKHJhbmdlQlsxXSAtIDEpLCByYW5nZUJbMV0pO1xuICAgIGlmIChyZXZlcnNlQikgZW5kLnJldmVyc2UoKTtcbiAgICBsZXQgc3RhcnQgPSBnbHlwaHMuc3BsaWNlKHJhbmdlQVswXSwgcmFuZ2VBWzFdLCAuLi5lbmQpO1xuICAgIGlmIChyZXZlcnNlQSkgc3RhcnQucmV2ZXJzZSgpO1xuICAgIGdseXBocy5zcGxpY2UocmFuZ2VCWzBdIC0gKHJhbmdlQVsxXSAtIDEpLCAwLCAuLi5zdGFydCk7XG4gICAgcmV0dXJuIGdseXBocztcbn1cbmZ1bmN0aW9uICQ1NWY3MTQzM2E2MDVjODdkJHZhciRyZW9yZGVyR2x5cGhzKGdseXBocywgdmVyYiwgZmlyc3RHbHlwaCwgbGFzdEdseXBoKSB7XG4gICAgbGV0IGxlbmd0aCA9IGxhc3RHbHlwaCAtIGZpcnN0R2x5cGggKyAxO1xuICAgIHN3aXRjaCh2ZXJiKXtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgcmV0dXJuIGdseXBocztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgcmV0dXJuICQ1NWY3MTQzM2E2MDVjODdkJHZhciRzd2FwKGdseXBocywgW1xuICAgICAgICAgICAgICAgIGZpcnN0R2x5cGgsXG4gICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgXSwgW1xuICAgICAgICAgICAgICAgIGxhc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuICQ1NWY3MTQzM2E2MDVjODdkJHZhciRzd2FwKGdseXBocywgW1xuICAgICAgICAgICAgICAgIGZpcnN0R2x5cGgsXG4gICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgXSwgW1xuICAgICAgICAgICAgICAgIGxhc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuICQ1NWY3MTQzM2E2MDVjODdkJHZhciRzd2FwKGdseXBocywgW1xuICAgICAgICAgICAgICAgIGZpcnN0R2x5cGgsXG4gICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgXSwgW1xuICAgICAgICAgICAgICAgIGxhc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgcmV0dXJuICQ1NWY3MTQzM2E2MDVjODdkJHZhciRzd2FwKGdseXBocywgW1xuICAgICAgICAgICAgICAgIGZpcnN0R2x5cGgsXG4gICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgXSwgW1xuICAgICAgICAgICAgICAgIGxhc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgcmV0dXJuICQ1NWY3MTQzM2E2MDVjODdkJHZhciRzd2FwKGdseXBocywgW1xuICAgICAgICAgICAgICAgIGZpcnN0R2x5cGgsXG4gICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgXSwgW1xuICAgICAgICAgICAgICAgIGxhc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICBdLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIHJldHVybiAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkc3dhcChnbHlwaHMsIFtcbiAgICAgICAgICAgICAgICBmaXJzdEdseXBoLFxuICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgIF0sIFtcbiAgICAgICAgICAgICAgICBsYXN0R2x5cGgsXG4gICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgXSk7XG4gICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgIHJldHVybiAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkc3dhcChnbHlwaHMsIFtcbiAgICAgICAgICAgICAgICBmaXJzdEdseXBoLFxuICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgIF0sIFtcbiAgICAgICAgICAgICAgICBsYXN0R2x5cGgsXG4gICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgXSwgZmFsc2UsIHRydWUpO1xuICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICByZXR1cm4gJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJHN3YXAoZ2x5cGhzLCBbXG4gICAgICAgICAgICAgICAgZmlyc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICBdLCBbXG4gICAgICAgICAgICAgICAgbGFzdEdseXBoLFxuICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgIF0pO1xuICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICByZXR1cm4gJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJHN3YXAoZ2x5cGhzLCBbXG4gICAgICAgICAgICAgICAgZmlyc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICBdLCBbXG4gICAgICAgICAgICAgICAgbGFzdEdseXBoLFxuICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgIF0sIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgIHJldHVybiAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkc3dhcChnbHlwaHMsIFtcbiAgICAgICAgICAgICAgICBmaXJzdEdseXBoLFxuICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgIF0sIFtcbiAgICAgICAgICAgICAgICBsYXN0R2x5cGgsXG4gICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgXSk7XG4gICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICByZXR1cm4gJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJHN3YXAoZ2x5cGhzLCBbXG4gICAgICAgICAgICAgICAgZmlyc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICBdLCBbXG4gICAgICAgICAgICAgICAgbGFzdEdseXBoLFxuICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgIF0sIHRydWUsIGZhbHNlKTtcbiAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgIHJldHVybiAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkc3dhcChnbHlwaHMsIFtcbiAgICAgICAgICAgICAgICBmaXJzdEdseXBoLFxuICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgIF0sIFtcbiAgICAgICAgICAgICAgICBsYXN0R2x5cGgsXG4gICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgXSk7XG4gICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICByZXR1cm4gJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJHN3YXAoZ2x5cGhzLCBbXG4gICAgICAgICAgICAgICAgZmlyc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICBdLCBbXG4gICAgICAgICAgICAgICAgbGFzdEdseXBoLFxuICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgIF0sIHRydWUsIGZhbHNlKTtcbiAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgIHJldHVybiAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkc3dhcChnbHlwaHMsIFtcbiAgICAgICAgICAgICAgICBmaXJzdEdseXBoLFxuICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgIF0sIFtcbiAgICAgICAgICAgICAgICBsYXN0R2x5cGgsXG4gICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgXSwgZmFsc2UsIHRydWUpO1xuICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgcmV0dXJuICQ1NWY3MTQzM2E2MDVjODdkJHZhciRzd2FwKGdseXBocywgW1xuICAgICAgICAgICAgICAgIGZpcnN0R2x5cGgsXG4gICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgXSwgW1xuICAgICAgICAgICAgICAgIGxhc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICBdLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biB2ZXJiOiAke3ZlcmJ9YCk7XG4gICAgfVxufVxuXG5cbmNsYXNzICRiYTZkZDc0MjAzYmU4NzI4JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIHN1YnN0aXR1dGUoZ2x5cGhSdW4pIHtcbiAgICAgICAgLy8gQUFUIGV4cGVjdHMgdGhlIGdseXBocyB0byBiZSBpbiB2aXN1YWwgb3JkZXIgcHJpb3IgdG8gbW9yeCBwcm9jZXNzaW5nLFxuICAgICAgICAvLyBzbyByZXZlcnNlIHRoZSBnbHlwaHMgaWYgdGhlIHNjcmlwdCBpcyByaWdodC10by1sZWZ0LlxuICAgICAgICBpZiAoZ2x5cGhSdW4uZGlyZWN0aW9uID09PSAncnRsJykgZ2x5cGhSdW4uZ2x5cGhzLnJldmVyc2UoKTtcbiAgICAgICAgdGhpcy5tb3J4UHJvY2Vzc29yLnByb2Nlc3MoZ2x5cGhSdW4uZ2x5cGhzLCAkM2I2MzAyYjY0ZWNjYzMyYyRleHBvcnQkYjgxM2Y3ZDJhMTY3N2MxNihnbHlwaFJ1bi5mZWF0dXJlcykpO1xuICAgIH1cbiAgICBnZXRBdmFpbGFibGVGZWF0dXJlcyhzY3JpcHQsIGxhbmd1YWdlKSB7XG4gICAgICAgIHJldHVybiAkM2I2MzAyYjY0ZWNjYzMyYyRleHBvcnQkYmQ2ZGYzNDdhNGYzOTFjNCh0aGlzLm1vcnhQcm9jZXNzb3IuZ2V0U3VwcG9ydGVkRmVhdHVyZXMoKSk7XG4gICAgfVxuICAgIHN0cmluZ3NGb3JHbHlwaChnaWQpIHtcbiAgICAgICAgbGV0IGdseXBoU3RyaW5ncyA9IHRoaXMubW9yeFByb2Nlc3Nvci5nZW5lcmF0ZUlucHV0cyhnaWQpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IFNldDtcbiAgICAgICAgZm9yIChsZXQgZ2x5cGhzIG9mIGdseXBoU3RyaW5ncyl0aGlzLl9hZGRTdHJpbmdzKGdseXBocywgMCwgcmVzdWx0LCAnJyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIF9hZGRTdHJpbmdzKGdseXBocywgaW5kZXgsIHN0cmluZ3MsIHN0cmluZykge1xuICAgICAgICBsZXQgY29kZVBvaW50cyA9IHRoaXMuZm9udC5fY21hcFByb2Nlc3Nvci5jb2RlUG9pbnRzRm9yR2x5cGgoZ2x5cGhzW2luZGV4XSk7XG4gICAgICAgIGZvciAobGV0IGNvZGVQb2ludCBvZiBjb2RlUG9pbnRzKXtcbiAgICAgICAgICAgIGxldCBzID0gc3RyaW5nICsgU3RyaW5nLmZyb21Db2RlUG9pbnQoY29kZVBvaW50KTtcbiAgICAgICAgICAgIGlmIChpbmRleCA8IGdseXBocy5sZW5ndGggLSAxKSB0aGlzLl9hZGRTdHJpbmdzKGdseXBocywgaW5kZXggKyAxLCBzdHJpbmdzLCBzKTtcbiAgICAgICAgICAgIGVsc2Ugc3RyaW5ncy5hZGQocyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3RydWN0b3IoZm9udCl7XG4gICAgICAgIHRoaXMuZm9udCA9IGZvbnQ7XG4gICAgICAgIHRoaXMubW9yeFByb2Nlc3NvciA9IG5ldyAoMCwgJDU1ZjcxNDMzYTYwNWM4N2QkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoZm9udCk7XG4gICAgICAgIHRoaXMuZmFsbGJhY2tQb3NpdGlvbiA9IGZhbHNlO1xuICAgIH1cbn1cblxuXG5cbmNsYXNzICQ5NGQ3YTczYmQyZWRmYzlhJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIC8qKlxuICAgKiBBZGRzIHRoZSBnaXZlbiBmZWF0dXJlcyB0byB0aGUgbGFzdCBzdGFnZS5cbiAgICogSWdub3JlcyBmZWF0dXJlcyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIGFwcGxpZWQuXG4gICAqLyBfYWRkRmVhdHVyZXMoZmVhdHVyZXMsIGdsb2JhbCkge1xuICAgICAgICBsZXQgc3RhZ2VJbmRleCA9IHRoaXMuc3RhZ2VzLmxlbmd0aCAtIDE7XG4gICAgICAgIGxldCBzdGFnZSA9IHRoaXMuc3RhZ2VzW3N0YWdlSW5kZXhdO1xuICAgICAgICBmb3IgKGxldCBmZWF0dXJlIG9mIGZlYXR1cmVzKWlmICh0aGlzLmFsbEZlYXR1cmVzW2ZlYXR1cmVdID09IG51bGwpIHtcbiAgICAgICAgICAgIHN0YWdlLnB1c2goZmVhdHVyZSk7XG4gICAgICAgICAgICB0aGlzLmFsbEZlYXR1cmVzW2ZlYXR1cmVdID0gc3RhZ2VJbmRleDtcbiAgICAgICAgICAgIGlmIChnbG9iYWwpIHRoaXMuZ2xvYmFsRmVhdHVyZXNbZmVhdHVyZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgKiBBZGQgZmVhdHVyZXMgdG8gdGhlIGxhc3Qgc3RhZ2VcbiAgICovIGFkZChhcmcsIGdsb2JhbCA9IHRydWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhZ2VzLmxlbmd0aCA9PT0gMCkgdGhpcy5zdGFnZXMucHVzaChbXSk7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJykgYXJnID0gW1xuICAgICAgICAgICAgYXJnXG4gICAgICAgIF07XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHRoaXMuX2FkZEZlYXR1cmVzKGFyZywgZ2xvYmFsKTtcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZEZlYXR1cmVzKGFyZy5nbG9iYWwgfHwgW10sIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5fYWRkRmVhdHVyZXMoYXJnLmxvY2FsIHx8IFtdLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBhcmd1bWVudCB0byBTaGFwaW5nUGxhbiNhZGRcIik7XG4gICAgfVxuICAgIC8qKlxuICAgKiBBZGQgYSBuZXcgc3RhZ2VcbiAgICovIGFkZFN0YWdlKGFyZywgZ2xvYmFsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nKSB0aGlzLnN0YWdlcy5wdXNoKGFyZywgW10pO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhZ2VzLnB1c2goW10pO1xuICAgICAgICAgICAgdGhpcy5hZGQoYXJnLCBnbG9iYWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldEZlYXR1cmVPdmVycmlkZXMoZmVhdHVyZXMpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZmVhdHVyZXMpKSB0aGlzLmFkZChmZWF0dXJlcyk7XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBmZWF0dXJlcyA9PT0gJ29iamVjdCcpIGZvcihsZXQgdGFnIGluIGZlYXR1cmVzKXtcbiAgICAgICAgICAgIGlmIChmZWF0dXJlc1t0YWddKSB0aGlzLmFkZCh0YWcpO1xuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5hbGxGZWF0dXJlc1t0YWddICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RhZ2UgPSB0aGlzLnN0YWdlc1t0aGlzLmFsbEZlYXR1cmVzW3RhZ11dO1xuICAgICAgICAgICAgICAgIHN0YWdlLnNwbGljZShzdGFnZS5pbmRleE9mKHRhZyksIDEpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFsbEZlYXR1cmVzW3RhZ107XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZ2xvYmFsRmVhdHVyZXNbdGFnXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICogQXNzaWducyB0aGUgZ2xvYmFsIGZlYXR1cmVzIHRvIHRoZSBnaXZlbiBnbHlwaHNcbiAgICovIGFzc2lnbkdsb2JhbEZlYXR1cmVzKGdseXBocykge1xuICAgICAgICBmb3IgKGxldCBnbHlwaCBvZiBnbHlwaHMpZm9yKGxldCBmZWF0dXJlIGluIHRoaXMuZ2xvYmFsRmVhdHVyZXMpZ2x5cGguZmVhdHVyZXNbZmVhdHVyZV0gPSB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICogRXhlY3V0ZXMgdGhlIHBsYW5uZWQgc3RhZ2VzIHVzaW5nIHRoZSBnaXZlbiBPVFByb2Nlc3NvclxuICAgKi8gcHJvY2Vzcyhwcm9jZXNzb3IsIGdseXBocywgcG9zaXRpb25zKSB7XG4gICAgICAgIGZvciAobGV0IHN0YWdlIG9mIHRoaXMuc3RhZ2VzKXtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXBvc2l0aW9ucykgc3RhZ2UodGhpcy5mb250LCBnbHlwaHMsIHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGFnZS5sZW5ndGggPiAwKSBwcm9jZXNzb3IuYXBwbHlGZWF0dXJlcyhzdGFnZSwgZ2x5cGhzLCBwb3NpdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZvbnQsIHNjcmlwdCwgZGlyZWN0aW9uKXtcbiAgICAgICAgdGhpcy5mb250ID0gZm9udDtcbiAgICAgICAgdGhpcy5zY3JpcHQgPSBzY3JpcHQ7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICAgICAgICB0aGlzLnN0YWdlcyA9IFtdO1xuICAgICAgICB0aGlzLmdsb2JhbEZlYXR1cmVzID0ge307XG4gICAgICAgIHRoaXMuYWxsRmVhdHVyZXMgPSB7fTtcbiAgICB9XG59XG5cblxuXG5cbmNvbnN0ICQ2NDk5NzBkODczMzViMzBmJHZhciRWQVJJQVRJT05fRkVBVFVSRVMgPSBbXG4gICAgJ3J2cm4nXG5dO1xuY29uc3QgJDY0OTk3MGQ4NzMzNWIzMGYkdmFyJENPTU1PTl9GRUFUVVJFUyA9IFtcbiAgICAnY2NtcCcsXG4gICAgJ2xvY2wnLFxuICAgICdybGlnJyxcbiAgICAnbWFyaycsXG4gICAgJ21rbWsnXG5dO1xuY29uc3QgJDY0OTk3MGQ4NzMzNWIzMGYkdmFyJEZSQUNUSU9OQUxfRkVBVFVSRVMgPSBbXG4gICAgJ2ZyYWMnLFxuICAgICdudW1yJyxcbiAgICAnZG5vbSdcbl07XG5jb25zdCAkNjQ5OTcwZDg3MzM1YjMwZiR2YXIkSE9SSVpPTlRBTF9GRUFUVVJFUyA9IFtcbiAgICAnY2FsdCcsXG4gICAgJ2NsaWcnLFxuICAgICdsaWdhJyxcbiAgICAncmNsdCcsXG4gICAgJ2N1cnMnLFxuICAgICdrZXJuJ1xuXTtcbmNvbnN0ICQ2NDk5NzBkODczMzViMzBmJHZhciRWRVJUSUNBTF9GRUFUVVJFUyA9IFtcbiAgICAndmVydCdcbl07XG5jb25zdCAkNjQ5OTcwZDg3MzM1YjMwZiR2YXIkRElSRUNUSU9OQUxfRkVBVFVSRVMgPSB7XG4gICAgbHRyOiBbXG4gICAgICAgICdsdHJhJyxcbiAgICAgICAgJ2x0cm0nXG4gICAgXSxcbiAgICBydGw6IFtcbiAgICAgICAgJ3J0bGEnLFxuICAgICAgICAncnRsbSdcbiAgICBdXG59O1xuY2xhc3MgJDY0OTk3MGQ4NzMzNWIzMGYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSB7XG4gICAgc3RhdGljIHBsYW4ocGxhbiwgZ2x5cGhzLCBmZWF0dXJlcykge1xuICAgICAgICAvLyBQbGFuIHRoZSBmZWF0dXJlcyB3ZSB3YW50IHRvIGFwcGx5XG4gICAgICAgIHRoaXMucGxhblByZXByb2Nlc3NpbmcocGxhbik7XG4gICAgICAgIHRoaXMucGxhbkZlYXR1cmVzKHBsYW4pO1xuICAgICAgICB0aGlzLnBsYW5Qb3N0cHJvY2Vzc2luZyhwbGFuLCBmZWF0dXJlcyk7XG4gICAgICAgIC8vIEFzc2lnbiB0aGUgZ2xvYmFsIGZlYXR1cmVzIHRvIGFsbCB0aGUgZ2x5cGhzXG4gICAgICAgIHBsYW4uYXNzaWduR2xvYmFsRmVhdHVyZXMoZ2x5cGhzKTtcbiAgICAgICAgLy8gQXNzaWduIGxvY2FsIGZlYXR1cmVzIHRvIGdseXBoc1xuICAgICAgICB0aGlzLmFzc2lnbkZlYXR1cmVzKHBsYW4sIGdseXBocyk7XG4gICAgfVxuICAgIHN0YXRpYyBwbGFuUHJlcHJvY2Vzc2luZyhwbGFuKSB7XG4gICAgICAgIHBsYW4uYWRkKHtcbiAgICAgICAgICAgIGdsb2JhbDogW1xuICAgICAgICAgICAgICAgIC4uLiQ2NDk5NzBkODczMzViMzBmJHZhciRWQVJJQVRJT05fRkVBVFVSRVMsXG4gICAgICAgICAgICAgICAgLi4uJDY0OTk3MGQ4NzMzNWIzMGYkdmFyJERJUkVDVElPTkFMX0ZFQVRVUkVTW3BsYW4uZGlyZWN0aW9uXVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGxvY2FsOiAkNjQ5OTcwZDg3MzM1YjMwZiR2YXIkRlJBQ1RJT05BTF9GRUFUVVJFU1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIHBsYW5GZWF0dXJlcyhwbGFuKSB7XG4gICAgLy8gRG8gbm90aGluZyBieSBkZWZhdWx0LiBMZXQgc3ViY2xhc3NlcyBvdmVycmlkZSB0aGlzLlxuICAgIH1cbiAgICBzdGF0aWMgcGxhblBvc3Rwcm9jZXNzaW5nKHBsYW4sIHVzZXJGZWF0dXJlcykge1xuICAgICAgICBwbGFuLmFkZChbXG4gICAgICAgICAgICAuLi4kNjQ5OTcwZDg3MzM1YjMwZiR2YXIkQ09NTU9OX0ZFQVRVUkVTLFxuICAgICAgICAgICAgLi4uJDY0OTk3MGQ4NzMzNWIzMGYkdmFyJEhPUklaT05UQUxfRkVBVFVSRVNcbiAgICAgICAgXSk7XG4gICAgICAgIHBsYW4uc2V0RmVhdHVyZU92ZXJyaWRlcyh1c2VyRmVhdHVyZXMpO1xuICAgIH1cbiAgICBzdGF0aWMgYXNzaWduRmVhdHVyZXMocGxhbiwgZ2x5cGhzKSB7XG4gICAgICAgIC8vIEVuYWJsZSBjb250ZXh0dWFsIGZyYWN0aW9uc1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgZ2x5cGhzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCBnbHlwaCA9IGdseXBoc1tpXTtcbiAgICAgICAgICAgIGlmIChnbHlwaC5jb2RlUG9pbnRzWzBdID09PSAweDIwNDQpIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RhcnQgPSBpO1xuICAgICAgICAgICAgICAgIGxldCBlbmQgPSBpICsgMTtcbiAgICAgICAgICAgICAgICAvLyBBcHBseSBudW1lcmF0b3JcbiAgICAgICAgICAgICAgICB3aGlsZShzdGFydCA+IDAgJiYgKDAsICQ1MlpJZiRpc0RpZ2l0KShnbHlwaHNbc3RhcnQgLSAxXS5jb2RlUG9pbnRzWzBdKSl7XG4gICAgICAgICAgICAgICAgICAgIGdseXBoc1tzdGFydCAtIDFdLmZlYXR1cmVzLm51bXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBnbHlwaHNbc3RhcnQgLSAxXS5mZWF0dXJlcy5mcmFjID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQXBwbHkgZGVub21pbmF0b3JcbiAgICAgICAgICAgICAgICB3aGlsZShlbmQgPCBnbHlwaHMubGVuZ3RoICYmICgwLCAkNTJaSWYkaXNEaWdpdCkoZ2x5cGhzW2VuZF0uY29kZVBvaW50c1swXSkpe1xuICAgICAgICAgICAgICAgICAgICBnbHlwaHNbZW5kXS5mZWF0dXJlcy5kbm9tID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZ2x5cGhzW2VuZF0uZmVhdHVyZXMuZnJhYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGVuZCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBcHBseSBmcmFjdGlvbiBzbGFzaFxuICAgICAgICAgICAgICAgIGdseXBoLmZlYXR1cmVzLmZyYWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGkgPSBlbmQgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuKDAsICQ1MlpJZiRfKSgkNjQ5OTcwZDg3MzM1YjMwZiRleHBvcnQkMmUyYmNkODczOWFlMDM5LCBcInplcm9NYXJrV2lkdGhzXCIsICdBRlRFUl9HUE9TJyk7XG5cblxuXG5cblxuXG5jb25zdCAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkdHJpZSA9IG5ldyAoMCwgJDUyWklmJHVuaWNvZGV0cmllKSgoMCwgJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JDk0ZmRmMTFiYWZjOGRlNmIpKFwiQVBBQkFBQUFBQUFBT0FBQUFmMEJBdjd0bWkxTXhEQVV4N3Z0dmpoQWdjRGdrRWdFQW5tWEVCSU1DWWFFY3lnRWlxQlE0RkFrQ0U0aWtVZ01paUJKU0FnU2lVUVNETW45TDllU2w2YmRkZGR1Zzl0N3lTL3RyZXZyZSszcjI3cGNOeFppRyt5Q2ZkQ1Z2LzlMZVF4T3dSbTRBSmVnRDI3QUxiZ0Q5K0FCUEpGK3orQk4vaDd5RGo1ay9WT1dYNlNkbVU1K3dMV2tuZ2d4RHhhUzh1MHFpaVg0dWl6OVhhbVEzd3pETUF6RE1BekRNQXpEVkkvaDk1OVYvdjdCTUF6RE1BekRNTGx5TlROaU1TZGV3VnhiaUE0NEI0L2d1ejFxVzU4VllsTUkwV3NKMFcrTjZrWHcwc3B2UHRkd2h0a3duR002dUxhVjRYeXpnM3YzUE05RFBmUS9zT2c0eFBXamlweTMxUDhMVHFiVTMwNGMvY0xDVW1XSkxOQjJVejJVMUtUZVJLTm1LSFZNZmJKQysvMGxvVFpSSC9XNWN2RXZCSlBNYlJFa1d0M0ZEMU5jcVhaQlNwdUUyQWQwUEJlaFB0TnJQdElFZFlQK2hpUnQvVjFqSWlFNjlYNE5UL3VWWkkzUFVIRTlibTVNN2VQR2RaV3k5NTF2N05uNmo4djFXV0tQM210NnR0bnNpZ3g2Vk43VmMwVm9tU1NHcVcybUdOUDFtdVpQbDdMZmpOVWFLTkZ0REdWZjJmdkU5TzdWbEJTNWozMzNjNXAvZWVvT3FjczFSL2hJcURXTEo3VFRsa3NpclZUMVNJN2w4azRZcCtnM2phZkdjclUxUk02bDl0aDgwWE9wbmxOOTdiRE5ZNGk0czYxQjBTaS9pcGEwdUhNbDZ6cUVqbEZmQ1ptL1RNOEttelFEam11VEFRPT1cIikpO1xuY29uc3QgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJEZFQVRVUkVTID0gW1xuICAgICdpc29sJyxcbiAgICAnZmluYScsXG4gICAgJ2ZpbjInLFxuICAgICdmaW4zJyxcbiAgICAnbWVkaScsXG4gICAgJ21lZDInLFxuICAgICdpbml0J1xuXTtcbmNvbnN0ICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRTaGFwaW5nQ2xhc3NlcyA9IHtcbiAgICBOb25fSm9pbmluZzogMCxcbiAgICBMZWZ0X0pvaW5pbmc6IDEsXG4gICAgUmlnaHRfSm9pbmluZzogMixcbiAgICBEdWFsX0pvaW5pbmc6IDMsXG4gICAgSm9pbl9DYXVzaW5nOiAzLFxuICAgIEFMQVBIOiA0LFxuICAgICdEQUxBVEggUklTSCc6IDUsXG4gICAgVHJhbnNwYXJlbnQ6IDZcbn07XG5jb25zdCAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSVNPTCA9ICdpc29sJztcbmNvbnN0ICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRGSU5BID0gJ2ZpbmEnO1xuY29uc3QgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJEZJTjIgPSAnZmluMic7XG5jb25zdCAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkRklOMyA9ICdmaW4zJztcbmNvbnN0ICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRNRURJID0gJ21lZGknO1xuY29uc3QgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE1FRDIgPSAnbWVkMic7XG5jb25zdCAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSU5JVCA9ICdpbml0JztcbmNvbnN0ICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FID0gbnVsbDtcbi8vIEVhY2ggZW50cnkgaXMgW3ByZXZBY3Rpb24sIGN1ckFjdGlvbiwgbmV4dFN0YXRlXVxuY29uc3QgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJFNUQVRFX1RBQkxFID0gW1xuICAgIC8vICAgTm9uX0pvaW5pbmcsICAgICAgICBMZWZ0X0pvaW5pbmcsICAgICAgIFJpZ2h0X0pvaW5pbmcsICAgICBEdWFsX0pvaW5pbmcsICAgICAgICAgICBBTEFQSCwgICAgICAgICAgICBEQUxBVEggUklTSFxuICAgIC8vIFN0YXRlIDA6IHByZXYgd2FzIFUsICBub3Qgd2lsbGluZyB0byBqb2luLlxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkTk9ORSxcbiAgICAgICAgICAgIDBcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSVNPTCxcbiAgICAgICAgICAgIDJcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSVNPTCxcbiAgICAgICAgICAgIDFcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSVNPTCxcbiAgICAgICAgICAgIDJcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSVNPTCxcbiAgICAgICAgICAgIDFcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSVNPTCxcbiAgICAgICAgICAgIDZcbiAgICAgICAgXVxuICAgIF0sXG4gICAgLy8gU3RhdGUgMTogcHJldiB3YXMgUiBvciBJU09ML0FMQVBILCAgbm90IHdpbGxpbmcgdG8gam9pbi5cbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAwXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICAyXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICAxXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICAyXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJEZJTjIsXG4gICAgICAgICAgICA1XG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICA2XG4gICAgICAgIF1cbiAgICBdLFxuICAgIC8vIFN0YXRlIDI6IHByZXYgd2FzIEQvTCBpbiBJU09MIGZvcm0sICB3aWxsaW5nIHRvIGpvaW4uXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkTk9ORSxcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgMFxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkTk9ORSxcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRJU09MLFxuICAgICAgICAgICAgMlxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSU5JVCxcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRGSU5BLFxuICAgICAgICAgICAgMVxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSU5JVCxcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRGSU5BLFxuICAgICAgICAgICAgM1xuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSU5JVCxcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRGSU5BLFxuICAgICAgICAgICAgNFxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSU5JVCxcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRGSU5BLFxuICAgICAgICAgICAgNlxuICAgICAgICBdXG4gICAgXSxcbiAgICAvLyBTdGF0ZSAzOiBwcmV2IHdhcyBEIGluIEZJTkEgZm9ybSwgIHdpbGxpbmcgdG8gam9pbi5cbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAwXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICAyXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRNRURJLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJEZJTkEsXG4gICAgICAgICAgICAxXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRNRURJLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJEZJTkEsXG4gICAgICAgICAgICAzXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRNRURJLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJEZJTkEsXG4gICAgICAgICAgICA0XG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRNRURJLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJEZJTkEsXG4gICAgICAgICAgICA2XG4gICAgICAgIF1cbiAgICBdLFxuICAgIC8vIFN0YXRlIDQ6IHByZXYgd2FzIEZJTkEgQUxBUEgsICBub3Qgd2lsbGluZyB0byBqb2luLlxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkTk9ORSxcbiAgICAgICAgICAgIDBcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSVNPTCxcbiAgICAgICAgICAgIDJcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE1FRDIsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSVNPTCxcbiAgICAgICAgICAgIDFcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE1FRDIsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSVNPTCxcbiAgICAgICAgICAgIDJcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE1FRDIsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkRklOMixcbiAgICAgICAgICAgIDVcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE1FRDIsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSVNPTCxcbiAgICAgICAgICAgIDZcbiAgICAgICAgXVxuICAgIF0sXG4gICAgLy8gU3RhdGUgNTogcHJldiB3YXMgRklOMi9GSU4zIEFMQVBILCAgbm90IHdpbGxpbmcgdG8gam9pbi5cbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAwXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICAyXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRJU09MLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICAxXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRJU09MLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICAyXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRJU09MLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJEZJTjIsXG4gICAgICAgICAgICA1XG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRJU09MLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICA2XG4gICAgICAgIF1cbiAgICBdLFxuICAgIC8vIFN0YXRlIDY6IHByZXYgd2FzIERBTEFUSC9SSVNILCAgbm90IHdpbGxpbmcgdG8gam9pbi5cbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAwXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICAyXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICAxXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICAyXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJEZJTjMsXG4gICAgICAgICAgICA1XG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICA2XG4gICAgICAgIF1cbiAgICBdXG5dO1xuY2xhc3MgJDc2NGViNTQ0YmJlMWNjZjAkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSBleHRlbmRzICgwLCAkNjQ5OTcwZDg3MzM1YjMwZiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSB7XG4gICAgc3RhdGljIHBsYW5GZWF0dXJlcyhwbGFuKSB7XG4gICAgICAgIHBsYW4uYWRkKFtcbiAgICAgICAgICAgICdjY21wJyxcbiAgICAgICAgICAgICdsb2NsJ1xuICAgICAgICBdKTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8ICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRGRUFUVVJFUy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBsZXQgZmVhdHVyZSA9ICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRGRUFUVVJFU1tpXTtcbiAgICAgICAgICAgIHBsYW4uYWRkU3RhZ2UoZmVhdHVyZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIHBsYW4uYWRkU3RhZ2UoJ21zZXQnKTtcbiAgICB9XG4gICAgc3RhdGljIGFzc2lnbkZlYXR1cmVzKHBsYW4sIGdseXBocykge1xuICAgICAgICBzdXBlci5hc3NpZ25GZWF0dXJlcyhwbGFuLCBnbHlwaHMpO1xuICAgICAgICBsZXQgcHJldiA9IC0xO1xuICAgICAgICBsZXQgc3RhdGUgPSAwO1xuICAgICAgICBsZXQgYWN0aW9ucyA9IFtdO1xuICAgICAgICAvLyBBcHBseSB0aGUgc3RhdGUgbWFjaGluZSB0byBtYXAgZ2x5cGhzIHRvIGZlYXR1cmVzXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBnbHlwaHMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgbGV0IGN1ckFjdGlvbiwgcHJldkFjdGlvbjtcbiAgICAgICAgICAgIHZhciBnbHlwaCA9IGdseXBoc1tpXTtcbiAgICAgICAgICAgIGxldCB0eXBlID0gJDc2NGViNTQ0YmJlMWNjZjAkdmFyJGdldFNoYXBpbmdDbGFzcyhnbHlwaC5jb2RlUG9pbnRzWzBdKTtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkU2hhcGluZ0NsYXNzZXMuVHJhbnNwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb25zW2ldID0gJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkU7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBbcHJldkFjdGlvbiwgY3VyQWN0aW9uLCBzdGF0ZV0gPSAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkU1RBVEVfVEFCTEVbc3RhdGVdW3R5cGVdO1xuICAgICAgICAgICAgaWYgKHByZXZBY3Rpb24gIT09ICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FICYmIHByZXYgIT09IC0xKSBhY3Rpb25zW3ByZXZdID0gcHJldkFjdGlvbjtcbiAgICAgICAgICAgIGFjdGlvbnNbaV0gPSBjdXJBY3Rpb247XG4gICAgICAgICAgICBwcmV2ID0gaTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBcHBseSB0aGUgY2hvc2VuIGZlYXR1cmVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgZ2x5cGhzXG4gICAgICAgIGZvcihsZXQgaW5kZXggPSAwOyBpbmRleCA8IGdseXBocy5sZW5ndGg7IGluZGV4Kyspe1xuICAgICAgICAgICAgbGV0IGZlYXR1cmU7XG4gICAgICAgICAgICB2YXIgZ2x5cGggPSBnbHlwaHNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKGZlYXR1cmUgPSBhY3Rpb25zW2luZGV4XSkgZ2x5cGguZmVhdHVyZXNbZmVhdHVyZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gJDc2NGViNTQ0YmJlMWNjZjAkdmFyJGdldFNoYXBpbmdDbGFzcyhjb2RlUG9pbnQpIHtcbiAgICBsZXQgcmVzID0gJDc2NGViNTQ0YmJlMWNjZjAkdmFyJHRyaWUuZ2V0KGNvZGVQb2ludCk7XG4gICAgaWYgKHJlcykgcmV0dXJuIHJlcyAtIDE7XG4gICAgbGV0IGNhdGVnb3J5ID0gKDAsICQ1MlpJZiRnZXRDYXRlZ29yeSkoY29kZVBvaW50KTtcbiAgICBpZiAoY2F0ZWdvcnkgPT09ICdNbicgfHwgY2F0ZWdvcnkgPT09ICdNZScgfHwgY2F0ZWdvcnkgPT09ICdDZicpIHJldHVybiAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkU2hhcGluZ0NsYXNzZXMuVHJhbnNwYXJlbnQ7XG4gICAgcmV0dXJuICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRTaGFwaW5nQ2xhc3Nlcy5Ob25fSm9pbmluZztcbn1cblxuXG5cblxuXG5jbGFzcyAkODVkNDA4NjMyMjcwMjQ4YiRleHBvcnQkMmUyYmNkODczOWFlMDM5IHtcbiAgICByZXNldChvcHRpb25zID0ge30sIGluZGV4ID0gMCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmZsYWdzID0gb3B0aW9ucy5mbGFncyB8fCB7fTtcbiAgICAgICAgdGhpcy5tYXJrQXR0YWNobWVudFR5cGUgPSBvcHRpb25zLm1hcmtBdHRhY2htZW50VHlwZSB8fCAwO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgfVxuICAgIGdldCBjdXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdseXBoc1t0aGlzLmluZGV4XSB8fCBudWxsO1xuICAgIH1cbiAgICBzaG91bGRJZ25vcmUoZ2x5cGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmxhZ3MuaWdub3JlTWFya3MgJiYgZ2x5cGguaXNNYXJrIHx8IHRoaXMuZmxhZ3MuaWdub3JlQmFzZUdseXBocyAmJiBnbHlwaC5pc0Jhc2UgfHwgdGhpcy5mbGFncy5pZ25vcmVMaWdhdHVyZXMgJiYgZ2x5cGguaXNMaWdhdHVyZSB8fCB0aGlzLm1hcmtBdHRhY2htZW50VHlwZSAmJiBnbHlwaC5pc01hcmsgJiYgZ2x5cGgubWFya0F0dGFjaG1lbnRUeXBlICE9PSB0aGlzLm1hcmtBdHRhY2htZW50VHlwZTtcbiAgICB9XG4gICAgbW92ZShkaXIpIHtcbiAgICAgICAgdGhpcy5pbmRleCArPSBkaXI7XG4gICAgICAgIHdoaWxlKDAgPD0gdGhpcy5pbmRleCAmJiB0aGlzLmluZGV4IDwgdGhpcy5nbHlwaHMubGVuZ3RoICYmIHRoaXMuc2hvdWxkSWdub3JlKHRoaXMuZ2x5cGhzW3RoaXMuaW5kZXhdKSl0aGlzLmluZGV4ICs9IGRpcjtcbiAgICAgICAgaWYgKDAgPiB0aGlzLmluZGV4IHx8IHRoaXMuaW5kZXggPj0gdGhpcy5nbHlwaHMubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2x5cGhzW3RoaXMuaW5kZXhdO1xuICAgIH1cbiAgICBuZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb3ZlKDEpO1xuICAgIH1cbiAgICBwcmV2KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb3ZlKC0xKTtcbiAgICB9XG4gICAgcGVlayhjb3VudCA9IDEpIHtcbiAgICAgICAgbGV0IGlkeCA9IHRoaXMuaW5kZXg7XG4gICAgICAgIGxldCByZXMgPSB0aGlzLmluY3JlbWVudChjb3VudCk7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpZHg7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIHBlZWtJbmRleChjb3VudCA9IDEpIHtcbiAgICAgICAgbGV0IGlkeCA9IHRoaXMuaW5kZXg7XG4gICAgICAgIHRoaXMuaW5jcmVtZW50KGNvdW50KTtcbiAgICAgICAgbGV0IHJlcyA9IHRoaXMuaW5kZXg7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpZHg7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGluY3JlbWVudChjb3VudCA9IDEpIHtcbiAgICAgICAgbGV0IGRpciA9IGNvdW50IDwgMCA/IC0xIDogMTtcbiAgICAgICAgY291bnQgPSBNYXRoLmFicyhjb3VudCk7XG4gICAgICAgIHdoaWxlKGNvdW50LS0pdGhpcy5tb3ZlKGRpcik7XG4gICAgICAgIHJldHVybiB0aGlzLmdseXBoc1t0aGlzLmluZGV4XTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZ2x5cGhzLCBvcHRpb25zKXtcbiAgICAgICAgdGhpcy5nbHlwaHMgPSBnbHlwaHM7XG4gICAgICAgIHRoaXMucmVzZXQob3B0aW9ucyk7XG4gICAgfVxufVxuXG5cblxuY29uc3QgJGE4M2I5YzM2YWFhOTRmZDMkdmFyJERFRkFVTFRfU0NSSVBUUyA9IFtcbiAgICAnREZMVCcsXG4gICAgJ2RmbHQnLFxuICAgICdsYXRuJ1xuXTtcbmNsYXNzICRhODNiOWMzNmFhYTk0ZmQzJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIGZpbmRTY3JpcHQoc2NyaXB0KSB7XG4gICAgICAgIGlmICh0aGlzLnRhYmxlLnNjcmlwdExpc3QgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzY3JpcHQpKSBzY3JpcHQgPSBbXG4gICAgICAgICAgICBzY3JpcHRcbiAgICAgICAgXTtcbiAgICAgICAgZm9yIChsZXQgcyBvZiBzY3JpcHQpZm9yIChsZXQgZW50cnkgb2YgdGhpcy50YWJsZS5zY3JpcHRMaXN0KXtcbiAgICAgICAgICAgIGlmIChlbnRyeS50YWcgPT09IHMpIHJldHVybiBlbnRyeTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc2VsZWN0U2NyaXB0KHNjcmlwdCwgbGFuZ3VhZ2UsIGRpcmVjdGlvbikge1xuICAgICAgICBsZXQgY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgZW50cnk7XG4gICAgICAgIGlmICghdGhpcy5zY3JpcHQgfHwgc2NyaXB0ICE9PSB0aGlzLnNjcmlwdFRhZykge1xuICAgICAgICAgICAgZW50cnkgPSB0aGlzLmZpbmRTY3JpcHQoc2NyaXB0KTtcbiAgICAgICAgICAgIGlmICghZW50cnkpIGVudHJ5ID0gdGhpcy5maW5kU2NyaXB0KCRhODNiOWMzNmFhYTk0ZmQzJHZhciRERUZBVUxUX1NDUklQVFMpO1xuICAgICAgICAgICAgaWYgKCFlbnRyeSkgcmV0dXJuIHRoaXMuc2NyaXB0VGFnO1xuICAgICAgICAgICAgdGhpcy5zY3JpcHRUYWcgPSBlbnRyeS50YWc7XG4gICAgICAgICAgICB0aGlzLnNjcmlwdCA9IGVudHJ5LnNjcmlwdDtcbiAgICAgICAgICAgIHRoaXMubGFuZ3VhZ2UgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5sYW5ndWFnZVRhZyA9IG51bGw7XG4gICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRpcmVjdGlvbiB8fCBkaXJlY3Rpb24gIT09IHRoaXMuZGlyZWN0aW9uKSB0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbiB8fCAkMTMwZDFhNjQyZWJjZDJiNyRleHBvcnQkOWZkZGI5ZDBkZDdkOGE1NChzY3JpcHQpO1xuICAgICAgICBpZiAobGFuZ3VhZ2UgJiYgbGFuZ3VhZ2UubGVuZ3RoIDwgNCkgbGFuZ3VhZ2UgKz0gJyAnLnJlcGVhdCg0IC0gbGFuZ3VhZ2UubGVuZ3RoKTtcbiAgICAgICAgaWYgKCFsYW5ndWFnZSB8fCBsYW5ndWFnZSAhPT0gdGhpcy5sYW5ndWFnZVRhZykge1xuICAgICAgICAgICAgdGhpcy5sYW5ndWFnZSA9IG51bGw7XG4gICAgICAgICAgICBmb3IgKGxldCBsYW5nIG9mIHRoaXMuc2NyaXB0LmxhbmdTeXNSZWNvcmRzKWlmIChsYW5nLnRhZyA9PT0gbGFuZ3VhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxhbmd1YWdlID0gbGFuZy5sYW5nU3lzO1xuICAgICAgICAgICAgICAgIHRoaXMubGFuZ3VhZ2VUYWcgPSBsYW5nLnRhZztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5sYW5ndWFnZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubGFuZ3VhZ2UgPSB0aGlzLnNjcmlwdC5kZWZhdWx0TGFuZ1N5cztcbiAgICAgICAgICAgICAgICB0aGlzLmxhbmd1YWdlVGFnID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEJ1aWxkIGEgZmVhdHVyZSBsb29rdXAgdGFibGVcbiAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZmVhdHVyZXMgPSB7fTtcbiAgICAgICAgICAgIGlmICh0aGlzLmxhbmd1YWdlKSBmb3IgKGxldCBmZWF0dXJlSW5kZXggb2YgdGhpcy5sYW5ndWFnZS5mZWF0dXJlSW5kZXhlcyl7XG4gICAgICAgICAgICAgICAgbGV0IHJlY29yZCA9IHRoaXMudGFibGUuZmVhdHVyZUxpc3RbZmVhdHVyZUluZGV4XTtcbiAgICAgICAgICAgICAgICBsZXQgc3Vic3RpdHV0ZUZlYXR1cmUgPSB0aGlzLnN1YnN0aXR1dGVGZWF0dXJlRm9yVmFyaWF0aW9ucyhmZWF0dXJlSW5kZXgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZmVhdHVyZXNbcmVjb3JkLnRhZ10gPSBzdWJzdGl0dXRlRmVhdHVyZSB8fCByZWNvcmQuZmVhdHVyZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zY3JpcHRUYWc7XG4gICAgfVxuICAgIGxvb2t1cHNGb3JGZWF0dXJlcyh1c2VyRmVhdHVyZXMgPSBbXSwgZXhjbHVkZSkge1xuICAgICAgICBsZXQgbG9va3VwcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCB0YWcgb2YgdXNlckZlYXR1cmVzKXtcbiAgICAgICAgICAgIGxldCBmZWF0dXJlID0gdGhpcy5mZWF0dXJlc1t0YWddO1xuICAgICAgICAgICAgaWYgKCFmZWF0dXJlKSBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAobGV0IGxvb2t1cEluZGV4IG9mIGZlYXR1cmUubG9va3VwTGlzdEluZGV4ZXMpe1xuICAgICAgICAgICAgICAgIGlmIChleGNsdWRlICYmIGV4Y2x1ZGUuaW5kZXhPZihsb29rdXBJbmRleCkgIT09IC0xKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBsb29rdXBzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlOiB0YWcsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBsb29rdXBJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgbG9va3VwOiB0aGlzLnRhYmxlLmxvb2t1cExpc3QuZ2V0KGxvb2t1cEluZGV4KVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxvb2t1cHMuc29ydCgoYSwgYik9PmEuaW5kZXggLSBiLmluZGV4KTtcbiAgICAgICAgcmV0dXJuIGxvb2t1cHM7XG4gICAgfVxuICAgIHN1YnN0aXR1dGVGZWF0dXJlRm9yVmFyaWF0aW9ucyhmZWF0dXJlSW5kZXgpIHtcbiAgICAgICAgaWYgKHRoaXMudmFyaWF0aW9uc0luZGV4ID09PSAtMSkgcmV0dXJuIG51bGw7XG4gICAgICAgIGxldCByZWNvcmQgPSB0aGlzLnRhYmxlLmZlYXR1cmVWYXJpYXRpb25zLmZlYXR1cmVWYXJpYXRpb25SZWNvcmRzW3RoaXMudmFyaWF0aW9uc0luZGV4XTtcbiAgICAgICAgbGV0IHN1YnN0aXR1dGlvbnMgPSByZWNvcmQuZmVhdHVyZVRhYmxlU3Vic3RpdHV0aW9uLnN1YnN0aXR1dGlvbnM7XG4gICAgICAgIGZvciAobGV0IHN1YnN0aXR1dGlvbiBvZiBzdWJzdGl0dXRpb25zKXtcbiAgICAgICAgICAgIGlmIChzdWJzdGl0dXRpb24uZmVhdHVyZUluZGV4ID09PSBmZWF0dXJlSW5kZXgpIHJldHVybiBzdWJzdGl0dXRpb24uYWx0ZXJuYXRlRmVhdHVyZVRhYmxlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmaW5kVmFyaWF0aW9uc0luZGV4KGNvb3Jkcykge1xuICAgICAgICBsZXQgdmFyaWF0aW9ucyA9IHRoaXMudGFibGUuZmVhdHVyZVZhcmlhdGlvbnM7XG4gICAgICAgIGlmICghdmFyaWF0aW9ucykgcmV0dXJuIC0xO1xuICAgICAgICBsZXQgcmVjb3JkcyA9IHZhcmlhdGlvbnMuZmVhdHVyZVZhcmlhdGlvblJlY29yZHM7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCByZWNvcmRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCBjb25kaXRpb25zID0gcmVjb3Jkc1tpXS5jb25kaXRpb25TZXQuY29uZGl0aW9uVGFibGU7XG4gICAgICAgICAgICBpZiAodGhpcy52YXJpYXRpb25Db25kaXRpb25zTWF0Y2goY29uZGl0aW9ucywgY29vcmRzKSkgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICB2YXJpYXRpb25Db25kaXRpb25zTWF0Y2goY29uZGl0aW9ucywgY29vcmRzKSB7XG4gICAgICAgIHJldHVybiBjb25kaXRpb25zLmV2ZXJ5KChjb25kaXRpb24pPT57XG4gICAgICAgICAgICBsZXQgY29vcmQgPSBjb25kaXRpb24uYXhpc0luZGV4IDwgY29vcmRzLmxlbmd0aCA/IGNvb3Jkc1tjb25kaXRpb24uYXhpc0luZGV4XSA6IDA7XG4gICAgICAgICAgICByZXR1cm4gY29uZGl0aW9uLmZpbHRlclJhbmdlTWluVmFsdWUgPD0gY29vcmQgJiYgY29vcmQgPD0gY29uZGl0aW9uLmZpbHRlclJhbmdlTWF4VmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhcHBseUZlYXR1cmVzKHVzZXJGZWF0dXJlcywgZ2x5cGhzLCBhZHZhbmNlcykge1xuICAgICAgICBsZXQgbG9va3VwcyA9IHRoaXMubG9va3Vwc0ZvckZlYXR1cmVzKHVzZXJGZWF0dXJlcyk7XG4gICAgICAgIHRoaXMuYXBwbHlMb29rdXBzKGxvb2t1cHMsIGdseXBocywgYWR2YW5jZXMpO1xuICAgIH1cbiAgICBhcHBseUxvb2t1cHMobG9va3VwcywgZ2x5cGhzLCBwb3NpdGlvbnMpIHtcbiAgICAgICAgdGhpcy5nbHlwaHMgPSBnbHlwaHM7XG4gICAgICAgIHRoaXMucG9zaXRpb25zID0gcG9zaXRpb25zO1xuICAgICAgICB0aGlzLmdseXBoSXRlcmF0b3IgPSBuZXcgKDAsICQ4NWQ0MDg2MzIyNzAyNDhiJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKGdseXBocyk7XG4gICAgICAgIGZvciAobGV0IHsgZmVhdHVyZTogZmVhdHVyZSwgbG9va3VwOiBsb29rdXAgfSBvZiBsb29rdXBzKXtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEZlYXR1cmUgPSBmZWF0dXJlO1xuICAgICAgICAgICAgdGhpcy5nbHlwaEl0ZXJhdG9yLnJlc2V0KGxvb2t1cC5mbGFncyk7XG4gICAgICAgICAgICB3aGlsZSh0aGlzLmdseXBoSXRlcmF0b3IuaW5kZXggPCBnbHlwaHMubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICBpZiAoIShmZWF0dXJlIGluIHRoaXMuZ2x5cGhJdGVyYXRvci5jdXIuZmVhdHVyZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2x5cGhJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGxldCB0YWJsZSBvZiBsb29rdXAuc3ViVGFibGVzKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlcyA9IHRoaXMuYXBwbHlMb29rdXAobG9va3VwLmxvb2t1cFR5cGUsIHRhYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcykgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZ2x5cGhJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXBwbHlMb29rdXAobG9va3VwLCB0YWJsZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhcHBseUxvb2t1cCBtdXN0IGJlIGltcGxlbWVudGVkIGJ5IHN1YmNsYXNzZXNcIik7XG4gICAgfVxuICAgIGFwcGx5TG9va3VwTGlzdChsb29rdXBSZWNvcmRzKSB7XG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nbHlwaEl0ZXJhdG9yLm9wdGlvbnM7XG4gICAgICAgIGxldCBnbHlwaEluZGV4ID0gdGhpcy5nbHlwaEl0ZXJhdG9yLmluZGV4O1xuICAgICAgICBmb3IgKGxldCBsb29rdXBSZWNvcmQgb2YgbG9va3VwUmVjb3Jkcyl7XG4gICAgICAgICAgICAvLyBSZXNldCBmbGFncyBhbmQgZmluZCBnbHlwaCBpbmRleCBmb3IgdGhpcyBsb29rdXAgcmVjb3JkXG4gICAgICAgICAgICB0aGlzLmdseXBoSXRlcmF0b3IucmVzZXQob3B0aW9ucywgZ2x5cGhJbmRleCk7XG4gICAgICAgICAgICB0aGlzLmdseXBoSXRlcmF0b3IuaW5jcmVtZW50KGxvb2t1cFJlY29yZC5zZXF1ZW5jZUluZGV4KTtcbiAgICAgICAgICAgIC8vIEdldCB0aGUgbG9va3VwIGFuZCBzZXR1cCBmbGFncyBmb3Igc3VidGFibGVzXG4gICAgICAgICAgICBsZXQgbG9va3VwID0gdGhpcy50YWJsZS5sb29rdXBMaXN0LmdldChsb29rdXBSZWNvcmQubG9va3VwTGlzdEluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuZ2x5cGhJdGVyYXRvci5yZXNldChsb29rdXAuZmxhZ3MsIHRoaXMuZ2x5cGhJdGVyYXRvci5pbmRleCk7XG4gICAgICAgICAgICAvLyBBcHBseSBsb29rdXAgc3VidGFibGVzIHVudGlsIG9uZSBtYXRjaGVzXG4gICAgICAgICAgICBmb3IgKGxldCB0YWJsZSBvZiBsb29rdXAuc3ViVGFibGVzKXtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hcHBseUxvb2t1cChsb29rdXAubG9va3VwVHlwZSwgdGFibGUpKSBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdseXBoSXRlcmF0b3IucmVzZXQob3B0aW9ucywgZ2x5cGhJbmRleCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb3ZlcmFnZUluZGV4KGNvdmVyYWdlLCBnbHlwaCkge1xuICAgICAgICBpZiAoZ2x5cGggPT0gbnVsbCkgZ2x5cGggPSB0aGlzLmdseXBoSXRlcmF0b3IuY3VyLmlkO1xuICAgICAgICBzd2l0Y2goY292ZXJhZ2UudmVyc2lvbil7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvdmVyYWdlLmdseXBocy5pbmRleE9mKGdseXBoKTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBmb3IgKGxldCByYW5nZSBvZiBjb3ZlcmFnZS5yYW5nZVJlY29yZHMpe1xuICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnQgPD0gZ2x5cGggJiYgZ2x5cGggPD0gcmFuZ2UuZW5kKSByZXR1cm4gcmFuZ2Uuc3RhcnRDb3ZlcmFnZUluZGV4ICsgZ2x5cGggLSByYW5nZS5zdGFydDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBtYXRjaChzZXF1ZW5jZUluZGV4LCBzZXF1ZW5jZSwgZm4sIG1hdGNoZWQpIHtcbiAgICAgICAgbGV0IHBvcyA9IHRoaXMuZ2x5cGhJdGVyYXRvci5pbmRleDtcbiAgICAgICAgbGV0IGdseXBoID0gdGhpcy5nbHlwaEl0ZXJhdG9yLmluY3JlbWVudChzZXF1ZW5jZUluZGV4KTtcbiAgICAgICAgbGV0IGlkeCA9IDA7XG4gICAgICAgIHdoaWxlKGlkeCA8IHNlcXVlbmNlLmxlbmd0aCAmJiBnbHlwaCAmJiBmbihzZXF1ZW5jZVtpZHhdLCBnbHlwaCkpe1xuICAgICAgICAgICAgaWYgKG1hdGNoZWQpIG1hdGNoZWQucHVzaCh0aGlzLmdseXBoSXRlcmF0b3IuaW5kZXgpO1xuICAgICAgICAgICAgaWR4Kys7XG4gICAgICAgICAgICBnbHlwaCA9IHRoaXMuZ2x5cGhJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nbHlwaEl0ZXJhdG9yLmluZGV4ID0gcG9zO1xuICAgICAgICBpZiAoaWR4IDwgc2VxdWVuY2UubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiBtYXRjaGVkIHx8IHRydWU7XG4gICAgfVxuICAgIHNlcXVlbmNlTWF0Y2hlcyhzZXF1ZW5jZUluZGV4LCBzZXF1ZW5jZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXRjaChzZXF1ZW5jZUluZGV4LCBzZXF1ZW5jZSwgKGNvbXBvbmVudCwgZ2x5cGgpPT5jb21wb25lbnQgPT09IGdseXBoLmlkKTtcbiAgICB9XG4gICAgc2VxdWVuY2VNYXRjaEluZGljZXMoc2VxdWVuY2VJbmRleCwgc2VxdWVuY2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0Y2goc2VxdWVuY2VJbmRleCwgc2VxdWVuY2UsIChjb21wb25lbnQsIGdseXBoKT0+e1xuICAgICAgICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgZmVhdHVyZSBkb2Vzbid0IGFwcGx5IHRvIHRoaXMgZ2x5cGgsXG4gICAgICAgICAgICBpZiAoISh0aGlzLmN1cnJlbnRGZWF0dXJlIGluIGdseXBoLmZlYXR1cmVzKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudCA9PT0gZ2x5cGguaWQ7XG4gICAgICAgIH0sIFtdKTtcbiAgICB9XG4gICAgY292ZXJhZ2VTZXF1ZW5jZU1hdGNoZXMoc2VxdWVuY2VJbmRleCwgc2VxdWVuY2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0Y2goc2VxdWVuY2VJbmRleCwgc2VxdWVuY2UsIChjb3ZlcmFnZSwgZ2x5cGgpPT50aGlzLmNvdmVyYWdlSW5kZXgoY292ZXJhZ2UsIGdseXBoLmlkKSA+PSAwKTtcbiAgICB9XG4gICAgZ2V0Q2xhc3NJRChnbHlwaCwgY2xhc3NEZWYpIHtcbiAgICAgICAgc3dpdGNoKGNsYXNzRGVmLnZlcnNpb24pe1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGxldCBpID0gZ2x5cGggLSBjbGFzc0RlZi5zdGFydEdseXBoO1xuICAgICAgICAgICAgICAgIGlmIChpID49IDAgJiYgaSA8IGNsYXNzRGVmLmNsYXNzVmFsdWVBcnJheS5sZW5ndGgpIHJldHVybiBjbGFzc0RlZi5jbGFzc1ZhbHVlQXJyYXlbaV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcmFuZ2Ugb2YgY2xhc3NEZWYuY2xhc3NSYW5nZVJlY29yZCl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZS5zdGFydCA8PSBnbHlwaCAmJiBnbHlwaCA8PSByYW5nZS5lbmQpIHJldHVybiByYW5nZS5jbGFzcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGNsYXNzU2VxdWVuY2VNYXRjaGVzKHNlcXVlbmNlSW5kZXgsIHNlcXVlbmNlLCBjbGFzc0RlZikge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXRjaChzZXF1ZW5jZUluZGV4LCBzZXF1ZW5jZSwgKGNsYXNzSUQsIGdseXBoKT0+Y2xhc3NJRCA9PT0gdGhpcy5nZXRDbGFzc0lEKGdseXBoLmlkLCBjbGFzc0RlZikpO1xuICAgIH1cbiAgICBhcHBseUNvbnRleHQodGFibGUpIHtcbiAgICAgICAgbGV0IGluZGV4LCBzZXQ7XG4gICAgICAgIHN3aXRjaCh0YWJsZS52ZXJzaW9uKXtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBpbmRleCA9IHRoaXMuY292ZXJhZ2VJbmRleCh0YWJsZS5jb3ZlcmFnZSk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIHNldCA9IHRhYmxlLnJ1bGVTZXRzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBydWxlIG9mIHNldCl7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlcXVlbmNlTWF0Y2hlcygxLCBydWxlLmlucHV0KSkgcmV0dXJuIHRoaXMuYXBwbHlMb29rdXBMaXN0KHJ1bGUubG9va3VwUmVjb3Jkcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvdmVyYWdlSW5kZXgodGFibGUuY292ZXJhZ2UpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5nZXRDbGFzc0lEKHRoaXMuZ2x5cGhJdGVyYXRvci5jdXIuaWQsIHRhYmxlLmNsYXNzRGVmKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgc2V0ID0gdGFibGUuY2xhc3NTZXRbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHJ1bGUgb2Ygc2V0KXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2xhc3NTZXF1ZW5jZU1hdGNoZXMoMSwgcnVsZS5jbGFzc2VzLCB0YWJsZS5jbGFzc0RlZikpIHJldHVybiB0aGlzLmFwcGx5TG9va3VwTGlzdChydWxlLmxvb2t1cFJlY29yZHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb3ZlcmFnZVNlcXVlbmNlTWF0Y2hlcygwLCB0YWJsZS5jb3ZlcmFnZXMpKSByZXR1cm4gdGhpcy5hcHBseUxvb2t1cExpc3QodGFibGUubG9va3VwUmVjb3Jkcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhcHBseUNoYWluaW5nQ29udGV4dCh0YWJsZSkge1xuICAgICAgICBsZXQgaW5kZXg7XG4gICAgICAgIHN3aXRjaCh0YWJsZS52ZXJzaW9uKXtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBpbmRleCA9IHRoaXMuY292ZXJhZ2VJbmRleCh0YWJsZS5jb3ZlcmFnZSk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIGxldCBzZXQgPSB0YWJsZS5jaGFpblJ1bGVTZXRzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBydWxlIG9mIHNldCl7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlcXVlbmNlTWF0Y2hlcygtcnVsZS5iYWNrdHJhY2subGVuZ3RoLCBydWxlLmJhY2t0cmFjaykgJiYgdGhpcy5zZXF1ZW5jZU1hdGNoZXMoMSwgcnVsZS5pbnB1dCkgJiYgdGhpcy5zZXF1ZW5jZU1hdGNoZXMoMSArIHJ1bGUuaW5wdXQubGVuZ3RoLCBydWxlLmxvb2thaGVhZCkpIHJldHVybiB0aGlzLmFwcGx5TG9va3VwTGlzdChydWxlLmxvb2t1cFJlY29yZHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb3ZlcmFnZUluZGV4KHRhYmxlLmNvdmVyYWdlKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICBpbmRleCA9IHRoaXMuZ2V0Q2xhc3NJRCh0aGlzLmdseXBoSXRlcmF0b3IuY3VyLmlkLCB0YWJsZS5pbnB1dENsYXNzRGVmKTtcbiAgICAgICAgICAgICAgICBsZXQgcnVsZXMgPSB0YWJsZS5jaGFpbkNsYXNzU2V0W2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoIXJ1bGVzKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcnVsZSBvZiBydWxlcyl7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNsYXNzU2VxdWVuY2VNYXRjaGVzKC1ydWxlLmJhY2t0cmFjay5sZW5ndGgsIHJ1bGUuYmFja3RyYWNrLCB0YWJsZS5iYWNrdHJhY2tDbGFzc0RlZikgJiYgdGhpcy5jbGFzc1NlcXVlbmNlTWF0Y2hlcygxLCBydWxlLmlucHV0LCB0YWJsZS5pbnB1dENsYXNzRGVmKSAmJiB0aGlzLmNsYXNzU2VxdWVuY2VNYXRjaGVzKDEgKyBydWxlLmlucHV0Lmxlbmd0aCwgcnVsZS5sb29rYWhlYWQsIHRhYmxlLmxvb2thaGVhZENsYXNzRGVmKSkgcmV0dXJuIHRoaXMuYXBwbHlMb29rdXBMaXN0KHJ1bGUubG9va3VwUmVjb3Jkcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvdmVyYWdlU2VxdWVuY2VNYXRjaGVzKC10YWJsZS5iYWNrdHJhY2tHbHlwaENvdW50LCB0YWJsZS5iYWNrdHJhY2tDb3ZlcmFnZSkgJiYgdGhpcy5jb3ZlcmFnZVNlcXVlbmNlTWF0Y2hlcygwLCB0YWJsZS5pbnB1dENvdmVyYWdlKSAmJiB0aGlzLmNvdmVyYWdlU2VxdWVuY2VNYXRjaGVzKHRhYmxlLmlucHV0R2x5cGhDb3VudCwgdGFibGUubG9va2FoZWFkQ292ZXJhZ2UpKSByZXR1cm4gdGhpcy5hcHBseUxvb2t1cExpc3QodGFibGUubG9va3VwUmVjb3Jkcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihmb250LCB0YWJsZSl7XG4gICAgICAgIHRoaXMuZm9udCA9IGZvbnQ7XG4gICAgICAgIHRoaXMudGFibGUgPSB0YWJsZTtcbiAgICAgICAgdGhpcy5zY3JpcHQgPSBudWxsO1xuICAgICAgICB0aGlzLnNjcmlwdFRhZyA9IG51bGw7XG4gICAgICAgIHRoaXMubGFuZ3VhZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLmxhbmd1YWdlVGFnID0gbnVsbDtcbiAgICAgICAgdGhpcy5mZWF0dXJlcyA9IHt9O1xuICAgICAgICB0aGlzLmxvb2t1cHMgPSB7fTtcbiAgICAgICAgLy8gU2V0dXAgdmFyaWF0aW9uIHN1YnN0aXR1dGlvbnNcbiAgICAgICAgdGhpcy52YXJpYXRpb25zSW5kZXggPSBmb250Ll92YXJpYXRpb25Qcm9jZXNzb3IgPyB0aGlzLmZpbmRWYXJpYXRpb25zSW5kZXgoZm9udC5fdmFyaWF0aW9uUHJvY2Vzc29yLm5vcm1hbGl6ZWRDb29yZHMpIDogLTE7XG4gICAgICAgIC8vIGluaXRpYWxpemUgdG8gZGVmYXVsdCBzY3JpcHQgKyBsYW5ndWFnZVxuICAgICAgICB0aGlzLnNlbGVjdFNjcmlwdCgpO1xuICAgICAgICAvLyBjdXJyZW50IGNvbnRleHQgKHNldCBieSBhcHBseUZlYXR1cmVzKVxuICAgICAgICB0aGlzLmdseXBocyA9IFtdO1xuICAgICAgICB0aGlzLnBvc2l0aW9ucyA9IFtdOyAvLyBvbmx5IHVzZWQgYnkgR1BPU1xuICAgICAgICB0aGlzLmxpZ2F0dXJlSUQgPSAxO1xuICAgICAgICB0aGlzLmN1cnJlbnRGZWF0dXJlID0gbnVsbDtcbiAgICB9XG59XG5cblxuY2xhc3MgJDEwZTdiMjU3ZTFhOWE3NTYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSB7XG4gICAgZ2V0IGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgfVxuICAgIHNldCBpZChpZCkge1xuICAgICAgICB0aGlzLl9pZCA9IGlkO1xuICAgICAgICB0aGlzLnN1YnN0aXR1dGVkID0gdHJ1ZTtcbiAgICAgICAgbGV0IEdERUYgPSB0aGlzLl9mb250LkdERUY7XG4gICAgICAgIGlmIChHREVGICYmIEdERUYuZ2x5cGhDbGFzc0RlZikge1xuICAgICAgICAgICAgLy8gVE9ETzogY2xlYW4gdGhpcyB1cFxuICAgICAgICAgICAgbGV0IGNsYXNzSUQgPSAoMCwgJGE4M2I5YzM2YWFhOTRmZDMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkucHJvdG90eXBlLmdldENsYXNzSUQoaWQsIEdERUYuZ2x5cGhDbGFzc0RlZik7XG4gICAgICAgICAgICB0aGlzLmlzQmFzZSA9IGNsYXNzSUQgPT09IDE7XG4gICAgICAgICAgICB0aGlzLmlzTGlnYXR1cmUgPSBjbGFzc0lEID09PSAyO1xuICAgICAgICAgICAgdGhpcy5pc01hcmsgPSBjbGFzc0lEID09PSAzO1xuICAgICAgICAgICAgdGhpcy5tYXJrQXR0YWNobWVudFR5cGUgPSBHREVGLm1hcmtBdHRhY2hDbGFzc0RlZiA/ICgwLCAkYTgzYjljMzZhYWE5NGZkMyRleHBvcnQkMmUyYmNkODczOWFlMDM5KS5wcm90b3R5cGUuZ2V0Q2xhc3NJRChpZCwgR0RFRi5tYXJrQXR0YWNoQ2xhc3NEZWYpIDogMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNNYXJrID0gdGhpcy5jb2RlUG9pbnRzLmxlbmd0aCA+IDAgJiYgdGhpcy5jb2RlUG9pbnRzLmV2ZXJ5KCgwLCAkNTJaSWYkaXNNYXJrKSk7XG4gICAgICAgICAgICB0aGlzLmlzQmFzZSA9ICF0aGlzLmlzTWFyaztcbiAgICAgICAgICAgIHRoaXMuaXNMaWdhdHVyZSA9IHRoaXMuY29kZVBvaW50cy5sZW5ndGggPiAxO1xuICAgICAgICAgICAgdGhpcy5tYXJrQXR0YWNobWVudFR5cGUgPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvcHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgJDEwZTdiMjU3ZTFhOWE3NTYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSh0aGlzLl9mb250LCB0aGlzLmlkLCB0aGlzLmNvZGVQb2ludHMsIHRoaXMuZmVhdHVyZXMpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihmb250LCBpZCwgY29kZVBvaW50cyA9IFtdLCBmZWF0dXJlcyl7XG4gICAgICAgIHRoaXMuX2ZvbnQgPSBmb250O1xuICAgICAgICB0aGlzLmNvZGVQb2ludHMgPSBjb2RlUG9pbnRzO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuZmVhdHVyZXMgPSB7fTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZmVhdHVyZXMpKSBmb3IobGV0IGkgPSAwOyBpIDwgZmVhdHVyZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgbGV0IGZlYXR1cmUgPSBmZWF0dXJlc1tpXTtcbiAgICAgICAgICAgIHRoaXMuZmVhdHVyZXNbZmVhdHVyZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBmZWF0dXJlcyA9PT0gJ29iamVjdCcpIE9iamVjdC5hc3NpZ24odGhpcy5mZWF0dXJlcywgZmVhdHVyZXMpO1xuICAgICAgICB0aGlzLmxpZ2F0dXJlSUQgPSBudWxsO1xuICAgICAgICB0aGlzLmxpZ2F0dXJlQ29tcG9uZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc0xpZ2F0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdXJzaXZlQXR0YWNobWVudCA9IG51bGw7XG4gICAgICAgIHRoaXMubWFya0F0dGFjaG1lbnQgPSBudWxsO1xuICAgICAgICB0aGlzLnNoYXBlckluZm8gPSBudWxsO1xuICAgICAgICB0aGlzLnN1YnN0aXR1dGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNNdWx0aXBsaWVkID0gZmFsc2U7XG4gICAgfVxufVxuXG5cbmNsYXNzICRlMWM2YmJjOGNiNDE2ZjhjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgZXh0ZW5kcyAoMCwgJDY0OTk3MGQ4NzMzNWIzMGYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkge1xuICAgIHN0YXRpYyBwbGFuRmVhdHVyZXMocGxhbikge1xuICAgICAgICBwbGFuLmFkZChbXG4gICAgICAgICAgICAnbGptbycsXG4gICAgICAgICAgICAndmptbycsXG4gICAgICAgICAgICAndGptbydcbiAgICAgICAgXSwgZmFsc2UpO1xuICAgIH1cbiAgICBzdGF0aWMgYXNzaWduRmVhdHVyZXMocGxhbiwgZ2x5cGhzKSB7XG4gICAgICAgIGxldCBzdGF0ZSA9IDA7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgd2hpbGUoaSA8IGdseXBocy5sZW5ndGgpe1xuICAgICAgICAgICAgbGV0IGFjdGlvbjtcbiAgICAgICAgICAgIGxldCBnbHlwaCA9IGdseXBoc1tpXTtcbiAgICAgICAgICAgIGxldCBjb2RlID0gZ2x5cGguY29kZVBvaW50c1swXTtcbiAgICAgICAgICAgIGxldCB0eXBlID0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGdldFR5cGUoY29kZSk7XG4gICAgICAgICAgICBbYWN0aW9uLCBzdGF0ZV0gPSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkU1RBVEVfVEFCTEVbc3RhdGVdW3R5cGVdO1xuICAgICAgICAgICAgc3dpdGNoKGFjdGlvbil7XG4gICAgICAgICAgICAgICAgY2FzZSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkREVDT01QT1NFOlxuICAgICAgICAgICAgICAgICAgICAvLyBEZWNvbXBvc2UgdGhlIGNvbXBvc2VkIHN5bGxhYmxlIGlmIGl0IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGZvbnQuXG4gICAgICAgICAgICAgICAgICAgIGlmICghcGxhbi5mb250Lmhhc0dseXBoRm9yQ29kZVBvaW50KGNvZGUpKSBpID0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGRlY29tcG9zZShnbHlwaHMsIGksIHBsYW4uZm9udCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJENPTVBPU0U6XG4gICAgICAgICAgICAgICAgICAgIC8vIEZvdW5kIGEgZGVjb21wb3NlZCBzeWxsYWJsZS4gVHJ5IHRvIGNvbXBvc2UgaWYgc3VwcG9ydGVkIGJ5IHRoZSBmb250LlxuICAgICAgICAgICAgICAgICAgICBpID0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGNvbXBvc2UoZ2x5cGhzLCBpLCBwbGFuLmZvbnQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRUT05FX01BUks6XG4gICAgICAgICAgICAgICAgICAgIC8vIEdvdCBhIHZhbGlkIHN5bGxhYmxlLCBmb2xsb3dlZCBieSBhIHRvbmUgbWFyay4gTW92ZSB0aGUgdG9uZSBtYXJrIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHN5bGxhYmxlLlxuICAgICAgICAgICAgICAgICAgICAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkcmVvcmRlclRvbmVNYXJrKGdseXBocywgaSwgcGxhbi5mb250KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkSU5WQUxJRDpcbiAgICAgICAgICAgICAgICAgICAgLy8gVG9uZSBtYXJrIGhhcyBubyB2YWxpZCBzeWxsYWJsZSB0byBhdHRhY2ggdG8sIHNvIGluc2VydCBhIGRvdHRlZCBjaXJjbGVcbiAgICAgICAgICAgICAgICAgICAgaSA9ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRpbnNlcnREb3R0ZWRDaXJjbGUoZ2x5cGhzLCBpLCBwbGFuLmZvbnQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgIH1cbn1cbigwLCAkNTJaSWYkXykoJGUxYzZiYmM4Y2I0MTZmOGMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSwgXCJ6ZXJvTWFya1dpZHRoc1wiLCAnTk9ORScpO1xuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJEhBTkdVTF9CQVNFID0gMHhhYzAwO1xuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJEhBTkdVTF9FTkQgPSAweGQ3YTQ7XG5jb25zdCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkSEFOR1VMX0NPVU5UID0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJEhBTkdVTF9FTkQgLSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkSEFOR1VMX0JBU0UgKyAxO1xuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJExfQkFTRSA9IDB4MTEwMDsgLy8gbGVhZFxuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFZfQkFTRSA9IDB4MTE2MTsgLy8gdm93ZWxcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRUX0JBU0UgPSAweDExYTc7IC8vIHRyYWlsXG5jb25zdCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTF9DT1VOVCA9IDE5O1xuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFZfQ09VTlQgPSAyMTtcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRUX0NPVU5UID0gMjg7XG5jb25zdCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTF9FTkQgPSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTF9CQVNFICsgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJExfQ09VTlQgLSAxO1xuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFZfRU5EID0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFZfQkFTRSArICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRWX0NPVU5UIC0gMTtcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRUX0VORCA9ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRUX0JBU0UgKyAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVF9DT1VOVCAtIDE7XG5jb25zdCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkRE9UVEVEX0NJUkNMRSA9IDB4MjVjYztcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRpc0wgPSAoY29kZSk9PjB4MTEwMCA8PSBjb2RlICYmIGNvZGUgPD0gMHgxMTVmIHx8IDB4YTk2MCA8PSBjb2RlICYmIGNvZGUgPD0gMHhhOTdjO1xuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGlzViA9IChjb2RlKT0+MHgxMTYwIDw9IGNvZGUgJiYgY29kZSA8PSAweDExYTcgfHwgMHhkN2IwIDw9IGNvZGUgJiYgY29kZSA8PSAweGQ3YzY7XG5jb25zdCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkaXNUID0gKGNvZGUpPT4weDExYTggPD0gY29kZSAmJiBjb2RlIDw9IDB4MTFmZiB8fCAweGQ3Y2IgPD0gY29kZSAmJiBjb2RlIDw9IDB4ZDdmYjtcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRpc1RvbmUgPSAoY29kZSk9PjB4MzAyZSA8PSBjb2RlICYmIGNvZGUgPD0gMHgzMDJmO1xuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGlzTFZUID0gKGNvZGUpPT4kZTFjNmJiYzhjYjQxNmY4YyR2YXIkSEFOR1VMX0JBU0UgPD0gY29kZSAmJiBjb2RlIDw9ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRIQU5HVUxfRU5EO1xuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGlzTFYgPSAoY29kZSk9PmNvZGUgLSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkSEFOR1VMX0JBU0UgPCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkSEFOR1VMX0NPVU5UICYmIChjb2RlIC0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJEhBTkdVTF9CQVNFKSAlICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRUX0NPVU5UID09PSAwO1xuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGlzQ29tYmluaW5nTCA9IChjb2RlKT0+JGUxYzZiYmM4Y2I0MTZmOGMkdmFyJExfQkFTRSA8PSBjb2RlICYmIGNvZGUgPD0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJExfRU5EO1xuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGlzQ29tYmluaW5nViA9IChjb2RlKT0+JGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFZfQkFTRSA8PSBjb2RlICYmIGNvZGUgPD0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFZfRU5EO1xuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGlzQ29tYmluaW5nVCA9IChjb2RlKT0+JGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFRfQkFTRSArIDEgJiYgMSA8PSBjb2RlICYmIGNvZGUgPD0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFRfRU5EO1xuLy8gQ2hhcmFjdGVyIGNhdGVnb3JpZXNcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRYID0gMDsgLy8gT3RoZXIgY2hhcmFjdGVyXG5jb25zdCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTCA9IDE7IC8vIExlYWRpbmcgY29uc29uYW50XG5jb25zdCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkViA9IDI7IC8vIE1lZGlhbCB2b3dlbFxuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFQgPSAzOyAvLyBUcmFpbGluZyBjb25zb25hbnRcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRMViA9IDQ7IC8vIENvbXBvc2VkIDxMVj4gc3lsbGFibGVcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRMVlQgPSA1OyAvLyBDb21wb3NlZCA8TFZUPiBzeWxsYWJsZVxuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJE0gPSA2OyAvLyBUb25lIG1hcmtcbi8vIFRoaXMgZnVuY3Rpb24gY2xhc3NpZmllcyBhIGNoYXJhY3RlciB1c2luZyB0aGUgYWJvdmUgY2F0ZWdvcmllcy5cbmZ1bmN0aW9uICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRnZXRUeXBlKGNvZGUpIHtcbiAgICBpZiAoJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGlzTChjb2RlKSkgcmV0dXJuICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRMO1xuICAgIGlmICgkZTFjNmJiYzhjYjQxNmY4YyR2YXIkaXNWKGNvZGUpKSByZXR1cm4gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFY7XG4gICAgaWYgKCRlMWM2YmJjOGNiNDE2ZjhjJHZhciRpc1QoY29kZSkpIHJldHVybiAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVDtcbiAgICBpZiAoJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGlzTFYoY29kZSkpIHJldHVybiAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTFY7XG4gICAgaWYgKCRlMWM2YmJjOGNiNDE2ZjhjJHZhciRpc0xWVChjb2RlKSkgcmV0dXJuICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRMVlQ7XG4gICAgaWYgKCRlMWM2YmJjOGNiNDE2ZjhjJHZhciRpc1RvbmUoY29kZSkpIHJldHVybiAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTTtcbiAgICByZXR1cm4gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFg7XG59XG4vLyBTdGF0ZSBtYWNoaW5lIGFjdGlvbnNcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciROT19BQ1RJT04gPSAwO1xuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJERFQ09NUE9TRSA9IDE7XG5jb25zdCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkQ09NUE9TRSA9IDI7XG5jb25zdCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVE9ORV9NQVJLID0gNDtcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRJTlZBTElEID0gNTtcbi8vIEJ1aWxkIGEgc3RhdGUgbWFjaGluZSB0aGF0IGFjY2VwdHMgdmFsaWQgc3lsbGFibGVzLCBhbmQgYXBwbGllcyBhY3Rpb25zIGFsb25nIHRoZSB3YXkuXG4vLyBUaGUgbG9naWMgdGhpcyBpcyBpbXBsZW1lbnRpbmcgaXMgZG9jdW1lbnRlZCBhdCB0aGUgdG9wIG9mIHRoZSBmaWxlLlxuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFNUQVRFX1RBQkxFID0gW1xuICAgIC8vICAgICAgIFggICAgICAgICAgICAgICAgIEwgICAgICAgICAgICAgICAgIFYgICAgICAgICAgICAgICAgVCAgICAgICAgICAgICAgICAgIExWICAgICAgICAgICAgICAgIExWVCAgICAgICAgICAgICAgIE1cbiAgICAvLyBTdGF0ZSAwOiBzdGFydCBzdGF0ZVxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJE5PX0FDVElPTixcbiAgICAgICAgICAgIDBcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJE5PX0FDVElPTixcbiAgICAgICAgICAgIDFcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJE5PX0FDVElPTixcbiAgICAgICAgICAgIDBcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJE5PX0FDVElPTixcbiAgICAgICAgICAgIDBcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJERFQ09NUE9TRSxcbiAgICAgICAgICAgIDJcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJERFQ09NUE9TRSxcbiAgICAgICAgICAgIDNcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJElOVkFMSUQsXG4gICAgICAgICAgICAwXG4gICAgICAgIF1cbiAgICBdLFxuICAgIC8vIFN0YXRlIDE6IDxMPlxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJE5PX0FDVElPTixcbiAgICAgICAgICAgIDBcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJE5PX0FDVElPTixcbiAgICAgICAgICAgIDFcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJENPTVBPU0UsXG4gICAgICAgICAgICAyXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciROT19BQ1RJT04sXG4gICAgICAgICAgICAwXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRERUNPTVBPU0UsXG4gICAgICAgICAgICAyXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRERUNPTVBPU0UsXG4gICAgICAgICAgICAzXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRJTlZBTElELFxuICAgICAgICAgICAgMFxuICAgICAgICBdXG4gICAgXSxcbiAgICAvLyBTdGF0ZSAyOiA8TCxWPiBvciA8TFY+XG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTk9fQUNUSU9OLFxuICAgICAgICAgICAgMFxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgICAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTk9fQUNUSU9OLFxuICAgICAgICAgICAgMVxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgICAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTk9fQUNUSU9OLFxuICAgICAgICAgICAgMFxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgICAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkQ09NUE9TRSxcbiAgICAgICAgICAgIDNcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJERFQ09NUE9TRSxcbiAgICAgICAgICAgIDJcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJERFQ09NUE9TRSxcbiAgICAgICAgICAgIDNcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFRPTkVfTUFSSyxcbiAgICAgICAgICAgIDBcbiAgICAgICAgXVxuICAgIF0sXG4gICAgLy8gU3RhdGUgMzogPEwsVixUPiBvciA8TFZUPlxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJE5PX0FDVElPTixcbiAgICAgICAgICAgIDBcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJE5PX0FDVElPTixcbiAgICAgICAgICAgIDFcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJE5PX0FDVElPTixcbiAgICAgICAgICAgIDBcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJE5PX0FDVElPTixcbiAgICAgICAgICAgIDBcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJERFQ09NUE9TRSxcbiAgICAgICAgICAgIDJcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJERFQ09NUE9TRSxcbiAgICAgICAgICAgIDNcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFRPTkVfTUFSSyxcbiAgICAgICAgICAgIDBcbiAgICAgICAgXVxuICAgIF1cbl07XG5mdW5jdGlvbiAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkZ2V0R2x5cGgoZm9udCwgY29kZSwgZmVhdHVyZXMpIHtcbiAgICByZXR1cm4gbmV3ICgwLCAkMTBlN2IyNTdlMWE5YTc1NiRleHBvcnQkMmUyYmNkODczOWFlMDM5KShmb250LCBmb250LmdseXBoRm9yQ29kZVBvaW50KGNvZGUpLmlkLCBbXG4gICAgICAgIGNvZGVcbiAgICBdLCBmZWF0dXJlcyk7XG59XG5mdW5jdGlvbiAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkZGVjb21wb3NlKGdseXBocywgaSwgZm9udCkge1xuICAgIGxldCBnbHlwaCA9IGdseXBoc1tpXTtcbiAgICBsZXQgY29kZSA9IGdseXBoLmNvZGVQb2ludHNbMF07XG4gICAgbGV0IHMgPSBjb2RlIC0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJEhBTkdVTF9CQVNFO1xuICAgIGxldCB0ID0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFRfQkFTRSArIHMgJSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVF9DT1VOVDtcbiAgICBzID0gcyAvICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRUX0NPVU5UIHwgMDtcbiAgICBsZXQgbCA9ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRMX0JBU0UgKyBzIC8gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFZfQ09VTlQgfCAwO1xuICAgIGxldCB2ID0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFZfQkFTRSArIHMgJSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVl9DT1VOVDtcbiAgICAvLyBEb24ndCBkZWNvbXBvc2UgaWYgYWxsIG9mIHRoZSBjb21wb25lbnRzIGFyZSBub3QgYXZhaWxhYmxlXG4gICAgaWYgKCFmb250Lmhhc0dseXBoRm9yQ29kZVBvaW50KGwpIHx8ICFmb250Lmhhc0dseXBoRm9yQ29kZVBvaW50KHYpIHx8IHQgIT09ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRUX0JBU0UgJiYgIWZvbnQuaGFzR2x5cGhGb3JDb2RlUG9pbnQodCkpIHJldHVybiBpO1xuICAgIC8vIFJlcGxhY2UgdGhlIGN1cnJlbnQgZ2x5cGggd2l0aCBkZWNvbXBvc2VkIEwsIFYsIGFuZCBUIGdseXBocyxcbiAgICAvLyBhbmQgYXBwbHkgdGhlIHByb3BlciBPcGVuVHlwZSBmZWF0dXJlcyB0byBlYWNoIGNvbXBvbmVudC5cbiAgICBsZXQgbGptbyA9ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRnZXRHbHlwaChmb250LCBsLCBnbHlwaC5mZWF0dXJlcyk7XG4gICAgbGptby5mZWF0dXJlcy5sam1vID0gdHJ1ZTtcbiAgICBsZXQgdmptbyA9ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRnZXRHbHlwaChmb250LCB2LCBnbHlwaC5mZWF0dXJlcyk7XG4gICAgdmptby5mZWF0dXJlcy52am1vID0gdHJ1ZTtcbiAgICBsZXQgaW5zZXJ0ID0gW1xuICAgICAgICBsam1vLFxuICAgICAgICB2am1vXG4gICAgXTtcbiAgICBpZiAodCA+ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRUX0JBU0UpIHtcbiAgICAgICAgbGV0IHRqbW8gPSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkZ2V0R2x5cGgoZm9udCwgdCwgZ2x5cGguZmVhdHVyZXMpO1xuICAgICAgICB0am1vLmZlYXR1cmVzLnRqbW8gPSB0cnVlO1xuICAgICAgICBpbnNlcnQucHVzaCh0am1vKTtcbiAgICB9XG4gICAgZ2x5cGhzLnNwbGljZShpLCAxLCAuLi5pbnNlcnQpO1xuICAgIHJldHVybiBpICsgaW5zZXJ0Lmxlbmd0aCAtIDE7XG59XG5mdW5jdGlvbiAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkY29tcG9zZShnbHlwaHMsIGksIGZvbnQpIHtcbiAgICBsZXQgZ2x5cGggPSBnbHlwaHNbaV07XG4gICAgbGV0IGNvZGUgPSBnbHlwaHNbaV0uY29kZVBvaW50c1swXTtcbiAgICBsZXQgdHlwZSA9ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRnZXRUeXBlKGNvZGUpO1xuICAgIGxldCBwcmV2ID0gZ2x5cGhzW2kgLSAxXS5jb2RlUG9pbnRzWzBdO1xuICAgIGxldCBwcmV2VHlwZSA9ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRnZXRUeXBlKHByZXYpO1xuICAgIC8vIEZpZ3VyZSBvdXQgd2hhdCB0eXBlIG9mIHN5bGxhYmxlIHdlJ3JlIGRlYWxpbmcgd2l0aFxuICAgIGxldCBsdiwgbGptbywgdmptbywgdGptbztcbiAgICBpZiAocHJldlR5cGUgPT09ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRMViAmJiB0eXBlID09PSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVCkge1xuICAgICAgICAvLyA8TFYsVD5cbiAgICAgICAgbHYgPSBwcmV2O1xuICAgICAgICB0am1vID0gZ2x5cGg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHR5cGUgPT09ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRWKSB7XG4gICAgICAgICAgICAvLyA8TCxWPlxuICAgICAgICAgICAgbGptbyA9IGdseXBoc1tpIC0gMV07XG4gICAgICAgICAgICB2am1vID0gZ2x5cGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyA8TCxWLFQ+XG4gICAgICAgICAgICBsam1vID0gZ2x5cGhzW2kgLSAyXTtcbiAgICAgICAgICAgIHZqbW8gPSBnbHlwaHNbaSAtIDFdO1xuICAgICAgICAgICAgdGptbyA9IGdseXBoO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsID0gbGptby5jb2RlUG9pbnRzWzBdO1xuICAgICAgICBsZXQgdiA9IHZqbW8uY29kZVBvaW50c1swXTtcbiAgICAgICAgLy8gTWFrZSBzdXJlIEwgYW5kIFYgYXJlIGNvbWJpbmluZyBjaGFyYWN0ZXJzXG4gICAgICAgIGlmICgkZTFjNmJiYzhjYjQxNmY4YyR2YXIkaXNDb21iaW5pbmdMKGwpICYmICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRpc0NvbWJpbmluZ1YodikpIGx2ID0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJEhBTkdVTF9CQVNFICsgKChsIC0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJExfQkFTRSkgKiAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVl9DT1VOVCArICh2IC0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFZfQkFTRSkpICogJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFRfQ09VTlQ7XG4gICAgfVxuICAgIGxldCB0ID0gdGptbyAmJiB0am1vLmNvZGVQb2ludHNbMF0gfHwgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFRfQkFTRTtcbiAgICBpZiAobHYgIT0gbnVsbCAmJiAodCA9PT0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFRfQkFTRSB8fCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkaXNDb21iaW5pbmdUKHQpKSkge1xuICAgICAgICBsZXQgcyA9IGx2ICsgKHQgLSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVF9CQVNFKTtcbiAgICAgICAgLy8gUmVwbGFjZSB3aXRoIGEgY29tcG9zZWQgZ2x5cGggaWYgc3VwcG9ydGVkIGJ5IHRoZSBmb250LFxuICAgICAgICAvLyBvdGhlcndpc2UgYXBwbHkgdGhlIHByb3BlciBPcGVuVHlwZSBmZWF0dXJlcyB0byBlYWNoIGNvbXBvbmVudC5cbiAgICAgICAgaWYgKGZvbnQuaGFzR2x5cGhGb3JDb2RlUG9pbnQocykpIHtcbiAgICAgICAgICAgIGxldCBkZWwgPSBwcmV2VHlwZSA9PT0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFYgPyAzIDogMjtcbiAgICAgICAgICAgIGdseXBocy5zcGxpY2UoaSAtIGRlbCArIDEsIGRlbCwgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGdldEdseXBoKGZvbnQsIHMsIGdseXBoLmZlYXR1cmVzKSk7XG4gICAgICAgICAgICByZXR1cm4gaSAtIGRlbCArIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gRGlkbid0IGNvbXBvc2UgKGVpdGhlciBhIG5vbi1jb21iaW5pbmcgY29tcG9uZW50IG9yIHVuc3VwcG9ydGVkIGJ5IGZvbnQpLlxuICAgIGlmIChsam1vKSBsam1vLmZlYXR1cmVzLmxqbW8gPSB0cnVlO1xuICAgIGlmICh2am1vKSB2am1vLmZlYXR1cmVzLnZqbW8gPSB0cnVlO1xuICAgIGlmICh0am1vKSB0am1vLmZlYXR1cmVzLnRqbW8gPSB0cnVlO1xuICAgIGlmIChwcmV2VHlwZSA9PT0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJExWKSB7XG4gICAgICAgIC8vIFNlcXVlbmNlIHdhcyBvcmlnaW5hbGx5IDxMLFY+LCB3aGljaCBnb3QgY29tYmluZWQgZWFybGllci5cbiAgICAgICAgLy8gRWl0aGVyIHRoZSBUIHdhcyBub24tY29tYmluaW5nLCBvciB0aGUgTFZUIGdseXBoIHdhc24ndCBzdXBwb3J0ZWQuXG4gICAgICAgIC8vIERlY29tcG9zZSB0aGUgZ2x5cGggYWdhaW4gYW5kIGFwcGx5IE9UIGZlYXR1cmVzLlxuICAgICAgICAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkZGVjb21wb3NlKGdseXBocywgaSAtIDEsIGZvbnQpO1xuICAgICAgICByZXR1cm4gaSArIDE7XG4gICAgfVxuICAgIHJldHVybiBpO1xufVxuZnVuY3Rpb24gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGdldExlbmd0aChjb2RlKSB7XG4gICAgc3dpdGNoKCRlMWM2YmJjOGNiNDE2ZjhjJHZhciRnZXRUeXBlKGNvZGUpKXtcbiAgICAgICAgY2FzZSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTFY6XG4gICAgICAgIGNhc2UgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJExWVDpcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICBjYXNlICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRWOlxuICAgICAgICAgICAgcmV0dXJuIDI7XG4gICAgICAgIGNhc2UgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFQ6XG4gICAgICAgICAgICByZXR1cm4gMztcbiAgICB9XG59XG5mdW5jdGlvbiAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkcmVvcmRlclRvbmVNYXJrKGdseXBocywgaSwgZm9udCkge1xuICAgIGxldCBnbHlwaCA9IGdseXBoc1tpXTtcbiAgICBsZXQgY29kZSA9IGdseXBoc1tpXS5jb2RlUG9pbnRzWzBdO1xuICAgIC8vIE1vdmUgdG9uZSBtYXJrIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHByZXZpb3VzIHN5bGxhYmxlLCB1bmxlc3MgaXQgaXMgemVybyB3aWR0aFxuICAgIGlmIChmb250LmdseXBoRm9yQ29kZVBvaW50KGNvZGUpLmFkdmFuY2VXaWR0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGxldCBwcmV2ID0gZ2x5cGhzW2kgLSAxXS5jb2RlUG9pbnRzWzBdO1xuICAgIGxldCBsZW4gPSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkZ2V0TGVuZ3RoKHByZXYpO1xuICAgIGdseXBocy5zcGxpY2UoaSwgMSk7XG4gICAgcmV0dXJuIGdseXBocy5zcGxpY2UoaSAtIGxlbiwgMCwgZ2x5cGgpO1xufVxuZnVuY3Rpb24gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGluc2VydERvdHRlZENpcmNsZShnbHlwaHMsIGksIGZvbnQpIHtcbiAgICBsZXQgZ2x5cGggPSBnbHlwaHNbaV07XG4gICAgbGV0IGNvZGUgPSBnbHlwaHNbaV0uY29kZVBvaW50c1swXTtcbiAgICBpZiAoZm9udC5oYXNHbHlwaEZvckNvZGVQb2ludCgkZTFjNmJiYzhjYjQxNmY4YyR2YXIkRE9UVEVEX0NJUkNMRSkpIHtcbiAgICAgICAgbGV0IGRvdHRlZENpcmNsZSA9ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRnZXRHbHlwaChmb250LCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkRE9UVEVEX0NJUkNMRSwgZ2x5cGguZmVhdHVyZXMpO1xuICAgICAgICAvLyBJZiB0aGUgdG9uZSBtYXJrIGlzIHplcm8gd2lkdGgsIGluc2VydCB0aGUgZG90dGVkIGNpcmNsZSBiZWZvcmUsIG90aGVyd2lzZSBhZnRlclxuICAgICAgICBsZXQgaWR4ID0gZm9udC5nbHlwaEZvckNvZGVQb2ludChjb2RlKS5hZHZhbmNlV2lkdGggPT09IDAgPyBpIDogaSArIDE7XG4gICAgICAgIGdseXBocy5zcGxpY2UoaWR4LCAwLCBkb3R0ZWRDaXJjbGUpO1xuICAgICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiBpO1xufVxuXG5cblxuXG5cblxuXG5cblxudmFyICQ0YjA3MzVjYTZjNjkyZWE1JGV4cG9ydHMgPSB7fTtcbiQ0YjA3MzVjYTZjNjkyZWE1JGV4cG9ydHMgPSBKU09OLnBhcnNlKFwie1xcXCJzdGF0ZVRhYmxlXFxcIjpbWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDIsMyw0LDUsNiw3LDgsOSwwLDEwLDExLDExLDEyLDEzLDE0LDE1LDE2LDE3XSxbMCwwLDAsMTgsMTksMjAsMjEsMjIsMjMsMCwyNCwwLDAsMjUsMjYsMCwwLDI3LDBdLFswLDAsMCwyOCwyOSwzMCwzMSwzMiwzMywwLDM0LDAsMCwzNSwzNiwwLDAsMzcsMF0sWzAsMCwwLDM4LDUsNyw3LDgsOSwwLDEwLDAsMCwwLDEzLDAsMCwxNiwwXSxbMCwzOSwwLDAsMCw0MCw0MSwwLDksMCwxMCwwLDAsMCw0MiwwLDM5LDAsMF0sWzAsMCwwLDAsNDMsNDQsNDQsOCw5LDAsMCwwLDAsMTIsNDMsMCwwLDAsMF0sWzAsMCwwLDAsNDMsNDQsNDQsOCw5LDAsMCwwLDAsMCw0MywwLDAsMCwwXSxbMCwwLDAsNDUsNDYsNDcsNDgsNDksOSwwLDEwLDAsMCwwLDQyLDAsMCwwLDBdLFswLDAsMCwwLDAsNTAsMCwwLDUxLDAsMTAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCw1MiwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCw1Myw1NCw1NSw1Niw1Nyw1OCwwLDU5LDAsMCw2MCw2MSwwLDAsNjIsMF0sWzAsMCwwLDQsNSw3LDcsOCw5LDAsMTAsMCwwLDAsMTMsMCwwLDE2LDBdLFswLDYzLDY0LDAsMCw0MCw0MSwwLDksMCwxMCwwLDAsMCw0MiwwLDYzLDAsMF0sWzAsMiwzLDQsNSw2LDcsOCw5LDAsMTAsMTEsMTEsMTIsMTMsMCwyLDE2LDBdLFswLDAsMCwxOCw2NSwyMCwyMSwyMiwyMywwLDI0LDAsMCwyNSwyNiwwLDAsMjcsMF0sWzAsMCwwLDAsNjYsNjcsNjcsOCw5LDAsMTAsMCwwLDAsNjgsMCwwLDAsMF0sWzAsMCwwLDY5LDAsNzAsNzAsMCw3MSwwLDcyLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDczLDE5LDc0LDc0LDIyLDIzLDAsMjQsMCwwLDAsMjYsMCwwLDI3LDBdLFswLDc1LDAsMCwwLDc2LDc3LDAsMjMsMCwyNCwwLDAsMCw3OCwwLDc1LDAsMF0sWzAsMCwwLDAsNzksODAsODAsMjIsMjMsMCwwLDAsMCwyNSw3OSwwLDAsMCwwXSxbMCwwLDAsMTgsMTksMjAsNzQsMjIsMjMsMCwyNCwwLDAsMjUsMjYsMCwwLDI3LDBdLFswLDAsMCw4MSw4Miw4Myw4NCw4NSwyMywwLDI0LDAsMCwwLDc4LDAsMCwwLDBdLFswLDAsMCwwLDAsODYsMCwwLDg3LDAsMjQsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCw4OCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwxOCwxOSw3NCw3NCwyMiwyMywwLDI0LDAsMCwwLDI2LDAsMCwyNywwXSxbMCw4OSw5MCwwLDAsNzYsNzcsMCwyMywwLDI0LDAsMCwwLDc4LDAsODksMCwwXSxbMCwwLDAsMCw5MSw5Miw5MiwyMiwyMywwLDI0LDAsMCwwLDkzLDAsMCwwLDBdLFswLDAsMCw5NCwyOSw5NSwzMSwzMiwzMywwLDM0LDAsMCwwLDM2LDAsMCwzNywwXSxbMCw5NiwwLDAsMCw5Nyw5OCwwLDMzLDAsMzQsMCwwLDAsOTksMCw5NiwwLDBdLFswLDAsMCwwLDEwMCwxMDEsMTAxLDMyLDMzLDAsMCwwLDAsMzUsMTAwLDAsMCwwLDBdLFswLDAsMCwwLDEwMCwxMDEsMTAxLDMyLDMzLDAsMCwwLDAsMCwxMDAsMCwwLDAsMF0sWzAsMCwwLDEwMiwxMDMsMTA0LDEwNSwxMDYsMzMsMCwzNCwwLDAsMCw5OSwwLDAsMCwwXSxbMCwwLDAsMCwwLDEwNywwLDAsMTA4LDAsMzQsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwxMDksMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMjgsMjksOTUsMzEsMzIsMzMsMCwzNCwwLDAsMCwzNiwwLDAsMzcsMF0sWzAsMTEwLDExMSwwLDAsOTcsOTgsMCwzMywwLDM0LDAsMCwwLDk5LDAsMTEwLDAsMF0sWzAsMCwwLDAsMTEyLDExMywxMTMsMzIsMzMsMCwzNCwwLDAsMCwxMTQsMCwwLDAsMF0sWzAsMCwwLDAsNSw3LDcsOCw5LDAsMTAsMCwwLDAsMTMsMCwwLDE2LDBdLFswLDAsMCwxMTUsMTE2LDExNywxMTgsOCw5LDAsMTAsMCwwLDExOSwxMjAsMCwwLDE2LDBdLFswLDAsMCwwLDAsMTIxLDEyMSwwLDksMCwxMCwwLDAsMCw0MiwwLDAsMCwwXSxbMCwzOSwwLDEyMiwwLDEyMywxMjMsOCw5LDAsMTAsMCwwLDAsNDIsMCwzOSwwLDBdLFswLDEyNCw2NCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDEyNCwwLDBdLFswLDM5LDAsMCwwLDEyMSwxMjUsMCw5LDAsMTAsMCwwLDAsNDIsMCwzOSwwLDBdLFswLDAsMCwwLDAsMTI2LDEyNiw4LDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsNDYsNDcsNDgsNDksOSwwLDEwLDAsMCwwLDQyLDAsMCwwLDBdLFswLDAsMCwwLDAsNDcsNDcsNDksOSwwLDEwLDAsMCwwLDQyLDAsMCwwLDBdLFswLDAsMCwwLDAsMTI3LDEyNyw0OSw5LDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDEyOCwxMjcsMTI3LDQ5LDksMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDEyOSwxMzAsMTMxLDEzMiwxMzMsOSwwLDEwLDAsMCwwLDQyLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDEwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCw1MCwwLDAsMCwwLDEwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMTM0LDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDEzNSw1NCw1Niw1Niw1Nyw1OCwwLDU5LDAsMCwwLDYxLDAsMCw2MiwwXSxbMCwxMzYsMCwwLDAsMTM3LDEzOCwwLDU4LDAsNTksMCwwLDAsMTM5LDAsMTM2LDAsMF0sWzAsMCwwLDAsMTQwLDE0MSwxNDEsNTcsNTgsMCwwLDAsMCw2MCwxNDAsMCwwLDAsMF0sWzAsMCwwLDAsMTQwLDE0MSwxNDEsNTcsNTgsMCwwLDAsMCwwLDE0MCwwLDAsMCwwXSxbMCwwLDAsMTQyLDE0MywxNDQsMTQ1LDE0Niw1OCwwLDU5LDAsMCwwLDEzOSwwLDAsMCwwXSxbMCwwLDAsMCwwLDE0NywwLDAsMTQ4LDAsNTksMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwxNDksMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsNTMsNTQsNTYsNTYsNTcsNTgsMCw1OSwwLDAsMCw2MSwwLDAsNjIsMF0sWzAsMTUwLDE1MSwwLDAsMTM3LDEzOCwwLDU4LDAsNTksMCwwLDAsMTM5LDAsMTUwLDAsMF0sWzAsMCwwLDAsMTUyLDE1MywxNTMsNTcsNTgsMCw1OSwwLDAsMCwxNTQsMCwwLDAsMF0sWzAsMCwwLDE1NSwxMTYsMTU2LDE1Nyw4LDksMCwxMCwwLDAsMTU4LDEyMCwwLDAsMTYsMF0sWzAsMCwwLDAsMCwxMjEsMTIxLDAsOSwwLDEwLDAsMCwwLDAsMCwwLDAsMF0sWzAsNzUsMyw0LDUsMTU5LDE2MCw4LDE2MSwwLDE2MiwwLDExLDEyLDE2MywwLDc1LDE2LDBdLFswLDAsMCwwLDAsNDAsMTY0LDAsOSwwLDEwLDAsMCwwLDQyLDAsMCwwLDBdLFswLDAsMCwwLDE2NSw0NCw0NCw4LDksMCwwLDAsMCwwLDE2NSwwLDAsMCwwXSxbMCwxMjQsNjQsMCwwLDQwLDE2NCwwLDksMCwxMCwwLDAsMCw0MiwwLDEyNCwwLDBdLFswLDAsMCwwLDAsNzAsNzAsMCw3MSwwLDcyLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCw3MSwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDE2NiwwLDAsMTY3LDAsNzIsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwxNjgsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwxOSw3NCw3NCwyMiwyMywwLDI0LDAsMCwwLDI2LDAsMCwyNywwXSxbMCwwLDAsMCw3OSw4MCw4MCwyMiwyMywwLDAsMCwwLDAsNzksMCwwLDAsMF0sWzAsMCwwLDE2OSwxNzAsMTcxLDE3MiwyMiwyMywwLDI0LDAsMCwxNzMsMTc0LDAsMCwyNywwXSxbMCwwLDAsMCwwLDE3NSwxNzUsMCwyMywwLDI0LDAsMCwwLDc4LDAsMCwwLDBdLFswLDc1LDAsMTc2LDAsMTc3LDE3NywyMiwyMywwLDI0LDAsMCwwLDc4LDAsNzUsMCwwXSxbMCwxNzgsOTAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwxNzgsMCwwXSxbMCw3NSwwLDAsMCwxNzUsMTc5LDAsMjMsMCwyNCwwLDAsMCw3OCwwLDc1LDAsMF0sWzAsMCwwLDAsMCwxODAsMTgwLDIyLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsODIsODMsODQsODUsMjMsMCwyNCwwLDAsMCw3OCwwLDAsMCwwXSxbMCwwLDAsMCwwLDgzLDgzLDg1LDIzLDAsMjQsMCwwLDAsNzgsMCwwLDAsMF0sWzAsMCwwLDAsMCwxODEsMTgxLDg1LDIzLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDE4MiwxODEsMTgxLDg1LDIzLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwxODMsMTg0LDE4NSwxODYsMTg3LDIzLDAsMjQsMCwwLDAsNzgsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMjQsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDg2LDAsMCwwLDAsMjQsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwxODgsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMTg5LDE3MCwxOTAsMTkxLDIyLDIzLDAsMjQsMCwwLDE5MiwxNzQsMCwwLDI3LDBdLFswLDAsMCwwLDAsMTc1LDE3NSwwLDIzLDAsMjQsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDc2LDE5MywwLDIzLDAsMjQsMCwwLDAsNzgsMCwwLDAsMF0sWzAsMCwwLDAsMTk0LDgwLDgwLDIyLDIzLDAsMCwwLDAsMCwxOTQsMCwwLDAsMF0sWzAsMTc4LDkwLDAsMCw3NiwxOTMsMCwyMywwLDI0LDAsMCwwLDc4LDAsMTc4LDAsMF0sWzAsMCwwLDAsMjksOTUsMzEsMzIsMzMsMCwzNCwwLDAsMCwzNiwwLDAsMzcsMF0sWzAsMCwwLDAsMTAwLDEwMSwxMDEsMzIsMzMsMCwwLDAsMCwwLDEwMCwwLDAsMCwwXSxbMCwwLDAsMTk1LDE5NiwxOTcsMTk4LDMyLDMzLDAsMzQsMCwwLDE5OSwyMDAsMCwwLDM3LDBdLFswLDAsMCwwLDAsMjAxLDIwMSwwLDMzLDAsMzQsMCwwLDAsOTksMCwwLDAsMF0sWzAsOTYsMCwyMDIsMCwyMDMsMjAzLDMyLDMzLDAsMzQsMCwwLDAsOTksMCw5NiwwLDBdLFswLDIwNCwxMTEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyMDQsMCwwXSxbMCw5NiwwLDAsMCwyMDEsMjA1LDAsMzMsMCwzNCwwLDAsMCw5OSwwLDk2LDAsMF0sWzAsMCwwLDAsMCwyMDYsMjA2LDMyLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMTAzLDEwNCwxMDUsMTA2LDMzLDAsMzQsMCwwLDAsOTksMCwwLDAsMF0sWzAsMCwwLDAsMCwxMDQsMTA0LDEwNiwzMywwLDM0LDAsMCwwLDk5LDAsMCwwLDBdLFswLDAsMCwwLDAsMjA3LDIwNywxMDYsMzMsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMjA4LDIwNywyMDcsMTA2LDMzLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwyMDksMjEwLDIxMSwyMTIsMjEzLDMzLDAsMzQsMCwwLDAsOTksMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMzQsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDEwNywwLDAsMCwwLDM0LDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMjE0LDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDIxNSwxOTYsMjE2LDIxNywzMiwzMywwLDM0LDAsMCwyMTgsMjAwLDAsMCwzNywwXSxbMCwwLDAsMCwwLDIwMSwyMDEsMCwzMywwLDM0LDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCw5NywyMTksMCwzMywwLDM0LDAsMCwwLDk5LDAsMCwwLDBdLFswLDAsMCwwLDIyMCwxMDEsMTAxLDMyLDMzLDAsMCwwLDAsMCwyMjAsMCwwLDAsMF0sWzAsMjA0LDExMSwwLDAsOTcsMjE5LDAsMzMsMCwzNCwwLDAsMCw5OSwwLDIwNCwwLDBdLFswLDAsMCwyMjEsMTE2LDIyMiwyMjIsOCw5LDAsMTAsMCwwLDAsMTIwLDAsMCwxNiwwXSxbMCwyMjMsMCwwLDAsNDAsMjI0LDAsOSwwLDEwLDAsMCwwLDQyLDAsMjIzLDAsMF0sWzAsMCwwLDAsMjI1LDQ0LDQ0LDgsOSwwLDAsMCwwLDExOSwyMjUsMCwwLDAsMF0sWzAsMCwwLDExNSwxMTYsMTE3LDIyMiw4LDksMCwxMCwwLDAsMTE5LDEyMCwwLDAsMTYsMF0sWzAsMCwwLDExNSwxMTYsMjIyLDIyMiw4LDksMCwxMCwwLDAsMCwxMjAsMCwwLDE2LDBdLFswLDIyNiw2NCwwLDAsNDAsMjI0LDAsOSwwLDEwLDAsMCwwLDQyLDAsMjI2LDAsMF0sWzAsMCwwLDAsMCwwLDAsMCw5LDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDM5LDAsMCwwLDEyMSwxMjEsMCw5LDAsMTAsMCwwLDAsNDIsMCwzOSwwLDBdLFswLDAsMCwwLDAsNDQsNDQsOCw5LDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwyMjcsMCwyMjgsMjI5LDAsOSwwLDEwLDAsMCwyMzAsMCwwLDAsMCwwXSxbMCwzOSwwLDEyMiwwLDEyMSwxMjEsMCw5LDAsMTAsMCwwLDAsNDIsMCwzOSwwLDBdLFswLDAsMCwwLDAsMCwwLDgsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDIzMSwyMzEsNDksMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMjMyLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwxMzAsMTMxLDEzMiwxMzMsOSwwLDEwLDAsMCwwLDQyLDAsMCwwLDBdLFswLDAsMCwwLDAsMTMxLDEzMSwxMzMsOSwwLDEwLDAsMCwwLDQyLDAsMCwwLDBdLFswLDAsMCwwLDAsMjMzLDIzMywxMzMsOSwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwyMzQsMjMzLDIzMywxMzMsOSwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMjM1LDIzNiwyMzcsMjM4LDIzOSw5LDAsMTAsMCwwLDAsNDIsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDU0LDU2LDU2LDU3LDU4LDAsNTksMCwwLDAsNjEsMCwwLDYyLDBdLFswLDAsMCwyNDAsMjQxLDI0MiwyNDMsNTcsNTgsMCw1OSwwLDAsMjQ0LDI0NSwwLDAsNjIsMF0sWzAsMCwwLDAsMCwyNDYsMjQ2LDAsNTgsMCw1OSwwLDAsMCwxMzksMCwwLDAsMF0sWzAsMTM2LDAsMjQ3LDAsMjQ4LDI0OCw1Nyw1OCwwLDU5LDAsMCwwLDEzOSwwLDEzNiwwLDBdLFswLDI0OSwxNTEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyNDksMCwwXSxbMCwxMzYsMCwwLDAsMjQ2LDI1MCwwLDU4LDAsNTksMCwwLDAsMTM5LDAsMTM2LDAsMF0sWzAsMCwwLDAsMCwyNTEsMjUxLDU3LDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMTQzLDE0NCwxNDUsMTQ2LDU4LDAsNTksMCwwLDAsMTM5LDAsMCwwLDBdLFswLDAsMCwwLDAsMTQ0LDE0NCwxNDYsNTgsMCw1OSwwLDAsMCwxMzksMCwwLDAsMF0sWzAsMCwwLDAsMCwyNTIsMjUyLDE0Niw1OCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwyNTMsMjUyLDI1MiwxNDYsNTgsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDI1NCwyNTUsMjU2LDI1NywyNTgsNTgsMCw1OSwwLDAsMCwxMzksMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsNTksMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDE0NywwLDAsMCwwLDU5LDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMjU5LDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDI2MCwyNDEsMjYxLDI2Miw1Nyw1OCwwLDU5LDAsMCwyNjMsMjQ1LDAsMCw2MiwwXSxbMCwwLDAsMCwwLDI0NiwyNDYsMCw1OCwwLDU5LDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwxMzcsMjY0LDAsNTgsMCw1OSwwLDAsMCwxMzksMCwwLDAsMF0sWzAsMCwwLDAsMjY1LDE0MSwxNDEsNTcsNTgsMCwwLDAsMCwwLDI2NSwwLDAsMCwwXSxbMCwyNDksMTUxLDAsMCwxMzcsMjY0LDAsNTgsMCw1OSwwLDAsMCwxMzksMCwyNDksMCwwXSxbMCwwLDAsMjIxLDExNiwyMjIsMjIyLDgsOSwwLDEwLDAsMCwwLDEyMCwwLDAsMTYsMF0sWzAsMCwwLDAsMjI1LDQ0LDQ0LDgsOSwwLDAsMCwwLDE1OCwyMjUsMCwwLDAsMF0sWzAsMCwwLDE1NSwxMTYsMTU2LDIyMiw4LDksMCwxMCwwLDAsMTU4LDEyMCwwLDAsMTYsMF0sWzAsMCwwLDE1NSwxMTYsMjIyLDIyMiw4LDksMCwxMCwwLDAsMCwxMjAsMCwwLDE2LDBdLFswLDAsMCwwLDQzLDI2NiwyNjYsOCwxNjEsMCwyNCwwLDAsMTIsMjY3LDAsMCwwLDBdLFswLDc1LDAsMTc2LDQzLDI2OCwyNjgsMjY5LDE2MSwwLDI0LDAsMCwwLDI2NywwLDc1LDAsMF0sWzAsMCwwLDAsMCwyNzAsMCwwLDI3MSwwLDE2MiwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDI3MiwwLDAsMCwwLDAsMCwwLDBdLFswLDI3MywyNzQsMCwwLDQwLDQxLDAsOSwwLDEwLDAsMCwwLDQyLDAsMjczLDAsMF0sWzAsMCwwLDQwLDAsMTIzLDEyMyw4LDksMCwxMCwwLDAsMCw0MiwwLDAsMCwwXSxbMCwwLDAsMCwwLDEyMSwyNzUsMCw5LDAsMTAsMCwwLDAsNDIsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsNzIsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDE2NiwwLDAsMCwwLDcyLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMjc2LDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDI3NywxNzAsMjc4LDI3OCwyMiwyMywwLDI0LDAsMCwwLDE3NCwwLDAsMjcsMF0sWzAsMjc5LDAsMCwwLDc2LDI4MCwwLDIzLDAsMjQsMCwwLDAsNzgsMCwyNzksMCwwXSxbMCwwLDAsMCwyODEsODAsODAsMjIsMjMsMCwwLDAsMCwxNzMsMjgxLDAsMCwwLDBdLFswLDAsMCwxNjksMTcwLDE3MSwyNzgsMjIsMjMsMCwyNCwwLDAsMTczLDE3NCwwLDAsMjcsMF0sWzAsMCwwLDE2OSwxNzAsMjc4LDI3OCwyMiwyMywwLDI0LDAsMCwwLDE3NCwwLDAsMjcsMF0sWzAsMjgyLDkwLDAsMCw3NiwyODAsMCwyMywwLDI0LDAsMCwwLDc4LDAsMjgyLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwyMywwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCw3NSwwLDAsMCwxNzUsMTc1LDAsMjMsMCwyNCwwLDAsMCw3OCwwLDc1LDAsMF0sWzAsMCwwLDAsMCw4MCw4MCwyMiwyMywwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMjgzLDAsMjg0LDI4NSwwLDIzLDAsMjQsMCwwLDI4NiwwLDAsMCwwLDBdLFswLDc1LDAsMTc2LDAsMTc1LDE3NSwwLDIzLDAsMjQsMCwwLDAsNzgsMCw3NSwwLDBdLFswLDAsMCwwLDAsMCwwLDIyLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwyODcsMjg3LDg1LDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDI4OCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMTg0LDE4NSwxODYsMTg3LDIzLDAsMjQsMCwwLDAsNzgsMCwwLDAsMF0sWzAsMCwwLDAsMCwxODUsMTg1LDE4NywyMywwLDI0LDAsMCwwLDc4LDAsMCwwLDBdLFswLDAsMCwwLDAsMjg5LDI4OSwxODcsMjMsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMjkwLDI4OSwyODksMTg3LDIzLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwyOTEsMjkyLDI5MywyOTQsMjk1LDIzLDAsMjQsMCwwLDAsNzgsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwyNzcsMTcwLDI3OCwyNzgsMjIsMjMsMCwyNCwwLDAsMCwxNzQsMCwwLDI3LDBdLFswLDAsMCwwLDI4MSw4MCw4MCwyMiwyMywwLDAsMCwwLDE5MiwyODEsMCwwLDAsMF0sWzAsMCwwLDE4OSwxNzAsMTkwLDI3OCwyMiwyMywwLDI0LDAsMCwxOTIsMTc0LDAsMCwyNywwXSxbMCwwLDAsMTg5LDE3MCwyNzgsMjc4LDIyLDIzLDAsMjQsMCwwLDAsMTc0LDAsMCwyNywwXSxbMCwwLDAsNzYsMCwxNzcsMTc3LDIyLDIzLDAsMjQsMCwwLDAsNzgsMCwwLDAsMF0sWzAsMCwwLDAsMCwxNzUsMjk2LDAsMjMsMCwyNCwwLDAsMCw3OCwwLDAsMCwwXSxbMCwwLDAsMjk3LDE5NiwyOTgsMjk4LDMyLDMzLDAsMzQsMCwwLDAsMjAwLDAsMCwzNywwXSxbMCwyOTksMCwwLDAsOTcsMzAwLDAsMzMsMCwzNCwwLDAsMCw5OSwwLDI5OSwwLDBdLFswLDAsMCwwLDMwMSwxMDEsMTAxLDMyLDMzLDAsMCwwLDAsMTk5LDMwMSwwLDAsMCwwXSxbMCwwLDAsMTk1LDE5NiwxOTcsMjk4LDMyLDMzLDAsMzQsMCwwLDE5OSwyMDAsMCwwLDM3LDBdLFswLDAsMCwxOTUsMTk2LDI5OCwyOTgsMzIsMzMsMCwzNCwwLDAsMCwyMDAsMCwwLDM3LDBdLFswLDMwMiwxMTEsMCwwLDk3LDMwMCwwLDMzLDAsMzQsMCwwLDAsOTksMCwzMDIsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDMzLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDk2LDAsMCwwLDIwMSwyMDEsMCwzMywwLDM0LDAsMCwwLDk5LDAsOTYsMCwwXSxbMCwwLDAsMCwwLDEwMSwxMDEsMzIsMzMsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDMwMywwLDMwNCwzMDUsMCwzMywwLDM0LDAsMCwzMDYsMCwwLDAsMCwwXSxbMCw5NiwwLDIwMiwwLDIwMSwyMDEsMCwzMywwLDM0LDAsMCwwLDk5LDAsOTYsMCwwXSxbMCwwLDAsMCwwLDAsMCwzMiwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMzA3LDMwNywxMDYsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMzA4LDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwyMTAsMjExLDIxMiwyMTMsMzMsMCwzNCwwLDAsMCw5OSwwLDAsMCwwXSxbMCwwLDAsMCwwLDIxMSwyMTEsMjEzLDMzLDAsMzQsMCwwLDAsOTksMCwwLDAsMF0sWzAsMCwwLDAsMCwzMDksMzA5LDIxMywzMywwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwzMTAsMzA5LDMwOSwyMTMsMzMsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDMxMSwzMTIsMzEzLDMxNCwzMTUsMzMsMCwzNCwwLDAsMCw5OSwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDI5NywxOTYsMjk4LDI5OCwzMiwzMywwLDM0LDAsMCwwLDIwMCwwLDAsMzcsMF0sWzAsMCwwLDAsMzAxLDEwMSwxMDEsMzIsMzMsMCwwLDAsMCwyMTgsMzAxLDAsMCwwLDBdLFswLDAsMCwyMTUsMTk2LDIxNiwyOTgsMzIsMzMsMCwzNCwwLDAsMjE4LDIwMCwwLDAsMzcsMF0sWzAsMCwwLDIxNSwxOTYsMjk4LDI5OCwzMiwzMywwLDM0LDAsMCwwLDIwMCwwLDAsMzcsMF0sWzAsMCwwLDk3LDAsMjAzLDIwMywzMiwzMywwLDM0LDAsMCwwLDk5LDAsMCwwLDBdLFswLDAsMCwwLDAsMjAxLDMxNiwwLDMzLDAsMzQsMCwwLDAsOTksMCwwLDAsMF0sWzAsMCwwLDAsMTE2LDIyMiwyMjIsOCw5LDAsMTAsMCwwLDAsMTIwLDAsMCwxNiwwXSxbMCwwLDAsMCwyMjUsNDQsNDQsOCw5LDAsMCwwLDAsMCwyMjUsMCwwLDAsMF0sWzAsMCwwLDMxNywzMTgsMzE5LDMyMCw4LDksMCwxMCwwLDAsMzIxLDMyMiwwLDAsMTYsMF0sWzAsMjIzLDAsMzIzLDAsMTIzLDEyMyw4LDksMCwxMCwwLDAsMCw0MiwwLDIyMywwLDBdLFswLDIyMywwLDAsMCwxMjEsMzI0LDAsOSwwLDEwLDAsMCwwLDQyLDAsMjIzLDAsMF0sWzAsMCwwLDMyNSwzMTgsMzI2LDMyNyw4LDksMCwxMCwwLDAsMzI4LDMyMiwwLDAsMTYsMF0sWzAsMCwwLDY0LDAsMTIxLDEyMSwwLDksMCwxMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsOSwwLDAsMCwwLDIzMCwwLDAsMCwwLDBdLFswLDAsMCwyMjcsMCwyMjgsMTIxLDAsOSwwLDEwLDAsMCwyMzAsMCwwLDAsMCwwXSxbMCwwLDAsMjI3LDAsMTIxLDEyMSwwLDksMCwxMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDQ5LDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsNDYsMCwwXSxbMCwwLDAsMCwwLDMyOSwzMjksMTMzLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDMzMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMjM2LDIzNywyMzgsMjM5LDksMCwxMCwwLDAsMCw0MiwwLDAsMCwwXSxbMCwwLDAsMCwwLDIzNywyMzcsMjM5LDksMCwxMCwwLDAsMCw0MiwwLDAsMCwwXSxbMCwwLDAsMCwwLDMzMSwzMzEsMjM5LDksMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMzMyLDMzMSwzMzEsMjM5LDksMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDMzMyw0MCwxMjEsMzM0LDAsOSwwLDEwLDAsMCwwLDQyLDAsMCwwLDBdLFswLDAsMCwzMzUsMjQxLDMzNiwzMzYsNTcsNTgsMCw1OSwwLDAsMCwyNDUsMCwwLDYyLDBdLFswLDMzNywwLDAsMCwxMzcsMzM4LDAsNTgsMCw1OSwwLDAsMCwxMzksMCwzMzcsMCwwXSxbMCwwLDAsMCwzMzksMTQxLDE0MSw1Nyw1OCwwLDAsMCwwLDI0NCwzMzksMCwwLDAsMF0sWzAsMCwwLDI0MCwyNDEsMjQyLDMzNiw1Nyw1OCwwLDU5LDAsMCwyNDQsMjQ1LDAsMCw2MiwwXSxbMCwwLDAsMjQwLDI0MSwzMzYsMzM2LDU3LDU4LDAsNTksMCwwLDAsMjQ1LDAsMCw2MiwwXSxbMCwzNDAsMTUxLDAsMCwxMzcsMzM4LDAsNTgsMCw1OSwwLDAsMCwxMzksMCwzNDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDU4LDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDEzNiwwLDAsMCwyNDYsMjQ2LDAsNTgsMCw1OSwwLDAsMCwxMzksMCwxMzYsMCwwXSxbMCwwLDAsMCwwLDE0MSwxNDEsNTcsNTgsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDM0MSwwLDM0MiwzNDMsMCw1OCwwLDU5LDAsMCwzNDQsMCwwLDAsMCwwXSxbMCwxMzYsMCwyNDcsMCwyNDYsMjQ2LDAsNTgsMCw1OSwwLDAsMCwxMzksMCwxMzYsMCwwXSxbMCwwLDAsMCwwLDAsMCw1NywwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMzQ1LDM0NSwxNDYsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMzQ2LDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwyNTUsMjU2LDI1NywyNTgsNTgsMCw1OSwwLDAsMCwxMzksMCwwLDAsMF0sWzAsMCwwLDAsMCwyNTYsMjU2LDI1OCw1OCwwLDU5LDAsMCwwLDEzOSwwLDAsMCwwXSxbMCwwLDAsMCwwLDM0NywzNDcsMjU4LDU4LDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDM0OCwzNDcsMzQ3LDI1OCw1OCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMzQ5LDM1MCwzNTEsMzUyLDM1Myw1OCwwLDU5LDAsMCwwLDEzOSwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDMzNSwyNDEsMzM2LDMzNiw1Nyw1OCwwLDU5LDAsMCwwLDI0NSwwLDAsNjIsMF0sWzAsMCwwLDAsMzM5LDE0MSwxNDEsNTcsNTgsMCwwLDAsMCwyNjMsMzM5LDAsMCwwLDBdLFswLDAsMCwyNjAsMjQxLDI2MSwzMzYsNTcsNTgsMCw1OSwwLDAsMjYzLDI0NSwwLDAsNjIsMF0sWzAsMCwwLDI2MCwyNDEsMzM2LDMzNiw1Nyw1OCwwLDU5LDAsMCwwLDI0NSwwLDAsNjIsMF0sWzAsMCwwLDEzNywwLDI0OCwyNDgsNTcsNTgsMCw1OSwwLDAsMCwxMzksMCwwLDAsMF0sWzAsMCwwLDAsMCwyNDYsMzU0LDAsNTgsMCw1OSwwLDAsMCwxMzksMCwwLDAsMF0sWzAsMCwwLDAsMCwxMjYsMTI2LDgsMjMsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMzU1LDkwLDAsMCwxMjEsMTI1LDAsOSwwLDEwLDAsMCwwLDQyLDAsMzU1LDAsMF0sWzAsMCwwLDAsMCwzNTYsMzU2LDI2OSwyMywwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMzU3LDM1OCwzNTksMzYwLDM2MSwxNjEsMCwxNjIsMCwwLDAsMzYyLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDE2MiwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMjcwLDAsMCwwLDAsMTYyLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMzYzLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDM2NCwxMTYsMzY1LDM2Niw4LDE2MSwwLDE2MiwwLDAsMzY3LDEyMCwwLDAsMTYsMF0sWzAsMCwwLDAsMCwzNjgsMzY4LDAsMTYxLDAsMTYyLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDQwLDAsMTIxLDEyMSwwLDksMCwxMCwwLDAsMCw0MiwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMTcwLDI3OCwyNzgsMjIsMjMsMCwyNCwwLDAsMCwxNzQsMCwwLDI3LDBdLFswLDAsMCwwLDI4MSw4MCw4MCwyMiwyMywwLDAsMCwwLDAsMjgxLDAsMCwwLDBdLFswLDAsMCwzNjksMzcwLDM3MSwzNzIsMjIsMjMsMCwyNCwwLDAsMzczLDM3NCwwLDAsMjcsMF0sWzAsMjc5LDAsMzc1LDAsMTc3LDE3NywyMiwyMywwLDI0LDAsMCwwLDc4LDAsMjc5LDAsMF0sWzAsMjc5LDAsMCwwLDE3NSwzNzYsMCwyMywwLDI0LDAsMCwwLDc4LDAsMjc5LDAsMF0sWzAsMCwwLDM3NywzNzAsMzc4LDM3OSwyMiwyMywwLDI0LDAsMCwzODAsMzc0LDAsMCwyNywwXSxbMCwwLDAsOTAsMCwxNzUsMTc1LDAsMjMsMCwyNCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMjMsMCwwLDAsMCwyODYsMCwwLDAsMCwwXSxbMCwwLDAsMjgzLDAsMjg0LDE3NSwwLDIzLDAsMjQsMCwwLDI4NiwwLDAsMCwwLDBdLFswLDAsMCwyODMsMCwxNzUsMTc1LDAsMjMsMCwyNCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDg1LDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsODIsMCwwXSxbMCwwLDAsMCwwLDM4MSwzODEsMTg3LDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDM4MiwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMjkyLDI5MywyOTQsMjk1LDIzLDAsMjQsMCwwLDAsNzgsMCwwLDAsMF0sWzAsMCwwLDAsMCwyOTMsMjkzLDI5NSwyMywwLDI0LDAsMCwwLDc4LDAsMCwwLDBdLFswLDAsMCwwLDAsMzgzLDM4MywyOTUsMjMsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMzg0LDM4MywzODMsMjk1LDIzLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwzODUsNzYsMTc1LDM4NiwwLDIzLDAsMjQsMCwwLDAsNzgsMCwwLDAsMF0sWzAsMCwwLDc2LDAsMTc1LDE3NSwwLDIzLDAsMjQsMCwwLDAsNzgsMCwwLDAsMF0sWzAsMCwwLDAsMTk2LDI5OCwyOTgsMzIsMzMsMCwzNCwwLDAsMCwyMDAsMCwwLDM3LDBdLFswLDAsMCwwLDMwMSwxMDEsMTAxLDMyLDMzLDAsMCwwLDAsMCwzMDEsMCwwLDAsMF0sWzAsMCwwLDM4NywzODgsMzg5LDM5MCwzMiwzMywwLDM0LDAsMCwzOTEsMzkyLDAsMCwzNywwXSxbMCwyOTksMCwzOTMsMCwyMDMsMjAzLDMyLDMzLDAsMzQsMCwwLDAsOTksMCwyOTksMCwwXSxbMCwyOTksMCwwLDAsMjAxLDM5NCwwLDMzLDAsMzQsMCwwLDAsOTksMCwyOTksMCwwXSxbMCwwLDAsMzk1LDM4OCwzOTYsMzk3LDMyLDMzLDAsMzQsMCwwLDM5OCwzOTIsMCwwLDM3LDBdLFswLDAsMCwxMTEsMCwyMDEsMjAxLDAsMzMsMCwzNCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMzMsMCwwLDAsMCwzMDYsMCwwLDAsMCwwXSxbMCwwLDAsMzAzLDAsMzA0LDIwMSwwLDMzLDAsMzQsMCwwLDMwNiwwLDAsMCwwLDBdLFswLDAsMCwzMDMsMCwyMDEsMjAxLDAsMzMsMCwzNCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDEwNiwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDEwMywwLDBdLFswLDAsMCwwLDAsMzk5LDM5OSwyMTMsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsNDAwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwzMTIsMzEzLDMxNCwzMTUsMzMsMCwzNCwwLDAsMCw5OSwwLDAsMCwwXSxbMCwwLDAsMCwwLDMxMywzMTMsMzE1LDMzLDAsMzQsMCwwLDAsOTksMCwwLDAsMF0sWzAsMCwwLDAsMCw0MDEsNDAxLDMxNSwzMywwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCw0MDIsNDAxLDQwMSwzMTUsMzMsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDQwMyw5NywyMDEsNDA0LDAsMzMsMCwzNCwwLDAsMCw5OSwwLDAsMCwwXSxbMCwwLDAsOTcsMCwyMDEsMjAxLDAsMzMsMCwzNCwwLDAsMCw5OSwwLDAsMCwwXSxbMCwwLDAsNDA1LDMxOCw0MDYsNDA2LDgsOSwwLDEwLDAsMCwwLDMyMiwwLDAsMTYsMF0sWzAsNDA3LDAsMCwwLDQwLDQwOCwwLDksMCwxMCwwLDAsMCw0MiwwLDQwNywwLDBdLFswLDAsMCwwLDQwOSw0NCw0NCw4LDksMCwwLDAsMCwzMjEsNDA5LDAsMCwwLDBdLFswLDAsMCwzMTcsMzE4LDMxOSw0MDYsOCw5LDAsMTAsMCwwLDMyMSwzMjIsMCwwLDE2LDBdLFswLDAsMCwzMTcsMzE4LDQwNiw0MDYsOCw5LDAsMTAsMCwwLDAsMzIyLDAsMCwxNiwwXSxbMCw0MTAsNjQsMCwwLDQwLDQwOCwwLDksMCwxMCwwLDAsMCw0MiwwLDQxMCwwLDBdLFswLDIyMywwLDAsMCwxMjEsMTIxLDAsOSwwLDEwLDAsMCwwLDQyLDAsMjIzLDAsMF0sWzAsMjIzLDAsMzIzLDAsMTIxLDEyMSwwLDksMCwxMCwwLDAsMCw0MiwwLDIyMywwLDBdLFswLDAsMCw0MDUsMzE4LDQwNiw0MDYsOCw5LDAsMTAsMCwwLDAsMzIyLDAsMCwxNiwwXSxbMCwwLDAsMCw0MDksNDQsNDQsOCw5LDAsMCwwLDAsMzI4LDQwOSwwLDAsMCwwXSxbMCwwLDAsMzI1LDMxOCwzMjYsNDA2LDgsOSwwLDEwLDAsMCwzMjgsMzIyLDAsMCwxNiwwXSxbMCwwLDAsMzI1LDMxOCw0MDYsNDA2LDgsOSwwLDEwLDAsMCwwLDMyMiwwLDAsMTYsMF0sWzAsMCwwLDAsMCwwLDAsMTMzLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMTMwLDAsMF0sWzAsMCwwLDAsMCw0MTEsNDExLDIzOSwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCw0MTIsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDQwLDEyMSwzMzQsMCw5LDAsMTAsMCwwLDAsNDIsMCwwLDAsMF0sWzAsMCwwLDAsNDEzLDAsMCwwLDksMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMjQxLDMzNiwzMzYsNTcsNTgsMCw1OSwwLDAsMCwyNDUsMCwwLDYyLDBdLFswLDAsMCwwLDMzOSwxNDEsMTQxLDU3LDU4LDAsMCwwLDAsMCwzMzksMCwwLDAsMF0sWzAsMCwwLDQxNCw0MTUsNDE2LDQxNyw1Nyw1OCwwLDU5LDAsMCw0MTgsNDE5LDAsMCw2MiwwXSxbMCwzMzcsMCw0MjAsMCwyNDgsMjQ4LDU3LDU4LDAsNTksMCwwLDAsMTM5LDAsMzM3LDAsMF0sWzAsMzM3LDAsMCwwLDI0Niw0MjEsMCw1OCwwLDU5LDAsMCwwLDEzOSwwLDMzNywwLDBdLFswLDAsMCw0MjIsNDE1LDQyMyw0MjQsNTcsNTgsMCw1OSwwLDAsNDI1LDQxOSwwLDAsNjIsMF0sWzAsMCwwLDE1MSwwLDI0NiwyNDYsMCw1OCwwLDU5LDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCw1OCwwLDAsMCwwLDM0NCwwLDAsMCwwLDBdLFswLDAsMCwzNDEsMCwzNDIsMjQ2LDAsNTgsMCw1OSwwLDAsMzQ0LDAsMCwwLDAsMF0sWzAsMCwwLDM0MSwwLDI0NiwyNDYsMCw1OCwwLDU5LDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMTQ2LDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMTQzLDAsMF0sWzAsMCwwLDAsMCw0MjYsNDI2LDI1OCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCw0MjcsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDM1MCwzNTEsMzUyLDM1Myw1OCwwLDU5LDAsMCwwLDEzOSwwLDAsMCwwXSxbMCwwLDAsMCwwLDM1MSwzNTEsMzUzLDU4LDAsNTksMCwwLDAsMTM5LDAsMCwwLDBdLFswLDAsMCwwLDAsNDI4LDQyOCwzNTMsNTgsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsNDI5LDQyOCw0MjgsMzUzLDU4LDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCw0MzAsMTM3LDI0Niw0MzEsMCw1OCwwLDU5LDAsMCwwLDEzOSwwLDAsMCwwXSxbMCwwLDAsMTM3LDAsMjQ2LDI0NiwwLDU4LDAsNTksMCwwLDAsMTM5LDAsMCwwLDBdLFswLDAsMCw0MzIsMTE2LDQzMyw0MzQsOCwxNjEsMCwxNjIsMCwwLDQzNSwxMjAsMCwwLDE2LDBdLFswLDAsMCwwLDAsMTgwLDE4MCwyNjksMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwzNTgsMzU5LDM2MCwzNjEsMTYxLDAsMTYyLDAsMCwwLDM2MiwwLDAsMCwwXSxbMCwwLDAsMCwwLDM1OSwzNTksMzYxLDE2MSwwLDE2MiwwLDAsMCwzNjIsMCwwLDAsMF0sWzAsMCwwLDAsMCw0MzYsNDM2LDM2MSwxNjEsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsNDM3LDQzNiw0MzYsMzYxLDE2MSwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsNDM4LDQzOSw0NDAsNDQxLDQ0MiwxNjEsMCwxNjIsMCwwLDAsMzYyLDAsMCwwLDBdLFswLDQ0MywyNzQsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw0NDMsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDQ0NCwxMTYsNDQ1LDQ0NSw4LDE2MSwwLDE2MiwwLDAsMCwxMjAsMCwwLDE2LDBdLFswLDAsMCwwLDIyNSw0NCw0NCw4LDE2MSwwLDAsMCwwLDM2NywyMjUsMCwwLDAsMF0sWzAsMCwwLDM2NCwxMTYsMzY1LDQ0NSw4LDE2MSwwLDE2MiwwLDAsMzY3LDEyMCwwLDAsMTYsMF0sWzAsMCwwLDM2NCwxMTYsNDQ1LDQ0NSw4LDE2MSwwLDE2MiwwLDAsMCwxMjAsMCwwLDE2LDBdLFswLDAsMCwwLDAsMCwwLDAsMTYxLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCw0NDYsMzcwLDQ0Nyw0NDcsMjIsMjMsMCwyNCwwLDAsMCwzNzQsMCwwLDI3LDBdLFswLDQ0OCwwLDAsMCw3Niw0NDksMCwyMywwLDI0LDAsMCwwLDc4LDAsNDQ4LDAsMF0sWzAsMCwwLDAsNDUwLDgwLDgwLDIyLDIzLDAsMCwwLDAsMzczLDQ1MCwwLDAsMCwwXSxbMCwwLDAsMzY5LDM3MCwzNzEsNDQ3LDIyLDIzLDAsMjQsMCwwLDM3MywzNzQsMCwwLDI3LDBdLFswLDAsMCwzNjksMzcwLDQ0Nyw0NDcsMjIsMjMsMCwyNCwwLDAsMCwzNzQsMCwwLDI3LDBdLFswLDQ1MSw5MCwwLDAsNzYsNDQ5LDAsMjMsMCwyNCwwLDAsMCw3OCwwLDQ1MSwwLDBdLFswLDI3OSwwLDAsMCwxNzUsMTc1LDAsMjMsMCwyNCwwLDAsMCw3OCwwLDI3OSwwLDBdLFswLDI3OSwwLDM3NSwwLDE3NSwxNzUsMCwyMywwLDI0LDAsMCwwLDc4LDAsMjc5LDAsMF0sWzAsMCwwLDQ0NiwzNzAsNDQ3LDQ0NywyMiwyMywwLDI0LDAsMCwwLDM3NCwwLDAsMjcsMF0sWzAsMCwwLDAsNDUwLDgwLDgwLDIyLDIzLDAsMCwwLDAsMzgwLDQ1MCwwLDAsMCwwXSxbMCwwLDAsMzc3LDM3MCwzNzgsNDQ3LDIyLDIzLDAsMjQsMCwwLDM4MCwzNzQsMCwwLDI3LDBdLFswLDAsMCwzNzcsMzcwLDQ0Nyw0NDcsMjIsMjMsMCwyNCwwLDAsMCwzNzQsMCwwLDI3LDBdLFswLDAsMCwwLDAsMCwwLDE4NywwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDE4NCwwLDBdLFswLDAsMCwwLDAsNDUyLDQ1MiwyOTUsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsNDUzLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCw3NiwxNzUsMzg2LDAsMjMsMCwyNCwwLDAsMCw3OCwwLDAsMCwwXSxbMCwwLDAsMCw0NTQsMCwwLDAsMjMsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDQ1NSwzODgsNDU2LDQ1NiwzMiwzMywwLDM0LDAsMCwwLDM5MiwwLDAsMzcsMF0sWzAsNDU3LDAsMCwwLDk3LDQ1OCwwLDMzLDAsMzQsMCwwLDAsOTksMCw0NTcsMCwwXSxbMCwwLDAsMCw0NTksMTAxLDEwMSwzMiwzMywwLDAsMCwwLDM5MSw0NTksMCwwLDAsMF0sWzAsMCwwLDM4NywzODgsMzg5LDQ1NiwzMiwzMywwLDM0LDAsMCwzOTEsMzkyLDAsMCwzNywwXSxbMCwwLDAsMzg3LDM4OCw0NTYsNDU2LDMyLDMzLDAsMzQsMCwwLDAsMzkyLDAsMCwzNywwXSxbMCw0NjAsMTExLDAsMCw5Nyw0NTgsMCwzMywwLDM0LDAsMCwwLDk5LDAsNDYwLDAsMF0sWzAsMjk5LDAsMCwwLDIwMSwyMDEsMCwzMywwLDM0LDAsMCwwLDk5LDAsMjk5LDAsMF0sWzAsMjk5LDAsMzkzLDAsMjAxLDIwMSwwLDMzLDAsMzQsMCwwLDAsOTksMCwyOTksMCwwXSxbMCwwLDAsNDU1LDM4OCw0NTYsNDU2LDMyLDMzLDAsMzQsMCwwLDAsMzkyLDAsMCwzNywwXSxbMCwwLDAsMCw0NTksMTAxLDEwMSwzMiwzMywwLDAsMCwwLDM5OCw0NTksMCwwLDAsMF0sWzAsMCwwLDM5NSwzODgsMzk2LDQ1NiwzMiwzMywwLDM0LDAsMCwzOTgsMzkyLDAsMCwzNywwXSxbMCwwLDAsMzk1LDM4OCw0NTYsNDU2LDMyLDMzLDAsMzQsMCwwLDAsMzkyLDAsMCwzNywwXSxbMCwwLDAsMCwwLDAsMCwyMTMsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyMTAsMCwwXSxbMCwwLDAsMCwwLDQ2MSw0NjEsMzE1LDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDQ2MiwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsOTcsMjAxLDQwNCwwLDMzLDAsMzQsMCwwLDAsOTksMCwwLDAsMF0sWzAsMCwwLDAsNDYzLDAsMCwwLDMzLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDMxOCw0MDYsNDA2LDgsOSwwLDEwLDAsMCwwLDMyMiwwLDAsMTYsMF0sWzAsMCwwLDAsNDA5LDQ0LDQ0LDgsOSwwLDAsMCwwLDAsNDA5LDAsMCwwLDBdLFswLDAsMCw0NjQsNDY1LDQ2Niw0NjcsOCw5LDAsMTAsMCwwLDQ2OCw0NjksMCwwLDE2LDBdLFswLDQwNywwLDQ3MCwwLDEyMywxMjMsOCw5LDAsMTAsMCwwLDAsNDIsMCw0MDcsMCwwXSxbMCw0MDcsMCwwLDAsMTIxLDQ3MSwwLDksMCwxMCwwLDAsMCw0MiwwLDQwNywwLDBdLFswLDAsMCw0NzIsNDY1LDQ3Myw0NzQsOCw5LDAsMTAsMCwwLDQ3NSw0NjksMCwwLDE2LDBdLFswLDAsMCwwLDAsMCwwLDIzOSwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDIzNiwwLDBdLFswLDAsMCwwLDAsMCw0NzYsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCw0NzcsNDE1LDQ3OCw0NzgsNTcsNTgsMCw1OSwwLDAsMCw0MTksMCwwLDYyLDBdLFswLDQ3OSwwLDAsMCwxMzcsNDgwLDAsNTgsMCw1OSwwLDAsMCwxMzksMCw0NzksMCwwXSxbMCwwLDAsMCw0ODEsMTQxLDE0MSw1Nyw1OCwwLDAsMCwwLDQxOCw0ODEsMCwwLDAsMF0sWzAsMCwwLDQxNCw0MTUsNDE2LDQ3OCw1Nyw1OCwwLDU5LDAsMCw0MTgsNDE5LDAsMCw2MiwwXSxbMCwwLDAsNDE0LDQxNSw0NzgsNDc4LDU3LDU4LDAsNTksMCwwLDAsNDE5LDAsMCw2MiwwXSxbMCw0ODIsMTUxLDAsMCwxMzcsNDgwLDAsNTgsMCw1OSwwLDAsMCwxMzksMCw0ODIsMCwwXSxbMCwzMzcsMCwwLDAsMjQ2LDI0NiwwLDU4LDAsNTksMCwwLDAsMTM5LDAsMzM3LDAsMF0sWzAsMzM3LDAsNDIwLDAsMjQ2LDI0NiwwLDU4LDAsNTksMCwwLDAsMTM5LDAsMzM3LDAsMF0sWzAsMCwwLDQ3Nyw0MTUsNDc4LDQ3OCw1Nyw1OCwwLDU5LDAsMCwwLDQxOSwwLDAsNjIsMF0sWzAsMCwwLDAsNDgxLDE0MSwxNDEsNTcsNTgsMCwwLDAsMCw0MjUsNDgxLDAsMCwwLDBdLFswLDAsMCw0MjIsNDE1LDQyMyw0NzgsNTcsNTgsMCw1OSwwLDAsNDI1LDQxOSwwLDAsNjIsMF0sWzAsMCwwLDQyMiw0MTUsNDc4LDQ3OCw1Nyw1OCwwLDU5LDAsMCwwLDQxOSwwLDAsNjIsMF0sWzAsMCwwLDAsMCwwLDAsMjU4LDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMjU1LDAsMF0sWzAsMCwwLDAsMCw0ODMsNDgzLDM1MywwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCw0ODQsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDEzNywyNDYsNDMxLDAsNTgsMCw1OSwwLDAsMCwxMzksMCwwLDAsMF0sWzAsMCwwLDAsNDg1LDAsMCwwLDU4LDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCw0NDQsMTE2LDQ0NSw0NDUsOCwxNjEsMCwxNjIsMCwwLDAsMTIwLDAsMCwxNiwwXSxbMCwwLDAsMCwyMjUsNDQsNDQsOCwxNjEsMCwwLDAsMCw0MzUsMjI1LDAsMCwwLDBdLFswLDAsMCw0MzIsMTE2LDQzMyw0NDUsOCwxNjEsMCwxNjIsMCwwLDQzNSwxMjAsMCwwLDE2LDBdLFswLDAsMCw0MzIsMTE2LDQ0NSw0NDUsOCwxNjEsMCwxNjIsMCwwLDAsMTIwLDAsMCwxNiwwXSxbMCwwLDAsMCwwLDQ4Niw0ODYsMzYxLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDQ4NywwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsNDM5LDQ0MCw0NDEsNDQyLDE2MSwwLDE2MiwwLDAsMCwzNjIsMCwwLDAsMF0sWzAsMCwwLDAsMCw0NDAsNDQwLDQ0MiwxNjEsMCwxNjIsMCwwLDAsMzYyLDAsMCwwLDBdLFswLDAsMCwwLDAsNDg4LDQ4OCw0NDIsMTYxLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDQ4OSw0ODgsNDg4LDQ0MiwxNjEsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDQ5MCw0OTEsNDkyLDQ5Myw0OTQsMTYxLDAsMTYyLDAsMCwwLDM2MiwwLDAsMCwwXSxbMCwwLDAsNDk1LDAsNDk2LDQ5NywwLDE2MSwwLDE2MiwwLDAsNDk4LDAsMCwwLDAsMF0sWzAsMCwwLDAsMTE2LDQ0NSw0NDUsOCwxNjEsMCwxNjIsMCwwLDAsMTIwLDAsMCwxNiwwXSxbMCwwLDAsMCwyMjUsNDQsNDQsOCwxNjEsMCwwLDAsMCwwLDIyNSwwLDAsMCwwXSxbMCwwLDAsMCwzNzAsNDQ3LDQ0NywyMiwyMywwLDI0LDAsMCwwLDM3NCwwLDAsMjcsMF0sWzAsMCwwLDAsNDUwLDgwLDgwLDIyLDIzLDAsMCwwLDAsMCw0NTAsMCwwLDAsMF0sWzAsMCwwLDQ5OSw1MDAsNTAxLDUwMiwyMiwyMywwLDI0LDAsMCw1MDMsNTA0LDAsMCwyNywwXSxbMCw0NDgsMCw1MDUsMCwxNzcsMTc3LDIyLDIzLDAsMjQsMCwwLDAsNzgsMCw0NDgsMCwwXSxbMCw0NDgsMCwwLDAsMTc1LDUwNiwwLDIzLDAsMjQsMCwwLDAsNzgsMCw0NDgsMCwwXSxbMCwwLDAsNTA3LDUwMCw1MDgsNTA5LDIyLDIzLDAsMjQsMCwwLDUxMCw1MDQsMCwwLDI3LDBdLFswLDAsMCwwLDAsMCwwLDI5NSwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDI5MiwwLDBdLFswLDAsMCwwLDAsMCw1MTEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDM4OCw0NTYsNDU2LDMyLDMzLDAsMzQsMCwwLDAsMzkyLDAsMCwzNywwXSxbMCwwLDAsMCw0NTksMTAxLDEwMSwzMiwzMywwLDAsMCwwLDAsNDU5LDAsMCwwLDBdLFswLDAsMCw1MTIsNTEzLDUxNCw1MTUsMzIsMzMsMCwzNCwwLDAsNTE2LDUxNywwLDAsMzcsMF0sWzAsNDU3LDAsNTE4LDAsMjAzLDIwMywzMiwzMywwLDM0LDAsMCwwLDk5LDAsNDU3LDAsMF0sWzAsNDU3LDAsMCwwLDIwMSw1MTksMCwzMywwLDM0LDAsMCwwLDk5LDAsNDU3LDAsMF0sWzAsMCwwLDUyMCw1MTMsNTIxLDUyMiwzMiwzMywwLDM0LDAsMCw1MjMsNTE3LDAsMCwzNywwXSxbMCwwLDAsMCwwLDAsMCwzMTUsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwzMTIsMCwwXSxbMCwwLDAsMCwwLDAsNTI0LDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsNTI1LDQ2NSw1MjYsNTI2LDgsOSwwLDEwLDAsMCwwLDQ2OSwwLDAsMTYsMF0sWzAsNTI3LDAsMCwwLDQwLDUyOCwwLDksMCwxMCwwLDAsMCw0MiwwLDUyNywwLDBdLFswLDAsMCwwLDUyOSw0NCw0NCw4LDksMCwwLDAsMCw0NjgsNTI5LDAsMCwwLDBdLFswLDAsMCw0NjQsNDY1LDQ2Niw1MjYsOCw5LDAsMTAsMCwwLDQ2OCw0NjksMCwwLDE2LDBdLFswLDAsMCw0NjQsNDY1LDUyNiw1MjYsOCw5LDAsMTAsMCwwLDAsNDY5LDAsMCwxNiwwXSxbMCw1MzAsNjQsMCwwLDQwLDUyOCwwLDksMCwxMCwwLDAsMCw0MiwwLDUzMCwwLDBdLFswLDQwNywwLDAsMCwxMjEsMTIxLDAsOSwwLDEwLDAsMCwwLDQyLDAsNDA3LDAsMF0sWzAsNDA3LDAsNDcwLDAsMTIxLDEyMSwwLDksMCwxMCwwLDAsMCw0MiwwLDQwNywwLDBdLFswLDAsMCw1MjUsNDY1LDUyNiw1MjYsOCw5LDAsMTAsMCwwLDAsNDY5LDAsMCwxNiwwXSxbMCwwLDAsMCw1MjksNDQsNDQsOCw5LDAsMCwwLDAsNDc1LDUyOSwwLDAsMCwwXSxbMCwwLDAsNDcyLDQ2NSw0NzMsNTI2LDgsOSwwLDEwLDAsMCw0NzUsNDY5LDAsMCwxNiwwXSxbMCwwLDAsNDcyLDQ2NSw1MjYsNTI2LDgsOSwwLDEwLDAsMCwwLDQ2OSwwLDAsMTYsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsNDAsMCwwXSxbMCwwLDAsMCw0MTUsNDc4LDQ3OCw1Nyw1OCwwLDU5LDAsMCwwLDQxOSwwLDAsNjIsMF0sWzAsMCwwLDAsNDgxLDE0MSwxNDEsNTcsNTgsMCwwLDAsMCwwLDQ4MSwwLDAsMCwwXSxbMCwwLDAsNTMxLDUzMiw1MzMsNTM0LDU3LDU4LDAsNTksMCwwLDUzNSw1MzYsMCwwLDYyLDBdLFswLDQ3OSwwLDUzNywwLDI0OCwyNDgsNTcsNTgsMCw1OSwwLDAsMCwxMzksMCw0NzksMCwwXSxbMCw0NzksMCwwLDAsMjQ2LDUzOCwwLDU4LDAsNTksMCwwLDAsMTM5LDAsNDc5LDAsMF0sWzAsMCwwLDUzOSw1MzIsNTQwLDU0MSw1Nyw1OCwwLDU5LDAsMCw1NDIsNTM2LDAsMCw2MiwwXSxbMCwwLDAsMCwwLDAsMCwzNTMsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwzNTAsMCwwXSxbMCwwLDAsMCwwLDAsNTQzLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwzNjEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwzNTgsMCwwXSxbMCwwLDAsMCwwLDU0NCw1NDQsNDQyLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDU0NSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsNDkxLDQ5Miw0OTMsNDk0LDE2MSwwLDE2MiwwLDAsMCwzNjIsMCwwLDAsMF0sWzAsMCwwLDAsMCw0OTIsNDkyLDQ5NCwxNjEsMCwxNjIsMCwwLDAsMzYyLDAsMCwwLDBdLFswLDAsMCwwLDAsNTQ2LDU0Niw0OTQsMTYxLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDU0Nyw1NDYsNTQ2LDQ5NCwxNjEsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDU0OCw1NDksMzY4LDU1MCwwLDE2MSwwLDE2MiwwLDAsMCwzNjIsMCwwLDAsMF0sWzAsMCwwLDI3NCwwLDM2OCwzNjgsMCwxNjEsMCwxNjIsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDE2MSwwLDAsMCwwLDQ5OCwwLDAsMCwwLDBdLFswLDAsMCw0OTUsMCw0OTYsMzY4LDAsMTYxLDAsMTYyLDAsMCw0OTgsMCwwLDAsMCwwXSxbMCwwLDAsNDk1LDAsMzY4LDM2OCwwLDE2MSwwLDE2MiwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCw1NTEsNTAwLDU1Miw1NTIsMjIsMjMsMCwyNCwwLDAsMCw1MDQsMCwwLDI3LDBdLFswLDU1MywwLDAsMCw3Niw1NTQsMCwyMywwLDI0LDAsMCwwLDc4LDAsNTUzLDAsMF0sWzAsMCwwLDAsNTU1LDgwLDgwLDIyLDIzLDAsMCwwLDAsNTAzLDU1NSwwLDAsMCwwXSxbMCwwLDAsNDk5LDUwMCw1MDEsNTUyLDIyLDIzLDAsMjQsMCwwLDUwMyw1MDQsMCwwLDI3LDBdLFswLDAsMCw0OTksNTAwLDU1Miw1NTIsMjIsMjMsMCwyNCwwLDAsMCw1MDQsMCwwLDI3LDBdLFswLDU1Niw5MCwwLDAsNzYsNTU0LDAsMjMsMCwyNCwwLDAsMCw3OCwwLDU1NiwwLDBdLFswLDQ0OCwwLDAsMCwxNzUsMTc1LDAsMjMsMCwyNCwwLDAsMCw3OCwwLDQ0OCwwLDBdLFswLDQ0OCwwLDUwNSwwLDE3NSwxNzUsMCwyMywwLDI0LDAsMCwwLDc4LDAsNDQ4LDAsMF0sWzAsMCwwLDU1MSw1MDAsNTUyLDU1MiwyMiwyMywwLDI0LDAsMCwwLDUwNCwwLDAsMjcsMF0sWzAsMCwwLDAsNTU1LDgwLDgwLDIyLDIzLDAsMCwwLDAsNTEwLDU1NSwwLDAsMCwwXSxbMCwwLDAsNTA3LDUwMCw1MDgsNTUyLDIyLDIzLDAsMjQsMCwwLDUxMCw1MDQsMCwwLDI3LDBdLFswLDAsMCw1MDcsNTAwLDU1Miw1NTIsMjIsMjMsMCwyNCwwLDAsMCw1MDQsMCwwLDI3LDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDc2LDAsMF0sWzAsMCwwLDU1Nyw1MTMsNTU4LDU1OCwzMiwzMywwLDM0LDAsMCwwLDUxNywwLDAsMzcsMF0sWzAsNTU5LDAsMCwwLDk3LDU2MCwwLDMzLDAsMzQsMCwwLDAsOTksMCw1NTksMCwwXSxbMCwwLDAsMCw1NjEsMTAxLDEwMSwzMiwzMywwLDAsMCwwLDUxNiw1NjEsMCwwLDAsMF0sWzAsMCwwLDUxMiw1MTMsNTE0LDU1OCwzMiwzMywwLDM0LDAsMCw1MTYsNTE3LDAsMCwzNywwXSxbMCwwLDAsNTEyLDUxMyw1NTgsNTU4LDMyLDMzLDAsMzQsMCwwLDAsNTE3LDAsMCwzNywwXSxbMCw1NjIsMTExLDAsMCw5Nyw1NjAsMCwzMywwLDM0LDAsMCwwLDk5LDAsNTYyLDAsMF0sWzAsNDU3LDAsMCwwLDIwMSwyMDEsMCwzMywwLDM0LDAsMCwwLDk5LDAsNDU3LDAsMF0sWzAsNDU3LDAsNTE4LDAsMjAxLDIwMSwwLDMzLDAsMzQsMCwwLDAsOTksMCw0NTcsMCwwXSxbMCwwLDAsNTU3LDUxMyw1NTgsNTU4LDMyLDMzLDAsMzQsMCwwLDAsNTE3LDAsMCwzNywwXSxbMCwwLDAsMCw1NjEsMTAxLDEwMSwzMiwzMywwLDAsMCwwLDUyMyw1NjEsMCwwLDAsMF0sWzAsMCwwLDUyMCw1MTMsNTIxLDU1OCwzMiwzMywwLDM0LDAsMCw1MjMsNTE3LDAsMCwzNywwXSxbMCwwLDAsNTIwLDUxMyw1NTgsNTU4LDMyLDMzLDAsMzQsMCwwLDAsNTE3LDAsMCwzNywwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw5NywwLDBdLFswLDAsMCwwLDQ2NSw1MjYsNTI2LDgsOSwwLDEwLDAsMCwwLDQ2OSwwLDAsMTYsMF0sWzAsMCwwLDAsNTI5LDQ0LDQ0LDgsOSwwLDAsMCwwLDAsNTI5LDAsMCwwLDBdLFswLDAsMCw1NjMsNjYsNTY0LDU2NSw4LDksMCwxMCwwLDAsNTY2LDY4LDAsMCwxNiwwXSxbMCw1MjcsMCw1NjcsMCwxMjMsMTIzLDgsOSwwLDEwLDAsMCwwLDQyLDAsNTI3LDAsMF0sWzAsNTI3LDAsMCwwLDEyMSw1NjgsMCw5LDAsMTAsMCwwLDAsNDIsMCw1MjcsMCwwXSxbMCwwLDAsNTY5LDY2LDU3MCw1NzEsOCw5LDAsMTAsMCwwLDU3Miw2OCwwLDAsMTYsMF0sWzAsMCwwLDU3Myw1MzIsNTc0LDU3NCw1Nyw1OCwwLDU5LDAsMCwwLDUzNiwwLDAsNjIsMF0sWzAsNTc1LDAsMCwwLDEzNyw1NzYsMCw1OCwwLDU5LDAsMCwwLDEzOSwwLDU3NSwwLDBdLFswLDAsMCwwLDU3NywxNDEsMTQxLDU3LDU4LDAsMCwwLDAsNTM1LDU3NywwLDAsMCwwXSxbMCwwLDAsNTMxLDUzMiw1MzMsNTc0LDU3LDU4LDAsNTksMCwwLDUzNSw1MzYsMCwwLDYyLDBdLFswLDAsMCw1MzEsNTMyLDU3NCw1NzQsNTcsNTgsMCw1OSwwLDAsMCw1MzYsMCwwLDYyLDBdLFswLDU3OCwxNTEsMCwwLDEzNyw1NzYsMCw1OCwwLDU5LDAsMCwwLDEzOSwwLDU3OCwwLDBdLFswLDQ3OSwwLDAsMCwyNDYsMjQ2LDAsNTgsMCw1OSwwLDAsMCwxMzksMCw0NzksMCwwXSxbMCw0NzksMCw1MzcsMCwyNDYsMjQ2LDAsNTgsMCw1OSwwLDAsMCwxMzksMCw0NzksMCwwXSxbMCwwLDAsNTczLDUzMiw1NzQsNTc0LDU3LDU4LDAsNTksMCwwLDAsNTM2LDAsMCw2MiwwXSxbMCwwLDAsMCw1NzcsMTQxLDE0MSw1Nyw1OCwwLDAsMCwwLDU0Miw1NzcsMCwwLDAsMF0sWzAsMCwwLDUzOSw1MzIsNTQwLDU3NCw1Nyw1OCwwLDU5LDAsMCw1NDIsNTM2LDAsMCw2MiwwXSxbMCwwLDAsNTM5LDUzMiw1NzQsNTc0LDU3LDU4LDAsNTksMCwwLDAsNTM2LDAsMCw2MiwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwxMzcsMCwwXSxbMCwwLDAsMCwwLDAsMCw0NDIsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw0MzksMCwwXSxbMCwwLDAsMCwwLDU3OSw1NzksNDk0LDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDU4MCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsNTQ5LDM2OCw1NTAsMCwxNjEsMCwxNjIsMCwwLDAsMzYyLDAsMCwwLDBdLFswLDAsMCwwLDAsMzY4LDM2OCwwLDE2MSwwLDE2MiwwLDAsMCwzNjIsMCwwLDAsMF0sWzAsMCwwLDAsNTgxLDAsMCwwLDE2MSwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCw1MDAsNTUyLDU1MiwyMiwyMywwLDI0LDAsMCwwLDUwNCwwLDAsMjcsMF0sWzAsMCwwLDAsNTU1LDgwLDgwLDIyLDIzLDAsMCwwLDAsMCw1NTUsMCwwLDAsMF0sWzAsMCwwLDU4Miw5MSw1ODMsNTg0LDIyLDIzLDAsMjQsMCwwLDU4NSw5MywwLDAsMjcsMF0sWzAsNTUzLDAsNTg2LDAsMTc3LDE3NywyMiwyMywwLDI0LDAsMCwwLDc4LDAsNTUzLDAsMF0sWzAsNTUzLDAsMCwwLDE3NSw1ODcsMCwyMywwLDI0LDAsMCwwLDc4LDAsNTUzLDAsMF0sWzAsMCwwLDU4OCw5MSw1ODksNTkwLDIyLDIzLDAsMjQsMCwwLDU5MSw5MywwLDAsMjcsMF0sWzAsMCwwLDAsNTEzLDU1OCw1NTgsMzIsMzMsMCwzNCwwLDAsMCw1MTcsMCwwLDM3LDBdLFswLDAsMCwwLDU2MSwxMDEsMTAxLDMyLDMzLDAsMCwwLDAsMCw1NjEsMCwwLDAsMF0sWzAsMCwwLDU5MiwxMTIsNTkzLDU5NCwzMiwzMywwLDM0LDAsMCw1OTUsMTE0LDAsMCwzNywwXSxbMCw1NTksMCw1OTYsMCwyMDMsMjAzLDMyLDMzLDAsMzQsMCwwLDAsOTksMCw1NTksMCwwXSxbMCw1NTksMCwwLDAsMjAxLDU5NywwLDMzLDAsMzQsMCwwLDAsOTksMCw1NTksMCwwXSxbMCwwLDAsNTk4LDExMiw1OTksNjAwLDMyLDMzLDAsMzQsMCwwLDYwMSwxMTQsMCwwLDM3LDBdLFswLDAsMCw2MDIsNjYsNjcsNjcsOCw5LDAsMTAsMCwwLDAsNjgsMCwwLDE2LDBdLFswLDAsMCwwLDE2NSw0NCw0NCw4LDksMCwwLDAsMCw1NjYsMTY1LDAsMCwwLDBdLFswLDAsMCw1NjMsNjYsNTY0LDY3LDgsOSwwLDEwLDAsMCw1NjYsNjgsMCwwLDE2LDBdLFswLDAsMCw1NjMsNjYsNjcsNjcsOCw5LDAsMTAsMCwwLDAsNjgsMCwwLDE2LDBdLFswLDUyNywwLDAsMCwxMjEsMTIxLDAsOSwwLDEwLDAsMCwwLDQyLDAsNTI3LDAsMF0sWzAsNTI3LDAsNTY3LDAsMTIxLDEyMSwwLDksMCwxMCwwLDAsMCw0MiwwLDUyNywwLDBdLFswLDAsMCw2MDIsNjYsNjcsNjcsOCw5LDAsMTAsMCwwLDAsNjgsMCwwLDE2LDBdLFswLDAsMCwwLDE2NSw0NCw0NCw4LDksMCwwLDAsMCw1NzIsMTY1LDAsMCwwLDBdLFswLDAsMCw1NjksNjYsNTcwLDY3LDgsOSwwLDEwLDAsMCw1NzIsNjgsMCwwLDE2LDBdLFswLDAsMCw1NjksNjYsNjcsNjcsOCw5LDAsMTAsMCwwLDAsNjgsMCwwLDE2LDBdLFswLDAsMCwwLDUzMiw1NzQsNTc0LDU3LDU4LDAsNTksMCwwLDAsNTM2LDAsMCw2MiwwXSxbMCwwLDAsMCw1NzcsMTQxLDE0MSw1Nyw1OCwwLDAsMCwwLDAsNTc3LDAsMCwwLDBdLFswLDAsMCw2MDMsMTUyLDYwNCw2MDUsNTcsNTgsMCw1OSwwLDAsNjA2LDE1NCwwLDAsNjIsMF0sWzAsNTc1LDAsNjA3LDAsMjQ4LDI0OCw1Nyw1OCwwLDU5LDAsMCwwLDEzOSwwLDU3NSwwLDBdLFswLDU3NSwwLDAsMCwyNDYsNjA4LDAsNTgsMCw1OSwwLDAsMCwxMzksMCw1NzUsMCwwXSxbMCwwLDAsNjA5LDE1Miw2MTAsNjExLDU3LDU4LDAsNTksMCwwLDYxMiwxNTQsMCwwLDYyLDBdLFswLDAsMCwwLDAsMCwwLDQ5NCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDQ5MSwwLDBdLFswLDAsMCwwLDAsMCw2MTMsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCw2MTQsOTEsOTIsOTIsMjIsMjMsMCwyNCwwLDAsMCw5MywwLDAsMjcsMF0sWzAsMCwwLDAsMTk0LDgwLDgwLDIyLDIzLDAsMCwwLDAsNTg1LDE5NCwwLDAsMCwwXSxbMCwwLDAsNTgyLDkxLDU4Myw5MiwyMiwyMywwLDI0LDAsMCw1ODUsOTMsMCwwLDI3LDBdLFswLDAsMCw1ODIsOTEsOTIsOTIsMjIsMjMsMCwyNCwwLDAsMCw5MywwLDAsMjcsMF0sWzAsNTUzLDAsMCwwLDE3NSwxNzUsMCwyMywwLDI0LDAsMCwwLDc4LDAsNTUzLDAsMF0sWzAsNTUzLDAsNTg2LDAsMTc1LDE3NSwwLDIzLDAsMjQsMCwwLDAsNzgsMCw1NTMsMCwwXSxbMCwwLDAsNjE0LDkxLDkyLDkyLDIyLDIzLDAsMjQsMCwwLDAsOTMsMCwwLDI3LDBdLFswLDAsMCwwLDE5NCw4MCw4MCwyMiwyMywwLDAsMCwwLDU5MSwxOTQsMCwwLDAsMF0sWzAsMCwwLDU4OCw5MSw1ODksOTIsMjIsMjMsMCwyNCwwLDAsNTkxLDkzLDAsMCwyNywwXSxbMCwwLDAsNTg4LDkxLDkyLDkyLDIyLDIzLDAsMjQsMCwwLDAsOTMsMCwwLDI3LDBdLFswLDAsMCw2MTUsMTEyLDExMywxMTMsMzIsMzMsMCwzNCwwLDAsMCwxMTQsMCwwLDM3LDBdLFswLDAsMCwwLDIyMCwxMDEsMTAxLDMyLDMzLDAsMCwwLDAsNTk1LDIyMCwwLDAsMCwwXSxbMCwwLDAsNTkyLDExMiw1OTMsMTEzLDMyLDMzLDAsMzQsMCwwLDU5NSwxMTQsMCwwLDM3LDBdLFswLDAsMCw1OTIsMTEyLDExMywxMTMsMzIsMzMsMCwzNCwwLDAsMCwxMTQsMCwwLDM3LDBdLFswLDU1OSwwLDAsMCwyMDEsMjAxLDAsMzMsMCwzNCwwLDAsMCw5OSwwLDU1OSwwLDBdLFswLDU1OSwwLDU5NiwwLDIwMSwyMDEsMCwzMywwLDM0LDAsMCwwLDk5LDAsNTU5LDAsMF0sWzAsMCwwLDYxNSwxMTIsMTEzLDExMywzMiwzMywwLDM0LDAsMCwwLDExNCwwLDAsMzcsMF0sWzAsMCwwLDAsMjIwLDEwMSwxMDEsMzIsMzMsMCwwLDAsMCw2MDEsMjIwLDAsMCwwLDBdLFswLDAsMCw1OTgsMTEyLDU5OSwxMTMsMzIsMzMsMCwzNCwwLDAsNjAxLDExNCwwLDAsMzcsMF0sWzAsMCwwLDU5OCwxMTIsMTEzLDExMywzMiwzMywwLDM0LDAsMCwwLDExNCwwLDAsMzcsMF0sWzAsMCwwLDAsNjYsNjcsNjcsOCw5LDAsMTAsMCwwLDAsNjgsMCwwLDE2LDBdLFswLDAsMCw2MTYsMTUyLDE1MywxNTMsNTcsNTgsMCw1OSwwLDAsMCwxNTQsMCwwLDYyLDBdLFswLDAsMCwwLDI2NSwxNDEsMTQxLDU3LDU4LDAsMCwwLDAsNjA2LDI2NSwwLDAsMCwwXSxbMCwwLDAsNjAzLDE1Miw2MDQsMTUzLDU3LDU4LDAsNTksMCwwLDYwNiwxNTQsMCwwLDYyLDBdLFswLDAsMCw2MDMsMTUyLDE1MywxNTMsNTcsNTgsMCw1OSwwLDAsMCwxNTQsMCwwLDYyLDBdLFswLDU3NSwwLDAsMCwyNDYsMjQ2LDAsNTgsMCw1OSwwLDAsMCwxMzksMCw1NzUsMCwwXSxbMCw1NzUsMCw2MDcsMCwyNDYsMjQ2LDAsNTgsMCw1OSwwLDAsMCwxMzksMCw1NzUsMCwwXSxbMCwwLDAsNjE2LDE1MiwxNTMsMTUzLDU3LDU4LDAsNTksMCwwLDAsMTU0LDAsMCw2MiwwXSxbMCwwLDAsMCwyNjUsMTQxLDE0MSw1Nyw1OCwwLDAsMCwwLDYxMiwyNjUsMCwwLDAsMF0sWzAsMCwwLDYwOSwxNTIsNjEwLDE1Myw1Nyw1OCwwLDU5LDAsMCw2MTIsMTU0LDAsMCw2MiwwXSxbMCwwLDAsNjA5LDE1MiwxNTMsMTUzLDU3LDU4LDAsNTksMCwwLDAsMTU0LDAsMCw2MiwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw1NDksMCwwXSxbMCwwLDAsMCw5MSw5Miw5MiwyMiwyMywwLDI0LDAsMCwwLDkzLDAsMCwyNywwXSxbMCwwLDAsMCwxMTIsMTEzLDExMywzMiwzMywwLDM0LDAsMCwwLDExNCwwLDAsMzcsMF0sWzAsMCwwLDAsMTUyLDE1MywxNTMsNTcsNTgsMCw1OSwwLDAsMCwxNTQsMCwwLDYyLDBdXSxcXFwiYWNjZXB0aW5nXFxcIjpbZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlLGZhbHNlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlLGZhbHNlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLHRydWUsZmFsc2UsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZV0sXFxcInRhZ3NcXFwiOltbXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXSxbXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwic3ltYm9sX2NsdXN0ZXJcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW10sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW10sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW10sW10sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXSxbXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIixcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW10sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwic3ltYm9sX2NsdXN0ZXJcXFwiXSxbXSxbXFxcInN5bWJvbF9jbHVzdGVyXFxcIl0sW1xcXCJzeW1ib2xfY2x1c3RlclxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW10sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW10sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW10sW10sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW10sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXSxbXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW10sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW10sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW10sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW10sW10sW10sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXSxbXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW10sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW10sW10sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCIsXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiLFxcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwic3ltYm9sX2NsdXN0ZXJcXFwiXSxbXFxcInN5bWJvbF9jbHVzdGVyXFxcIl0sW1xcXCJzeW1ib2xfY2x1c3RlclxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXSxbXSxbXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW10sW10sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW10sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtdLFtdLFtdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW10sW10sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW10sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW10sW10sW10sW10sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXSxbXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW10sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtdLFtdLFtdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXSxbXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCIsXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiLFxcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIixcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCIsXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiLFxcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIixcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJzeW1ib2xfY2x1c3RlclxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW10sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXSxbXSxbXSxbXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW10sW10sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW10sW10sW10sW10sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXSxbXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW10sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW10sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXSxbXSxbXSxbXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW10sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW10sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtdLFtdLFtdLFtdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXSxbXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiLFxcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIixcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCIsXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW10sW10sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiLFxcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIixcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCIsXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW10sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiLFxcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIixcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW10sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW10sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtdLFtdLFtdLFtdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW10sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtdLFtdLFtdLFtdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW10sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtdLFtdLFtdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW10sW10sW10sW10sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCIsXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW10sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiLFxcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIixcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXSxbXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCIsXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiLFxcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtdLFtdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIixcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCIsXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiLFxcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW10sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXSxbXSxbXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW10sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtdLFtdLFtdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW10sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW10sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW10sW10sW10sW10sW10sW10sW10sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiLFxcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIixcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXSxbXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCIsXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiLFxcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIixcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCIsXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW10sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW10sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW10sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtdLFtdLFtdLFtdLFtdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIixcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCIsXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW10sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW10sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW10sW10sW10sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwiY29uc29uYW50X3N5bGxhYmxlXFxcIl0sW10sW1xcXCJjb25zb25hbnRfc3lsbGFibGVcXFwiXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJ2b3dlbF9zeWxsYWJsZVxcXCJdLFtdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXFxcInZvd2VsX3N5bGxhYmxlXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW10sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdLFtdLFtcXFwic3RhbmRhbG9uZV9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFsb25lX2NsdXN0ZXJcXFwiXSxbXSxbXFxcImNvbnNvbmFudF9zeWxsYWJsZVxcXCJdLFtcXFwidm93ZWxfc3lsbGFibGVcXFwiXSxbXFxcInN0YW5kYWxvbmVfY2x1c3RlclxcXCJdXX1cIik7XG5cblxudmFyICRhYTMzM2E5NjA3NDcxMjk2JGV4cG9ydHMgPSB7fTtcbiRhYTMzM2E5NjA3NDcxMjk2JGV4cG9ydHMgPSBKU09OLnBhcnNlKFwie1xcXCJjYXRlZ29yaWVzXFxcIjpbXFxcIk9cXFwiLFxcXCJJTkRcXFwiLFxcXCJTXFxcIixcXFwiR0JcXFwiLFxcXCJCXFxcIixcXFwiRk1cXFwiLFxcXCJDR0pcXFwiLFxcXCJWTUFidlxcXCIsXFxcIlZNUHN0XFxcIixcXFwiVkFidlxcXCIsXFxcIlZQc3RcXFwiLFxcXCJDTUJsd1xcXCIsXFxcIlZQcmVcXFwiLFxcXCJWQmx3XFxcIixcXFwiSFxcXCIsXFxcIlZNQmx3XFxcIixcXFwiQ01BYnZcXFwiLFxcXCJNQmx3XFxcIixcXFwiQ1NcXFwiLFxcXCJSXFxcIixcXFwiU1VCXFxcIixcXFwiTVBzdFxcXCIsXFxcIk1QcmVcXFwiLFxcXCJGQWJ2XFxcIixcXFwiRlBzdFxcXCIsXFxcIkZCbHdcXFwiLFxcXCJudWxsXFxcIixcXFwiU01BYnZcXFwiLFxcXCJTTUJsd1xcXCIsXFxcIlZNUHJlXFxcIixcXFwiWldOSlxcXCIsXFxcIlpXSlxcXCIsXFxcIldKXFxcIixcXFwiTVxcXCIsXFxcIlZTXFxcIixcXFwiTlxcXCIsXFxcIkhOXFxcIixcXFwiTUFidlxcXCJdLFxcXCJkZWNvbXBvc2l0aW9uc1xcXCI6e1xcXCIyNTA3XFxcIjpbMjUwMywyNDk0XSxcXFwiMjUwOFxcXCI6WzI1MDMsMjUxOV0sXFxcIjI4ODhcXFwiOlsyODg3LDI5MDJdLFxcXCIyODkxXFxcIjpbMjg4NywyODc4XSxcXFwiMjg5MlxcXCI6WzI4ODcsMjkwM10sXFxcIjMwMThcXFwiOlszMDE0LDMwMDZdLFxcXCIzMDE5XFxcIjpbMzAxNSwzMDA2XSxcXFwiMzAyMFxcXCI6WzMwMTQsMzAzMV0sXFxcIjMxNDRcXFwiOlszMTQyLDMxNThdLFxcXCIzMjY0XFxcIjpbMzI2MywzMjg1XSxcXFwiMzI3MVxcXCI6WzMyNzAsMzI4NV0sXFxcIjMyNzJcXFwiOlszMjcwLDMyODZdLFxcXCIzMjc0XFxcIjpbMzI3MCwzMjY2XSxcXFwiMzI3NVxcXCI6WzMyNzAsMzI2NiwzMjg1XSxcXFwiMzQwMlxcXCI6WzMzOTgsMzM5MF0sXFxcIjM0MDNcXFwiOlszMzk5LDMzOTBdLFxcXCIzNDA0XFxcIjpbMzM5OCwzNDE1XSxcXFwiMzU0NlxcXCI6WzM1NDUsMzUzMF0sXFxcIjM1NDhcXFwiOlszNTQ1LDM1MzVdLFxcXCIzNTQ5XFxcIjpbMzU0NSwzNTM1LDM1MzBdLFxcXCIzNTUwXFxcIjpbMzU0NSwzNTUxXSxcXFwiMzYzNVxcXCI6WzM2NjEsMzYzNF0sXFxcIjM3NjNcXFwiOlszNzg5LDM3NjJdLFxcXCIzOTU1XFxcIjpbMzk1MywzOTU0XSxcXFwiMzk1N1xcXCI6WzM5NTMsMzk1Nl0sXFxcIjM5NThcXFwiOls0MDE4LDM5NjhdLFxcXCIzOTU5XFxcIjpbNDAxOCwzOTUzLDM5NjhdLFxcXCIzOTYwXFxcIjpbNDAxOSwzOTY4XSxcXFwiMzk2MVxcXCI6WzQwMTksMzk1MywzOTY4XSxcXFwiMzk2OVxcXCI6WzM5NTMsMzk2OF0sXFxcIjY5NzFcXFwiOls2OTcwLDY5NjVdLFxcXCI2OTczXFxcIjpbNjk3Miw2OTY1XSxcXFwiNjk3NlxcXCI6WzY5NzQsNjk2NV0sXFxcIjY5NzdcXFwiOls2OTc1LDY5NjVdLFxcXCI2OTc5XFxcIjpbNjk3OCw2OTY1XSxcXFwiNjk5MzRcXFwiOls2OTkzNyw2OTkyN10sXFxcIjY5OTM1XFxcIjpbNjk5MzgsNjk5MjddLFxcXCI3MDQ3NVxcXCI6WzcwNDcxLDcwNDYyXSxcXFwiNzA0NzZcXFwiOls3MDQ3MSw3MDQ4N10sXFxcIjcwODQzXFxcIjpbNzA4NDEsNzA4NDJdLFxcXCI3MDg0NFxcXCI6WzcwODQxLDcwODMyXSxcXFwiNzA4NDZcXFwiOls3MDg0MSw3MDg0NV0sXFxcIjcxMDk4XFxcIjpbNzEwOTYsNzEwODddLFxcXCI3MTA5OVxcXCI6WzcxMDk3LDcxMDg3XX0sXFxcInN0YXRlVGFibGVcXFwiOltbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMiwyLDMsNCw0LDUsMCw2LDcsOCw5LDEwLDExLDEyLDEzLDE0LDE1LDE2LDAsMTcsMTgsMTEsMTksMjAsMjEsMjIsMCwwLDAsMjMsMCwwLDIsMCwwLDI0LDAsMjVdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDI2LDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMjcsMjgsMCwwLDAsMCwwLDI3LDAsMCwwXSxbMCwwLDAsMCwwLDI5LDAsMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsMCwwLDQxLDM1LDQyLDQzLDQ0LDQ1LDAsMCwwLDQ2LDAsMCwwLDAsMzksMCwwLDQ3XSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDUsMCw2LDcsMCwwLDAsMCwwLDAsMTQsMCwwLDAsMCwwLDAsMCwyMCwyMSwyMiwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCw1LDAsMCw3LDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyMCwyMSwyMiwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCw1LDAsNiw3LDgsOSwwLDAsMTIsMCwxNCwwLDAsMCwwLDAsMCwwLDIwLDIxLDIyLDAsMCwwLDIzLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCw1LDAsNiw3LDAsOSwwLDAsMCwwLDE0LDAsMCwwLDAsMCwwLDAsMjAsMjEsMjIsMCwwLDAsMjMsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDUsMCw2LDcsOCw5LDEwLDExLDEyLDEzLDE0LDAsMTYsMCwwLDE4LDExLDE5LDIwLDIxLDIyLDAsMCwwLDIzLDAsMCwwLDAsMCwwLDAsMjVdLFswLDAsMCwwLDAsNSwwLDYsNyw4LDksMCwxMSwxMiwwLDE0LDAsMCwwLDAsMCwwLDAsMjAsMjEsMjIsMCwwLDAsMjMsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDUsMCw2LDcsMCw5LDAsMCwxMiwwLDE0LDAsMCwwLDAsMCwwLDAsMjAsMjEsMjIsMCwwLDAsMjMsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwxOCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCw1LDAsMCw3LDAsMCwwLDAsMCwwLDE0LDAsMCwwLDAsMCwwLDAsMjAsMjEsMjIsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsNSwwLDYsNyw4LDksMTAsMTEsMTIsMTMsMTQsMTUsMTYsMCwwLDE4LDExLDE5LDIwLDIxLDIyLDAsMCwwLDIzLDAsMCwwLDAsMCwwLDAsMjVdLFswLDAsMCwwLDAsNSwwLDYsNyw4LDksMCwxMSwxMiwwLDE0LDAsMCwwLDAsMCwxMSwwLDIwLDIxLDIyLDAsMCwwLDIzLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDQsNCw1LDAsNiw3LDgsOSwxMCwxMSwxMiwxMywxNCwxNSwxNiwwLDAsMTgsMTEsMTksMjAsMjEsMjIsMCwwLDAsMjMsMCwwLDAsMCwwLDAsMCwyNV0sWzAsMCwwLDAsMCw1LDAsNiw3LDgsOSw0OCwxMSwxMiwxMywxNCw0OCwxNiwwLDAsMTgsMTEsMTksMjAsMjEsMjIsMCwwLDAsMjMsMCwwLDAsMCw0OSwwLDAsMjVdLFswLDAsMCwwLDAsNSwwLDYsNyw4LDksMCwxMSwxMiwwLDE0LDAsMTYsMCwwLDAsMTEsMCwyMCwyMSwyMiwwLDAsMCwyMywwLDAsMCwwLDAsMCwwLDI1XSxbMCwwLDAsMCwwLDUsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDIwLDIxLDIyLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDUsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMjEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCw1LDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDIxLDIyLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDUsMCw2LDcsMCwwLDAsMCwwLDAsMTQsMCwwLDAsMCwwLDAsMCwyMCwyMSwyMiwwLDAsMCwyMywwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDUwLDAsNTEsMF0sWzAsMCwwLDAsMCw1LDAsNiw3LDgsOSwwLDExLDEyLDAsMTQsMCwxNiwwLDAsMCwxMSwwLDIwLDIxLDIyLDAsMCwwLDIzLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDI3LDI4LDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyOCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwyOSwwLDMwLDMxLDAsMCwwLDAsMCwwLDM4LDAsMCwwLDAsMCwwLDAsNDMsNDQsNDUsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMjksMCwwLDMxLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw0Myw0NCw0NSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwyOSwwLDMwLDMxLDMyLDMzLDAsMCwzNiwwLDM4LDAsMCwwLDAsMCwwLDAsNDMsNDQsNDUsMCwwLDAsNDYsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDI5LDAsMzAsMzEsMCwzMywwLDAsMCwwLDM4LDAsMCwwLDAsMCwwLDAsNDMsNDQsNDUsMCwwLDAsNDYsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDI5LDAsMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMCw0MCwwLDAsNDEsMzUsNDIsNDMsNDQsNDUsMCwwLDAsNDYsMCwwLDAsMCwwLDAsMCw0N10sWzAsMCwwLDAsMCwyOSwwLDMwLDMxLDMyLDMzLDAsMzUsMzYsMCwzOCwwLDAsMCwwLDAsMCwwLDQzLDQ0LDQ1LDAsMCwwLDQ2LDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwyOSwwLDMwLDMxLDAsMzMsMCwwLDM2LDAsMzgsMCwwLDAsMCwwLDAsMCw0Myw0NCw0NSwwLDAsMCw0NiwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDQxLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDI5LDAsMCwzMSwwLDAsMCwwLDAsMCwzOCwwLDAsMCwwLDAsMCwwLDQzLDQ0LDQ1LDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDI5LDAsMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsMCwwLDQxLDM1LDQyLDQzLDQ0LDQ1LDAsMCwwLDQ2LDAsMCwwLDAsMCwwLDAsNDddLFswLDAsMCwwLDAsMjksMCwzMCwzMSwzMiwzMywwLDM1LDM2LDAsMzgsMCwwLDAsMCwwLDM1LDAsNDMsNDQsNDUsMCwwLDAsNDYsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDI5LDAsMzAsMzEsMzIsMzMsNTIsMzUsMzYsMzcsMzgsNTIsNDAsMCwwLDQxLDM1LDQyLDQzLDQ0LDQ1LDAsMCwwLDQ2LDAsMCwwLDAsNTMsMCwwLDQ3XSxbMCwwLDAsMCwwLDI5LDAsMzAsMzEsMzIsMzMsMCwzNSwzNiwwLDM4LDAsNDAsMCwwLDAsMzUsMCw0Myw0NCw0NSwwLDAsMCw0NiwwLDAsMCwwLDAsMCwwLDQ3XSxbMCwwLDAsMCwwLDI5LDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw0Myw0NCw0NSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwyOSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw0NCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDI5LDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDQ0LDQ1LDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDI5LDAsMzAsMzEsMCwwLDAsMCwwLDAsMzgsMCwwLDAsMCwwLDAsMCw0Myw0NCw0NSwwLDAsMCw0NiwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMjksMCwzMCwzMSwzMiwzMywwLDM1LDM2LDAsMzgsMCw0MCwwLDAsMCwzNSwwLDQzLDQ0LDQ1LDAsMCwwLDQ2LDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCw1LDAsNiw3LDgsOSw0OCwxMSwxMiwxMywxNCwwLDE2LDAsMCwxOCwxMSwxOSwyMCwyMSwyMiwwLDAsMCwyMywwLDAsMCwwLDAsMCwwLDI1XSxbMCwwLDAsMCwwLDUsMCw2LDcsOCw5LDQ4LDExLDEyLDEzLDE0LDQ4LDE2LDAsMCwxOCwxMSwxOSwyMCwyMSwyMiwwLDAsMCwyMywwLDAsMCwwLDAsMCwwLDI1XSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsNTEsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw1NCwwLDBdLFswLDAsMCwwLDAsMjksMCwzMCwzMSwzMiwzMyw1MiwzNSwzNiwzNywzOCwwLDQwLDAsMCw0MSwzNSw0Miw0Myw0NCw0NSwwLDAsMCw0NiwwLDAsMCwwLDAsMCwwLDQ3XSxbMCwwLDAsMCwwLDI5LDAsMzAsMzEsMzIsMzMsNTIsMzUsMzYsMzcsMzgsNTIsNDAsMCwwLDQxLDM1LDQyLDQzLDQ0LDQ1LDAsMCwwLDQ2LDAsMCwwLDAsMCwwLDAsNDddLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDUwLDAsNTEsMF1dLFxcXCJhY2NlcHRpbmdcXFwiOltmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWVdLFxcXCJ0YWdzXFxcIjpbW10sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiaW5kZXBlbmRlbnRfY2x1c3RlclxcXCJdLFtcXFwic3ltYm9sX2NsdXN0ZXJcXFwiXSxbXFxcInN0YW5kYXJkX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJicm9rZW5fY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcIm51bWVyYWxfY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImluZGVwZW5kZW50X2NsdXN0ZXJcXFwiXSxbXFxcInN5bWJvbF9jbHVzdGVyXFxcIl0sW1xcXCJzeW1ib2xfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhcmRfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhcmRfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhcmRfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhcmRfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhcmRfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhcmRfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhcmRfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhcmRfY2x1c3RlclxcXCJdLFtcXFwidmlyYW1hX3Rlcm1pbmF0ZWRfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhcmRfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhcmRfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhcmRfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhcmRfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhcmRfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhcmRfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhcmRfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhcmRfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhcmRfY2x1c3RlclxcXCJdLFtcXFwic3RhbmRhcmRfY2x1c3RlclxcXCJdLFtcXFwiYnJva2VuX2NsdXN0ZXJcXFwiXSxbXFxcImJyb2tlbl9jbHVzdGVyXFxcIl0sW1xcXCJudW1lcmFsX2NsdXN0ZXJcXFwiXSxbXFxcIm51bWJlcl9qb2luZXJfdGVybWluYXRlZF9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFyZF9jbHVzdGVyXFxcIl0sW1xcXCJzdGFuZGFyZF9jbHVzdGVyXFxcIl0sW1xcXCJudW1lcmFsX2NsdXN0ZXJcXFwiXV19XCIpO1xuXG5cbi8vIENhdGVvcmllcyB1c2VkIGluIHRoZSBPcGVuVHlwZSBzcGVjOlxuLy8gaHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS90eXBvZ3JhcGh5L290Zm50ZGV2L2RldmFub3Qvc2hhcGluZy5hc3B4XG5jb25zdCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYyA9IHtcbiAgICBYOiAxLFxuICAgIEM6IDIsXG4gICAgVjogNCxcbiAgICBOOiA4LFxuICAgIEg6IDE2LFxuICAgIFpXTko6IDMyLFxuICAgIFpXSjogNjQsXG4gICAgTTogMTI4LFxuICAgIFNNOiAyNTYsXG4gICAgVkQ6IDUxMixcbiAgICBBOiAxMDI0LFxuICAgIFBsYWNlaG9sZGVyOiAyMDQ4LFxuICAgIERvdHRlZF9DaXJjbGU6IDQwOTYsXG4gICAgUlM6IDgxOTIsXG4gICAgQ29lbmc6IDE2Mzg0LFxuICAgIFJlcGhhOiAzMjc2OCxcbiAgICBSYTogNjU1MzYsXG4gICAgQ006IDEzMTA3MixcbiAgICBTeW1ib2w6IDI2MjE0NCAvLyBBdmFncmFoYSwgZXRjIHRoYXQgdGFrZSBtYXJrcyAoU00sQSxWRCkuXG59O1xuY29uc3QgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjAgPSB7XG4gICAgU3RhcnQ6IDEsXG4gICAgUmFfVG9fQmVjb21lX1JlcGg6IDIsXG4gICAgUHJlX006IDQsXG4gICAgUHJlX0M6IDgsXG4gICAgQmFzZV9DOiAxNixcbiAgICBBZnRlcl9NYWluOiAzMixcbiAgICBBYm92ZV9DOiA2NCxcbiAgICBCZWZvcmVfU3ViOiAxMjgsXG4gICAgQmVsb3dfQzogMjU2LFxuICAgIEFmdGVyX1N1YjogNTEyLFxuICAgIEJlZm9yZV9Qb3N0OiAxMDI0LFxuICAgIFBvc3RfQzogMjA0OCxcbiAgICBBZnRlcl9Qb3N0OiA0MDk2LFxuICAgIEZpbmFsX0M6IDgxOTIsXG4gICAgU01WRDogMTYzODQsXG4gICAgRW5kOiAzMjc2OFxufTtcbmNvbnN0ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQ4NTE5ZGVhYTdkZTJiMDcgPSAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYy5DIHwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGE1MTNlYTYxYTdiZWU5MWMuUmEgfCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYy5DTSB8ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjLlYgfCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYy5QbGFjZWhvbGRlciB8ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjLkRvdHRlZF9DaXJjbGU7XG5jb25zdCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYmJjZDkyODc2NzMzOGUwZCA9ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjLlpXSiB8ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjLlpXTko7XG5jb25zdCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkY2E5NTk5YjJhMzAwYWZjID0gJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGE1MTNlYTYxYTdiZWU5MWMuSCB8ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjLkNvZW5nO1xuY29uc3QgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGU5OWQxMTlkYTc2YTBmYzUgPSB7XG4gICAgRGVmYXVsdDoge1xuICAgICAgICBoYXNPbGRTcGVjOiBmYWxzZSxcbiAgICAgICAgdmlyYW1hOiAwLFxuICAgICAgICBiYXNlUG9zOiAnTGFzdCcsXG4gICAgICAgIHJlcGhQb3M6ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwLkJlZm9yZV9Qb3N0LFxuICAgICAgICByZXBoTW9kZTogJ0ltcGxpY2l0JyxcbiAgICAgICAgYmx3Zk1vZGU6ICdQcmVfQW5kX1Bvc3QnXG4gICAgfSxcbiAgICBEZXZhbmFnYXJpOiB7XG4gICAgICAgIGhhc09sZFNwZWM6IHRydWUsXG4gICAgICAgIHZpcmFtYTogMHgwOTRELFxuICAgICAgICBiYXNlUG9zOiAnTGFzdCcsXG4gICAgICAgIHJlcGhQb3M6ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwLkJlZm9yZV9Qb3N0LFxuICAgICAgICByZXBoTW9kZTogJ0ltcGxpY2l0JyxcbiAgICAgICAgYmx3Zk1vZGU6ICdQcmVfQW5kX1Bvc3QnXG4gICAgfSxcbiAgICBCZW5nYWxpOiB7XG4gICAgICAgIGhhc09sZFNwZWM6IHRydWUsXG4gICAgICAgIHZpcmFtYTogMHgwOUNELFxuICAgICAgICBiYXNlUG9zOiAnTGFzdCcsXG4gICAgICAgIHJlcGhQb3M6ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwLkFmdGVyX1N1YixcbiAgICAgICAgcmVwaE1vZGU6ICdJbXBsaWNpdCcsXG4gICAgICAgIGJsd2ZNb2RlOiAnUHJlX0FuZF9Qb3N0J1xuICAgIH0sXG4gICAgR3VybXVraGk6IHtcbiAgICAgICAgaGFzT2xkU3BlYzogdHJ1ZSxcbiAgICAgICAgdmlyYW1hOiAweDBBNEQsXG4gICAgICAgIGJhc2VQb3M6ICdMYXN0JyxcbiAgICAgICAgcmVwaFBvczogJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjAuQmVmb3JlX1N1YixcbiAgICAgICAgcmVwaE1vZGU6ICdJbXBsaWNpdCcsXG4gICAgICAgIGJsd2ZNb2RlOiAnUHJlX0FuZF9Qb3N0J1xuICAgIH0sXG4gICAgR3VqYXJhdGk6IHtcbiAgICAgICAgaGFzT2xkU3BlYzogdHJ1ZSxcbiAgICAgICAgdmlyYW1hOiAweDBBQ0QsXG4gICAgICAgIGJhc2VQb3M6ICdMYXN0JyxcbiAgICAgICAgcmVwaFBvczogJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjAuQmVmb3JlX1Bvc3QsXG4gICAgICAgIHJlcGhNb2RlOiAnSW1wbGljaXQnLFxuICAgICAgICBibHdmTW9kZTogJ1ByZV9BbmRfUG9zdCdcbiAgICB9LFxuICAgIE9yaXlhOiB7XG4gICAgICAgIGhhc09sZFNwZWM6IHRydWUsXG4gICAgICAgIHZpcmFtYTogMHgwQjRELFxuICAgICAgICBiYXNlUG9zOiAnTGFzdCcsXG4gICAgICAgIHJlcGhQb3M6ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwLkFmdGVyX01haW4sXG4gICAgICAgIHJlcGhNb2RlOiAnSW1wbGljaXQnLFxuICAgICAgICBibHdmTW9kZTogJ1ByZV9BbmRfUG9zdCdcbiAgICB9LFxuICAgIFRhbWlsOiB7XG4gICAgICAgIGhhc09sZFNwZWM6IHRydWUsXG4gICAgICAgIHZpcmFtYTogMHgwQkNELFxuICAgICAgICBiYXNlUG9zOiAnTGFzdCcsXG4gICAgICAgIHJlcGhQb3M6ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwLkFmdGVyX1Bvc3QsXG4gICAgICAgIHJlcGhNb2RlOiAnSW1wbGljaXQnLFxuICAgICAgICBibHdmTW9kZTogJ1ByZV9BbmRfUG9zdCdcbiAgICB9LFxuICAgIFRlbHVndToge1xuICAgICAgICBoYXNPbGRTcGVjOiB0cnVlLFxuICAgICAgICB2aXJhbWE6IDB4MEM0RCxcbiAgICAgICAgYmFzZVBvczogJ0xhc3QnLFxuICAgICAgICByZXBoUG9zOiAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMC5BZnRlcl9Qb3N0LFxuICAgICAgICByZXBoTW9kZTogJ0V4cGxpY2l0JyxcbiAgICAgICAgYmx3Zk1vZGU6ICdQb3N0X09ubHknXG4gICAgfSxcbiAgICBLYW5uYWRhOiB7XG4gICAgICAgIGhhc09sZFNwZWM6IHRydWUsXG4gICAgICAgIHZpcmFtYTogMHgwQ0NELFxuICAgICAgICBiYXNlUG9zOiAnTGFzdCcsXG4gICAgICAgIHJlcGhQb3M6ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwLkFmdGVyX1Bvc3QsXG4gICAgICAgIHJlcGhNb2RlOiAnSW1wbGljaXQnLFxuICAgICAgICBibHdmTW9kZTogJ1Bvc3RfT25seSdcbiAgICB9LFxuICAgIE1hbGF5YWxhbToge1xuICAgICAgICBoYXNPbGRTcGVjOiB0cnVlLFxuICAgICAgICB2aXJhbWE6IDB4MEQ0RCxcbiAgICAgICAgYmFzZVBvczogJ0xhc3QnLFxuICAgICAgICByZXBoUG9zOiAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMC5BZnRlcl9NYWluLFxuICAgICAgICByZXBoTW9kZTogJ0xvZ19SZXBoYScsXG4gICAgICAgIGJsd2ZNb2RlOiAnUHJlX0FuZF9Qb3N0J1xuICAgIH0sXG4gICAgLy8gSGFuZGxlZCBieSBVbml2ZXJzYWxTaGFwZXJcbiAgICAvLyBTaW5oYWxhOiB7XG4gICAgLy8gICBoYXNPbGRTcGVjOiBmYWxzZSxcbiAgICAvLyAgIHZpcmFtYTogMHgwRENBLFxuICAgIC8vICAgYmFzZVBvczogJ0xhc3RfU2luaGFsYScsXG4gICAgLy8gICByZXBoUG9zOiBQT1NJVElPTlMuQWZ0ZXJfTWFpbixcbiAgICAvLyAgIHJlcGhNb2RlOiAnRXhwbGljaXQnLFxuICAgIC8vICAgYmx3Zk1vZGU6ICdQcmVfQW5kX1Bvc3QnXG4gICAgLy8gfSxcbiAgICBLaG1lcjoge1xuICAgICAgICBoYXNPbGRTcGVjOiBmYWxzZSxcbiAgICAgICAgdmlyYW1hOiAweDE3RDIsXG4gICAgICAgIGJhc2VQb3M6ICdGaXJzdCcsXG4gICAgICAgIHJlcGhQb3M6ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwLlJhX1RvX0JlY29tZV9SZXBoLFxuICAgICAgICByZXBoTW9kZTogJ1Zpc19SZXBoYScsXG4gICAgICAgIGJsd2ZNb2RlOiAnUHJlX0FuZF9Qb3N0J1xuICAgIH1cbn07XG5jb25zdCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkZjY0N2M5Y2ZkZDc3ZDk1YSA9IHtcbiAgICAvLyBLaG1lclxuICAgIDB4MTdCRTogW1xuICAgICAgICAweDE3QzEsXG4gICAgICAgIDB4MTdCRVxuICAgIF0sXG4gICAgMHgxN0JGOiBbXG4gICAgICAgIDB4MTdDMSxcbiAgICAgICAgMHgxN0JGXG4gICAgXSxcbiAgICAweDE3QzA6IFtcbiAgICAgICAgMHgxN0MxLFxuICAgICAgICAweDE3QzBcbiAgICBdLFxuICAgIDB4MTdDNDogW1xuICAgICAgICAweDE3QzEsXG4gICAgICAgIDB4MTdDNFxuICAgIF0sXG4gICAgMHgxN0M1OiBbXG4gICAgICAgIDB4MTdDMSxcbiAgICAgICAgMHgxN0M1XG4gICAgXVxufTtcblxuXG5cbmNvbnN0IHsgZGVjb21wb3NpdGlvbnM6ICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRkZWNvbXBvc2l0aW9ucyB9ID0gKDAsICgvKkBfX1BVUkVfXyovJHBhcmNlbCRpbnRlcm9wRGVmYXVsdCgkYWEzMzNhOTYwNzQ3MTI5NiRleHBvcnRzKSkpO1xuY29uc3QgJDc4MjZmOTBmNmYwY2VjYzkkdmFyJHRyaWUgPSBuZXcgKDAsICQ1MlpJZiR1bmljb2RldHJpZSkoKDAsICQxMjcyNzczMGRkZmM4YmZlJGV4cG9ydCQ5NGZkZjExYmFmYzhkZTZiKShcIkFBQVJBQUFBQUFCZzJBQUFBV1lQbWZEdG5YdU1YRlVkeCsvdXpzN003c3p1ZEF0RUNHSlJJTVJRYlVBaXRoUVdrR0FLaVZoTnBGVlJSQW1JUVZDRGtEWUlDR290SUE5QlRDejhJZVV2aXY3QlEyUEJ0QklSTEJCUUlXQVVzS2cxQkt4UkFxSWdmcy9jYythZU9YUGVqM3RuWlg3SkovZHh6ajNuZDM2Lzg3NTNaNWZVc3V4Z3NBd2NBVTRHcDRCUGdNK0NkNFAzUmppZURzNEdYd0xySEo1YkR5NERHOEExNEx2Z1pyQVpiQUYzZ25zMHoxOEFMZ1kvQjc4Qzk0Tkh3QlBnYWJBRS9BWDhEYndNNXNGL1FYMHlENXZGY1Uvd1ZuQWdXQW9PQXl2QWNlQkU4Q0d3QnB3R3pnSmZBRjhCWHdYZkFGZUM2OEVtc0Jsc0FYZUNyZUErOENCNEREd0YvZ2gyZ2QzZ0ZmQUdtS3huMlF6WUMrd0hEZ1JMd2VGZ0pUZ1dyS3JudXEvR2NRMDRqVjZmaGVONTRFSndFYmdjWEFHK1E4Ty9qK010NERad0I5aGF6OHQ5SHozYThpQ04veGlPdndSUDBldkg2ZkU2OEF6T0grS2UyZVdZaHczUGNHbnV4dmtyNEEzUWFHUlpCN3dGTEFFSGcyWGdpRVovZkhLY3AvY2VCaC9BK2NuZ0ZQQ3BSbTZ2TTNFOGw4YTVnTjY3R01kdmdxc2JlWDJhcDl5STYwMWdNN2dOM0FHMjBtZnVvOGNkT1A2R3B2ZFVnOW9LeHo4MzlHVjkwUkRPMi9nbHhOMUI3OTBOWHNOMXJabGw3V1lSZHcrYzcwdXZUd0lITkFmVE8wUnlMNVREbW5uYmMzbG1SUUk5VW5NMGRENWVvdmZ6NEZwSi9CTnBYTllXVitONkxmZzBoWTk3Sksxdm4rUHVyOURvUXVyMkY3bTQzNmJIRFVLOEM1dDUvOHZydW80Kzk3V21YRytHTG16RWlCRitQRHdFT293WU1XTEVpQkVqUm94WWVCdzVCRHFJUEVmWHV0OXlXTit2Vk54ZnJubm1XcVIvUGRnRU5vTXQ0RTV3RDlnT0hnQ1BnaWZCczJCWE05OWIybzNqUDhGL3dNUlVsclhBSE5nSHZIMHEzODk1SjQ2SGd1WGdXSEFHTGN0bUx2OVZ1TDk2cW5wN2p4Z3hZc1NiQ2JKdnVSWjk3L3RxeFQ1OVZWUnRpeEVqUnNUaEJHN09TdDV6em9QVDBNK2NCYzRUNW5vWE9zNzlUcUxIZVpySFVlQ1NxZUo5NmdhY1h5MmtlY05VOFY2SGg3eVh1UWxodHc3Qi9QTzFSVGtyNTJBajhKTkZaallnM2dPS3VDL2cvdjZMczJ3TnVBWTh1cmcvL1BjSWIrNlJaWHVETmVDUzZTemJCckpXbGgwRExpRkhjbzhlZDlJanp6dmFXZmE5c1p6VGNmNkQ5bUNjbmJnM1BsTmNINGZ6UzhGMk1EYUxkUUc0ZExaSUp4YmJhWnF2NHJpOGs1OGYzK21QczY2VDYvVFR6cURlSTBhTUdER2lIUDVkY1I4Y2UveHhZY1dpNnZPZnI3MjV1Unpjam5uZ1hWT0Q2MUh5bmMrOXVMK05teWZlai9OSHB2TDU2QTVKZXV6N3V5Zm8rcHFjUHoyVmYxTkgwdHRKMDNwZWt0OFNtdVkvRVBZeTl6emJOMzE5eW0vOVRMNlpJdDlNSENYUmR4SnRvQWtXVFJkejQ3Mm44N0Q5Y1R3WUxKdnV6KytJNldJZVBvL3pFOEFIcDR2OFdMeVAwbnVmbk02Lyt6b0R4OCtETDA4UDZyOSt1cmhlUnRPK2pENi9jZHJzeDNtcXU4dyt4SDRQU2NLSVhhNUQyamVDbThFdDREYndJL0JqY0MvNEJYZ0kvQmI4RHV3RXU4QnU4QXA0QTlSYVJacHRuTzhKOWdVSGdFUEFvV0E1T0xZMXFNTzkwR0VWN3ErbVlXdHhQQldjSVluTDRwK0RzUE5ieGZWRk9QODZ1QXI4RE5jMzRIZ1REYjhWeDlzVmFSRkkvTHRhZ3pZam5DcXBiOTA4RVg4N2VCQThCaDRIZjJqbGUvOS93dkdGVnY3ODdyclpaeThoN3F0Z0RPdUZPbWlCdVhZUnZnL085d01IZ1hlQjk3U0xzcGs0c3EwT0kvcTl2MTMrZWsrc2gzellTUnA5anJZb3J3OWxsMS9HUnpSK0tvdFlaU0hmOGxhVlAybHZwQS84T0dkUE1rNTlocXRYWitMOG5IYnh2V3dxTzY1cnl1K2ZUM1ZaeitsNGRFVDdMMFIwNzJsanNNeXpUcGFKcVF4c2JMOE05V2FqWTc4OURPODVYTXAvRGNwM1F6dGRuKzlxZi9hOTdaV0s4UFhjM0crVHBDL252OE1uY3k3WnZJQ0YzMDJQNU8rYU5pT3RMZFRYZCtENFE3RFZ3ZmN2V3Z4OXpURUovbzVpRzNSOFlBakdORnNlaGE1UEd1Wkt6N2I3eHhYYk9yWE1jdTVlSlNvLy9yWGRILzczRW56NkwxcS9YK2Z5SXU4d1pHdE5CbWtqa3pOWk5nUDJBdnVCZzJieXNLVXpkdVhuLzY2SnROZU40UENadk8wL3g3VWpkbjRWbllPdlJKempaL0krOXNRWmVmdFgyVGMxUlBjUHovVGY0L3NpMGcrdDVNcStrZlpqWkwzNE1jNXVsM1BQbkU3VE94dkhLMnFEYVorTCsrZGIySHlZcU1vL3FWbmIvUDh1SDgvcm1uRnhSMGs2REN1L3Jqai9SeFQ3S0dVU1dnYmQrTE1RdUVnWUIxenNrMnF0dkpEOHY1QWhkZmR0dGJFdW5TeGJjSkQ5WmY3Y2hxcDFIbGJlN0ZLMS9hUFZUZnA3Rmd0QzF5R0dpU25jRksvRGhadmkrZXBadGEwV1dqbHNmRFpNeVBSZFNQcnJ5cVNTS25YeDFia3EvWWU5VGxScGs3THJqcTFVcmZkQzlYK010S3F3UDYrM2EvNHBKRlVaRjBwWlpwdjkxTVlqTUJhUlJYYnhwaG81elFtVVkzRitQdDRvN3J2UXJCWFBkbTAwVGFFMjR1TWFkYU0ybWVMU0k3aXUwNzF0M2VyM2I2WkxpOEpFZGUzcXcrNnpHdit5Y0Y1a2FSQmgvbTFULzdZbC9tTXlUdU13YWRQNHhMOWlmakpwTndidkRaUko4Rzh2bnFWL1dmMTJhYS9reU9kbDY5K0JzcFRzWHpHdWVFNkUrSmZabnZtWElmTlBXK0ZmWGtqYjFZbXFQTnBuTFAzYjYxZkhDai9YNXR6R0FOZjJ5M3lxdkM3SnY3YnRWNFRWYmRhbW1JOWwvZzBkUzVsTnhMcmsyajlyOHhqanhoQlFueWdnMGxnZy9iT3JmeWN0K3VkSmkvWXJrMGxGbnhDN2YrNWtSYnNObWNleGZydWJ0MFgvckd2THFyR1NuWXYzWlBIRWU4cjdsdk12VWZpMkxPdS8yZGc4THJSdFF0MnlmY3Y4cjVJVTcwVmtJczZuYmViVVhmME0vbzdabmwzOVNkb3orWDFvRWI1TjhmZkY2N3FoUGZQUDZlb1VieGYrR1JmLzZzUm52YVNkbXcrQmYxVnhtYkQrMnNhLy9EVTd0L0d2MlBmS3BLZHJCUDkyT2prK0l2cVgxNmtzLzJxeGJMOEVabmMySHFzZ1l1cVB1elpWK0kzUmJ1amJEbStUMFBtV0NWTy81anFmdHAxenkrd1NBNnMwSld0cDJ6NWUxb1pWK3lNc2pCM1pYb2xzdjBVbHJ2MDF2My9pS3JGOTRRdGJ0OXNpQ25tZWI2ZmpqZjU5S25MazF4YUVidnR2Rm5GaXJHdkVPcW15Y1FyYm0vSU1zWGQzUDI4dWg0bk0zc3dYUkVSNzE3T2lYOGtjN0sycXF5bjJwM21hRkdVL2FydVA1VkN2K1ByYW9UWVU4eVVtbWJEd2NZbzZwdXNuTTQ4Nnhkb2dhNGRrUENiMXBLN1NmYzZlYnZrZDRxZUF0UWNkL042M2JCM2xVM2RsVW5VZjM4Vnl2cUNxSzdKeGxOU2Q3bHlkckRsbSsvdXFIaVJ2bDMwTnJwL245enBrWlJqb0ozVjFkaXlQMDVySVlYSFlzK3crRDUrV01TOGI1Z1p0S2N1WDBLVDVkL1d3dEI5N1ZueXZZNnJqTXVrSTU2SEkwckZKUHd0OFBqVC8xT1h6U2JjTWVFbWRoMjk0cXZLSzRyTnU3ajRuM0xOWmc4VEtYd2FmdjAyNVUrWHZLakhzVDhRNy83TEdhSnQ5bEFoN0FzejN1djBYRVg2dDBkdURvV04vOTN3bWg5MlhwVUhtQ0tiOUdBTGJHK3JaUDNBZk5iUVBLS3YvanBGL2JQMEpYZnVXMVFZazdkaGxqY3l2azVtdys5MzNIcG8xZzI2UFEyWlA2elZtVEp0NDdQMjVqbmNEOXZQd0dTK3E5UVMvVjZSYVk4ajhLOExtdlVyOUhmWUNwSDVPV0w5bFpZK1N2NnBlc0hDSkhidHJmOWs2ZXRadmYwRzFMMGphNGNBZTFVVC9zM3pkQ2UzL1E1L24zNzJ3TWM5Ny9FMVFoMFRibWZ3aDNtL1Y5T243MnRObnJDRjFzSmtWZTFFeVhNZEJhNytsSE1zazQ0ek1GNlN0OWUyZGpObmJtOHlicEhrcStnYmJlbU1hSDBVWm1EOG9iS0dyazdyK250KzNiRTdvODNZWnAvdnFPS2R2NlB6Sk5ONm1USnNJLzUxWFI3aTJackdBNUI2ekZ3bmp6eG1xUGphR2ZXM3RaTnJ6MWVsanEyOW1PT3FlQ2ZGL2lyUnQ4N1BOdzB1WFNWQXZybU9NTlQ1NjlNcHRzWWFWMHNpYy93YlkxM2U4aFByYjlLMnlTVUowajZHL0x1MFU0cXBUclIyM2pNcDZtNWhVK1lUYVdDZWg5YUlzbS9ycVVIVjRiRnY0MmtnblpkZkgxUFVqMUQ3RFZIOWQ4a2hSTjF6RlJsLysvVFcvL3F4TDF1SDgzK21rM0grU3ZSdFMyVERVOTBuWDJUcE02LzF4elpwWnRvWWRLNzYzZHFsejBmNnVOZUZlaGNzK0gvbmJHUDc3TXBYMDZuL29mcHpQK3RWbVRVdlJ0VnVYL2NqUzY3T0U1a1JCcnh5Sit3L2RQbzdyKzljTzExNjBlM2dxdTBTMnVXN1BqTi9MNm5zL1VmTWYxMExhaTg3ZnJKKzNLbmRBZmM4eVRmMU0zVDRzNnFtNC95aDcvMkdTa0c4VU13Ly9EdlJMZ2JZWlNFT3hyMExDV3ZSZGpmaDlYR3pmcU40Tml2ZlpkN3JzbUZwMDh6bWJzc3JLSkV1VGZWTVpvcGRwYnV3U3JoTnYzL04ycyswUERHM0tOQjZSTXJGdkpIdjZCODVIWE9iQW9Xc2Qzem0zaSs2dVpZeXR2KzUrcG9oYnBvNit0cFpKRmZtR2xyY01mNGM4YjFQZTJPVUlzYVhKcmluQ1RmYXh0Wk90K05ZblUzaElmUWxOMjBaLzErZHQ3SmFxTHNiSXp5Y05XWm1ybE5nMkRjMi9MSjFUK1Q2V3JyWVNtbDRLdTdpazd5SXgyb3BKRDUxdlU5VWZWUm1ycUw4dS9vbFpqMFB5Q0xWNWlyeGNkS29pLzZyS2I4cVRySHNuaFc5anlaSC9uU3BlV0R6eGQ5NzY5dVEwMTZsZ1V1ZjJwQWZLUGh1MkZwZlpMMlliOXNuTE5sL2ZOSWVwWGFVc2o0dk5YQ1hVWjc1cHg4b2pOUDhVUHZBdGEyZzZmYitGMWNrWnVuZXNodjF2R1hYRGV5UlJyTi9iQlBTMUp1bCtsKzd6Vzg2UjdXdjYzV1h5RHB0L1J4cmFSanZDK1RDM082MS9TcWovcHJhZzh4MzcyeVFpdm4rWHd1ZHJJMlgyRTJLZHRKRW92NTJlMEwrdXY0Rk8zcC9ydnNzZ3NMOEY0ZC96OVB6bFdTOTRtOGZxUzMzNjFGaSs2cWFWWUh3aTlZejRpSDJmb2JJais0NWNwei9UVWFhcnIvNCt6K3ZhV3RWdHlBWDJkMUxHOFc5QzNmK0YxbW5mMzYvazR3M1lQckx2K1hCVlhDSnMzY3IrbjRNS0p1THYvZk45R2hOZFhWUDVwSk1OOXZGaTNycHYzL3I4WXdnM1NZcDY2ek5Pc084UUdjeFBwbm1SUy8xbXZtSmpqdTN2N2Fic0kyeHNwUXJ2czFkTmJqT2ovd1A3aDFSbFp5S0d5OG9jYzQwOFVMOEVuNHY2eGZDL0szejUyWHpKZDYyVDh2dVpHR3N4by82TzQ2bnRtTnFxRmIvanBzMi9oSFY0clBLSDBzdlQ0cHN0VTd0MnRaOXUvWmRxYkpMMU13UDZPODZGeXQ0allhSXJHejltakV0OGxGTDRQdFZFNnZvdEcyUDZmcGRmL0daUnNlN3MzYmY0QnRTbC9ESWJLTWN0eCsrWis4bzZLNno5RlBPd0tzUm1YaWFObDdDKzZOWVJwamxicUcxajcyZjQ5cXN1WTRicmQvYW1iNFpWYzhUUStzU0g5ODVMckVlOGlQV0puZlBySlJiV2JiK2R3bjR4Nm8rci9hUzJTN3czcVd0Ly9Mbll6Mm50RTB2SDF1RGN5S2F0eDFySCtFaU1QRU4xU1pHL2l6Nis5bzAxUm9iNk83USt4TFoxakhvYks2MVUrcFdWdm8yRXB1V3F6ekQ2UG9hK3B2aGxpMHduOFpxLzcyTXptMmQ5MG81Vk4xeDlaS3V6YlRndnFXd1VJaW44RlNwbDFDWFh2RlJ4VTBpb3pWUFlKRFJ0RjN1RnBobjZYQXlKVVVkRDdTalRKOHY2bjlmVmJWT2JrS1dwMDAxbGM5VlJscWRPZjV2MFpNK2J5bWRiZnAxTmZHMGJxMjdZNUpNeWZ4ZUprVTZvL2luS0g4TzJaZmdpZGI2aC9nM1ZKN1FjVmJXTDBQeHQ2cmxyUHFhNEtmUTI1YTJ6bDQvRThHZE0vNGZLL3dBPVwiKSk7XG5jb25zdCAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkc3RhdGVNYWNoaW5lID0gbmV3ICgwLCAkNTJaSWYkZGZhKSgoMCwgKC8qQF9fUFVSRV9fKi8kcGFyY2VsJGludGVyb3BEZWZhdWx0KCQ0YjA3MzVjYTZjNjkyZWE1JGV4cG9ydHMpKSkpO1xuY2xhc3MgJDc4MjZmOTBmNmYwY2VjYzkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSBleHRlbmRzICgwLCAkNjQ5OTcwZDg3MzM1YjMwZiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSB7XG4gICAgc3RhdGljIHBsYW5GZWF0dXJlcyhwbGFuKSB7XG4gICAgICAgIHBsYW4uYWRkU3RhZ2UoJDc4MjZmOTBmNmYwY2VjYzkkdmFyJHNldHVwU3lsbGFibGVzKTtcbiAgICAgICAgcGxhbi5hZGRTdGFnZShbXG4gICAgICAgICAgICAnbG9jbCcsXG4gICAgICAgICAgICAnY2NtcCdcbiAgICAgICAgXSk7XG4gICAgICAgIHBsYW4uYWRkU3RhZ2UoJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGluaXRpYWxSZW9yZGVyaW5nKTtcbiAgICAgICAgcGxhbi5hZGRTdGFnZSgnbnVrdCcpO1xuICAgICAgICBwbGFuLmFkZFN0YWdlKCdha2huJyk7XG4gICAgICAgIHBsYW4uYWRkU3RhZ2UoJ3JwaGYnLCBmYWxzZSk7XG4gICAgICAgIHBsYW4uYWRkU3RhZ2UoJ3JrcmYnKTtcbiAgICAgICAgcGxhbi5hZGRTdGFnZSgncHJlZicsIGZhbHNlKTtcbiAgICAgICAgcGxhbi5hZGRTdGFnZSgnYmx3ZicsIGZhbHNlKTtcbiAgICAgICAgcGxhbi5hZGRTdGFnZSgnYWJ2ZicsIGZhbHNlKTtcbiAgICAgICAgcGxhbi5hZGRTdGFnZSgnaGFsZicsIGZhbHNlKTtcbiAgICAgICAgcGxhbi5hZGRTdGFnZSgncHN0ZicsIGZhbHNlKTtcbiAgICAgICAgcGxhbi5hZGRTdGFnZSgndmF0dScpO1xuICAgICAgICBwbGFuLmFkZFN0YWdlKCdjamN0Jyk7XG4gICAgICAgIHBsYW4uYWRkU3RhZ2UoJ2NmYXInLCBmYWxzZSk7XG4gICAgICAgIHBsYW4uYWRkU3RhZ2UoJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGZpbmFsUmVvcmRlcmluZyk7XG4gICAgICAgIHBsYW4uYWRkU3RhZ2Uoe1xuICAgICAgICAgICAgbG9jYWw6IFtcbiAgICAgICAgICAgICAgICAnaW5pdCdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBnbG9iYWw6IFtcbiAgICAgICAgICAgICAgICAncHJlcycsXG4gICAgICAgICAgICAgICAgJ2FidnMnLFxuICAgICAgICAgICAgICAgICdibHdzJyxcbiAgICAgICAgICAgICAgICAncHN0cycsXG4gICAgICAgICAgICAgICAgJ2hhbG4nLFxuICAgICAgICAgICAgICAgICdkaXN0JyxcbiAgICAgICAgICAgICAgICAnYWJ2bScsXG4gICAgICAgICAgICAgICAgJ2Jsd20nLFxuICAgICAgICAgICAgICAgICdjYWx0JyxcbiAgICAgICAgICAgICAgICAnY2xpZydcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFNldHVwIHRoZSBpbmRpYyBjb25maWcgZm9yIHRoZSBzZWxlY3RlZCBzY3JpcHRcbiAgICAgICAgcGxhbi51bmljb2RlU2NyaXB0ID0gJDEzMGQxYTY0MmViY2QyYjckZXhwb3J0JGNlNTBlODJmMTJhODI3YTQocGxhbi5zY3JpcHQpO1xuICAgICAgICBwbGFuLmluZGljQ29uZmlnID0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRlOTlkMTE5ZGE3NmEwZmM1KVtwbGFuLnVuaWNvZGVTY3JpcHRdIHx8ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkZTk5ZDExOWRhNzZhMGZjNSkuRGVmYXVsdDtcbiAgICAgICAgcGxhbi5pc09sZFNwZWMgPSBwbGFuLmluZGljQ29uZmlnLmhhc09sZFNwZWMgJiYgcGxhbi5zY3JpcHRbcGxhbi5zY3JpcHQubGVuZ3RoIC0gMV0gIT09ICcyJztcbiAgICAvLyBUT0RPOiB0dXJuIG9mZiBrZXJuIChLaG1lcikgYW5kIGxpZ2EgZmVhdHVyZXMuXG4gICAgfVxuICAgIHN0YXRpYyBhc3NpZ25GZWF0dXJlcyhwbGFuLCBnbHlwaHMpIHtcbiAgICAgICAgLy8gRGVjb21wb3NlIHNwbGl0IG1hdHJhc1xuICAgICAgICAvLyBUT0RPOiBkbyB0aGlzIGluIGEgbW9yZSBnZW5lcmFsIHVuaWNvZGUgbm9ybWFsaXplclxuICAgICAgICBmb3IobGV0IGkgPSBnbHlwaHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pe1xuICAgICAgICAgICAgbGV0IGNvZGVwb2ludCA9IGdseXBoc1tpXS5jb2RlUG9pbnRzWzBdO1xuICAgICAgICAgICAgbGV0IGQgPSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGY2NDdjOWNmZGQ3N2Q5NWEpW2NvZGVwb2ludF0gfHwgJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGRlY29tcG9zaXRpb25zW2NvZGVwb2ludF07XG4gICAgICAgICAgICBpZiAoZCkge1xuICAgICAgICAgICAgICAgIGxldCBkZWNvbXBvc2VkID0gZC5tYXAoKGMpPT57XG4gICAgICAgICAgICAgICAgICAgIGxldCBnID0gcGxhbi5mb250LmdseXBoRm9yQ29kZVBvaW50KGMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3ICgwLCAkMTBlN2IyNTdlMWE5YTc1NiRleHBvcnQkMmUyYmNkODczOWFlMDM5KShwbGFuLmZvbnQsIGcuaWQsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNcbiAgICAgICAgICAgICAgICAgICAgXSwgZ2x5cGhzW2ldLmZlYXR1cmVzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBnbHlwaHMuc3BsaWNlKGksIDEsIC4uLmRlY29tcG9zZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuKDAsICQ1MlpJZiRfKSgkNzgyNmY5MGY2ZjBjZWNjOSRleHBvcnQkMmUyYmNkODczOWFlMDM5LCBcInplcm9NYXJrV2lkdGhzXCIsICdOT05FJyk7XG5mdW5jdGlvbiAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaW5kaWNDYXRlZ29yeShnbHlwaCkge1xuICAgIHJldHVybiAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkdHJpZS5nZXQoZ2x5cGguY29kZVBvaW50c1swXSkgPj4gODtcbn1cbmZ1bmN0aW9uICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpbmRpY1Bvc2l0aW9uKGdseXBoKSB7XG4gICAgcmV0dXJuIDEgPDwgKCQ3ODI2ZjkwZjZmMGNlY2M5JHZhciR0cmllLmdldChnbHlwaC5jb2RlUG9pbnRzWzBdKSAmIDB4ZmYpO1xufVxuY2xhc3MgJDc4MjZmOTBmNmYwY2VjYzkkdmFyJEluZGljSW5mbyB7XG4gICAgY29uc3RydWN0b3IoY2F0ZWdvcnksIHBvc2l0aW9uLCBzeWxsYWJsZVR5cGUsIHN5bGxhYmxlKXtcbiAgICAgICAgdGhpcy5jYXRlZ29yeSA9IGNhdGVnb3J5O1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgICAgIHRoaXMuc3lsbGFibGVUeXBlID0gc3lsbGFibGVUeXBlO1xuICAgICAgICB0aGlzLnN5bGxhYmxlID0gc3lsbGFibGU7XG4gICAgfVxufVxuZnVuY3Rpb24gJDc4MjZmOTBmNmYwY2VjYzkkdmFyJHNldHVwU3lsbGFibGVzKGZvbnQsIGdseXBocykge1xuICAgIGxldCBzeWxsYWJsZSA9IDA7XG4gICAgbGV0IGxhc3QgPSAwO1xuICAgIGZvciAobGV0IFtzdGFydCwgZW5kLCB0YWdzXSBvZiAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkc3RhdGVNYWNoaW5lLm1hdGNoKGdseXBocy5tYXAoJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGluZGljQ2F0ZWdvcnkpKSl7XG4gICAgICAgIGlmIChzdGFydCA+IGxhc3QpIHtcbiAgICAgICAgICAgICsrc3lsbGFibGU7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSBsYXN0OyBpIDwgc3RhcnQ7IGkrKylnbHlwaHNbaV0uc2hhcGVySW5mbyA9IG5ldyAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkSW5kaWNJbmZvKCgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuWCwgKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwKS5FbmQsICdub25faW5kaWNfY2x1c3RlcicsIHN5bGxhYmxlKTtcbiAgICAgICAgfVxuICAgICAgICArK3N5bGxhYmxlO1xuICAgICAgICAvLyBDcmVhdGUgc2hhcGVyIGluZm9cbiAgICAgICAgZm9yKGxldCBpID0gc3RhcnQ7IGkgPD0gZW5kOyBpKyspZ2x5cGhzW2ldLnNoYXBlckluZm8gPSBuZXcgJDc4MjZmOTBmNmYwY2VjYzkkdmFyJEluZGljSW5mbygxIDw8ICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpbmRpY0NhdGVnb3J5KGdseXBoc1tpXSksICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpbmRpY1Bvc2l0aW9uKGdseXBoc1tpXSksIHRhZ3NbMF0sIHN5bGxhYmxlKTtcbiAgICAgICAgbGFzdCA9IGVuZCArIDE7XG4gICAgfVxuICAgIGlmIChsYXN0IDwgZ2x5cGhzLmxlbmd0aCkge1xuICAgICAgICArK3N5bGxhYmxlO1xuICAgICAgICBmb3IobGV0IGkgPSBsYXN0OyBpIDwgZ2x5cGhzLmxlbmd0aDsgaSsrKWdseXBoc1tpXS5zaGFwZXJJbmZvID0gbmV3ICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRJbmRpY0luZm8oKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5YLCAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLkVuZCwgJ25vbl9pbmRpY19jbHVzdGVyJywgc3lsbGFibGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpc0NvbnNvbmFudChnbHlwaCkge1xuICAgIHJldHVybiBnbHlwaC5zaGFwZXJJbmZvLmNhdGVnb3J5ICYgKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQ4NTE5ZGVhYTdkZTJiMDcpO1xufVxuZnVuY3Rpb24gJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGlzSm9pbmVyKGdseXBoKSB7XG4gICAgcmV0dXJuIGdseXBoLnNoYXBlckluZm8uY2F0ZWdvcnkgJiAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGJiY2Q5Mjg3NjczMzhlMGQpO1xufVxuZnVuY3Rpb24gJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGlzSGFsYW50T3JDb2VuZyhnbHlwaCkge1xuICAgIHJldHVybiBnbHlwaC5zaGFwZXJJbmZvLmNhdGVnb3J5ICYgKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRjYTk1OTliMmEzMDBhZmMpO1xufVxuZnVuY3Rpb24gJDc4MjZmOTBmNmYwY2VjYzkkdmFyJHdvdWxkU3Vic3RpdHV0ZShnbHlwaHMsIGZlYXR1cmUpIHtcbiAgICBmb3IgKGxldCBnbHlwaCBvZiBnbHlwaHMpZ2x5cGguZmVhdHVyZXMgPSB7XG4gICAgICAgIFtmZWF0dXJlXTogdHJ1ZVxuICAgIH07XG4gICAgbGV0IEdTVUIgPSBnbHlwaHNbMF0uX2ZvbnQuX2xheW91dEVuZ2luZS5lbmdpbmUuR1NVQlByb2Nlc3NvcjtcbiAgICBHU1VCLmFwcGx5RmVhdHVyZXMoW1xuICAgICAgICBmZWF0dXJlXG4gICAgXSwgZ2x5cGhzKTtcbiAgICByZXR1cm4gZ2x5cGhzLmxlbmd0aCA9PT0gMTtcbn1cbmZ1bmN0aW9uICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRjb25zb25hbnRQb3NpdGlvbihmb250LCBjb25zb25hbnQsIHZpcmFtYSkge1xuICAgIGxldCBnbHlwaHMgPSBbXG4gICAgICAgIHZpcmFtYSxcbiAgICAgICAgY29uc29uYW50LFxuICAgICAgICB2aXJhbWFcbiAgICBdO1xuICAgIGlmICgkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkd291bGRTdWJzdGl0dXRlKGdseXBocy5zbGljZSgwLCAyKSwgJ2Jsd2YnKSB8fCAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkd291bGRTdWJzdGl0dXRlKGdseXBocy5zbGljZSgxLCAzKSwgJ2Jsd2YnKSkgcmV0dXJuICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuQmVsb3dfQztcbiAgICBlbHNlIGlmICgkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkd291bGRTdWJzdGl0dXRlKGdseXBocy5zbGljZSgwLCAyKSwgJ3BzdGYnKSB8fCAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkd291bGRTdWJzdGl0dXRlKGdseXBocy5zbGljZSgxLCAzKSwgJ3BzdGYnKSkgcmV0dXJuICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuUG9zdF9DO1xuICAgIGVsc2UgaWYgKCQ3ODI2ZjkwZjZmMGNlY2M5JHZhciR3b3VsZFN1YnN0aXR1dGUoZ2x5cGhzLnNsaWNlKDAsIDIpLCAncHJlZicpIHx8ICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciR3b3VsZFN1YnN0aXR1dGUoZ2x5cGhzLnNsaWNlKDEsIDMpLCAncHJlZicpKSByZXR1cm4gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwKS5Qb3N0X0M7XG4gICAgcmV0dXJuICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuQmFzZV9DO1xufVxuZnVuY3Rpb24gJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGluaXRpYWxSZW9yZGVyaW5nKGZvbnQsIGdseXBocywgcGxhbikge1xuICAgIGxldCBpbmRpY0NvbmZpZyA9IHBsYW4uaW5kaWNDb25maWc7XG4gICAgbGV0IGZlYXR1cmVzID0gZm9udC5fbGF5b3V0RW5naW5lLmVuZ2luZS5HU1VCUHJvY2Vzc29yLmZlYXR1cmVzO1xuICAgIGxldCBkb3R0ZWRDaXJjbGUgPSBmb250LmdseXBoRm9yQ29kZVBvaW50KDB4MjVjYykuaWQ7XG4gICAgbGV0IHZpcmFtYSA9IGZvbnQuZ2x5cGhGb3JDb2RlUG9pbnQoaW5kaWNDb25maWcudmlyYW1hKS5pZDtcbiAgICBpZiAodmlyYW1hKSB7XG4gICAgICAgIGxldCBpbmZvID0gbmV3ICgwLCAkMTBlN2IyNTdlMWE5YTc1NiRleHBvcnQkMmUyYmNkODczOWFlMDM5KShmb250LCB2aXJhbWEsIFtcbiAgICAgICAgICAgIGluZGljQ29uZmlnLnZpcmFtYVxuICAgICAgICBdKTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGdseXBocy5sZW5ndGg7IGkrKylpZiAoZ2x5cGhzW2ldLnNoYXBlckluZm8ucG9zaXRpb24gPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuQmFzZV9DKSBnbHlwaHNbaV0uc2hhcGVySW5mby5wb3NpdGlvbiA9ICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRjb25zb25hbnRQb3NpdGlvbihmb250LCBnbHlwaHNbaV0uY29weSgpLCBpbmZvKTtcbiAgICB9XG4gICAgZm9yKGxldCBzdGFydCA9IDAsIGVuZCA9ICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRuZXh0U3lsbGFibGUoZ2x5cGhzLCAwKTsgc3RhcnQgPCBnbHlwaHMubGVuZ3RoOyBzdGFydCA9IGVuZCwgZW5kID0gJDc4MjZmOTBmNmYwY2VjYzkkdmFyJG5leHRTeWxsYWJsZShnbHlwaHMsIHN0YXJ0KSl7XG4gICAgICAgIGxldCB7IGNhdGVnb3J5OiBjYXRlZ29yeSwgc3lsbGFibGVUeXBlOiBzeWxsYWJsZVR5cGUgfSA9IGdseXBoc1tzdGFydF0uc2hhcGVySW5mbztcbiAgICAgICAgaWYgKHN5bGxhYmxlVHlwZSA9PT0gJ3N5bWJvbF9jbHVzdGVyJyB8fCBzeWxsYWJsZVR5cGUgPT09ICdub25faW5kaWNfY2x1c3RlcicpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoc3lsbGFibGVUeXBlID09PSAnYnJva2VuX2NsdXN0ZXInICYmIGRvdHRlZENpcmNsZSkge1xuICAgICAgICAgICAgbGV0IGcgPSBuZXcgKDAsICQxMGU3YjI1N2UxYTlhNzU2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKGZvbnQsIGRvdHRlZENpcmNsZSwgW1xuICAgICAgICAgICAgICAgIDB4MjVjY1xuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBnLnNoYXBlckluZm8gPSBuZXcgJDc4MjZmOTBmNmYwY2VjYzkkdmFyJEluZGljSW5mbygxIDw8ICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpbmRpY0NhdGVnb3J5KGcpLCAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaW5kaWNQb3NpdGlvbihnKSwgZ2x5cGhzW3N0YXJ0XS5zaGFwZXJJbmZvLnN5bGxhYmxlVHlwZSwgZ2x5cGhzW3N0YXJ0XS5zaGFwZXJJbmZvLnN5bGxhYmxlKTtcbiAgICAgICAgICAgIC8vIEluc2VydCBhZnRlciBwb3NzaWJsZSBSZXBoYS5cbiAgICAgICAgICAgIGxldCBpID0gc3RhcnQ7XG4gICAgICAgICAgICB3aGlsZShpIDwgZW5kICYmIGdseXBoc1tpXS5zaGFwZXJJbmZvLmNhdGVnb3J5ID09PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGE1MTNlYTYxYTdiZWU5MWMpLlJlcGhhKWkrKztcbiAgICAgICAgICAgIGdseXBocy5zcGxpY2UoaSsrLCAwLCBnKTtcbiAgICAgICAgICAgIGVuZCsrO1xuICAgICAgICB9XG4gICAgICAgIC8vIDEuIEZpbmQgYmFzZSBjb25zb25hbnQ6XG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoZSBzaGFwaW5nIGVuZ2luZSBmaW5kcyB0aGUgYmFzZSBjb25zb25hbnQgb2YgdGhlIHN5bGxhYmxlLCB1c2luZyB0aGVcbiAgICAgICAgLy8gZm9sbG93aW5nIGFsZ29yaXRobTogc3RhcnRpbmcgZnJvbSB0aGUgZW5kIG9mIHRoZSBzeWxsYWJsZSwgbW92ZSBiYWNrd2FyZHNcbiAgICAgICAgLy8gdW50aWwgYSBjb25zb25hbnQgaXMgZm91bmQgdGhhdCBkb2VzIG5vdCBoYXZlIGEgYmVsb3ctYmFzZSBvciBwb3N0LWJhc2VcbiAgICAgICAgLy8gZm9ybSAocG9zdC1iYXNlIGZvcm1zIGhhdmUgdG8gZm9sbG93IGJlbG93LWJhc2UgZm9ybXMpLCBvciB0aGF0IGlzIG5vdCBhXG4gICAgICAgIC8vIHByZS1iYXNlIHJlb3JkZXJpbmcgUmEsIG9yIGFycml2ZSBhdCB0aGUgZmlyc3QgY29uc29uYW50LiBUaGUgY29uc29uYW50XG4gICAgICAgIC8vIHN0b3BwZWQgYXQgd2lsbCBiZSB0aGUgYmFzZS5cbiAgICAgICAgbGV0IGJhc2UgPSBlbmQ7XG4gICAgICAgIGxldCBsaW1pdCA9IHN0YXJ0O1xuICAgICAgICBsZXQgaGFzUmVwaCA9IGZhbHNlO1xuICAgICAgICAvLyBJZiB0aGUgc3lsbGFibGUgc3RhcnRzIHdpdGggUmEgKyBIYWxhbnQgKGluIGEgc2NyaXB0IHRoYXQgaGFzIFJlcGgpXG4gICAgICAgIC8vIGFuZCBoYXMgbW9yZSB0aGFuIG9uZSBjb25zb25hbnQsIFJhIGlzIGV4Y2x1ZGVkIGZyb20gY2FuZGlkYXRlcyBmb3JcbiAgICAgICAgLy8gYmFzZSBjb25zb25hbnRzLlxuICAgICAgICBpZiAoaW5kaWNDb25maWcucmVwaFBvcyAhPT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwKS5SYV9Ub19CZWNvbWVfUmVwaCAmJiBmZWF0dXJlcy5ycGhmICYmIHN0YXJ0ICsgMyA8PSBlbmQgJiYgKGluZGljQ29uZmlnLnJlcGhNb2RlID09PSAnSW1wbGljaXQnICYmICEkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNKb2luZXIoZ2x5cGhzW3N0YXJ0ICsgMl0pIHx8IGluZGljQ29uZmlnLnJlcGhNb2RlID09PSAnRXhwbGljaXQnICYmIGdseXBoc1tzdGFydCArIDJdLnNoYXBlckluZm8uY2F0ZWdvcnkgPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuWldKKSkge1xuICAgICAgICAgICAgLy8gU2VlIGlmIGl0IG1hdGNoZXMgdGhlICdycGhmJyBmZWF0dXJlLlxuICAgICAgICAgICAgbGV0IGcgPSBbXG4gICAgICAgICAgICAgICAgZ2x5cGhzW3N0YXJ0XS5jb3B5KCksXG4gICAgICAgICAgICAgICAgZ2x5cGhzW3N0YXJ0ICsgMV0uY29weSgpLFxuICAgICAgICAgICAgICAgIGdseXBoc1tzdGFydCArIDJdLmNvcHkoKVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGlmICgkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkd291bGRTdWJzdGl0dXRlKGcuc2xpY2UoMCwgMiksICdycGhmJykgfHwgaW5kaWNDb25maWcucmVwaE1vZGUgPT09ICdFeHBsaWNpdCcgJiYgJDc4MjZmOTBmNmYwY2VjYzkkdmFyJHdvdWxkU3Vic3RpdHV0ZShnLCAncnBoZicpKSB7XG4gICAgICAgICAgICAgICAgbGltaXQgKz0gMjtcbiAgICAgICAgICAgICAgICB3aGlsZShsaW1pdCA8IGVuZCAmJiAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNKb2luZXIoZ2x5cGhzW2xpbWl0XSkpbGltaXQrKztcbiAgICAgICAgICAgICAgICBiYXNlID0gc3RhcnQ7XG4gICAgICAgICAgICAgICAgaGFzUmVwaCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaW5kaWNDb25maWcucmVwaE1vZGUgPT09ICdMb2dfUmVwaGEnICYmIGdseXBoc1tzdGFydF0uc2hhcGVySW5mby5jYXRlZ29yeSA9PT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5SZXBoYSkge1xuICAgICAgICAgICAgbGltaXQrKztcbiAgICAgICAgICAgIHdoaWxlKGxpbWl0IDwgZW5kICYmICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpc0pvaW5lcihnbHlwaHNbbGltaXRdKSlsaW1pdCsrO1xuICAgICAgICAgICAgYmFzZSA9IHN0YXJ0O1xuICAgICAgICAgICAgaGFzUmVwaCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoKGluZGljQ29uZmlnLmJhc2VQb3Mpe1xuICAgICAgICAgICAgY2FzZSAnTGFzdCc6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAvLyBzdGFydGluZyBmcm9tIHRoZSBlbmQgb2YgdGhlIHN5bGxhYmxlLCBtb3ZlIGJhY2t3YXJkc1xuICAgICAgICAgICAgICAgICAgICBsZXQgaSA9IGVuZDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNlZW5CZWxvdyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5mbyA9IGdseXBoc1stLWldLnNoYXBlckluZm87XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB1bnRpbCBhIGNvbnNvbmFudCBpcyBmb3VuZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpc0NvbnNvbmFudChnbHlwaHNbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhhdCBkb2VzIG5vdCBoYXZlIGEgYmVsb3ctYmFzZSBvciBwb3N0LWJhc2UgZm9ybVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIChwb3N0LWJhc2UgZm9ybXMgaGF2ZSB0byBmb2xsb3cgYmVsb3ctYmFzZSBmb3JtcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8ucG9zaXRpb24gIT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuQmVsb3dfQyAmJiAoaW5mby5wb3NpdGlvbiAhPT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwKS5Qb3N0X0MgfHwgc2VlbkJlbG93KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9yIHRoYXQgaXMgbm90IGEgcHJlLWJhc2UgcmVvcmRlcmluZyBSYSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElNUExFTUVOVEFUSU9OIE5PVEVTOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3VyIHByZS1iYXNlIHJlb3JkZXJpbmcgUmEncyBhcmUgbWFya2VkIFBPU19QT1NUX0MsIHNvIHdpbGwgYmUgc2tpcHBlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ5IHRoZSBsb2dpYyBhYm92ZSBhbHJlYWR5LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3IgYXJyaXZlIGF0IHRoZSBmaXJzdCBjb25zb25hbnQuIFRoZSBjb25zb25hbnQgc3RvcHBlZCBhdCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmUgdGhlIGJhc2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8ucG9zaXRpb24gPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuQmVsb3dfQykgc2VlbkJlbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhcnQgPCBpICYmIGluZm8uY2F0ZWdvcnkgPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuWldKICYmIGdseXBoc1tpIC0gMV0uc2hhcGVySW5mby5jYXRlZ29yeSA9PT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5IKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfXdoaWxlIChpID4gbGltaXQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdGaXJzdCc6XG4gICAgICAgICAgICAgICAgLy8gVGhlIGZpcnN0IGNvbnNvbmFudCBpcyBhbHdheXMgdGhlIGJhc2UuXG4gICAgICAgICAgICAgICAgYmFzZSA9IHN0YXJ0O1xuICAgICAgICAgICAgICAgIC8vIE1hcmsgYWxsIHN1YnNlcXVlbnQgY29uc29uYW50cyBhcyBiZWxvdy5cbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSBiYXNlICsgMTsgaSA8IGVuZDsgaSsrKWlmICgkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNDb25zb25hbnQoZ2x5cGhzW2ldKSkgZ2x5cGhzW2ldLnNoYXBlckluZm8ucG9zaXRpb24gPSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLkJlbG93X0M7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlIHN5bGxhYmxlIHN0YXJ0cyB3aXRoIFJhICsgSGFsYW50IChpbiBhIHNjcmlwdCB0aGF0IGhhcyBSZXBoKVxuICAgICAgICAvLyBhbmQgaGFzIG1vcmUgdGhhbiBvbmUgY29uc29uYW50LCBSYSBpcyBleGNsdWRlZCBmcm9tIGNhbmRpZGF0ZXMgZm9yXG4gICAgICAgIC8vIGJhc2UgY29uc29uYW50cy5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gIE9ubHkgZG8gdGhpcyBmb3IgdW5mb3JjZWQgUmVwaC4gKGllLiBub3QgZm9yIFJhLEgsWldKKVxuICAgICAgICBpZiAoaGFzUmVwaCAmJiBiYXNlID09PSBzdGFydCAmJiBsaW1pdCAtIGJhc2UgPD0gMikgaGFzUmVwaCA9IGZhbHNlO1xuICAgICAgICAvLyAyLiBEZWNvbXBvc2UgYW5kIHJlb3JkZXIgTWF0cmFzOlxuICAgICAgICAvL1xuICAgICAgICAvLyBFYWNoIG1hdHJhIGFuZCBhbnkgc3lsbGFibGUgbW9kaWZpZXIgc2lnbiBpbiB0aGUgY2x1c3RlciBhcmUgbW92ZWQgdG8gdGhlXG4gICAgICAgIC8vIGFwcHJvcHJpYXRlIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSBjb25zb25hbnQocykgaW4gdGhlIGNsdXN0ZXIuIFRoZVxuICAgICAgICAvLyBzaGFwaW5nIGVuZ2luZSBkZWNvbXBvc2VzIHR3by0gb3IgdGhyZWUtcGFydCBtYXRyYXMgaW50byB0aGVpciBjb25zdGl0dWVudFxuICAgICAgICAvLyBwYXJ0cyBiZWZvcmUgYW55IHJlcG9zaXRpb25pbmcuIE1hdHJhIGNoYXJhY3RlcnMgYXJlIGNsYXNzaWZpZWQgYnkgd2hpY2hcbiAgICAgICAgLy8gY29uc29uYW50IGluIGEgY29uanVuY3QgdGhleSBoYXZlIGFmZmluaXR5IGZvciBhbmQgYXJlIHJlb3JkZXJlZCB0byB0aGVcbiAgICAgICAgLy8gZm9sbG93aW5nIHBvc2l0aW9uczpcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICBvIEJlZm9yZSBmaXJzdCBoYWxmIGZvcm0gaW4gdGhlIHN5bGxhYmxlXG4gICAgICAgIC8vICAgbyBBZnRlciBzdWJqb2luZWQgY29uc29uYW50c1xuICAgICAgICAvLyAgIG8gQWZ0ZXIgcG9zdC1mb3JtIGNvbnNvbmFudFxuICAgICAgICAvLyAgIG8gQWZ0ZXIgbWFpbiBjb25zb25hbnQgKGZvciBhYm92ZSBtYXJrcylcbiAgICAgICAgLy9cbiAgICAgICAgLy8gSU1QTEVNRU5UQVRJT04gTk9URVM6XG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoZSBub3JtYWxpemUoKSByb3V0aW5lIGhhcyBhbHJlYWR5IGRlY29tcG9zZWQgbWF0cmFzIGZvciB1cywgc28gd2UgZG9uJ3RcbiAgICAgICAgLy8gbmVlZCB0byB3b3JyeSBhYm91dCB0aGF0LlxuICAgICAgICAvLyAzLiAgUmVvcmRlciBtYXJrcyB0byBjYW5vbmljYWwgb3JkZXI6XG4gICAgICAgIC8vXG4gICAgICAgIC8vIEFkamFjZW50IG51a3RhIGFuZCBoYWxhbnQgb3IgbnVrdGEgYW5kIHZlZGljIHNpZ24gYXJlIGFsd2F5cyByZXBvc2l0aW9uZWRcbiAgICAgICAgLy8gaWYgbmVjZXNzYXJ5LCBzbyB0aGF0IHRoZSBudWt0YSBpcyBmaXJzdC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gSU1QTEVNRU5UQVRJT04gTk9URVM6XG4gICAgICAgIC8vXG4gICAgICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gZG8gdGhpczogdGhlIG5vcm1hbGl6ZSgpIHJvdXRpbmUgYWxyZWFkeSBkaWQgdGhpcyBmb3IgdXMuXG4gICAgICAgIC8vIFJlb3JkZXIgY2hhcmFjdGVyc1xuICAgICAgICBmb3IobGV0IGkgPSBzdGFydDsgaSA8IGJhc2U7IGkrKyl7XG4gICAgICAgICAgICBsZXQgaW5mbyA9IGdseXBoc1tpXS5zaGFwZXJJbmZvO1xuICAgICAgICAgICAgaW5mby5wb3NpdGlvbiA9IE1hdGgubWluKCgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuUHJlX0MsIGluZm8ucG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiYXNlIDwgZW5kKSBnbHlwaHNbYmFzZV0uc2hhcGVySW5mby5wb3NpdGlvbiA9ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuQmFzZV9DO1xuICAgICAgICAvLyBNYXJrIGZpbmFsIGNvbnNvbmFudHMuICBBIGZpbmFsIGNvbnNvbmFudCBpcyBvbmUgYXBwZWFyaW5nIGFmdGVyIGEgbWF0cmEsXG4gICAgICAgIC8vIGxpa2UgaW4gS2htZXIuXG4gICAgICAgIGZvcihsZXQgaSA9IGJhc2UgKyAxOyBpIDwgZW5kOyBpKyspaWYgKGdseXBoc1tpXS5zaGFwZXJJbmZvLmNhdGVnb3J5ID09PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGE1MTNlYTYxYTdiZWU5MWMpLk0pIHtcbiAgICAgICAgICAgIGZvcihsZXQgaiA9IGkgKyAxOyBqIDwgZW5kOyBqKyspaWYgKCQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpc0NvbnNvbmFudChnbHlwaHNbal0pKSB7XG4gICAgICAgICAgICAgICAgZ2x5cGhzW2pdLnNoYXBlckluZm8ucG9zaXRpb24gPSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLkZpbmFsX0M7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBIYW5kbGUgYmVnaW5uaW5nIFJhXG4gICAgICAgIGlmIChoYXNSZXBoKSBnbHlwaHNbc3RhcnRdLnNoYXBlckluZm8ucG9zaXRpb24gPSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLlJhX1RvX0JlY29tZV9SZXBoO1xuICAgICAgICAvLyBGb3Igb2xkLXN0eWxlIEluZGljIHNjcmlwdCB0YWdzLCBtb3ZlIHRoZSBmaXJzdCBwb3N0LWJhc2UgSGFsYW50IGFmdGVyXG4gICAgICAgIC8vIGxhc3QgY29uc29uYW50LlxuICAgICAgICAvL1xuICAgICAgICAvLyBSZXBvcnRzIHN1Z2dlc3QgdGhhdCBpbiBzb21lIHNjcmlwdHMgVW5pc2NyaWJlIGRvZXMgdGhpcyBvbmx5IGlmIHRoZXJlXG4gICAgICAgIC8vIGlzICpub3QqIGEgSGFsYW50IGFmdGVyIGxhc3QgY29uc29uYW50IGFscmVhZHkgKGVnLiBLYW5uYWRhKSwgd2hpbGUgaXRcbiAgICAgICAgLy8gZG9lcyBpdCB1bmNvbmRpdGlvbmFsbHkgaW4gb3RoZXIgc2NyaXB0cyAoZWcuIE1hbGF5YWxhbSkuICBXZSBkb24ndFxuICAgICAgICAvLyBjdXJyZW50bHkga25vdyBhYm91dCBvdGhlciBzY3JpcHRzLCBzbyB3ZSBzaW5nbGUgb3V0IE1hbGF5YWxhbSBmb3Igbm93LlxuICAgICAgICAvL1xuICAgICAgICAvLyBLYW5uYWRhIHRlc3QgY2FzZTpcbiAgICAgICAgLy8gVSswQzlBLFUrMENDRCxVKzBDOUEsVSswQ0NEXG4gICAgICAgIC8vIFdpdGggc29tZSB2ZXJzaW9ucyBvZiBMb2hpdCBLYW5uYWRhLlxuICAgICAgICAvLyBodHRwczovL2J1Z3MuZnJlZWRlc2t0b3Aub3JnL3Nob3dfYnVnLmNnaT9pZD01OTExOFxuICAgICAgICAvL1xuICAgICAgICAvLyBNYWxheWFsYW0gdGVzdCBjYXNlOlxuICAgICAgICAvLyBVKzBEMzgsVSswRDRELFUrMEQzMSxVKzBENEQsVSswRDMxLFUrMEQ0RFxuICAgICAgICAvLyBXaXRoIGxvaGl0LXR0Zi0yMDEyMTEyMi9Mb2hpdC1NYWxheWFsYW0udHRmXG4gICAgICAgIGlmIChwbGFuLmlzT2xkU3BlYykge1xuICAgICAgICAgICAgbGV0IGRpc2FsbG93RG91YmxlSGFsYW50cyA9IHBsYW4udW5pY29kZVNjcmlwdCAhPT0gJ01hbGF5YWxhbSc7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSBiYXNlICsgMTsgaSA8IGVuZDsgaSsrKWlmIChnbHlwaHNbaV0uc2hhcGVySW5mby5jYXRlZ29yeSA9PT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5IKSB7XG4gICAgICAgICAgICAgICAgbGV0IGo7XG4gICAgICAgICAgICAgICAgZm9yKGogPSBlbmQgLSAxOyBqID4gaTsgai0tKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpc0NvbnNvbmFudChnbHlwaHNbal0pIHx8IGRpc2FsbG93RG91YmxlSGFsYW50cyAmJiBnbHlwaHNbal0uc2hhcGVySW5mby5jYXRlZ29yeSA9PT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5IKSBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGdseXBoc1tqXS5zaGFwZXJJbmZvLmNhdGVnb3J5ICE9PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGE1MTNlYTYxYTdiZWU5MWMpLkggJiYgaiA+IGkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTW92ZSBIYWxhbnQgdG8gYWZ0ZXIgbGFzdCBjb25zb25hbnQuXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ID0gZ2x5cGhzW2ldO1xuICAgICAgICAgICAgICAgICAgICBnbHlwaHMuc3BsaWNlKGksIDAsIC4uLmdseXBocy5zcGxpY2UoaSArIDEsIGogLSBpKSk7XG4gICAgICAgICAgICAgICAgICAgIGdseXBoc1tqXSA9IHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEF0dGFjaCBtaXNjIG1hcmtzIHRvIHByZXZpb3VzIGNoYXIgdG8gbW92ZSB3aXRoIHRoZW0uXG4gICAgICAgIGxldCBsYXN0UG9zID0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwKS5TdGFydDtcbiAgICAgICAgZm9yKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKyl7XG4gICAgICAgICAgICBsZXQgaW5mbyA9IGdseXBoc1tpXS5zaGFwZXJJbmZvO1xuICAgICAgICAgICAgaWYgKGluZm8uY2F0ZWdvcnkgJiAoKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRiYmNkOTI4NzY3MzM4ZTBkKSB8ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuTiB8ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuUlMgfCAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGE1MTNlYTYxYTdiZWU5MWMpLkNNIHwgKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRjYTk1OTliMmEzMDBhZmMpICYgaW5mby5jYXRlZ29yeSkpIHtcbiAgICAgICAgICAgICAgICBpbmZvLnBvc2l0aW9uID0gbGFzdFBvcztcbiAgICAgICAgICAgICAgICBpZiAoaW5mby5jYXRlZ29yeSA9PT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5IICYmIGluZm8ucG9zaXRpb24gPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuUHJlX00pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVW5pc2NyaWJlIGRvZXNuJ3QgbW92ZSB0aGUgSGFsYW50IHdpdGggTGVmdCBNYXRyYS5cbiAgICAgICAgICAgICAgICAgICAgLy8gVEVTVDogVSswOTJCLFUrMDkzRixVKzA5NERFXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGZvbGxvdy4gIFRoaXMgaXMgaW1wb3J0YW50IGZvciB0aGUgU2luaGFsYVxuICAgICAgICAgICAgICAgICAgICAvLyBVKzBEREEgc3BsaXQgbWF0cmEgc2luY2UgaXQgZGVjb21wb3NlcyB0byBVKzBERDksVSswRENBXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZXJlIFUrMEREOSBpcyBhIGxlZnQgbWF0cmEgYW5kIFUrMERDQSBpcyB0aGUgdmlyYW1hLlxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRvIG1vdmUgdGhlIHZpcmFtYSB3aXRoIHRoZSBsZWZ0IG1hdHJhLlxuICAgICAgICAgICAgICAgICAgICAvLyBURVNUOiBVKzBEOUEsVSswRERBXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaiA9IGk7IGogPiBzdGFydDsgai0tKWlmIChnbHlwaHNbaiAtIDFdLnNoYXBlckluZm8ucG9zaXRpb24gIT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuUHJlX00pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZm8ucG9zaXRpb24gPSBnbHlwaHNbaiAtIDFdLnNoYXBlckluZm8ucG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5mby5wb3NpdGlvbiAhPT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwKS5TTVZEKSBsYXN0UG9zID0gaW5mby5wb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICAvLyBGb3IgcG9zdC1iYXNlIGNvbnNvbmFudHMgbGV0IHRoZW0gb3duIGFueXRoaW5nIGJlZm9yZSB0aGVtXG4gICAgICAgIC8vIHNpbmNlIHRoZSBsYXN0IGNvbnNvbmFudCBvciBtYXRyYS5cbiAgICAgICAgbGV0IGxhc3QgPSBiYXNlO1xuICAgICAgICBmb3IobGV0IGkgPSBiYXNlICsgMTsgaSA8IGVuZDsgaSsrKXtcbiAgICAgICAgICAgIGlmICgkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNDb25zb25hbnQoZ2x5cGhzW2ldKSkge1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaiA9IGxhc3QgKyAxOyBqIDwgaTsgaisrKWlmIChnbHlwaHNbal0uc2hhcGVySW5mby5wb3NpdGlvbiA8ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuU01WRCkgZ2x5cGhzW2pdLnNoYXBlckluZm8ucG9zaXRpb24gPSBnbHlwaHNbaV0uc2hhcGVySW5mby5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICBsYXN0ID0gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZ2x5cGhzW2ldLnNoYXBlckluZm8uY2F0ZWdvcnkgPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuTSkgbGFzdCA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFyciA9IGdseXBocy5zbGljZShzdGFydCwgZW5kKTtcbiAgICAgICAgYXJyLnNvcnQoKGEsIGIpPT5hLnNoYXBlckluZm8ucG9zaXRpb24gLSBiLnNoYXBlckluZm8ucG9zaXRpb24pO1xuICAgICAgICBnbHlwaHMuc3BsaWNlKHN0YXJ0LCBhcnIubGVuZ3RoLCAuLi5hcnIpO1xuICAgICAgICAvLyBGaW5kIGJhc2UgYWdhaW5cbiAgICAgICAgZm9yKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKylpZiAoZ2x5cGhzW2ldLnNoYXBlckluZm8ucG9zaXRpb24gPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuQmFzZV9DKSB7XG4gICAgICAgICAgICBiYXNlID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldHVwIGZlYXR1cmVzIG5vd1xuICAgICAgICAvLyBSZXBoXG4gICAgICAgIGZvcihsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kICYmIGdseXBoc1tpXS5zaGFwZXJJbmZvLnBvc2l0aW9uID09PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLlJhX1RvX0JlY29tZV9SZXBoOyBpKyspZ2x5cGhzW2ldLmZlYXR1cmVzLnJwaGYgPSB0cnVlO1xuICAgICAgICAvLyBQcmUtYmFzZVxuICAgICAgICBsZXQgYmx3ZiA9ICFwbGFuLmlzT2xkU3BlYyAmJiBpbmRpY0NvbmZpZy5ibHdmTW9kZSA9PT0gJ1ByZV9BbmRfUG9zdCc7XG4gICAgICAgIGZvcihsZXQgaSA9IHN0YXJ0OyBpIDwgYmFzZTsgaSsrKXtcbiAgICAgICAgICAgIGdseXBoc1tpXS5mZWF0dXJlcy5oYWxmID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChibHdmKSBnbHlwaHNbaV0uZmVhdHVyZXMuYmx3ZiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUG9zdC1iYXNlXG4gICAgICAgIGZvcihsZXQgaSA9IGJhc2UgKyAxOyBpIDwgZW5kOyBpKyspe1xuICAgICAgICAgICAgZ2x5cGhzW2ldLmZlYXR1cmVzLmFidmYgPSB0cnVlO1xuICAgICAgICAgICAgZ2x5cGhzW2ldLmZlYXR1cmVzLnBzdGYgPSB0cnVlO1xuICAgICAgICAgICAgZ2x5cGhzW2ldLmZlYXR1cmVzLmJsd2YgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwbGFuLmlzT2xkU3BlYyAmJiBwbGFuLnVuaWNvZGVTY3JpcHQgPT09ICdEZXZhbmFnYXJpJykge1xuICAgICAgICAgICAgLy8gT2xkLXNwZWMgZXllLWxhc2ggUmEgbmVlZHMgc3BlY2lhbCBoYW5kbGluZy4gIEZyb20gdGhlXG4gICAgICAgICAgICAvLyBzcGVjOlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIFwiVGhlIGZlYXR1cmUgJ2JlbG93LWJhc2UgZm9ybScgaXMgYXBwbGllZCB0byBjb25zb25hbnRzXG4gICAgICAgICAgICAvLyBoYXZpbmcgYmVsb3ctYmFzZSBmb3JtcyBhbmQgZm9sbG93aW5nIHRoZSBiYXNlIGNvbnNvbmFudC5cbiAgICAgICAgICAgIC8vIFRoZSBleGNlcHRpb24gaXMgdmF0dHUsIHdoaWNoIG1heSBhcHBlYXIgYmVsb3cgaGFsZiBmb3Jtc1xuICAgICAgICAgICAgLy8gYXMgd2VsbCBhcyBiZWxvdyB0aGUgYmFzZSBnbHlwaC4gVGhlIGZlYXR1cmUgJ2JlbG93LWJhc2VcbiAgICAgICAgICAgIC8vIGZvcm0nIHdpbGwgYmUgYXBwbGllZCB0byBhbGwgc3VjaCBvY2N1cnJlbmNlcyBvZiBSYSBhcyB3ZWxsLlwiXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gVGVzdCBjYXNlOiBVKzA5MjQsVSswOTRELFUrMDkzMCxVKzA5NGQsVSswOTE1XG4gICAgICAgICAgICAvLyB3aXRoIFNhbnNrcml0IDIwMDMgZm9udC5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBIb3dldmVyLCBub3RlIHRoYXQgUmEsSGFsYW50LFpXSiBpcyB0aGUgY29ycmVjdCB3YXkgdG9cbiAgICAgICAgICAgIC8vIHJlcXVlc3QgZXllbGFzaCBmb3JtIG9mIFJhLCBzbyB3ZSB3b3VsZGJuJ3QgaW5oaWJpdCBpdFxuICAgICAgICAgICAgLy8gaW4gdGhhdCBzZXF1ZW5jZS5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBUZXN0IGNhc2U6IFUrMDkyNCxVKzA5NEQsVSswOTMwLFUrMDk0ZCxVKzIwMEQsVSswOTE1XG4gICAgICAgICAgICBmb3IobGV0IGkgPSBzdGFydDsgaSArIDEgPCBiYXNlOyBpKyspaWYgKGdseXBoc1tpXS5zaGFwZXJJbmZvLmNhdGVnb3J5ID09PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGE1MTNlYTYxYTdiZWU5MWMpLlJhICYmIGdseXBoc1tpICsgMV0uc2hhcGVySW5mby5jYXRlZ29yeSA9PT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5IICYmIChpICsgMSA9PT0gYmFzZSB8fCBnbHlwaHNbaSArIDJdLnNoYXBlckluZm8uY2F0ZWdvcnkgPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuWldKKSkge1xuICAgICAgICAgICAgICAgIGdseXBoc1tpXS5mZWF0dXJlcy5ibHdmID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBnbHlwaHNbaSArIDFdLmZlYXR1cmVzLmJsd2YgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBwcmVmTGVuID0gMjtcbiAgICAgICAgaWYgKGZlYXR1cmVzLnByZWYgJiYgYmFzZSArIHByZWZMZW4gPCBlbmQpIC8vIEZpbmQgYSBIYWxhbnQsUmEgc2VxdWVuY2UgYW5kIG1hcmsgaXQgZm9yIHByZS1iYXNlIHJlb3JkZXJpbmcgcHJvY2Vzc2luZy5cbiAgICAgICAgZm9yKGxldCBpID0gYmFzZSArIDE7IGkgKyBwcmVmTGVuIC0gMSA8IGVuZDsgaSsrKXtcbiAgICAgICAgICAgIGxldCBnID0gW1xuICAgICAgICAgICAgICAgIGdseXBoc1tpXS5jb3B5KCksXG4gICAgICAgICAgICAgICAgZ2x5cGhzW2kgKyAxXS5jb3B5KClcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBpZiAoJDc4MjZmOTBmNmYwY2VjYzkkdmFyJHdvdWxkU3Vic3RpdHV0ZShnLCAncHJlZicpKSB7XG4gICAgICAgICAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IHByZWZMZW47IGorKylnbHlwaHNbaSsrXS5mZWF0dXJlcy5wcmVmID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAvLyBNYXJrIHRoZSBzdWJzZXF1ZW50IHN0dWZmIHdpdGggJ2NmYXInLiAgVXNlZCBpbiBLaG1lci5cbiAgICAgICAgICAgICAgICAvLyBSZWFkIHRoZSBmZWF0dXJlIHNwZWMuXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBhbGxvd3MgZGlzdGluZ3Vpc2hpbmcgdGhlIGZvbGxvd2luZyBjYXNlcyB3aXRoIE1TIEtobWVyIGZvbnRzOlxuICAgICAgICAgICAgICAgIC8vIFUrMTc4NCxVKzE3RDIsVSsxNzlBLFUrMTdEMixVKzE3ODJcbiAgICAgICAgICAgICAgICAvLyBVKzE3ODQsVSsxN0QyLFUrMTc4MixVKzE3RDIsVSsxNzlBXG4gICAgICAgICAgICAgICAgaWYgKGZlYXR1cmVzLmNmYXIpIGZvcig7IGkgPCBlbmQ7IGkrKylnbHlwaHNbaV0uZmVhdHVyZXMuY2ZhciA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQXBwbHkgWldKL1pXTkogZWZmZWN0c1xuICAgICAgICBmb3IobGV0IGkgPSBzdGFydCArIDE7IGkgPCBlbmQ7IGkrKylpZiAoJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGlzSm9pbmVyKGdseXBoc1tpXSkpIHtcbiAgICAgICAgICAgIGxldCBub25Kb2luZXIgPSBnbHlwaHNbaV0uc2hhcGVySW5mby5jYXRlZ29yeSA9PT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5aV05KO1xuICAgICAgICAgICAgbGV0IGogPSBpO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGotLTtcbiAgICAgICAgICAgICAgICAvLyBaV0ovWldOSiBzaG91bGQgZGlzYWJsZSBDSkNULiAgVGhleSBkbyB0aGF0IGJ5IHNpbXBseVxuICAgICAgICAgICAgICAgIC8vIGJlaW5nIHRoZXJlLCBzaW5jZSB3ZSBkb24ndCBza2lwIHRoZW0gZm9yIHRoZSBDSkNUXG4gICAgICAgICAgICAgICAgLy8gZmVhdHVyZSAoaWUuIEZfTUFOVUFMX1pXSilcbiAgICAgICAgICAgICAgICAvLyBBIFpXTkogZGlzYWJsZXMgSEFMRi5cbiAgICAgICAgICAgICAgICBpZiAobm9uSm9pbmVyKSBkZWxldGUgZ2x5cGhzW2pdLmZlYXR1cmVzLmhhbGY7XG4gICAgICAgICAgICB9d2hpbGUgKGogPiBzdGFydCAmJiAhJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGlzQ29uc29uYW50KGdseXBoc1tqXSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGZpbmFsUmVvcmRlcmluZyhmb250LCBnbHlwaHMsIHBsYW4pIHtcbiAgICBsZXQgaW5kaWNDb25maWcgPSBwbGFuLmluZGljQ29uZmlnO1xuICAgIGxldCBmZWF0dXJlcyA9IGZvbnQuX2xheW91dEVuZ2luZS5lbmdpbmUuR1NVQlByb2Nlc3Nvci5mZWF0dXJlcztcbiAgICBmb3IobGV0IHN0YXJ0ID0gMCwgZW5kID0gJDc4MjZmOTBmNmYwY2VjYzkkdmFyJG5leHRTeWxsYWJsZShnbHlwaHMsIDApOyBzdGFydCA8IGdseXBocy5sZW5ndGg7IHN0YXJ0ID0gZW5kLCBlbmQgPSAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkbmV4dFN5bGxhYmxlKGdseXBocywgc3RhcnQpKXtcbiAgICAgICAgLy8gNC4gRmluYWwgcmVvcmRlcmluZzpcbiAgICAgICAgLy9cbiAgICAgICAgLy8gQWZ0ZXIgdGhlIGxvY2FsaXplZCBmb3JtcyBhbmQgYmFzaWMgc2hhcGluZyBmb3JtcyBHU1VCIGZlYXR1cmVzIGhhdmUgYmVlblxuICAgICAgICAvLyBhcHBsaWVkIChzZWUgYmVsb3cpLCB0aGUgc2hhcGluZyBlbmdpbmUgcGVyZm9ybXMgc29tZSBmaW5hbCBnbHlwaFxuICAgICAgICAvLyByZW9yZGVyaW5nIGJlZm9yZSBhcHBseWluZyBhbGwgdGhlIHJlbWFpbmluZyBmb250IGZlYXR1cmVzIHRvIHRoZSBlbnRpcmVcbiAgICAgICAgLy8gY2x1c3Rlci5cbiAgICAgICAgbGV0IHRyeVByZWYgPSAhIWZlYXR1cmVzLnByZWY7XG4gICAgICAgIC8vIEZpbmQgYmFzZSBhZ2FpblxuICAgICAgICBsZXQgYmFzZSA9IHN0YXJ0O1xuICAgICAgICBmb3IoOyBiYXNlIDwgZW5kOyBiYXNlKyspaWYgKGdseXBoc1tiYXNlXS5zaGFwZXJJbmZvLnBvc2l0aW9uID49ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuQmFzZV9DKSB7XG4gICAgICAgICAgICBpZiAodHJ5UHJlZiAmJiBiYXNlICsgMSA8IGVuZCkge1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IGJhc2UgKyAxOyBpIDwgZW5kOyBpKyspaWYgKGdseXBoc1tpXS5mZWF0dXJlcy5wcmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGdseXBoc1tpXS5zdWJzdGl0dXRlZCAmJiBnbHlwaHNbaV0uaXNMaWdhdGVkICYmICFnbHlwaHNbaV0uaXNNdWx0aXBsaWVkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT2ssIHRoaXMgd2FzIGEgJ3ByZWYnIGNhbmRpZGF0ZSBidXQgZGlkbid0IGZvcm0gYW55LlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmFzZSBpcyBhcm91bmQgaGVyZS4uLlxuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZSA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShiYXNlIDwgZW5kICYmICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpc0hhbGFudE9yQ29lbmcoZ2x5cGhzW2Jhc2VdKSliYXNlKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbHlwaHNbYmFzZV0uc2hhcGVySW5mby5wb3NpdGlvbiA9ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuQkFTRV9DO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5UHJlZiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZvciBNYWxheWFsYW0sIHNraXAgb3ZlciB1bmZvcm1lZCBiZWxvdy0gKGJ1dCBOT1QgcG9zdC0pIGZvcm1zLlxuICAgICAgICAgICAgaWYgKHBsYW4udW5pY29kZVNjcmlwdCA9PT0gJ01hbGF5YWxhbScpIGZvcihsZXQgaSA9IGJhc2UgKyAxOyBpIDwgZW5kOyBpKyspe1xuICAgICAgICAgICAgICAgIHdoaWxlKGkgPCBlbmQgJiYgJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGlzSm9pbmVyKGdseXBoc1tpXSkpaSsrO1xuICAgICAgICAgICAgICAgIGlmIChpID09PSBlbmQgfHwgISQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpc0hhbGFudE9yQ29lbmcoZ2x5cGhzW2ldKSkgYnJlYWs7XG4gICAgICAgICAgICAgICAgaSsrOyAvLyBTa2lwIGhhbGFudC5cbiAgICAgICAgICAgICAgICB3aGlsZShpIDwgZW5kICYmICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpc0pvaW5lcihnbHlwaHNbaV0pKWkrKztcbiAgICAgICAgICAgICAgICBpZiAoaSA8IGVuZCAmJiAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNDb25zb25hbnQoZ2x5cGhzW2ldKSAmJiBnbHlwaHNbaV0uc2hhcGVySW5mby5wb3NpdGlvbiA9PT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwKS5CZWxvd19DKSB7XG4gICAgICAgICAgICAgICAgICAgIGJhc2UgPSBpO1xuICAgICAgICAgICAgICAgICAgICBnbHlwaHNbYmFzZV0uc2hhcGVySW5mby5wb3NpdGlvbiA9ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuQmFzZV9DO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGFydCA8IGJhc2UgJiYgZ2x5cGhzW2Jhc2VdLnNoYXBlckluZm8ucG9zaXRpb24gPiAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLkJhc2VfQykgYmFzZS0tO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJhc2UgPT09IGVuZCAmJiBzdGFydCA8IGJhc2UgJiYgZ2x5cGhzW2Jhc2UgLSAxXS5zaGFwZXJJbmZvLmNhdGVnb3J5ID09PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGE1MTNlYTYxYTdiZWU5MWMpLlpXSikgYmFzZS0tO1xuICAgICAgICBpZiAoYmFzZSA8IGVuZCkgd2hpbGUoc3RhcnQgPCBiYXNlICYmIGdseXBoc1tiYXNlXS5zaGFwZXJJbmZvLmNhdGVnb3J5ICYgKCgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuTiB8ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkY2E5NTk5YjJhMzAwYWZjKSkpYmFzZS0tO1xuICAgICAgICAvLyBvIFJlb3JkZXIgbWF0cmFzOlxuICAgICAgICAvL1xuICAgICAgICAvLyBJZiBhIHByZS1iYXNlIG1hdHJhIGNoYXJhY3RlciBoYWQgYmVlbiByZW9yZGVyZWQgYmVmb3JlIGFwcGx5aW5nIGJhc2ljXG4gICAgICAgIC8vIGZlYXR1cmVzLCB0aGUgZ2x5cGggY2FuIGJlIG1vdmVkIGNsb3NlciB0byB0aGUgbWFpbiBjb25zb25hbnQgYmFzZWQgb25cbiAgICAgICAgLy8gd2hldGhlciBoYWxmLWZvcm1zIGhhZCBiZWVuIGZvcm1lZC4gQWN0dWFsIHBvc2l0aW9uIGZvciB0aGUgbWF0cmEgaXNcbiAgICAgICAgLy8gZGVmaW5lZCBhcyDigJxhZnRlciBsYXN0IHN0YW5kYWxvbmUgaGFsYW50IGdseXBoLCBhZnRlciBpbml0aWFsIG1hdHJhXG4gICAgICAgIC8vIHBvc2l0aW9uIGFuZCBiZWZvcmUgdGhlIG1haW4gY29uc29uYW504oCdLiBJZiBaV0ogb3IgWldOSiBmb2xsb3cgdGhpc1xuICAgICAgICAvLyBoYWxhbnQsIHBvc2l0aW9uIGlzIG1vdmVkIGFmdGVyIGl0LlxuICAgICAgICAvL1xuICAgICAgICBpZiAoc3RhcnQgKyAxIDwgZW5kICYmIHN0YXJ0IDwgYmFzZSkge1xuICAgICAgICAgICAgLy8gSWYgd2UgbG9zdCB0cmFjayBvZiBiYXNlLCBhbGFzLCBwb3NpdGlvbiBiZWZvcmUgbGFzdCB0aGluZ3kuXG4gICAgICAgICAgICBsZXQgbmV3UG9zID0gYmFzZSA9PT0gZW5kID8gYmFzZSAtIDIgOiBiYXNlIC0gMTtcbiAgICAgICAgICAgIC8vIE1hbGF5YWxhbSAvIFRhbWlsIGRvIG5vdCBoYXZlIFwiaGFsZlwiIGZvcm1zIG9yIGV4cGxpY2l0IHZpcmFtYSBmb3Jtcy5cbiAgICAgICAgICAgIC8vIFRoZSBnbHlwaHMgZm9ybWVkIGJ5ICdoYWxmJyBhcmUgQ2hpbGx1cyBvciBsaWdhdGVkIGV4cGxpY2l0IHZpcmFtYXMuXG4gICAgICAgICAgICAvLyBXZSB3YW50IHRvIHBvc2l0aW9uIG1hdHJhIGFmdGVyIHRoZW0uXG4gICAgICAgICAgICBpZiAocGxhbi51bmljb2RlU2NyaXB0ICE9PSAnTWFsYXlhbGFtJyAmJiBwbGFuLnVuaWNvZGVTY3JpcHQgIT09ICdUYW1pbCcpIHtcbiAgICAgICAgICAgICAgICB3aGlsZShuZXdQb3MgPiBzdGFydCAmJiAhKGdseXBoc1tuZXdQb3NdLnNoYXBlckluZm8uY2F0ZWdvcnkgJiAoKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5NIHwgKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRjYTk1OTliMmEzMDBhZmMpKSkpbmV3UG9zLS07XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgZm91bmQgbm8gSGFsYW50IHdlIGFyZSBkb25lLlxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSBvbmx5IHByb2NlZWQgaWYgdGhlIEhhbGFudCBkb2VzXG4gICAgICAgICAgICAgICAgLy8gbm90IGJlbG9uZyB0byB0aGUgTWF0cmEgaXRzZWxmIVxuICAgICAgICAgICAgICAgIGlmICgkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNIYWxhbnRPckNvZW5nKGdseXBoc1tuZXdQb3NdKSAmJiBnbHlwaHNbbmV3UG9zXS5zaGFwZXJJbmZvLnBvc2l0aW9uICE9PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLlByZV9NKSAvLyBJZiBaV0ogb3IgWldOSiBmb2xsb3cgdGhpcyBoYWxhbnQsIHBvc2l0aW9uIGlzIG1vdmVkIGFmdGVyIGl0LlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1BvcyArIDEgPCBlbmQgJiYgJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGlzSm9pbmVyKGdseXBoc1tuZXdQb3MgKyAxXSkpIG5ld1BvcysrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBuZXdQb3MgPSBzdGFydDsgLy8gTm8gbW92ZS5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGFydCA8IG5ld1BvcyAmJiBnbHlwaHNbbmV3UG9zXS5zaGFwZXJJbmZvLnBvc2l0aW9uICE9PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLlByZV9NKSB7XG4gICAgICAgICAgICAgICAgLy8gTm93IGdvIHNlZSBpZiB0aGVyZSdzIGFjdHVhbGx5IGFueSBtYXRyYXMuLi5cbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSBuZXdQb3M7IGkgPiBzdGFydDsgaS0tKWlmIChnbHlwaHNbaSAtIDFdLnNoYXBlckluZm8ucG9zaXRpb24gPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuUHJlX00pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9sZFBvcyA9IGkgLSAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAob2xkUG9zIDwgYmFzZSAmJiBiYXNlIDw9IG5ld1BvcykgYmFzZS0tO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdG1wID0gZ2x5cGhzW29sZFBvc107XG4gICAgICAgICAgICAgICAgICAgIGdseXBocy5zcGxpY2Uob2xkUG9zLCAwLCAuLi5nbHlwaHMuc3BsaWNlKG9sZFBvcyArIDEsIG5ld1BvcyAtIG9sZFBvcykpO1xuICAgICAgICAgICAgICAgICAgICBnbHlwaHNbbmV3UG9zXSA9IHRtcDtcbiAgICAgICAgICAgICAgICAgICAgbmV3UG9zLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIG8gUmVvcmRlciByZXBoOlxuICAgICAgICAvL1xuICAgICAgICAvLyBSZXBo4oCZcyBvcmlnaW5hbCBwb3NpdGlvbiBpcyBhbHdheXMgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgc3lsbGFibGUsXG4gICAgICAgIC8vIChpLmUuIGl0IGlzIG5vdCByZW9yZGVyZWQgYXQgdGhlIGNoYXJhY3RlciByZW9yZGVyaW5nIHN0YWdlKS4gSG93ZXZlcixcbiAgICAgICAgLy8gaXQgd2lsbCBiZSByZW9yZGVyZWQgYWNjb3JkaW5nIHRvIHRoZSBiYXNpYy1mb3JtcyBzaGFwaW5nIHJlc3VsdHMuXG4gICAgICAgIC8vIFBvc3NpYmxlIHBvc2l0aW9ucyBmb3IgcmVwaCwgZGVwZW5kaW5nIG9uIHRoZSBzY3JpcHQsIGFyZTsgYWZ0ZXIgbWFpbixcbiAgICAgICAgLy8gYmVmb3JlIHBvc3QtYmFzZSBjb25zb25hbnQgZm9ybXMsIGFuZCBhZnRlciBwb3N0LWJhc2UgY29uc29uYW50IGZvcm1zLlxuICAgICAgICAvLyBUd28gY2FzZXM6XG4gICAgICAgIC8vXG4gICAgICAgIC8vIC0gSWYgcmVwaGEgaXMgZW5jb2RlZCBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgKFJhLEggb3IgUmEsSCxaV0opLCB0aGVuXG4gICAgICAgIC8vICAgd2Ugc2hvdWxkIG9ubHkgbW92ZSBpdCBpZiB0aGUgc2VxdWVuY2UgbGlnYXRlZCB0byB0aGUgcmVwaGEgZm9ybS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gLSBJZiByZXBoYSBpcyBlbmNvZGVkIHNlcGFyYXRlbHkgYW5kIGluIHRoZSBsb2dpY2FsIHBvc2l0aW9uLCB3ZSBzaG91bGQgb25seVxuICAgICAgICAvLyAgIG1vdmUgaXQgaWYgaXQgZGlkIE5PVCBsaWdhdGUuICBJZiBpdCBsaWdhdGVkLCBpdCdzIHByb2JhYmx5IHRoZSBmb250IHRyeWluZ1xuICAgICAgICAvLyAgIHRvIG1ha2UgaXQgd29yayB3aXRob3V0IHRoZSByZW9yZGVyaW5nLlxuICAgICAgICBpZiAoc3RhcnQgKyAxIDwgZW5kICYmIGdseXBoc1tzdGFydF0uc2hhcGVySW5mby5wb3NpdGlvbiA9PT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwKS5SYV9Ub19CZWNvbWVfUmVwaCAmJiBnbHlwaHNbc3RhcnRdLnNoYXBlckluZm8uY2F0ZWdvcnkgPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuUmVwaGEgIT09IChnbHlwaHNbc3RhcnRdLmlzTGlnYXRlZCAmJiAhZ2x5cGhzW3N0YXJ0XS5pc011bHRpcGxpZWQpKSB7XG4gICAgICAgICAgICBsZXQgbmV3UmVwaFBvcztcbiAgICAgICAgICAgIGxldCByZXBoUG9zID0gaW5kaWNDb25maWcucmVwaFBvcztcbiAgICAgICAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gMS4gSWYgcmVwaCBzaG91bGQgYmUgcG9zaXRpb25lZCBhZnRlciBwb3N0LWJhc2UgY29uc29uYW50IGZvcm1zLFxuICAgICAgICAgICAgLy8gICAgcHJvY2VlZCB0byBzdGVwIDUuXG4gICAgICAgICAgICBpZiAocmVwaFBvcyAhPT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwKS5BZnRlcl9Qb3N0KSB7XG4gICAgICAgICAgICAgICAgLy8gIDIuIElmIHRoZSByZXBoIHJlcG9zaXRpb25pbmcgY2xhc3MgaXMgbm90IGFmdGVyIHBvc3QtYmFzZTogdGFyZ2V0XG4gICAgICAgICAgICAgICAgLy8gICAgIHBvc2l0aW9uIGlzIGFmdGVyIHRoZSBmaXJzdCBleHBsaWNpdCBoYWxhbnQgZ2x5cGggYmV0d2VlbiB0aGVcbiAgICAgICAgICAgICAgICAvLyAgICAgZmlyc3QgcG9zdC1yZXBoIGNvbnNvbmFudCBhbmQgbGFzdCBtYWluIGNvbnNvbmFudC4gSWYgWldKIG9yIFpXTkpcbiAgICAgICAgICAgICAgICAvLyAgICAgYXJlIGZvbGxvd2luZyB0aGlzIGhhbGFudCwgcG9zaXRpb24gaXMgbW92ZWQgYWZ0ZXIgaXQuIElmIHN1Y2hcbiAgICAgICAgICAgICAgICAvLyAgICAgcG9zaXRpb24gaXMgZm91bmQsIHRoaXMgaXMgdGhlIHRhcmdldCBwb3NpdGlvbi4gT3RoZXJ3aXNlLFxuICAgICAgICAgICAgICAgIC8vICAgICBwcm9jZWVkIHRvIHRoZSBuZXh0IHN0ZXAuXG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyAgICAgTm90ZTogaW4gb2xkLWltcGxlbWVudGF0aW9uIGZvbnRzLCB3aGVyZSBjbGFzc2lmaWNhdGlvbnMgd2VyZVxuICAgICAgICAgICAgICAgIC8vICAgICBmaXhlZCBpbiBzaGFwaW5nIGVuZ2luZSwgdGhlcmUgd2FzIG5vIGNhc2Ugd2hlcmUgcmVwaCBwb3NpdGlvblxuICAgICAgICAgICAgICAgIC8vICAgICB3aWxsIGJlIGZvdW5kIG9uIHRoaXMgc3RlcC5cbiAgICAgICAgICAgICAgICBuZXdSZXBoUG9zID0gc3RhcnQgKyAxO1xuICAgICAgICAgICAgICAgIHdoaWxlKG5ld1JlcGhQb3MgPCBiYXNlICYmICEkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNIYWxhbnRPckNvZW5nKGdseXBoc1tuZXdSZXBoUG9zXSkpbmV3UmVwaFBvcysrO1xuICAgICAgICAgICAgICAgIGlmIChuZXdSZXBoUG9zIDwgYmFzZSAmJiAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNIYWxhbnRPckNvZW5nKGdseXBoc1tuZXdSZXBoUG9zXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gLT5JZiBaV0ogb3IgWldOSiBhcmUgZm9sbG93aW5nIHRoaXMgaGFsYW50LCBwb3NpdGlvbiBpcyBtb3ZlZCBhZnRlciBpdC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1JlcGhQb3MgKyAxIDwgYmFzZSAmJiAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNKb2luZXIoZ2x5cGhzW25ld1JlcGhQb3MgKyAxXSkpIG5ld1JlcGhQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyAzLiBJZiByZXBoIHNob3VsZCBiZSByZXBvc2l0aW9uZWQgYWZ0ZXIgdGhlIG1haW4gY29uc29uYW50OiBmaW5kIHRoZVxuICAgICAgICAgICAgICAgIC8vICAgIGZpcnN0IGNvbnNvbmFudCBub3QgbGlnYXRlZCB3aXRoIG1haW4sIG9yIGZpbmQgdGhlIGZpcnN0XG4gICAgICAgICAgICAgICAgLy8gICAgY29uc29uYW50IHRoYXQgaXMgbm90IGEgcG90ZW50aWFsIHByZS1iYXNlIHJlb3JkZXJpbmcgUmEuXG4gICAgICAgICAgICAgICAgaWYgKCFmb3VuZCAmJiByZXBoUG9zID09PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLkFmdGVyX01haW4pIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3UmVwaFBvcyA9IGJhc2U7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKG5ld1JlcGhQb3MgKyAxIDwgZW5kICYmIGdseXBoc1tuZXdSZXBoUG9zICsgMV0uc2hhcGVySW5mby5wb3NpdGlvbiA8PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLkFmdGVyX01haW4pbmV3UmVwaFBvcysrO1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IG5ld1JlcGhQb3MgPCBlbmQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIDQuIElmIHJlcGggc2hvdWxkIGJlIHBvc2l0aW9uZWQgYmVmb3JlIHBvc3QtYmFzZSBjb25zb25hbnQsIGZpbmRcbiAgICAgICAgICAgICAgICAvLyAgICBmaXJzdCBwb3N0LWJhc2UgY2xhc3NpZmllZCBjb25zb25hbnQgbm90IGxpZ2F0ZWQgd2l0aCBtYWluLiBJZiBub1xuICAgICAgICAgICAgICAgIC8vICAgIGNvbnNvbmFudCBpcyBmb3VuZCwgdGhlIHRhcmdldCBwb3NpdGlvbiBzaG91bGQgYmUgYmVmb3JlIHRoZVxuICAgICAgICAgICAgICAgIC8vICAgIGZpcnN0IG1hdHJhLCBzeWxsYWJsZSBtb2RpZmllciBzaWduIG9yIHZlZGljIHNpZ24uXG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIG91ciB0YWtlIG9uIHdoYXQgc3RlcCA0IGlzIHRyeWluZyB0byBzYXkgKGFuZCBmYWlsaW5nLCBCQURMWSkuXG4gICAgICAgICAgICAgICAgaWYgKCFmb3VuZCAmJiByZXBoUG9zID09PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLkFmdGVyX1N1Yikge1xuICAgICAgICAgICAgICAgICAgICBuZXdSZXBoUG9zID0gYmFzZTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUobmV3UmVwaFBvcyArIDEgPCBlbmQgJiYgIShnbHlwaHNbbmV3UmVwaFBvcyArIDFdLnNoYXBlckluZm8ucG9zaXRpb24gJiAoKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwKS5Qb3N0X0MgfCAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLkFmdGVyX1Bvc3QgfCAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLlNNVkQpKSluZXdSZXBoUG9zKys7XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gbmV3UmVwaFBvcyA8IGVuZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAgNS4gSWYgbm8gY29uc29uYW50IGlzIGZvdW5kIGluIHN0ZXBzIDMgb3IgNCwgbW92ZSByZXBoIHRvIGEgcG9zaXRpb25cbiAgICAgICAgICAgIC8vICAgICBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGZpcnN0IHBvc3QtYmFzZSBtYXRyYSwgc3lsbGFibGUgbW9kaWZpZXJcbiAgICAgICAgICAgIC8vICAgICBzaWduIG9yIHZlZGljIHNpZ24gdGhhdCBoYXMgYSByZW9yZGVyaW5nIGNsYXNzIGFmdGVyIHRoZSBpbnRlbmRlZFxuICAgICAgICAgICAgLy8gICAgIHJlcGggcG9zaXRpb24uIEZvciBleGFtcGxlLCBpZiB0aGUgcmVvcmRlcmluZyBwb3NpdGlvbiBmb3IgcmVwaFxuICAgICAgICAgICAgLy8gICAgIGlzIHBvc3QtbWFpbiwgaXQgd2lsbCBza2lwIGFib3ZlLWJhc2UgbWF0cmFzIHRoYXQgYWxzbyBoYXZlIGFcbiAgICAgICAgICAgIC8vICAgICBwb3N0LW1haW4gcG9zaXRpb24uXG4gICAgICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgICAgICAgLy8gQ29waWVkIGZyb20gc3RlcCAyLlxuICAgICAgICAgICAgICAgIG5ld1JlcGhQb3MgPSBzdGFydCArIDE7XG4gICAgICAgICAgICAgICAgd2hpbGUobmV3UmVwaFBvcyA8IGJhc2UgJiYgISQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpc0hhbGFudE9yQ29lbmcoZ2x5cGhzW25ld1JlcGhQb3NdKSluZXdSZXBoUG9zKys7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1JlcGhQb3MgPCBiYXNlICYmICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpc0hhbGFudE9yQ29lbmcoZ2x5cGhzW25ld1JlcGhQb3NdKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyAtPklmIFpXSiBvciBaV05KIGFyZSBmb2xsb3dpbmcgdGhpcyBoYWxhbnQsIHBvc2l0aW9uIGlzIG1vdmVkIGFmdGVyIGl0LlxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3UmVwaFBvcyArIDEgPCBiYXNlICYmICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpc0pvaW5lcihnbHlwaHNbbmV3UmVwaFBvcyArIDFdKSkgbmV3UmVwaFBvcysrO1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gNi4gT3RoZXJ3aXNlLCByZW9yZGVyIHJlcGggdG8gdGhlIGVuZCBvZiB0aGUgc3lsbGFibGUuXG4gICAgICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgICAgICAgbmV3UmVwaFBvcyA9IGVuZCAtIDE7XG4gICAgICAgICAgICAgICAgd2hpbGUobmV3UmVwaFBvcyA+IHN0YXJ0ICYmIGdseXBoc1tuZXdSZXBoUG9zXS5zaGFwZXJJbmZvLnBvc2l0aW9uID09PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLlNNVkQpbmV3UmVwaFBvcy0tO1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBSZXBoIGlzIHRvIGJlIGVuZGluZyB1cCBhZnRlciBhIE1hdHJhLEhhbGFudCBzZXF1ZW5jZSxcbiAgICAgICAgICAgICAgICAvLyBwb3NpdGlvbiBpdCBiZWZvcmUgdGhhdCBIYWxhbnQgc28gaXQgY2FuIGludGVyYWN0IHdpdGggdGhlIE1hdHJhLlxuICAgICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIGlmIGl0J3MgYSBwbGFpbiBDb25zb25hbnQsSGFsYW50IHdlIHNob3VsZG4ndCBkbyB0aGF0LlxuICAgICAgICAgICAgICAgIC8vIFVuaXNjcmliZSBkb2Vzbid0IGRvIHRoaXMuXG4gICAgICAgICAgICAgICAgLy8gVEVTVDogVSswOTMwLFUrMDk0RCxVKzA5MTUsVSswOTRCLFUrMDk0RFxuICAgICAgICAgICAgICAgIGlmICgkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNIYWxhbnRPckNvZW5nKGdseXBoc1tuZXdSZXBoUG9zXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpID0gYmFzZSArIDE7IGkgPCBuZXdSZXBoUG9zOyBpKyspaWYgKGdseXBoc1tpXS5zaGFwZXJJbmZvLmNhdGVnb3J5ID09PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGE1MTNlYTYxYTdiZWU5MWMpLk0pIG5ld1JlcGhQb3MtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcmVwaCA9IGdseXBoc1tzdGFydF07XG4gICAgICAgICAgICBnbHlwaHMuc3BsaWNlKHN0YXJ0LCAwLCAuLi5nbHlwaHMuc3BsaWNlKHN0YXJ0ICsgMSwgbmV3UmVwaFBvcyAtIHN0YXJ0KSk7XG4gICAgICAgICAgICBnbHlwaHNbbmV3UmVwaFBvc10gPSByZXBoO1xuICAgICAgICAgICAgaWYgKHN0YXJ0IDwgYmFzZSAmJiBiYXNlIDw9IG5ld1JlcGhQb3MpIGJhc2UtLTtcbiAgICAgICAgfVxuICAgICAgICAvLyBvIFJlb3JkZXIgcHJlLWJhc2UgcmVvcmRlcmluZyBjb25zb25hbnRzOlxuICAgICAgICAvL1xuICAgICAgICAvLyBJZiBhIHByZS1iYXNlIHJlb3JkZXJpbmcgY29uc29uYW50IGlzIGZvdW5kLCByZW9yZGVyIGl0IGFjY29yZGluZyB0b1xuICAgICAgICAvLyB0aGUgZm9sbG93aW5nIHJ1bGVzOlxuICAgICAgICBpZiAodHJ5UHJlZiAmJiBiYXNlICsgMSA8IGVuZCkge1xuICAgICAgICAgICAgZm9yKGxldCBpID0gYmFzZSArIDE7IGkgPCBlbmQ7IGkrKylpZiAoZ2x5cGhzW2ldLmZlYXR1cmVzLnByZWYpIHtcbiAgICAgICAgICAgICAgICAvLyAxLiBPbmx5IHJlb3JkZXIgYSBnbHlwaCBwcm9kdWNlZCBieSBzdWJzdGl0dXRpb24gZHVyaW5nIGFwcGxpY2F0aW9uXG4gICAgICAgICAgICAgICAgLy8gICAgb2YgdGhlIDxwcmVmPiBmZWF0dXJlLiAoTm90ZSB0aGF0IGEgZm9udCBtYXkgc2hhcGUgYSBSYSBjb25zb25hbnQgd2l0aFxuICAgICAgICAgICAgICAgIC8vICAgIHRoZSBmZWF0dXJlIGdlbmVyYWxseSBidXQgYmxvY2sgaXQgaW4gY2VydGFpbiBjb250ZXh0cy4pXG4gICAgICAgICAgICAgICAgLy8gTm90ZTogV2UganVzdCBjaGVjayB0aGF0IHNvbWV0aGluZyBnb3Qgc3Vic3RpdHV0ZWQuICBXZSBkb24ndCBjaGVjayB0aGF0XG4gICAgICAgICAgICAgICAgLy8gdGhlIDxwcmVmPiBmZWF0dXJlIGFjdHVhbGx5IGRpZCBpdC4uLlxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gUmVvcmRlciBwcmVmIG9ubHkgaWYgaXQgbGlnYXRlZC5cbiAgICAgICAgICAgICAgICBpZiAoZ2x5cGhzW2ldLmlzTGlnYXRlZCAmJiAhZ2x5cGhzW2ldLmlzTXVsdGlwbGllZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyAyLiBUcnkgdG8gZmluZCBhIHRhcmdldCBwb3NpdGlvbiB0aGUgc2FtZSB3YXkgYXMgZm9yIHByZS1iYXNlIG1hdHJhLlxuICAgICAgICAgICAgICAgICAgICAvLyAgICBJZiBpdCBpcyBmb3VuZCwgcmVvcmRlciBwcmUtYmFzZSBjb25zb25hbnQgZ2x5cGguXG4gICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgIC8vIDMuIElmIHBvc2l0aW9uIGlzIG5vdCBmb3VuZCwgcmVvcmRlciBpbW1lZGlhdGVseSBiZWZvcmUgbWFpblxuICAgICAgICAgICAgICAgICAgICAvLyAgICBjb25zb25hbnQuXG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXdQb3MgPSBiYXNlO1xuICAgICAgICAgICAgICAgICAgICAvLyBNYWxheWFsYW0gLyBUYW1pbCBkbyBub3QgaGF2ZSBcImhhbGZcIiBmb3JtcyBvciBleHBsaWNpdCB2aXJhbWEgZm9ybXMuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBnbHlwaHMgZm9ybWVkIGJ5ICdoYWxmJyBhcmUgQ2hpbGx1cyBvciBsaWdhdGVkIGV4cGxpY2l0IHZpcmFtYXMuXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIHdhbnQgdG8gcG9zaXRpb24gbWF0cmEgYWZ0ZXIgdGhlbS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBsYW4udW5pY29kZVNjcmlwdCAhPT0gJ01hbGF5YWxhbScgJiYgcGxhbi51bmljb2RlU2NyaXB0ICE9PSAnVGFtaWwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShuZXdQb3MgPiBzdGFydCAmJiAhKGdseXBoc1tuZXdQb3MgLSAxXS5zaGFwZXJJbmZvLmNhdGVnb3J5ICYgKCgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuTSB8ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkY2E5NTk5YjJhMzAwYWZjKSkpKW5ld1Bvcy0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW4gS2htZXIgY29lbmcgbW9kZWwsIGEgSCxSYSBjYW4gZ28gKmFmdGVyKiBtYXRyYXMuICBJZiBpdCBnb2VzIGFmdGVyIGFcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNwbGl0IG1hdHJhLCBpdCBzaG91bGQgYmUgcmVvcmRlcmVkIHRvICpiZWZvcmUqIHRoZSBsZWZ0IHBhcnQgb2Ygc3VjaCBtYXRyYS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdQb3MgPiBzdGFydCAmJiBnbHlwaHNbbmV3UG9zIC0gMV0uc2hhcGVySW5mby5jYXRlZ29yeSA9PT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5NKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9sZFBvcyA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBqID0gYmFzZSArIDE7IGogPCBvbGRQb3M7IGorKylpZiAoZ2x5cGhzW2pdLnNoYXBlckluZm8uY2F0ZWdvcnkgPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuTSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdQb3MtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdQb3MgPiBzdGFydCAmJiAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNIYWxhbnRPckNvZW5nKGdseXBoc1tuZXdQb3MgLSAxXSkpIC8vIC0+IElmIFpXSiBvciBaV05KIGZvbGxvdyB0aGlzIGhhbGFudCwgcG9zaXRpb24gaXMgbW92ZWQgYWZ0ZXIgaXQuXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdQb3MgPCBlbmQgJiYgJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGlzSm9pbmVyKGdseXBoc1tuZXdQb3NdKSkgbmV3UG9zKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGV0IG9sZFBvcyA9IGk7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0bXAgPSBnbHlwaHNbb2xkUG9zXTtcbiAgICAgICAgICAgICAgICAgICAgZ2x5cGhzLnNwbGljZShuZXdQb3MgKyAxLCAwLCAuLi5nbHlwaHMuc3BsaWNlKG5ld1Bvcywgb2xkUG9zIC0gbmV3UG9zKSk7XG4gICAgICAgICAgICAgICAgICAgIGdseXBoc1tuZXdQb3NdID0gdG1wO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3UG9zIDw9IGJhc2UgJiYgYmFzZSA8IG9sZFBvcykgYmFzZSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBBcHBseSAnaW5pdCcgdG8gdGhlIExlZnQgTWF0cmEgaWYgaXQncyBhIHdvcmQgc3RhcnQuXG4gICAgICAgIGlmIChnbHlwaHNbc3RhcnRdLnNoYXBlckluZm8ucG9zaXRpb24gPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuUHJlX00gJiYgKCFzdGFydCB8fCAhL0NmfE1uLy50ZXN0KCgwLCAkNTJaSWYkZ2V0Q2F0ZWdvcnkpKGdseXBoc1tzdGFydCAtIDFdLmNvZGVQb2ludHNbMF0pKSkpIGdseXBoc1tzdGFydF0uZmVhdHVyZXMuaW5pdCA9IHRydWU7XG4gICAgfVxufVxuZnVuY3Rpb24gJDc4MjZmOTBmNmYwY2VjYzkkdmFyJG5leHRTeWxsYWJsZShnbHlwaHMsIHN0YXJ0KSB7XG4gICAgaWYgKHN0YXJ0ID49IGdseXBocy5sZW5ndGgpIHJldHVybiBzdGFydDtcbiAgICBsZXQgc3lsbGFibGUgPSBnbHlwaHNbc3RhcnRdLnNoYXBlckluZm8uc3lsbGFibGU7XG4gICAgd2hpbGUoKytzdGFydCA8IGdseXBocy5sZW5ndGggJiYgZ2x5cGhzW3N0YXJ0XS5zaGFwZXJJbmZvLnN5bGxhYmxlID09PSBzeWxsYWJsZSk7XG4gICAgcmV0dXJuIHN0YXJ0O1xufVxuXG5cblxuXG5cblxuXG5cblxuY29uc3QgeyBjYXRlZ29yaWVzOiAkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkY2F0ZWdvcmllcywgZGVjb21wb3NpdGlvbnM6ICQ3YWI0OTRmZTk3NzE0M2M2JHZhciRkZWNvbXBvc2l0aW9ucyB9ID0gKDAsICgvKkBfX1BVUkVfXyovJHBhcmNlbCRpbnRlcm9wRGVmYXVsdCgkYWEzMzNhOTYwNzQ3MTI5NiRleHBvcnRzKSkpO1xuY29uc3QgJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJHRyaWUgPSBuZXcgKDAsICQ1MlpJZiR1bmljb2RldHJpZSkoKDAsICQxMjcyNzczMGRkZmM4YmZlJGV4cG9ydCQ5NGZkZjExYmFmYzhkZTZiKShcIkFBQUNBQUFBQUFBUXVnQUFBUVVPK3ZIdG5IdU1YMFVWeDJkM3UvdDdiWGU3RmxxZ3ZCK21wUWhGbWhpa01SQWcwWlFtYWtNVStjUFdCelppc0VHTmpVcG9pSVlDRWdtR1VHT0VHcU9WTlBVWlVHTkErUU5JQlUyS1JFRUZGU01CVVlSSVNNWEUrQjN2blB6T3pwNTUzdGNXZmlmNVpPNWpudWZNekoyWk8vZXVtbERxRkxBV25BTXVCQnZCWm5DNXVYWmVCZTRXc0Exc0J6czgvbmFDWGNMMUc4R3RZRGZZQTc0TnZnZnVBZmNaSG1UK2Z3RWVCYjhEVHd2eFBRV2VBYXZBQ3ladnE4ejlWWXhYd0NHZ2xpalZCY3ZBQ25BOGVDTTRFNndIRzhCRjRCTHdidkErOEFId1ViQWQ3QUE3d1M1d0M5Z043Z1I3d1g1d043Z1hQQUFlQnI4R3Z3ZC9BYytDRjhFaG9DYVY2b0Jac0JLY0FFNEZaMHdXZVY4UDl6eHdvVG5mQ0hjenVCeHNBZHZBeDhHbnpmMXI0WDRCM0F4dUExK2JISmI5bTVQemRWR1cvWWp2K3hYSHlmbXhGZmQ5T0g4US9BcjhCancxV1pUM0dmQUNlQVg4TjVDZnFTbWxac0FLc0dxcUNIOEszRFhnYkhDdXVYWUIzSGVBZDRITHBncmRhcmJpK0VQZ1krQ1Q0SFBnOHliTVRjYjlNdHl2Z2h0WXV0L0ErYjRwZjk1K0VMZ2Z3MDhReC8zZ0FEZ0luakRsMHZlZWhQdFg4QS93c3JuMkt0enhEdW9nV05vSngzOGsvQnpYS2VJOEVlNXFjQlpZRDlhWnREYmcrQXdUMTl1TVg4M0Y3Sml6Q2RjdkJaZFo5N2M2L0JNZk1XbWZ6ZlRtODgvOTVhTGorRERTdkFwY0RYWjA0dVBmYWVuM1RNSFBMdmk1QmV6dUZQVnRENHQvcVVjZmUzRnZQN2diM091d285VCtIK2dNeS9VSWpoOERmd0JQbTdUMDhkL004V01CZTFTaDN4RWpYbytNMnMrSUVTTkdqQmd4WXNTSTF3THJPc00xZ1JzaS9QK1R6VjMvWmMxanZ4Z1IvajhJTTlFdDFtRUdjSmVERmVBNGNKcTUvaWE0Njd1Ri93MXd6d2R2Qis4MDk5OExkd3ZZWnM2M3c5MEJkbmJkNldwL3V6ejNSNHdZTVdKRXZaelRNbTJYZjhTSUVmVlFkL3YrRXNhUHQzZUw5MEozd1AyV01KNzhUcmQ0dDYrUDc3SHUzN2NJeHA5L255NllYcXJVSmVDUjZUQTc0ZS9ubGw4MU16eGVqZU10WUE5NEhCd3k5MWJQWW93K08vUzNBOGQ3b0lNL2dSTjdDQVAyOUlxeC9CMVRoZnV3T2VjTSt2QTNObVJqZjZHZm0zQnRIN3YrUEk3WERwUzZFdXdEejRPMTArMC9mOW9tMUY0ZWhPNE9tSHA2RU83anhsNTZudmhzTi8xNXV0KzRaMGI2NTd5WWtaN1VKMGpoWDBiY3IzYm4rNlA4N3Zla040NzYyUU56dldIWnRMK2pjSDVzcnpnL3VUZjBmM3B2Zmo1aSs2dFlXN3JLOSthZWZPK3R1TDRCWEFRMmdzM2dQZUJKYy8vOU9MNENYQVd1TnZjL0E2NERONEpid2UwczdqdHh2QmZzQXo4RVB3WDNnd1Bnb0pBSFBROS9BdGYvYk83cC9UVFA0Zmdsd1MvNS96ZnVqZldINXowY3o0R2orOFg1U2YxaWI0bSt2d2JIWi9mZE90UCt6KzNMT25QcC9RTDR2eGhzQXBlQ3k4QldrL2EyZnRGbVl1MjJIZjQvQmE0QjE0SHJ3YzBzUDdmaCtDdmc2K0F1OEYxV3RoQS84cFQ3VWVUeFovMTJuamt1WFQ4VXlNOWk2aXVyMUVFYjZmK3lQei9lZzBiM3Y0WDd4MzY1Zk1hVzQybFB1N1BUdjZ2aThpL0crbFdGL2N2VWs3YkxsMXIrNS9yTjV0dTNqMnF2V1RkL3FWKzRoK0FxakRHbkJzWDU5R0RvOTRpQlhEYTZ2NllqbDZ2dStoOGl0SmNzWnEvWnlrSGhIZy8zdE1IaFVlOXMvWWZ1bnk3WU54VHZROExZZHJFUjIrL2MwR0JlemhyTXYzWk5SdjdQbVlpcmg3b092NFcxWTcyL2N3UE96eDhVN1g4ZDIyOTVzZkUzTVBuYkJQZlNRYkh2OW5LNEh4VHFpSy90ckk3WXk1bUx6dnVWZy9uWCtON1Y1MUEzcitnTXkvNEo0MzRXN2wyZFlmNVBaV0d1Tlg2dWgzdXpFUGV0dUxZN3NaMjB6VEVUWTJveHlCaGozRHJuZnNpZFlQZVhSR0xIcHh6WDZwYkZvZkdSa0ZCZEdoY2dXNDBMNGNZdGQ5SkFFbE8zNnE0TEV6WEhYN1ZNdFoyQkVoSmp5OWRUMjVmYXpPdEp4aHdzQnJIendmdTh3MTJrTVlOOWZMaElicDJSeGxJNTlyWDFkempwc0tsMkZ4dDNpdTZyYm9mYzlxNStLY1JyWFZ6ekRuNi9DcnZrNnAveTFHRmdHaHM5LzZtYUhqQkxndjgvMThmVHhsMXEwYlBvVzh5d3NGVEdXYWF6SG9zck5uL2tQMmVlcUVyb1pZTFpwaHNabDdMODJlZXBoTUlxTlQ4ZHlUOUpqSDFKcGczMnViWnZUQi9TRjY2NXltU25uYXFqVUh1bSsxUW4rTnlPdHo5ZjJyNnk1T1E1MWI2aFl5MEQ0MHIydFlYYXIzMCtZL21iVlg2SnFZK2hNQzYwWFphcG9oM1MvSGRPcFQzRFl1M3JzMGxLbnF1eWIyNzdKWnZ5UGxxcCtmMXpWVksyL2RKWU5wUUdmMDR1WXloMStQVFBxZmFsWjJ0Ty94d1N1KzNiT3JEem1XdmZjVFcvZkxtaWJSeDZsa3ZsY09sYzhxc0UveTUvcm5TazY3RjFpQXUxVlQ2KzRqS3Q1dHVmbjhlMmIrbjU3SktjY2tocnNLRzFDZDZXdStZOHRmMmw1RGVuUGFmcVFaLzd4c3RLTGV5citYbklualNlbHZSZ1M5bjI3SlBRTTVuNkFtN2ptTEc4Vks2bTdPdnlTMkwzMTNYWVYyci90dGg1TFdQZk54aHloSSsxVXA3SFZiZS9ITWdlWkU4YnJ0TlEvN3RjeVgwY24vL0gyTFRPOWtwaXI1Vkk2eVlwOXN6Slc5VzJqSTFUcWZsNWljMnYxR1o1WGFHNlJEWmJ5dnhNTy9EVmgxU2RVajV5MXZyYWFIcysyL1RZTlh2dFNSb1hrNHdyZjl3NmZFY3RuRnQwekwyeSt4RnNmU3JMemEyek9UcU1pWnY4eE9wYm44K3hzTDV5a2RqNlZzeE5LYi9MdnhiN25YOHU0OHkxeDZ5dU1XM1Y5dE54VGxvdXpYc2xpYlZ4bmRqQzE0eGRhOGcyTkliZzV4MDFYQVAybGZlSUJGU2kvenJRRXBvclRYcnU4ZkN1ZWl5MUNVbnFyaHNwU005U3piU1M2NHRlcDlSMVpzWmNPeEtzVUVVZk5aZVl0cjB2alk1RGVYVzkxNWhUOC9QUlY4TXhsUjFIVjRESFpaYzlSN2R6YWpnV29YaWtkTHRHcjB1RWZQaWdzR1MvTnZZalNIVzg3WGVqb1haZWhaNzRYcmNxcFE0ZDVUNWY3R3U4ZjZnN2ZRbWVmb3FPcWs0L1ZhclF2Mm80L1ZEZXRQRG5oalIyZGMzQkNCcC85TlZ3N0tHZndTdFZNZjZhWk5BYWpqNjIyNGo5SENaYnBaYS9MdkgxZ1UzMGkvcTVXblVkU05FcHJ4djJlSU93eDJwY2pqTE1zbU9ibzAwOGswSjR1NjlQM2Q5UWRic3BXL2R5MDgwTmI4UFhxY3JtajB2c2M3dHU2cXdEMUE1b0xZcjNVM1hXU3hxajYvYTEwbkNNa3VkSk15eHZydmJLNTVqVXJxVStYbHIvSWFpOThqWTdtVkFtbDVRTkh4cTMxajJtNVRyU2RtcDZ6NXArOWtwelFudGRRYkkxUGFmcjZJOUM2MGd4ckFMSEd0ZEY2dHloTFR0eGVCdVcraGhxeXpQTVg5MzF4bDZySjVmNm41aDNibHBzVzd2S2J2ZEJmTDFncFlmakRMcnZvYjFkcnJSVCttY3VNZjFPckpTZFcvUCtSZnVmZFVCK3BPdGRUemhwTDV0MGpmS3I0NlAzb2JRZlFkUEd0MWpTK0RFa3g0TVQyUG1FZzFqNzJPdGhxZlpOV1grSnVaNGF0LzJzVEFtbjVjU0lNcVpJamswcG5EMCthVUk2WVM5ZWtkYXNwV3NwOGNXRUM2MmRTNjZVVGtxK3lwYWp5dlhTbFB6NHhoUWhtL25zNndwWEJWSTU2MGpITjlhS2tkVDQ2c3B2V1Q5MTZyT05kSE5zR1NOdGw2SHA4b2FrVFZ1a3BGOW4zVTNKeDBUTmVmYnAzUjRqbHRWZkZmcHZRa0pwTmFIL3B1eWNvKytxYlpQejdzRTFMM0RGR1ZvdmM0WFBMVVBPM0VMeXJ6TGlTcG1QaGFUSmZxZUordDYwUGlUaDlzbk5XMjY1NnVwRFErV3R5ZzZ1ZUpxdUI3SFNWUHNwVzlhMjhsRFdKb3VoYjZpeXY3WGpUZlZMNjdqMnZqRHB2VWZNdDFWbDRHdmN0TWFlcS92WWNGV1hJZlY1S3UzWGF4Szk1MUg2ZHNXRnJoY3hhM3BVL3B6M0MxeGM3MXRUY2FYakdqdEpiWUlqN1VIbTd3eFN5eCtEL2Q3U2ZwZkozd1BwZlNRcDMydFMyZHQ4VjJ0RDcrQmNlM3JwUGEzZUM2RHI4VWxxK0srSjNIRnZibjMxMlp2MlJkU3RyOWcwcFAwUC9CMDRYYlAzUThjSVQyZGxSRjZvcmtyaFkvUnYyN0ZxSGZMMURQNDgwZmZvL1Y2VjdhVEhYTEtEYlRkWE9Pcm55RzFTY3ZTdjZ4cXZlMzBsUHpkcGozNk04UGlsYitMNXZyMHhFM2RkMzBuV0lmWjQ1dVNTeEs0eCtDUm1UVUs2Ri9MclNzZm5qK2FPZFl5dnBYeU1LNy9PcEhXamxEVHNhMHJKdW01SzdQcG5qN0Y5YyswcTBxdHI3cFFqaTJYOW9Nd2NWckpmbWJsd1UyVjJTVjNyRWszWXVPNDZYWGY4TWZyUXowNzdHMnpmdHlEa2ovWnFoY1pyOW5sZGtPZzV5a0F0M0d1bkpiUjNOR1lzVWZXYWZkM3RzODUzQzRkTEhwcE9NNldjZk01Qyt4U2JhQy8ySE1hMUg5djF2WGRvWG0vTEtTVnBZaDV3cW1yL1g2N1Nmd0h0UGM5YTk3cC9rOGJ0MGhwYlcwajFTdnIybSs3UmQ5OHFJUTFwdlNGMjczZEtPakhZTm1rNmZkOC9KWDN0V0lkZGJsQnFvVTVwN3pyWktuZDlUcHBqVnEwRFNpdFdxa3d6MTJiMmV4Yjd2d2phUnZTL1RGZC9TKzhBWXZJbytTdXJpNVR3dnZaUmRWMUlRZXZRMS84U0ErVWVINWV0bzduL1gxT2U4NnB0YWFmbDhrUGpjRjdQN1c5M2VEOWQ1bitvU3ZuN2ZGZTdJL0c5cTFJQmZ5bFNSNzFONmZmdDk0WlUxOGhPWEtSK0pxVU84ZjQrNWR2THNtV2xNUWIvVm92K0NVRGxwVEdVbmRlUWxHM2ZkWldkUlBvUGdsM21tRGxzTG5hZXkvNFgzdFZ1VStvNkwzL1B5bStxbExWL2prNnJsQlJkODM5NGhaNkpkbnVxSXYyeWtPaDNwZnE5NldrcS9FOHF1MnhsODgvdE9KNFIzdGZtcGJHaTNjNVQ4NTlienFyN01ic04wM2lJNWl0VU5qNWVhRUtXcUlYL0tKQ1EvaUZXTlpNbUhYczhvdldrNTNKekZxNXZQdWw2ekRqTFYzNnBYN2J6dk56QjBZbFFPWmVwaFd0UlM1VDdlZVNxODAzMFI3Ny9IdkMxZDd0TjgzWnQ5eWx0ckRkd1NSMFh4c1pkNWwrTXZ2dlUxL005alNuaitOaDZGUEpiQmxkL3c2WEhYSDVNWmVYck9mUy82NWc5UlRsMUpDYThjaHpYMlJaOS8zbFhTaDQvVnFXZkVCTnE0YjgyWXRwNm0rOVFxeGlyMWpYK3JmUGRUMXZ2c1doTTZiUGJtT042RTFMblBDWlc3TDBxcVhzd210cWYwTVFlbFpqNG15cnpZdHp2SVltVVJsdnRxYXB5eCtnelJmZDBYUGZhaFZTT3F1TW9HK2RpYkJkbDQ2aXlmZGJWMXF2VVc5bTgrS1R1ZE12a3paZS9wcVRKK3BXVGZsWDV6dzFmVmZveDZaVFZjOGh2SGZsT1NiK091RzFKc1owa3VmWEFKZjhEXCIpKTtcbmNvbnN0ICQ3YWI0OTRmZTk3NzE0M2M2JHZhciRzdGF0ZU1hY2hpbmUgPSBuZXcgKDAsICQ1MlpJZiRkZmEpKCgwLCAoLypAX19QVVJFX18qLyRwYXJjZWwkaW50ZXJvcERlZmF1bHQoJGFhMzMzYTk2MDc0NzEyOTYkZXhwb3J0cykpKSk7XG5jbGFzcyAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5IGV4dGVuZHMgKDAsICQ2NDk5NzBkODczMzViMzBmJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpIHtcbiAgICBzdGF0aWMgcGxhbkZlYXR1cmVzKHBsYW4pIHtcbiAgICAgICAgcGxhbi5hZGRTdGFnZSgkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkc2V0dXBTeWxsYWJsZXMpO1xuICAgICAgICAvLyBEZWZhdWx0IGdseXBoIHByZS1wcm9jZXNzaW5nIGdyb3VwXG4gICAgICAgIHBsYW4uYWRkU3RhZ2UoW1xuICAgICAgICAgICAgJ2xvY2wnLFxuICAgICAgICAgICAgJ2NjbXAnLFxuICAgICAgICAgICAgJ251a3QnLFxuICAgICAgICAgICAgJ2FraG4nXG4gICAgICAgIF0pO1xuICAgICAgICAvLyBSZW9yZGVyaW5nIGdyb3VwXG4gICAgICAgIHBsYW4uYWRkU3RhZ2UoJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJGNsZWFyU3Vic3RpdHV0aW9uRmxhZ3MpO1xuICAgICAgICBwbGFuLmFkZFN0YWdlKFtcbiAgICAgICAgICAgICdycGhmJ1xuICAgICAgICBdLCBmYWxzZSk7XG4gICAgICAgIHBsYW4uYWRkU3RhZ2UoJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJHJlY29yZFJwaGYpO1xuICAgICAgICBwbGFuLmFkZFN0YWdlKCQ3YWI0OTRmZTk3NzE0M2M2JHZhciRjbGVhclN1YnN0aXR1dGlvbkZsYWdzKTtcbiAgICAgICAgcGxhbi5hZGRTdGFnZShbXG4gICAgICAgICAgICAncHJlZidcbiAgICAgICAgXSk7XG4gICAgICAgIHBsYW4uYWRkU3RhZ2UoJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJHJlY29yZFByZWYpO1xuICAgICAgICAvLyBPcnRob2dyYXBoaWMgdW5pdCBzaGFwaW5nIGdyb3VwXG4gICAgICAgIHBsYW4uYWRkU3RhZ2UoW1xuICAgICAgICAgICAgJ3JrcmYnLFxuICAgICAgICAgICAgJ2FidmYnLFxuICAgICAgICAgICAgJ2Jsd2YnLFxuICAgICAgICAgICAgJ2hhbGYnLFxuICAgICAgICAgICAgJ3BzdGYnLFxuICAgICAgICAgICAgJ3ZhdHUnLFxuICAgICAgICAgICAgJ2NqY3QnXG4gICAgICAgIF0pO1xuICAgICAgICBwbGFuLmFkZFN0YWdlKCQ3YWI0OTRmZTk3NzE0M2M2JHZhciRyZW9yZGVyKTtcbiAgICAgICAgLy8gVG9wb2dyYXBoaWNhbCBmZWF0dXJlc1xuICAgICAgICAvLyBTY3JpcHRzIHRoYXQgbmVlZCB0aGlzIGFyZSBoYW5kbGVkIGJ5IHRoZSBBcmFiaWMgc2hhcGVyLCBub3QgaW1wbGVtZW50ZWQgaGVyZSBmb3Igbm93LlxuICAgICAgICAvLyBwbGFuLmFkZFN0YWdlKFsnaXNvbCcsICdpbml0JywgJ21lZGknLCAnZmluYScsICdtZWQyJywgJ2ZpbjInLCAnZmluMyddLCBmYWxzZSk7XG4gICAgICAgIC8vIFN0YW5kYXJkIHRvcG9ncmFwaGljIHByZXNlbnRhdGlvbiBhbmQgcG9zaXRpb25hbCBmZWF0dXJlIGFwcGxpY2F0aW9uXG4gICAgICAgIHBsYW4uYWRkU3RhZ2UoW1xuICAgICAgICAgICAgJ2FidnMnLFxuICAgICAgICAgICAgJ2Jsd3MnLFxuICAgICAgICAgICAgJ3ByZXMnLFxuICAgICAgICAgICAgJ3BzdHMnLFxuICAgICAgICAgICAgJ2Rpc3QnLFxuICAgICAgICAgICAgJ2Fidm0nLFxuICAgICAgICAgICAgJ2Jsd20nXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBzdGF0aWMgYXNzaWduRmVhdHVyZXMocGxhbiwgZ2x5cGhzKSB7XG4gICAgICAgIC8vIERlY29tcG9zZSBzcGxpdCB2b3dlbHNcbiAgICAgICAgLy8gVE9ETzogZG8gdGhpcyBpbiBhIG1vcmUgZ2VuZXJhbCB1bmljb2RlIG5vcm1hbGl6ZXJcbiAgICAgICAgZm9yKGxldCBpID0gZ2x5cGhzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKXtcbiAgICAgICAgICAgIGxldCBjb2RlcG9pbnQgPSBnbHlwaHNbaV0uY29kZVBvaW50c1swXTtcbiAgICAgICAgICAgIGlmICgkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkZGVjb21wb3NpdGlvbnNbY29kZXBvaW50XSkge1xuICAgICAgICAgICAgICAgIGxldCBkZWNvbXBvc2VkID0gJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJGRlY29tcG9zaXRpb25zW2NvZGVwb2ludF0ubWFwKChjKT0+e1xuICAgICAgICAgICAgICAgICAgICBsZXQgZyA9IHBsYW4uZm9udC5nbHlwaEZvckNvZGVQb2ludChjKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAoMCwgJDEwZTdiMjU3ZTFhOWE3NTYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkocGxhbi5mb250LCBnLmlkLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBjXG4gICAgICAgICAgICAgICAgICAgIF0sIGdseXBoc1tpXS5mZWF0dXJlcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZ2x5cGhzLnNwbGljZShpLCAxLCAuLi5kZWNvbXBvc2VkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbigwLCAkNTJaSWYkXykoJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSwgXCJ6ZXJvTWFya1dpZHRoc1wiLCAnQkVGT1JFX0dQT1MnKTtcbmZ1bmN0aW9uICQ3YWI0OTRmZTk3NzE0M2M2JHZhciR1c2VDYXRlZ29yeShnbHlwaCkge1xuICAgIHJldHVybiAkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkdHJpZS5nZXQoZ2x5cGguY29kZVBvaW50c1swXSk7XG59XG5jbGFzcyAkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkVVNFSW5mbyB7XG4gICAgY29uc3RydWN0b3IoY2F0ZWdvcnksIHN5bGxhYmxlVHlwZSwgc3lsbGFibGUpe1xuICAgICAgICB0aGlzLmNhdGVnb3J5ID0gY2F0ZWdvcnk7XG4gICAgICAgIHRoaXMuc3lsbGFibGVUeXBlID0gc3lsbGFibGVUeXBlO1xuICAgICAgICB0aGlzLnN5bGxhYmxlID0gc3lsbGFibGU7XG4gICAgfVxufVxuZnVuY3Rpb24gJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJHNldHVwU3lsbGFibGVzKGZvbnQsIGdseXBocykge1xuICAgIGxldCBzeWxsYWJsZSA9IDA7XG4gICAgZm9yIChsZXQgW3N0YXJ0LCBlbmQsIHRhZ3NdIG9mICQ3YWI0OTRmZTk3NzE0M2M2JHZhciRzdGF0ZU1hY2hpbmUubWF0Y2goZ2x5cGhzLm1hcCgkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkdXNlQ2F0ZWdvcnkpKSl7XG4gICAgICAgICsrc3lsbGFibGU7XG4gICAgICAgIC8vIENyZWF0ZSBzaGFwZXIgaW5mb1xuICAgICAgICBmb3IobGV0IGkgPSBzdGFydDsgaSA8PSBlbmQ7IGkrKylnbHlwaHNbaV0uc2hhcGVySW5mbyA9IG5ldyAkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkVVNFSW5mbygkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkY2F0ZWdvcmllc1skN2FiNDk0ZmU5NzcxNDNjNiR2YXIkdXNlQ2F0ZWdvcnkoZ2x5cGhzW2ldKV0sIHRhZ3NbMF0sIHN5bGxhYmxlKTtcbiAgICAgICAgLy8gQXNzaWduIHJwaGYgZmVhdHVyZVxuICAgICAgICBsZXQgbGltaXQgPSBnbHlwaHNbc3RhcnRdLnNoYXBlckluZm8uY2F0ZWdvcnkgPT09ICdSJyA/IDEgOiBNYXRoLm1pbigzLCBlbmQgLSBzdGFydCk7XG4gICAgICAgIGZvcihsZXQgaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBsaW1pdDsgaSsrKWdseXBoc1tpXS5mZWF0dXJlcy5ycGhmID0gdHJ1ZTtcbiAgICB9XG59XG5mdW5jdGlvbiAkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkY2xlYXJTdWJzdGl0dXRpb25GbGFncyhmb250LCBnbHlwaHMpIHtcbiAgICBmb3IgKGxldCBnbHlwaCBvZiBnbHlwaHMpZ2x5cGguc3Vic3RpdHV0ZWQgPSBmYWxzZTtcbn1cbmZ1bmN0aW9uICQ3YWI0OTRmZTk3NzE0M2M2JHZhciRyZWNvcmRScGhmKGZvbnQsIGdseXBocykge1xuICAgIGZvciAobGV0IGdseXBoIG9mIGdseXBocylpZiAoZ2x5cGguc3Vic3RpdHV0ZWQgJiYgZ2x5cGguZmVhdHVyZXMucnBoZikgLy8gTWFyayBhIHN1YnN0aXR1dGVkIHJlcGhhLlxuICAgIGdseXBoLnNoYXBlckluZm8uY2F0ZWdvcnkgPSAnUic7XG59XG5mdW5jdGlvbiAkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkcmVjb3JkUHJlZihmb250LCBnbHlwaHMpIHtcbiAgICBmb3IgKGxldCBnbHlwaCBvZiBnbHlwaHMpaWYgKGdseXBoLnN1YnN0aXR1dGVkKSAvLyBNYXJrIGEgc3Vic3RpdHV0ZWQgcHJlZiBhcyBWUHJlLCBhcyB0aGV5IGJlaGF2ZSB0aGUgc2FtZSB3YXkuXG4gICAgZ2x5cGguc2hhcGVySW5mby5jYXRlZ29yeSA9ICdWUHJlJztcbn1cbmZ1bmN0aW9uICQ3YWI0OTRmZTk3NzE0M2M2JHZhciRyZW9yZGVyKGZvbnQsIGdseXBocykge1xuICAgIGxldCBkb3R0ZWRDaXJjbGUgPSBmb250LmdseXBoRm9yQ29kZVBvaW50KDB4MjVjYykuaWQ7XG4gICAgZm9yKGxldCBzdGFydCA9IDAsIGVuZCA9ICQ3YWI0OTRmZTk3NzE0M2M2JHZhciRuZXh0U3lsbGFibGUoZ2x5cGhzLCAwKTsgc3RhcnQgPCBnbHlwaHMubGVuZ3RoOyBzdGFydCA9IGVuZCwgZW5kID0gJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJG5leHRTeWxsYWJsZShnbHlwaHMsIHN0YXJ0KSl7XG4gICAgICAgIGxldCBpLCBqO1xuICAgICAgICBsZXQgaW5mbyA9IGdseXBoc1tzdGFydF0uc2hhcGVySW5mbztcbiAgICAgICAgbGV0IHR5cGUgPSBpbmZvLnN5bGxhYmxlVHlwZTtcbiAgICAgICAgLy8gT25seSBhIGZldyBzeWxsYWJsZSB0eXBlcyBuZWVkIHJlb3JkZXJpbmcuXG4gICAgICAgIGlmICh0eXBlICE9PSAndmlyYW1hX3Rlcm1pbmF0ZWRfY2x1c3RlcicgJiYgdHlwZSAhPT0gJ3N0YW5kYXJkX2NsdXN0ZXInICYmIHR5cGUgIT09ICdicm9rZW5fY2x1c3RlcicpIGNvbnRpbnVlO1xuICAgICAgICAvLyBJbnNlcnQgYSBkb3R0ZWQgY2lyY2xlIGdseXBoIGluIGJyb2tlbiBjbHVzdGVycy5cbiAgICAgICAgaWYgKHR5cGUgPT09ICdicm9rZW5fY2x1c3RlcicgJiYgZG90dGVkQ2lyY2xlKSB7XG4gICAgICAgICAgICBsZXQgZyA9IG5ldyAoMCwgJDEwZTdiMjU3ZTFhOWE3NTYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoZm9udCwgZG90dGVkQ2lyY2xlLCBbXG4gICAgICAgICAgICAgICAgMHgyNWNjXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGcuc2hhcGVySW5mbyA9IGluZm87XG4gICAgICAgICAgICAvLyBJbnNlcnQgYWZ0ZXIgcG9zc2libGUgUmVwaGEuXG4gICAgICAgICAgICBmb3IoaSA9IHN0YXJ0OyBpIDwgZW5kICYmIGdseXBoc1tpXS5zaGFwZXJJbmZvLmNhdGVnb3J5ID09PSAnUic7IGkrKyk7XG4gICAgICAgICAgICBnbHlwaHMuc3BsaWNlKCsraSwgMCwgZyk7XG4gICAgICAgICAgICBlbmQrKztcbiAgICAgICAgfVxuICAgICAgICAvLyBNb3ZlIHRoaW5ncyBmb3J3YXJkLlxuICAgICAgICBpZiAoaW5mby5jYXRlZ29yeSA9PT0gJ1InICYmIGVuZCAtIHN0YXJ0ID4gMSkgLy8gR290IGEgcmVwaGEuIFJlb3JkZXIgaXQgdG8gYWZ0ZXIgZmlyc3QgYmFzZSwgYmVmb3JlIGZpcnN0IGhhbGFudC5cbiAgICAgICAgZm9yKGkgPSBzdGFydCArIDE7IGkgPCBlbmQ7IGkrKyl7XG4gICAgICAgICAgICBpbmZvID0gZ2x5cGhzW2ldLnNoYXBlckluZm87XG4gICAgICAgICAgICBpZiAoJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJGlzQmFzZShpbmZvKSB8fCAkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkaXNIYWxhbnQoZ2x5cGhzW2ldKSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHdlIGhpdCBhIGhhbGFudCwgbW92ZSBiZWZvcmUgaXQ7IG90aGVyd2lzZSBpdCdzIGEgYmFzZTogbW92ZSB0byBpdCdzXG4gICAgICAgICAgICAgICAgLy8gcGxhY2UsIGFuZCBzaGlmdCB0aGluZ3MgaW4gYmV0d2VlbiBiYWNrd2FyZC5cbiAgICAgICAgICAgICAgICBpZiAoJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJGlzSGFsYW50KGdseXBoc1tpXSkpIGktLTtcbiAgICAgICAgICAgICAgICBnbHlwaHMuc3BsaWNlKHN0YXJ0LCAwLCAuLi5nbHlwaHMuc3BsaWNlKHN0YXJ0ICsgMSwgaSAtIHN0YXJ0KSwgZ2x5cGhzW2ldKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBNb3ZlIHRoaW5ncyBiYWNrLlxuICAgICAgICBmb3IoaSA9IHN0YXJ0LCBqID0gZW5kOyBpIDwgZW5kOyBpKyspe1xuICAgICAgICAgICAgaW5mbyA9IGdseXBoc1tpXS5zaGFwZXJJbmZvO1xuICAgICAgICAgICAgaWYgKCQ3YWI0OTRmZTk3NzE0M2M2JHZhciRpc0Jhc2UoaW5mbykgfHwgJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJGlzSGFsYW50KGdseXBoc1tpXSkpIC8vIElmIHdlIGhpdCBhIGhhbGFudCwgbW92ZSBhZnRlciBpdDsgb3RoZXJ3aXNlIGl0J3MgYSBiYXNlOiBtb3ZlIHRvIGl0J3NcbiAgICAgICAgICAgIC8vIHBsYWNlLCBhbmQgc2hpZnQgdGhpbmdzIGluIGJldHdlZW4gYmFja3dhcmQuXG4gICAgICAgICAgICBqID0gJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJGlzSGFsYW50KGdseXBoc1tpXSkgPyBpICsgMSA6IGk7XG4gICAgICAgICAgICBlbHNlIGlmICgoaW5mby5jYXRlZ29yeSA9PT0gJ1ZQcmUnIHx8IGluZm8uY2F0ZWdvcnkgPT09ICdWTVByZScpICYmIGogPCBpKSBnbHlwaHMuc3BsaWNlKGosIDEsIGdseXBoc1tpXSwgLi4uZ2x5cGhzLnNwbGljZShqLCBpIC0gaikpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJG5leHRTeWxsYWJsZShnbHlwaHMsIHN0YXJ0KSB7XG4gICAgaWYgKHN0YXJ0ID49IGdseXBocy5sZW5ndGgpIHJldHVybiBzdGFydDtcbiAgICBsZXQgc3lsbGFibGUgPSBnbHlwaHNbc3RhcnRdLnNoYXBlckluZm8uc3lsbGFibGU7XG4gICAgd2hpbGUoKytzdGFydCA8IGdseXBocy5sZW5ndGggJiYgZ2x5cGhzW3N0YXJ0XS5zaGFwZXJJbmZvLnN5bGxhYmxlID09PSBzeWxsYWJsZSk7XG4gICAgcmV0dXJuIHN0YXJ0O1xufVxuZnVuY3Rpb24gJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJGlzSGFsYW50KGdseXBoKSB7XG4gICAgcmV0dXJuIGdseXBoLnNoYXBlckluZm8uY2F0ZWdvcnkgPT09ICdIJyAmJiAhZ2x5cGguaXNMaWdhdGVkO1xufVxuZnVuY3Rpb24gJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJGlzQmFzZShpbmZvKSB7XG4gICAgcmV0dXJuIGluZm8uY2F0ZWdvcnkgPT09ICdCJyB8fCBpbmZvLmNhdGVnb3J5ID09PSAnR0InO1xufVxuXG5cbmNvbnN0ICQxMDJiNmZlNTBmMWQ1MGI0JHZhciRTSEFQRVJTID0ge1xuICAgIGFyYWI6ICgwLCAkNzY0ZWI1NDRiYmUxY2NmMCRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBtb25nOiAoMCwgJDc2NGViNTQ0YmJlMWNjZjAkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgc3lyYzogKDAsICQ3NjRlYjU0NGJiZTFjY2YwJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgICdua28gJzogKDAsICQ3NjRlYjU0NGJiZTFjY2YwJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIHBoYWc6ICgwLCAkNzY0ZWI1NDRiYmUxY2NmMCRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBtYW5kOiAoMCwgJDc2NGViNTQ0YmJlMWNjZjAkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgbWFuaTogKDAsICQ3NjRlYjU0NGJiZTFjY2YwJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIHBobHA6ICgwLCAkNzY0ZWI1NDRiYmUxY2NmMCRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBoYW5nOiAoMCwgJGUxYzZiYmM4Y2I0MTZmOGMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgYm5nMjogKDAsICQ3ODI2ZjkwZjZmMGNlY2M5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGJlbmc6ICgwLCAkNzgyNmY5MGY2ZjBjZWNjOSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBkZXYyOiAoMCwgJDc4MjZmOTBmNmYwY2VjYzkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgZGV2YTogKDAsICQ3ODI2ZjkwZjZmMGNlY2M5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGdqcjI6ICgwLCAkNzgyNmY5MGY2ZjBjZWNjOSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBndWpyOiAoMCwgJDc4MjZmOTBmNmYwY2VjYzkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgZ3VydTogKDAsICQ3ODI2ZjkwZjZmMGNlY2M5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGd1cjI6ICgwLCAkNzgyNmY5MGY2ZjBjZWNjOSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBrbmRhOiAoMCwgJDc4MjZmOTBmNmYwY2VjYzkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAga25kMjogKDAsICQ3ODI2ZjkwZjZmMGNlY2M5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIG1sbTI6ICgwLCAkNzgyNmY5MGY2ZjBjZWNjOSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBtbHltOiAoMCwgJDc4MjZmOTBmNmYwY2VjYzkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgb3J5MjogKDAsICQ3ODI2ZjkwZjZmMGNlY2M5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIG9yeWE6ICgwLCAkNzgyNmY5MGY2ZjBjZWNjOSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICB0YW1sOiAoMCwgJDc4MjZmOTBmNmYwY2VjYzkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgdG1sMjogKDAsICQ3ODI2ZjkwZjZmMGNlY2M5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIHRlbHU6ICgwLCAkNzgyNmY5MGY2ZjBjZWNjOSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICB0ZWwyOiAoMCwgJDc4MjZmOTBmNmYwY2VjYzkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAga2htcjogKDAsICQ3ODI2ZjkwZjZmMGNlY2M5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGJhbGk6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBiYXRrOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgYnJhaDogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGJ1Z2k6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBidWhkOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgY2FrbTogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGNoYW06ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBkdXBsOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgZWd5cDogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGdyYW46ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBoYW5vOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgamF2YTogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGt0aGk6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBrYWxpOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAga2hhcjogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGtob2o6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBzaW5kOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgbGVwYzogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGxpbWI6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBtYWhqOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgLy8gbWFuZDogVW5pdmVyc2FsU2hhcGVyLCAvLyBNYW5kYWljXG4gICAgLy8gbWFuaTogVW5pdmVyc2FsU2hhcGVyLCAvLyBNYW5pY2hhZWFuXG4gICAgbXRlaTogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIG1vZGk6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICAvLyBtb25nOiBVbml2ZXJzYWxTaGFwZXIsIC8vIE1vbmdvbGlhblxuICAgIC8vICdua28gJzogVW5pdmVyc2FsU2hhcGVyLCAvLyBO4oCZS29cbiAgICBobW5nOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgLy8gcGhhZzogVW5pdmVyc2FsU2hhcGVyLCAvLyBQaGFncy1wYVxuICAgIC8vIHBobHA6IFVuaXZlcnNhbFNoYXBlciwgLy8gUHNhbHRlciBQYWhsYXZpXG4gICAgcmpuZzogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIHNhdXI6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBzaHJkOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgc2lkZDogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIHNpbmg6ICgwLCAkNzgyNmY5MGY2ZjBjZWNjOSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBzdW5kOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgc3lsbzogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIHRnbGc6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICB0YWdiOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgdGFsZTogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGxhbmE6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICB0YXZ0OiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgdGFrcjogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIHRpYnQ6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICB0Zm5nOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgdGlyaDogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGxhdG46ICgwLCAkNjQ5OTcwZDg3MzM1YjMwZiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBERkxUOiAoMCwgJDY0OTk3MGQ4NzMzNWIzMGYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSAvLyBEZWZhdWx0XG4gICAgKVxufTtcbmZ1bmN0aW9uICQxMDJiNmZlNTBmMWQ1MGI0JGV4cG9ydCQ3ODc3YTQ3OGRkMzBmZDNkKHNjcmlwdCkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShzY3JpcHQpKSBzY3JpcHQgPSBbXG4gICAgICAgIHNjcmlwdFxuICAgIF07XG4gICAgZm9yIChsZXQgcyBvZiBzY3JpcHQpe1xuICAgICAgICBsZXQgc2hhcGVyID0gJDEwMmI2ZmU1MGYxZDUwYjQkdmFyJFNIQVBFUlNbc107XG4gICAgICAgIGlmIChzaGFwZXIpIHJldHVybiBzaGFwZXI7XG4gICAgfVxuICAgIHJldHVybiAwLCAkNjQ5OTcwZDg3MzM1YjMwZiRleHBvcnQkMmUyYmNkODczOWFlMDM5O1xufVxuXG5cblxuXG5cbmNsYXNzICQwYTg3NmM0NWYxZjdjNDFjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgZXh0ZW5kcyAoMCwgJGE4M2I5YzM2YWFhOTRmZDMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkge1xuICAgIGFwcGx5TG9va3VwKGxvb2t1cFR5cGUsIHRhYmxlKSB7XG4gICAgICAgIHN3aXRjaChsb29rdXBUeXBlKXtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IHRoaXMuY292ZXJhZ2VJbmRleCh0YWJsZS5jb3ZlcmFnZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGdseXBoID0gdGhpcy5nbHlwaEl0ZXJhdG9yLmN1cjtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKHRhYmxlLnZlcnNpb24pe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdseXBoLmlkID0gZ2x5cGguaWQgKyB0YWJsZS5kZWx0YUdseXBoSUQgJiAweGZmZmY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2x5cGguaWQgPSB0YWJsZS5zdWJzdGl0dXRlLmdldChpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5jb3ZlcmFnZUluZGV4KHRhYmxlLmNvdmVyYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNlcXVlbmNlID0gdGFibGUuc2VxdWVuY2VzLmdldChpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIHNlcXVlbmNlIGxlbmd0aCBpcyB6ZXJvLCBkZWxldGUgdGhlIGdseXBoLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBPcGVuVHlwZSBzcGVjIGRpc2FsbG93cyB0aGlzLCBidXQgc2VlbXMgbGlrZSBIYXJmYnV6eiBhbmQgVW5pc2NyaWJlIGFsbG93IGl0LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2x5cGhzLnNwbGljZSh0aGlzLmdseXBoSXRlcmF0b3IuaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nbHlwaEl0ZXJhdG9yLmN1ci5pZCA9IHNlcXVlbmNlWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nbHlwaEl0ZXJhdG9yLmN1ci5saWdhdHVyZUNvbXBvbmVudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmVhdHVyZXMgPSB0aGlzLmdseXBoSXRlcmF0b3IuY3VyLmZlYXR1cmVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGN1ckdseXBoID0gdGhpcy5nbHlwaEl0ZXJhdG9yLmN1cjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXBsYWNlbWVudCA9IHNlcXVlbmNlLnNsaWNlKDEpLm1hcCgoZ2lkLCBpKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBnbHlwaCA9IG5ldyAoMCwgJDEwZTdiMjU3ZTFhOWE3NTYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkodGhpcy5mb250LCBnaWQsIHVuZGVmaW5lZCwgZmVhdHVyZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdseXBoLnNoYXBlckluZm8gPSBjdXJHbHlwaC5zaGFwZXJJbmZvO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdseXBoLmlzTGlnYXRlZCA9IGN1ckdseXBoLmlzTGlnYXRlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbHlwaC5saWdhdHVyZUNvbXBvbmVudCA9IGkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdseXBoLnN1YnN0aXR1dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbHlwaC5pc011bHRpcGxpZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnbHlwaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nbHlwaHMuc3BsaWNlKHRoaXMuZ2x5cGhJdGVyYXRvci5pbmRleCArIDEsIDAsIC4uLnJlcGxhY2VtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmNvdmVyYWdlSW5kZXgodGFibGUuY292ZXJhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgVVNFUl9JTkRFWCA9IDA7IC8vIFRPRE9cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2x5cGhJdGVyYXRvci5jdXIuaWQgPSB0YWJsZS5hbHRlcm5hdGVTZXQuZ2V0KGluZGV4KVtVU0VSX0lOREVYXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmNvdmVyYWdlSW5kZXgodGFibGUuY292ZXJhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGxpZ2F0dXJlIG9mIHRhYmxlLmxpZ2F0dXJlU2V0cy5nZXQoaW5kZXgpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXRjaGVkID0gdGhpcy5zZXF1ZW5jZU1hdGNoSW5kaWNlcygxLCBsaWdhdHVyZS5jb21wb25lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlZCkgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VyR2x5cGggPSB0aGlzLmdseXBoSXRlcmF0b3IuY3VyO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29uY2F0ZW5hdGUgYWxsIG9mIHRoZSBjaGFyYWN0ZXJzIHRoZSBuZXcgbGlnYXR1cmUgd2lsbCByZXByZXNlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGFyYWN0ZXJzID0gY3VyR2x5cGguY29kZVBvaW50cy5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggb2YgbWF0Y2hlZCljaGFyYWN0ZXJzLnB1c2goLi4udGhpcy5nbHlwaHNbaW5kZXhdLmNvZGVQb2ludHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSByZXBsYWNlbWVudCBsaWdhdHVyZSBnbHlwaFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpZ2F0dXJlR2x5cGggPSBuZXcgKDAsICQxMGU3YjI1N2UxYTlhNzU2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKHRoaXMuZm9udCwgbGlnYXR1cmUuZ2x5cGgsIGNoYXJhY3RlcnMsIGN1ckdseXBoLmZlYXR1cmVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2F0dXJlR2x5cGguc2hhcGVySW5mbyA9IGN1ckdseXBoLnNoYXBlckluZm87XG4gICAgICAgICAgICAgICAgICAgICAgICBsaWdhdHVyZUdseXBoLmlzTGlnYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaWdhdHVyZUdseXBoLnN1YnN0aXR1dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZyb20gSGFyZmJ1eno6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAtIElmIGl0ICppcyogYSBtYXJrIGxpZ2F0dXJlLCB3ZSBkb24ndCBhbGxvY2F0ZSBhIG5ldyBsaWdhdHVyZSBpZCwgYW5kIGxlYXZlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHRoZSBsaWdhdHVyZSB0byBrZWVwIGl0cyBvbGQgbGlnYXR1cmUgaWQuICBUaGlzIHdpbGwgYWxsb3cgaXQgdG8gYXR0YWNoIHRvXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGEgYmFzZSBsaWdhdHVyZSBpbiBHUE9TLiAgRWcuIGlmIHRoZSBzZXF1ZW5jZSBpczogTEFNLExBTSxTSEFEREEsRkFUSEEsSEVILFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBhbmQgTEFNLExBTSxIRUggZm9yIGEgbGlnYXR1cmUsIHRoZXkgd2lsbCBsZWF2ZSBTSEFEREEgYW5kIEZBVEhBIHdpdGggYVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBsaWdhdHVyZSBpZCBhbmQgY29tcG9uZW50IHZhbHVlIG9mIDIuICBUaGVuIGlmIFNIQUREQSxGQVRIQSBmb3JtIGEgbGlnYXR1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgbGF0ZXIsIHdlIGRvbid0IHdhbnQgdGhlbSB0byBsb3NlIHRoZWlyIGxpZ2F0dXJlIGlkL2NvbXBvbmVudCwgb3RoZXJ3aXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIEdQT1Mgd2lsbCBmYWlsIHRvIGNvcnJlY3RseSBwb3NpdGlvbiB0aGUgbWFyayBsaWdhdHVyZSBvbiB0b3Agb2YgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIExBTSxMQU0sSEVIIGxpZ2F0dXJlLiBTZWUgaHR0cHM6Ly9idWd6aWxsYS5nbm9tZS5vcmcvc2hvd19idWcuY2dpP2lkPTY3NjM0M1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0gSWYgYSBsaWdhdHVyZSBpcyBmb3JtZWQgb2YgY29tcG9uZW50cyB0aGF0IHNvbWUgb2Ygd2hpY2ggYXJlIGFsc28gbGlnYXR1cmVzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHRoZW1zZWx2ZXMsIGFuZCB0aG9zZSBsaWdhdHVyZSBjb21wb25lbnRzIGhhZCBtYXJrcyBhdHRhY2hlZCB0byAqdGhlaXIqXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGNvbXBvbmVudHMsIHdlIGhhdmUgdG8gYXR0YWNoIHRoZSBtYXJrcyB0byB0aGUgbmV3IGxpZ2F0dXJlIGNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBwb3NpdGlvbnMhICBOb3cgKnRoYXQqJ3MgdHJpY2t5ISAgQW5kIHRoZXNlIG1hcmtzIG1heSBiZSBmb2xsb3dpbmcgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGxhc3QgY29tcG9uZW50IG9mIHRoZSB3aG9sZSBzZXF1ZW5jZSwgc28gd2Ugc2hvdWxkIGxvb3AgZm9yd2FyZCBsb29raW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGZvciB0aGVtIGFuZCB1cGRhdGUgdGhlbS5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIEVnLiB0aGUgc2VxdWVuY2UgaXMgTEFNLExBTSxTSEFEREEsRkFUSEEsSEVILCBhbmQgdGhlIGZvbnQgZmlyc3QgZm9ybXMgYVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAnY2FsdCcgbGlnYXR1cmUgb2YgTEFNLEhFSCwgbGVhdmluZyB0aGUgU0hBRERBIGFuZCBGQVRIQSB3aXRoIGEgbGlnYXR1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgaWQgYW5kIGNvbXBvbmVudCA9PSAxLiAgTm93LCBkdXJpbmcgJ2xpZ2EnLCB0aGUgTEFNIGFuZCB0aGUgTEFNLUhFSCBsaWdhdHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBmb3JtIGEgTEFNLUxBTS1IRUggbGlnYXR1cmUuICBXZSBuZWVkIHRvIHJlYXNzaWduIHRoZSBTSEFEREEgYW5kIEZBVEhBIHRvXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHRoZSBuZXcgbGlnYXR1cmUgd2l0aCBhIGNvbXBvbmVudCB2YWx1ZSBvZiAyLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgVGhpcyBpbiBmYWN0IGhhcHBlbmVkIHRvIGEgZm9udC4uLiAgU2VlIGh0dHBzOi8vYnVnemlsbGEuZ25vbWUub3JnL3Nob3dfYnVnLmNnaT9pZD00Mzc2MzNcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpc01hcmtMaWdhdHVyZSA9IGN1ckdseXBoLmlzTWFyaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBtYXRjaGVkLmxlbmd0aCAmJiBpc01hcmtMaWdhdHVyZTsgaSsrKWlzTWFya0xpZ2F0dXJlID0gdGhpcy5nbHlwaHNbbWF0Y2hlZFtpXV0uaXNNYXJrO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlnYXR1cmVHbHlwaC5saWdhdHVyZUlEID0gaXNNYXJrTGlnYXR1cmUgPyBudWxsIDogdGhpcy5saWdhdHVyZUlEKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdExpZ0lEID0gY3VyR2x5cGgubGlnYXR1cmVJRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsYXN0TnVtQ29tcHMgPSBjdXJHbHlwaC5jb2RlUG9pbnRzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjdXJDb21wcyA9IGxhc3ROdW1Db21wcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpZHggPSB0aGlzLmdseXBoSXRlcmF0b3IuaW5kZXggKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGxpZ2F0dXJlSUQgYW5kIGxpZ2F0dXJlQ29tcG9uZW50IG9uIGdseXBocyB0aGF0IHdlcmUgc2tpcHBlZCBpbiB0aGUgbWF0Y2hlZCBzZXF1ZW5jZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgYWxsb3dzIEdQT1MgdG8gYXR0YWNoIG1hcmtzIHRvIHRoZSBjb3JyZWN0IGxpZ2F0dXJlIGNvbXBvbmVudHMuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtYXRjaEluZGV4IG9mIG1hdGNoZWQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IGFzc2lnbiBuZXcgbGlnYXR1cmUgY29tcG9uZW50cyBmb3IgbWFyayBsaWdhdHVyZXMgKHNlZSBhYm92ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNNYXJrTGlnYXR1cmUpIGlkeCA9IG1hdGNoSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB3aGlsZShpZHggPCBtYXRjaEluZGV4KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpZ2F0dXJlQ29tcG9uZW50ID0gY3VyQ29tcHMgLSBsYXN0TnVtQ29tcHMgKyBNYXRoLm1pbih0aGlzLmdseXBoc1tpZHhdLmxpZ2F0dXJlQ29tcG9uZW50IHx8IDEsIGxhc3ROdW1Db21wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2x5cGhzW2lkeF0ubGlnYXR1cmVJRCA9IGxpZ2F0dXJlR2x5cGgubGlnYXR1cmVJRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nbHlwaHNbaWR4XS5saWdhdHVyZUNvbXBvbmVudCA9IGxpZ2F0dXJlQ29tcG9uZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdExpZ0lEID0gdGhpcy5nbHlwaHNbaWR4XS5saWdhdHVyZUlEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3ROdW1Db21wcyA9IHRoaXMuZ2x5cGhzW2lkeF0uY29kZVBvaW50cy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyQ29tcHMgKz0gbGFzdE51bUNvbXBzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkeCsrOyAvLyBza2lwIGJhc2UgZ2x5cGhcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkanVzdCBsaWdhdHVyZSBjb21wb25lbnRzIGZvciBhbnkgbWFya3MgZm9sbG93aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdExpZ0lEICYmICFpc01hcmtMaWdhdHVyZSkgZm9yKGxldCBpID0gaWR4OyBpIDwgdGhpcy5nbHlwaHMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmdseXBoc1tpXS5saWdhdHVyZUlEID09PSBsYXN0TGlnSUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpZ2F0dXJlQ29tcG9uZW50ID0gY3VyQ29tcHMgLSBsYXN0TnVtQ29tcHMgKyBNYXRoLm1pbih0aGlzLmdseXBoc1tpXS5saWdhdHVyZUNvbXBvbmVudCB8fCAxLCBsYXN0TnVtQ29tcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdseXBoc1tpXS5saWdhdHVyZUNvbXBvbmVudCA9IGxpZ2F0dXJlQ29tcG9uZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlbGV0ZSB0aGUgbWF0Y2hlZCBnbHlwaHMsIGFuZCByZXBsYWNlIHRoZSBjdXJyZW50IGdseXBoIHdpdGggdGhlIGxpZ2F0dXJlIGdseXBoXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSBtYXRjaGVkLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKXRoaXMuZ2x5cGhzLnNwbGljZShtYXRjaGVkW2ldLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2x5cGhzW3RoaXMuZ2x5cGhJdGVyYXRvci5pbmRleF0gPSBsaWdhdHVyZUdseXBoO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseUNvbnRleHQodGFibGUpO1xuICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5Q2hhaW5pbmdDb250ZXh0KHRhYmxlKTtcbiAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseUxvb2t1cCh0YWJsZS5sb29rdXBUeXBlLCB0YWJsZS5leHRlbnNpb24pO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEdTVUIgbG9va3VwVHlwZSAke2xvb2t1cFR5cGV9IGlzIG5vdCBzdXBwb3J0ZWRgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5cbmNsYXNzICRjOTZjOTM1ODdkNDljMTRkJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgZXh0ZW5kcyAoMCwgJGE4M2I5YzM2YWFhOTRmZDMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkge1xuICAgIGFwcGx5UG9zaXRpb25WYWx1ZShzZXF1ZW5jZUluZGV4LCB2YWx1ZSkge1xuICAgICAgICBsZXQgcG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uc1t0aGlzLmdseXBoSXRlcmF0b3IucGVla0luZGV4KHNlcXVlbmNlSW5kZXgpXTtcbiAgICAgICAgaWYgKHZhbHVlLnhBZHZhbmNlICE9IG51bGwpIHBvc2l0aW9uLnhBZHZhbmNlICs9IHZhbHVlLnhBZHZhbmNlO1xuICAgICAgICBpZiAodmFsdWUueUFkdmFuY2UgIT0gbnVsbCkgcG9zaXRpb24ueUFkdmFuY2UgKz0gdmFsdWUueUFkdmFuY2U7XG4gICAgICAgIGlmICh2YWx1ZS54UGxhY2VtZW50ICE9IG51bGwpIHBvc2l0aW9uLnhPZmZzZXQgKz0gdmFsdWUueFBsYWNlbWVudDtcbiAgICAgICAgaWYgKHZhbHVlLnlQbGFjZW1lbnQgIT0gbnVsbCkgcG9zaXRpb24ueU9mZnNldCArPSB2YWx1ZS55UGxhY2VtZW50O1xuICAgICAgICAvLyBBZGp1c3RtZW50cyBmb3IgZm9udCB2YXJpYXRpb25zXG4gICAgICAgIGxldCB2YXJpYXRpb25Qcm9jZXNzb3IgPSB0aGlzLmZvbnQuX3ZhcmlhdGlvblByb2Nlc3NvcjtcbiAgICAgICAgbGV0IHZhcmlhdGlvblN0b3JlID0gdGhpcy5mb250LkdERUYgJiYgdGhpcy5mb250LkdERUYuaXRlbVZhcmlhdGlvblN0b3JlO1xuICAgICAgICBpZiAodmFyaWF0aW9uUHJvY2Vzc29yICYmIHZhcmlhdGlvblN0b3JlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUueFBsYURldmljZSkgcG9zaXRpb24ueE9mZnNldCArPSB2YXJpYXRpb25Qcm9jZXNzb3IuZ2V0RGVsdGEodmFyaWF0aW9uU3RvcmUsIHZhbHVlLnhQbGFEZXZpY2UuYSwgdmFsdWUueFBsYURldmljZS5iKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZS55UGxhRGV2aWNlKSBwb3NpdGlvbi55T2Zmc2V0ICs9IHZhcmlhdGlvblByb2Nlc3Nvci5nZXREZWx0YSh2YXJpYXRpb25TdG9yZSwgdmFsdWUueVBsYURldmljZS5hLCB2YWx1ZS55UGxhRGV2aWNlLmIpO1xuICAgICAgICAgICAgaWYgKHZhbHVlLnhBZHZEZXZpY2UpIHBvc2l0aW9uLnhBZHZhbmNlICs9IHZhcmlhdGlvblByb2Nlc3Nvci5nZXREZWx0YSh2YXJpYXRpb25TdG9yZSwgdmFsdWUueEFkdkRldmljZS5hLCB2YWx1ZS54QWR2RGV2aWNlLmIpO1xuICAgICAgICAgICAgaWYgKHZhbHVlLnlBZHZEZXZpY2UpIHBvc2l0aW9uLnlBZHZhbmNlICs9IHZhcmlhdGlvblByb2Nlc3Nvci5nZXREZWx0YSh2YXJpYXRpb25TdG9yZSwgdmFsdWUueUFkdkRldmljZS5hLCB2YWx1ZS55QWR2RGV2aWNlLmIpO1xuICAgICAgICB9XG4gICAgLy8gVE9ETzogZGV2aWNlIHRhYmxlc1xuICAgIH1cbiAgICBhcHBseUxvb2t1cChsb29rdXBUeXBlLCB0YWJsZSkge1xuICAgICAgICBzd2l0Y2gobG9va3VwVHlwZSl7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmNvdmVyYWdlSW5kZXgodGFibGUuY292ZXJhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCh0YWJsZS52ZXJzaW9uKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGx5UG9zaXRpb25WYWx1ZSgwLCB0YWJsZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBseVBvc2l0aW9uVmFsdWUoMCwgdGFibGUudmFsdWVzLmdldChpbmRleCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXh0R2x5cGggPSB0aGlzLmdseXBoSXRlcmF0b3IucGVlaygpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW5leHRHbHlwaCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmNvdmVyYWdlSW5kZXgodGFibGUuY292ZXJhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCh0YWJsZS52ZXJzaW9uKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2V0ID0gdGFibGUucGFpclNldHMuZ2V0KGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBwYWlyIG9mIHNldClpZiAocGFpci5zZWNvbmRHbHlwaCA9PT0gbmV4dEdseXBoLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlQb3NpdGlvblZhbHVlKDAsIHBhaXIudmFsdWUxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBseVBvc2l0aW9uVmFsdWUoMSwgcGFpci52YWx1ZTIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjbGFzczEgPSB0aGlzLmdldENsYXNzSUQodGhpcy5nbHlwaEl0ZXJhdG9yLmN1ci5pZCwgdGFibGUuY2xhc3NEZWYxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2xhc3MyID0gdGhpcy5nZXRDbGFzc0lEKG5leHRHbHlwaC5pZCwgdGFibGUuY2xhc3NEZWYyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc3MxID09PSAtMSB8fCBjbGFzczIgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhaXIgPSB0YWJsZS5jbGFzc1JlY29yZHMuZ2V0KGNsYXNzMSkuZ2V0KGNsYXNzMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBseVBvc2l0aW9uVmFsdWUoMCwgcGFpci52YWx1ZTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlQb3NpdGlvblZhbHVlKDEsIHBhaXIudmFsdWUyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXh0SW5kZXggPSB0aGlzLmdseXBoSXRlcmF0b3IucGVla0luZGV4KCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXh0R2x5cGggPSB0aGlzLmdseXBoc1tuZXh0SW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW5leHRHbHlwaCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyUmVjb3JkID0gdGFibGUuZW50cnlFeGl0UmVjb3Jkc1t0aGlzLmNvdmVyYWdlSW5kZXgodGFibGUuY292ZXJhZ2UpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXJSZWNvcmQgfHwgIWN1clJlY29yZC5leGl0QW5jaG9yKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXh0UmVjb3JkID0gdGFibGUuZW50cnlFeGl0UmVjb3Jkc1t0aGlzLmNvdmVyYWdlSW5kZXgodGFibGUuY292ZXJhZ2UsIG5leHRHbHlwaC5pZCldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW5leHRSZWNvcmQgfHwgIW5leHRSZWNvcmQuZW50cnlBbmNob3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVudHJ5ID0gdGhpcy5nZXRBbmNob3IobmV4dFJlY29yZC5lbnRyeUFuY2hvcik7XG4gICAgICAgICAgICAgICAgICAgIGxldCBleGl0ID0gdGhpcy5nZXRBbmNob3IoY3VyUmVjb3JkLmV4aXRBbmNob3IpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyID0gdGhpcy5wb3NpdGlvbnNbdGhpcy5nbHlwaEl0ZXJhdG9yLmluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5leHQgPSB0aGlzLnBvc2l0aW9uc1tuZXh0SW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZDtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKHRoaXMuZGlyZWN0aW9uKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2x0cic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyLnhBZHZhbmNlID0gZXhpdC54ICsgY3VyLnhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9IGVudHJ5LnggKyBuZXh0LnhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dC54QWR2YW5jZSAtPSBkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQueE9mZnNldCAtPSBkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncnRsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gZXhpdC54ICsgY3VyLnhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyLnhBZHZhbmNlIC09IGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyLnhPZmZzZXQgLT0gZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0LnhBZHZhbmNlID0gZW50cnkueCArIG5leHQueE9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5nbHlwaEl0ZXJhdG9yLmZsYWdzLnJpZ2h0VG9MZWZ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdseXBoSXRlcmF0b3IuY3VyLmN1cnNpdmVBdHRhY2htZW50ID0gbmV4dEluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyLnlPZmZzZXQgPSBlbnRyeS55IC0gZXhpdC55O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEdseXBoLmN1cnNpdmVBdHRhY2htZW50ID0gdGhpcy5nbHlwaEl0ZXJhdG9yLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyLnlPZmZzZXQgPSBleGl0LnkgLSBlbnRyeS55O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXJrSW5kZXggPSB0aGlzLmNvdmVyYWdlSW5kZXgodGFibGUubWFya0NvdmVyYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmtJbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2VhcmNoIGJhY2t3YXJkIGZvciBhIGJhc2UgZ2x5cGhcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJhc2VHbHlwaEluZGV4ID0gdGhpcy5nbHlwaEl0ZXJhdG9yLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSgtLWJhc2VHbHlwaEluZGV4ID49IDAgJiYgKHRoaXMuZ2x5cGhzW2Jhc2VHbHlwaEluZGV4XS5pc01hcmsgfHwgdGhpcy5nbHlwaHNbYmFzZUdseXBoSW5kZXhdLmxpZ2F0dXJlQ29tcG9uZW50ID4gMCkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmFzZUdseXBoSW5kZXggPCAwKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGxldCBiYXNlSW5kZXggPSB0aGlzLmNvdmVyYWdlSW5kZXgodGFibGUuYmFzZUNvdmVyYWdlLCB0aGlzLmdseXBoc1tiYXNlR2x5cGhJbmRleF0uaWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmFzZUluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWFya1JlY29yZCA9IHRhYmxlLm1hcmtBcnJheVttYXJrSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgYmFzZUFuY2hvciA9IHRhYmxlLmJhc2VBcnJheVtiYXNlSW5kZXhdW21hcmtSZWNvcmQuY2xhc3NdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGx5QW5jaG9yKG1hcmtSZWNvcmQsIGJhc2VBbmNob3IsIGJhc2VHbHlwaEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmtJbmRleCA9IHRoaXMuY292ZXJhZ2VJbmRleCh0YWJsZS5tYXJrQ292ZXJhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWFya0luZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAvLyBzZWFyY2ggYmFja3dhcmQgZm9yIGEgYmFzZSBnbHlwaFxuICAgICAgICAgICAgICAgICAgICBsZXQgYmFzZUdseXBoSW5kZXggPSB0aGlzLmdseXBoSXRlcmF0b3IuaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKC0tYmFzZUdseXBoSW5kZXggPj0gMCAmJiB0aGlzLmdseXBoc1tiYXNlR2x5cGhJbmRleF0uaXNNYXJrKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhc2VHbHlwaEluZGV4IDwgMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGlnSW5kZXggPSB0aGlzLmNvdmVyYWdlSW5kZXgodGFibGUubGlnYXR1cmVDb3ZlcmFnZSwgdGhpcy5nbHlwaHNbYmFzZUdseXBoSW5kZXhdLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpZ0luZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGlnQXR0YWNoID0gdGFibGUubGlnYXR1cmVBcnJheVtsaWdJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXJrR2x5cGggPSB0aGlzLmdseXBoSXRlcmF0b3IuY3VyO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGlnR2x5cGggPSB0aGlzLmdseXBoc1tiYXNlR2x5cGhJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb21wSW5kZXggPSBsaWdHbHlwaC5saWdhdHVyZUlEICYmIGxpZ0dseXBoLmxpZ2F0dXJlSUQgPT09IG1hcmtHbHlwaC5saWdhdHVyZUlEICYmIG1hcmtHbHlwaC5saWdhdHVyZUNvbXBvbmVudCA+IDAgPyBNYXRoLm1pbihtYXJrR2x5cGgubGlnYXR1cmVDb21wb25lbnQsIGxpZ0dseXBoLmNvZGVQb2ludHMubGVuZ3RoKSAtIDEgOiBsaWdHbHlwaC5jb2RlUG9pbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXJrUmVjb3JkID0gdGFibGUubWFya0FycmF5W21hcmtJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGxldCBiYXNlQW5jaG9yID0gbGlnQXR0YWNoW2NvbXBJbmRleF1bbWFya1JlY29yZC5jbGFzc107XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlBbmNob3IobWFya1JlY29yZCwgYmFzZUFuY2hvciwgYmFzZUdseXBoSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWFyazFJbmRleCA9IHRoaXMuY292ZXJhZ2VJbmRleCh0YWJsZS5tYXJrMUNvdmVyYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmsxSW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIC8vIGdldCB0aGUgcHJldmlvdXMgbWFyayB0byBhdHRhY2ggdG9cbiAgICAgICAgICAgICAgICAgICAgbGV0IHByZXZJbmRleCA9IHRoaXMuZ2x5cGhJdGVyYXRvci5wZWVrSW5kZXgoLTEpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcHJldiA9IHRoaXMuZ2x5cGhzW3ByZXZJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGlmICghcHJldiB8fCAhcHJldi5pc01hcmspIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1ciA9IHRoaXMuZ2x5cGhJdGVyYXRvci5jdXI7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgbG9naWMgd2FzIGJvcnJvd2VkIGZyb20gSGFyZmJ1enpcbiAgICAgICAgICAgICAgICAgICAgbGV0IGdvb2QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1ci5saWdhdHVyZUlEID09PSBwcmV2LmxpZ2F0dXJlSUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY3VyLmxpZ2F0dXJlSUQpIGdvb2QgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY3VyLmxpZ2F0dXJlQ29tcG9uZW50ID09PSBwcmV2LmxpZ2F0dXJlQ29tcG9uZW50KSBnb29kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIC8vIElmIGxpZ2F0dXJlIGlkcyBkb24ndCBtYXRjaCwgaXQgbWF5IGJlIHRoZSBjYXNlIHRoYXQgb25lIG9mIHRoZSBtYXJrc1xuICAgICAgICAgICAgICAgICAgICAvLyBpdHNlbGYgaXMgYSBsaWdhdHVyZSwgaW4gd2hpY2ggY2FzZSBtYXRjaC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1ci5saWdhdHVyZUlEICYmICFjdXIubGlnYXR1cmVDb21wb25lbnQgfHwgcHJldi5saWdhdHVyZUlEICYmICFwcmV2LmxpZ2F0dXJlQ29tcG9uZW50KSBnb29kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFnb29kKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXJrMkluZGV4ID0gdGhpcy5jb3ZlcmFnZUluZGV4KHRhYmxlLm1hcmsyQ292ZXJhZ2UsIHByZXYuaWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWFyazJJbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmtSZWNvcmQgPSB0YWJsZS5tYXJrMUFycmF5W21hcmsxSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgYmFzZUFuY2hvciA9IHRhYmxlLm1hcmsyQXJyYXlbbWFyazJJbmRleF1bbWFya1JlY29yZC5jbGFzc107XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlBbmNob3IobWFya1JlY29yZCwgYmFzZUFuY2hvciwgcHJldkluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5Q29udGV4dCh0YWJsZSk7XG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlDaGFpbmluZ0NvbnRleHQodGFibGUpO1xuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5TG9va3VwKHRhYmxlLmxvb2t1cFR5cGUsIHRhYmxlLmV4dGVuc2lvbik7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgR1BPUyB0YWJsZTogJHtsb29rdXBUeXBlfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFwcGx5QW5jaG9yKG1hcmtSZWNvcmQsIGJhc2VBbmNob3IsIGJhc2VHbHlwaEluZGV4KSB7XG4gICAgICAgIGxldCBiYXNlQ29vcmRzID0gdGhpcy5nZXRBbmNob3IoYmFzZUFuY2hvcik7XG4gICAgICAgIGxldCBtYXJrQ29vcmRzID0gdGhpcy5nZXRBbmNob3IobWFya1JlY29yZC5tYXJrQW5jaG9yKTtcbiAgICAgICAgbGV0IGJhc2VQb3MgPSB0aGlzLnBvc2l0aW9uc1tiYXNlR2x5cGhJbmRleF07XG4gICAgICAgIGxldCBtYXJrUG9zID0gdGhpcy5wb3NpdGlvbnNbdGhpcy5nbHlwaEl0ZXJhdG9yLmluZGV4XTtcbiAgICAgICAgbWFya1Bvcy54T2Zmc2V0ID0gYmFzZUNvb3Jkcy54IC0gbWFya0Nvb3Jkcy54O1xuICAgICAgICBtYXJrUG9zLnlPZmZzZXQgPSBiYXNlQ29vcmRzLnkgLSBtYXJrQ29vcmRzLnk7XG4gICAgICAgIHRoaXMuZ2x5cGhJdGVyYXRvci5jdXIubWFya0F0dGFjaG1lbnQgPSBiYXNlR2x5cGhJbmRleDtcbiAgICB9XG4gICAgZ2V0QW5jaG9yKGFuY2hvcikge1xuICAgICAgICAvLyBUT0RPOiBjb250b3VyIHBvaW50LCBkZXZpY2UgdGFibGVzXG4gICAgICAgIGxldCB4ID0gYW5jaG9yLnhDb29yZGluYXRlO1xuICAgICAgICBsZXQgeSA9IGFuY2hvci55Q29vcmRpbmF0ZTtcbiAgICAgICAgLy8gQWRqdXN0bWVudHMgZm9yIGZvbnQgdmFyaWF0aW9uc1xuICAgICAgICBsZXQgdmFyaWF0aW9uUHJvY2Vzc29yID0gdGhpcy5mb250Ll92YXJpYXRpb25Qcm9jZXNzb3I7XG4gICAgICAgIGxldCB2YXJpYXRpb25TdG9yZSA9IHRoaXMuZm9udC5HREVGICYmIHRoaXMuZm9udC5HREVGLml0ZW1WYXJpYXRpb25TdG9yZTtcbiAgICAgICAgaWYgKHZhcmlhdGlvblByb2Nlc3NvciAmJiB2YXJpYXRpb25TdG9yZSkge1xuICAgICAgICAgICAgaWYgKGFuY2hvci54RGV2aWNlVGFibGUpIHggKz0gdmFyaWF0aW9uUHJvY2Vzc29yLmdldERlbHRhKHZhcmlhdGlvblN0b3JlLCBhbmNob3IueERldmljZVRhYmxlLmEsIGFuY2hvci54RGV2aWNlVGFibGUuYik7XG4gICAgICAgICAgICBpZiAoYW5jaG9yLnlEZXZpY2VUYWJsZSkgeSArPSB2YXJpYXRpb25Qcm9jZXNzb3IuZ2V0RGVsdGEodmFyaWF0aW9uU3RvcmUsIGFuY2hvci55RGV2aWNlVGFibGUuYSwgYW5jaG9yLnlEZXZpY2VUYWJsZS5iKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgIHk6IHlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXBwbHlGZWF0dXJlcyh1c2VyRmVhdHVyZXMsIGdseXBocywgYWR2YW5jZXMpIHtcbiAgICAgICAgc3VwZXIuYXBwbHlGZWF0dXJlcyh1c2VyRmVhdHVyZXMsIGdseXBocywgYWR2YW5jZXMpO1xuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5nbHlwaHMubGVuZ3RoOyBpKyspdGhpcy5maXhDdXJzaXZlQXR0YWNobWVudChpKTtcbiAgICAgICAgdGhpcy5maXhNYXJrQXR0YWNobWVudCgpO1xuICAgIH1cbiAgICBmaXhDdXJzaXZlQXR0YWNobWVudChpKSB7XG4gICAgICAgIGxldCBnbHlwaCA9IHRoaXMuZ2x5cGhzW2ldO1xuICAgICAgICBpZiAoZ2x5cGguY3Vyc2l2ZUF0dGFjaG1lbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IGogPSBnbHlwaC5jdXJzaXZlQXR0YWNobWVudDtcbiAgICAgICAgICAgIGdseXBoLmN1cnNpdmVBdHRhY2htZW50ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuZml4Q3Vyc2l2ZUF0dGFjaG1lbnQoaik7XG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uc1tpXS55T2Zmc2V0ICs9IHRoaXMucG9zaXRpb25zW2pdLnlPZmZzZXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZml4TWFya0F0dGFjaG1lbnQoKSB7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmdseXBocy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBsZXQgZ2x5cGggPSB0aGlzLmdseXBoc1tpXTtcbiAgICAgICAgICAgIGlmIChnbHlwaC5tYXJrQXR0YWNobWVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbGV0IGogPSBnbHlwaC5tYXJrQXR0YWNobWVudDtcbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uc1tpXS54T2Zmc2V0ICs9IHRoaXMucG9zaXRpb25zW2pdLnhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbnNbaV0ueU9mZnNldCArPSB0aGlzLnBvc2l0aW9uc1tqXS55T2Zmc2V0O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ2x0cicpIGZvcihsZXQgayA9IGo7IGsgPCBpOyBrKyspe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uc1tpXS54T2Zmc2V0IC09IHRoaXMucG9zaXRpb25zW2tdLnhBZHZhbmNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uc1tpXS55T2Zmc2V0IC09IHRoaXMucG9zaXRpb25zW2tdLnlBZHZhbmNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGZvcihsZXQgayA9IGogKyAxOyBrIDwgaSArIDE7IGsrKyl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb25zW2ldLnhPZmZzZXQgKz0gdGhpcy5wb3NpdGlvbnNba10ueEFkdmFuY2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb25zW2ldLnlPZmZzZXQgKz0gdGhpcy5wb3NpdGlvbnNba10ueUFkdmFuY2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5cbmNsYXNzICRhNjI0OTI4MTBkZTI3ZTNkJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIHNldHVwKGdseXBoUnVuKSB7XG4gICAgICAgIC8vIE1hcCBnbHlwaHMgdG8gR2x5cGhJbmZvIG9iamVjdHMgc28gZGF0YSBjYW4gYmUgcGFzc2VkIGJldHdlZW5cbiAgICAgICAgLy8gR1NVQiBhbmQgR1BPUyB3aXRob3V0IG11dGF0aW5nIHRoZSByZWFsIChzaGFyZWQpIEdseXBoIG9iamVjdHMuXG4gICAgICAgIHRoaXMuZ2x5cGhJbmZvcyA9IGdseXBoUnVuLmdseXBocy5tYXAoKGdseXBoKT0+bmV3ICgwLCAkMTBlN2IyNTdlMWE5YTc1NiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSh0aGlzLmZvbnQsIGdseXBoLmlkLCBbXG4gICAgICAgICAgICAgICAgLi4uZ2x5cGguY29kZVBvaW50c1xuICAgICAgICAgICAgXSkpO1xuICAgICAgICAvLyBTZWxlY3QgYSBzY3JpcHQgYmFzZWQgb24gd2hhdCBpcyBhdmFpbGFibGUgaW4gR1NVQi9HUE9TLlxuICAgICAgICBsZXQgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuR1BPU1Byb2Nlc3Nvcikgc2NyaXB0ID0gdGhpcy5HUE9TUHJvY2Vzc29yLnNlbGVjdFNjcmlwdChnbHlwaFJ1bi5zY3JpcHQsIGdseXBoUnVuLmxhbmd1YWdlLCBnbHlwaFJ1bi5kaXJlY3Rpb24pO1xuICAgICAgICBpZiAodGhpcy5HU1VCUHJvY2Vzc29yKSBzY3JpcHQgPSB0aGlzLkdTVUJQcm9jZXNzb3Iuc2VsZWN0U2NyaXB0KGdseXBoUnVuLnNjcmlwdCwgZ2x5cGhSdW4ubGFuZ3VhZ2UsIGdseXBoUnVuLmRpcmVjdGlvbik7XG4gICAgICAgIC8vIENob29zZSBhIHNoYXBlciBiYXNlZCBvbiB0aGUgc2NyaXB0LCBhbmQgc2V0dXAgYSBzaGFwaW5nIHBsYW4uXG4gICAgICAgIC8vIFRoaXMgZGV0ZXJtaW5lcyB3aGljaCBmZWF0dXJlcyB0byBhcHBseSB0byB3aGljaCBnbHlwaHMuXG4gICAgICAgIHRoaXMuc2hhcGVyID0gJDEwMmI2ZmU1MGYxZDUwYjQkZXhwb3J0JDc4NzdhNDc4ZGQzMGZkM2Qoc2NyaXB0KTtcbiAgICAgICAgdGhpcy5wbGFuID0gbmV3ICgwLCAkOTRkN2E3M2JkMmVkZmM5YSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSh0aGlzLmZvbnQsIHNjcmlwdCwgZ2x5cGhSdW4uZGlyZWN0aW9uKTtcbiAgICAgICAgdGhpcy5zaGFwZXIucGxhbih0aGlzLnBsYW4sIHRoaXMuZ2x5cGhJbmZvcywgZ2x5cGhSdW4uZmVhdHVyZXMpO1xuICAgICAgICAvLyBBc3NpZ24gY2hvc2VuIGZlYXR1cmVzIHRvIG91dHB1dCBnbHlwaCBydW5cbiAgICAgICAgZm9yKGxldCBrZXkgaW4gdGhpcy5wbGFuLmFsbEZlYXR1cmVzKWdseXBoUnVuLmZlYXR1cmVzW2tleV0gPSB0cnVlO1xuICAgIH1cbiAgICBzdWJzdGl0dXRlKGdseXBoUnVuKSB7XG4gICAgICAgIGlmICh0aGlzLkdTVUJQcm9jZXNzb3IpIHtcbiAgICAgICAgICAgIHRoaXMucGxhbi5wcm9jZXNzKHRoaXMuR1NVQlByb2Nlc3NvciwgdGhpcy5nbHlwaEluZm9zKTtcbiAgICAgICAgICAgIC8vIE1hcCBnbHlwaCBpbmZvcyBiYWNrIHRvIG5vcm1hbCBHbHlwaCBvYmplY3RzXG4gICAgICAgICAgICBnbHlwaFJ1bi5nbHlwaHMgPSB0aGlzLmdseXBoSW5mb3MubWFwKChnbHlwaEluZm8pPT50aGlzLmZvbnQuZ2V0R2x5cGgoZ2x5cGhJbmZvLmlkLCBnbHlwaEluZm8uY29kZVBvaW50cykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHBvc2l0aW9uKGdseXBoUnVuKSB7XG4gICAgICAgIGlmICh0aGlzLnNoYXBlci56ZXJvTWFya1dpZHRocyA9PT0gJ0JFRk9SRV9HUE9TJykgdGhpcy56ZXJvTWFya0FkdmFuY2VzKGdseXBoUnVuLnBvc2l0aW9ucyk7XG4gICAgICAgIGlmICh0aGlzLkdQT1NQcm9jZXNzb3IpIHRoaXMucGxhbi5wcm9jZXNzKHRoaXMuR1BPU1Byb2Nlc3NvciwgdGhpcy5nbHlwaEluZm9zLCBnbHlwaFJ1bi5wb3NpdGlvbnMpO1xuICAgICAgICBpZiAodGhpcy5zaGFwZXIuemVyb01hcmtXaWR0aHMgPT09ICdBRlRFUl9HUE9TJykgdGhpcy56ZXJvTWFya0FkdmFuY2VzKGdseXBoUnVuLnBvc2l0aW9ucyk7XG4gICAgICAgIC8vIFJldmVyc2UgdGhlIGdseXBocyBhbmQgcG9zaXRpb25zIGlmIHRoZSBzY3JpcHQgaXMgcmlnaHQtdG8tbGVmdFxuICAgICAgICBpZiAoZ2x5cGhSdW4uZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgICAgICAgICAgZ2x5cGhSdW4uZ2x5cGhzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIGdseXBoUnVuLnBvc2l0aW9ucy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuR1BPU1Byb2Nlc3NvciAmJiB0aGlzLkdQT1NQcm9jZXNzb3IuZmVhdHVyZXM7XG4gICAgfVxuICAgIHplcm9NYXJrQWR2YW5jZXMocG9zaXRpb25zKSB7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmdseXBoSW5mb3MubGVuZ3RoOyBpKyspaWYgKHRoaXMuZ2x5cGhJbmZvc1tpXS5pc01hcmspIHtcbiAgICAgICAgICAgIHBvc2l0aW9uc1tpXS54QWR2YW5jZSA9IDA7XG4gICAgICAgICAgICBwb3NpdGlvbnNbaV0ueUFkdmFuY2UgPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNsZWFudXAoKSB7XG4gICAgICAgIHRoaXMuZ2x5cGhJbmZvcyA9IG51bGw7XG4gICAgICAgIHRoaXMucGxhbiA9IG51bGw7XG4gICAgICAgIHRoaXMuc2hhcGVyID0gbnVsbDtcbiAgICB9XG4gICAgZ2V0QXZhaWxhYmxlRmVhdHVyZXMoc2NyaXB0LCBsYW5ndWFnZSkge1xuICAgICAgICBsZXQgZmVhdHVyZXMgPSBbXTtcbiAgICAgICAgaWYgKHRoaXMuR1NVQlByb2Nlc3Nvcikge1xuICAgICAgICAgICAgdGhpcy5HU1VCUHJvY2Vzc29yLnNlbGVjdFNjcmlwdChzY3JpcHQsIGxhbmd1YWdlKTtcbiAgICAgICAgICAgIGZlYXR1cmVzLnB1c2goLi4uT2JqZWN0LmtleXModGhpcy5HU1VCUHJvY2Vzc29yLmZlYXR1cmVzKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuR1BPU1Byb2Nlc3Nvcikge1xuICAgICAgICAgICAgdGhpcy5HUE9TUHJvY2Vzc29yLnNlbGVjdFNjcmlwdChzY3JpcHQsIGxhbmd1YWdlKTtcbiAgICAgICAgICAgIGZlYXR1cmVzLnB1c2goLi4uT2JqZWN0LmtleXModGhpcy5HUE9TUHJvY2Vzc29yLmZlYXR1cmVzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZlYXR1cmVzO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihmb250KXtcbiAgICAgICAgdGhpcy5mb250ID0gZm9udDtcbiAgICAgICAgdGhpcy5nbHlwaEluZm9zID0gbnVsbDtcbiAgICAgICAgdGhpcy5wbGFuID0gbnVsbDtcbiAgICAgICAgdGhpcy5HU1VCUHJvY2Vzc29yID0gbnVsbDtcbiAgICAgICAgdGhpcy5HUE9TUHJvY2Vzc29yID0gbnVsbDtcbiAgICAgICAgdGhpcy5mYWxsYmFja1Bvc2l0aW9uID0gdHJ1ZTtcbiAgICAgICAgaWYgKGZvbnQuR1NVQikgdGhpcy5HU1VCUHJvY2Vzc29yID0gbmV3ICgwLCAkMGE4NzZjNDVmMWY3YzQxYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KShmb250LCBmb250LkdTVUIpO1xuICAgICAgICBpZiAoZm9udC5HUE9TKSB0aGlzLkdQT1NQcm9jZXNzb3IgPSBuZXcgKDAsICRjOTZjOTM1ODdkNDljMTRkJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKGZvbnQsIGZvbnQuR1BPUyk7XG4gICAgfVxufVxuXG5cbmNsYXNzICQ0YzBhN2ZhNWRmN2E5YWIxJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIGxheW91dChzdHJpbmcsIGZlYXR1cmVzLCBzY3JpcHQsIGxhbmd1YWdlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgLy8gTWFrZSB0aGUgZmVhdHVyZXMgcGFyYW1ldGVyIG9wdGlvbmFsXG4gICAgICAgIGlmICh0eXBlb2YgZmVhdHVyZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBsYW5ndWFnZTtcbiAgICAgICAgICAgIGxhbmd1YWdlID0gc2NyaXB0O1xuICAgICAgICAgICAgc2NyaXB0ID0gZmVhdHVyZXM7XG4gICAgICAgICAgICBmZWF0dXJlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1hcCBzdHJpbmcgdG8gZ2x5cGhzIGlmIG5lZWRlZFxuICAgICAgICBpZiAodHlwZW9mIHN0cmluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gZGV0ZWN0IHRoZSBzY3JpcHQgZnJvbSB0aGUgc3RyaW5nIGlmIG5vdCBwcm92aWRlZC5cbiAgICAgICAgICAgIGlmIChzY3JpcHQgPT0gbnVsbCkgc2NyaXB0ID0gJDEzMGQxYTY0MmViY2QyYjckZXhwb3J0JGU1Y2IyNWUyMDRmYjg0NTAoc3RyaW5nKTtcbiAgICAgICAgICAgIHZhciBnbHlwaHMgPSB0aGlzLmZvbnQuZ2x5cGhzRm9yU3RyaW5nKHN0cmluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBBdHRlbXB0IHRvIGRldGVjdCB0aGUgc2NyaXB0IGZyb20gdGhlIGdseXBoIGNvZGUgcG9pbnRzIGlmIG5vdCBwcm92aWRlZC5cbiAgICAgICAgICAgIGlmIChzY3JpcHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxldCBjb2RlUG9pbnRzID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZ2x5cGggb2Ygc3RyaW5nKWNvZGVQb2ludHMucHVzaCguLi5nbHlwaC5jb2RlUG9pbnRzKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQgPSAkMTMwZDFhNjQyZWJjZDJiNyRleHBvcnQkMTZmYWIwNzU3Y2ZjMjIzZChjb2RlUG9pbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBnbHlwaHMgPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGdseXBoUnVuID0gbmV3ICgwLCAkYmUwN2IzZTk3YTQyNjg3YSRleHBvcnQkMmUyYmNkODczOWFlMDM5KShnbHlwaHMsIGZlYXR1cmVzLCBzY3JpcHQsIGxhbmd1YWdlLCBkaXJlY3Rpb24pO1xuICAgICAgICAvLyBSZXR1cm4gZWFybHkgaWYgdGhlcmUgYXJlIG5vIGdseXBoc1xuICAgICAgICBpZiAoZ2x5cGhzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZ2x5cGhSdW4ucG9zaXRpb25zID0gW107XG4gICAgICAgICAgICByZXR1cm4gZ2x5cGhSdW47XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0dXAgdGhlIGFkdmFuY2VkIGxheW91dCBlbmdpbmVcbiAgICAgICAgaWYgKHRoaXMuZW5naW5lICYmIHRoaXMuZW5naW5lLnNldHVwKSB0aGlzLmVuZ2luZS5zZXR1cChnbHlwaFJ1bik7XG4gICAgICAgIC8vIFN1YnN0aXR1dGUgYW5kIHBvc2l0aW9uIHRoZSBnbHlwaHNcbiAgICAgICAgdGhpcy5zdWJzdGl0dXRlKGdseXBoUnVuKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbihnbHlwaFJ1bik7XG4gICAgICAgIHRoaXMuaGlkZURlZmF1bHRJZ25vcmFibGVzKGdseXBoUnVuLmdseXBocywgZ2x5cGhSdW4ucG9zaXRpb25zKTtcbiAgICAgICAgLy8gTGV0IHRoZSBsYXlvdXQgZW5naW5lIGNsZWFuIHVwIGFueSBzdGF0ZSBpdCBtaWdodCBoYXZlXG4gICAgICAgIGlmICh0aGlzLmVuZ2luZSAmJiB0aGlzLmVuZ2luZS5jbGVhbnVwKSB0aGlzLmVuZ2luZS5jbGVhbnVwKCk7XG4gICAgICAgIHJldHVybiBnbHlwaFJ1bjtcbiAgICB9XG4gICAgc3Vic3RpdHV0ZShnbHlwaFJ1bikge1xuICAgICAgICAvLyBDYWxsIHRoZSBhZHZhbmNlZCBsYXlvdXQgZW5naW5lIHRvIG1ha2Ugc3Vic3RpdHV0aW9uc1xuICAgICAgICBpZiAodGhpcy5lbmdpbmUgJiYgdGhpcy5lbmdpbmUuc3Vic3RpdHV0ZSkgdGhpcy5lbmdpbmUuc3Vic3RpdHV0ZShnbHlwaFJ1bik7XG4gICAgfVxuICAgIHBvc2l0aW9uKGdseXBoUnVuKSB7XG4gICAgICAgIC8vIEdldCBpbml0aWFsIGdseXBoIHBvc2l0aW9uc1xuICAgICAgICBnbHlwaFJ1bi5wb3NpdGlvbnMgPSBnbHlwaFJ1bi5nbHlwaHMubWFwKChnbHlwaCk9Pm5ldyAoMCwgJDFhYzc1ZDlhNTViNjdmMDEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoZ2x5cGguYWR2YW5jZVdpZHRoKSk7XG4gICAgICAgIGxldCBwb3NpdGlvbmVkID0gbnVsbDtcbiAgICAgICAgLy8gQ2FsbCB0aGUgYWR2YW5jZWQgbGF5b3V0IGVuZ2luZS4gUmV0dXJucyB0aGUgZmVhdHVyZXMgYXBwbGllZC5cbiAgICAgICAgaWYgKHRoaXMuZW5naW5lICYmIHRoaXMuZW5naW5lLnBvc2l0aW9uKSBwb3NpdGlvbmVkID0gdGhpcy5lbmdpbmUucG9zaXRpb24oZ2x5cGhSdW4pO1xuICAgICAgICAvLyBpZiB0aGVyZSBpcyBubyBHUE9TIHRhYmxlLCB1c2UgdW5pY29kZSBwcm9wZXJ0aWVzIHRvIHBvc2l0aW9uIG1hcmtzLlxuICAgICAgICBpZiAoIXBvc2l0aW9uZWQgJiYgKCF0aGlzLmVuZ2luZSB8fCB0aGlzLmVuZ2luZS5mYWxsYmFja1Bvc2l0aW9uKSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnVuaWNvZGVMYXlvdXRFbmdpbmUpIHRoaXMudW5pY29kZUxheW91dEVuZ2luZSA9IG5ldyAoMCwgJDBhNGJkZmViNmRmZDZmNWUkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkodGhpcy5mb250KTtcbiAgICAgICAgICAgIHRoaXMudW5pY29kZUxheW91dEVuZ2luZS5wb3NpdGlvbkdseXBocyhnbHlwaFJ1bi5nbHlwaHMsIGdseXBoUnVuLnBvc2l0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYga2VybmluZyBpcyBub3Qgc3VwcG9ydGVkIGJ5IEdQT1MsIGRvIGtlcm5pbmcgd2l0aCB0aGUgVHJ1ZVR5cGUvQUFUIGtlcm4gdGFibGVcbiAgICAgICAgaWYgKCghcG9zaXRpb25lZCB8fCAhcG9zaXRpb25lZC5rZXJuKSAmJiBnbHlwaFJ1bi5mZWF0dXJlcy5rZXJuICE9PSBmYWxzZSAmJiB0aGlzLmZvbnQua2Vybikge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmtlcm5Qcm9jZXNzb3IpIHRoaXMua2VyblByb2Nlc3NvciA9IG5ldyAoMCwgJDBiYmEzYTlkYjU3NjM3ZjMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkodGhpcy5mb250KTtcbiAgICAgICAgICAgIHRoaXMua2VyblByb2Nlc3Nvci5wcm9jZXNzKGdseXBoUnVuLmdseXBocywgZ2x5cGhSdW4ucG9zaXRpb25zKTtcbiAgICAgICAgICAgIGdseXBoUnVuLmZlYXR1cmVzLmtlcm4gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhpZGVEZWZhdWx0SWdub3JhYmxlcyhnbHlwaHMsIHBvc2l0aW9ucykge1xuICAgICAgICBsZXQgc3BhY2UgPSB0aGlzLmZvbnQuZ2x5cGhGb3JDb2RlUG9pbnQoMHgyMCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBnbHlwaHMubGVuZ3RoOyBpKyspaWYgKHRoaXMuaXNEZWZhdWx0SWdub3JhYmxlKGdseXBoc1tpXS5jb2RlUG9pbnRzWzBdKSkge1xuICAgICAgICAgICAgZ2x5cGhzW2ldID0gc3BhY2U7XG4gICAgICAgICAgICBwb3NpdGlvbnNbaV0ueEFkdmFuY2UgPSAwO1xuICAgICAgICAgICAgcG9zaXRpb25zW2ldLnlBZHZhbmNlID0gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpc0RlZmF1bHRJZ25vcmFibGUoY2gpIHtcbiAgICAgICAgLy8gRnJvbSBEZXJpdmVkQ29yZVByb3BlcnRpZXMudHh0IGluIHRoZSBVbmljb2RlIGRhdGFiYXNlLFxuICAgICAgICAvLyBtaW51cyBVKzExNUYsIFUrMTE2MCwgVSszMTY0IGFuZCBVK0ZGQTAsIHdoaWNoIGlzIHdoYXRcbiAgICAgICAgLy8gSGFyZmJ1enogYW5kIFVuaXNjcmliZSBkby5cbiAgICAgICAgbGV0IHBsYW5lID0gY2ggPj4gMTY7XG4gICAgICAgIGlmIChwbGFuZSA9PT0gMCkgLy8gQk1QXG4gICAgICAgIHN3aXRjaChjaCA+PiA4KXtcbiAgICAgICAgICAgIGNhc2UgMHgwMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gY2ggPT09IDB4MDBBRDtcbiAgICAgICAgICAgIGNhc2UgMHgwMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gY2ggPT09IDB4MDM0RjtcbiAgICAgICAgICAgIGNhc2UgMHgwNjpcbiAgICAgICAgICAgICAgICByZXR1cm4gY2ggPT09IDB4MDYxQztcbiAgICAgICAgICAgIGNhc2UgMHgxNzpcbiAgICAgICAgICAgICAgICByZXR1cm4gMHgxN0I0IDw9IGNoICYmIGNoIDw9IDB4MTdCNTtcbiAgICAgICAgICAgIGNhc2UgMHgxODpcbiAgICAgICAgICAgICAgICByZXR1cm4gMHgxODBCIDw9IGNoICYmIGNoIDw9IDB4MTgwRTtcbiAgICAgICAgICAgIGNhc2UgMHgyMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gMHgyMDBCIDw9IGNoICYmIGNoIDw9IDB4MjAwRiB8fCAweDIwMkEgPD0gY2ggJiYgY2ggPD0gMHgyMDJFIHx8IDB4MjA2MCA8PSBjaCAmJiBjaCA8PSAweDIwNkY7XG4gICAgICAgICAgICBjYXNlIDB4RkU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDB4RkUwMCA8PSBjaCAmJiBjaCA8PSAweEZFMEYgfHwgY2ggPT09IDB4RkVGRjtcbiAgICAgICAgICAgIGNhc2UgMHhGRjpcbiAgICAgICAgICAgICAgICByZXR1cm4gMHhGRkYwIDw9IGNoICYmIGNoIDw9IDB4RkZGODtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgLy8gT3RoZXIgcGxhbmVzXG4gICAgICAgIHN3aXRjaChwbGFuZSl7XG4gICAgICAgICAgICBjYXNlIDB4MDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDB4MUJDQTAgPD0gY2ggJiYgY2ggPD0gMHgxQkNBMyB8fCAweDFEMTczIDw9IGNoICYmIGNoIDw9IDB4MUQxN0E7XG4gICAgICAgICAgICBjYXNlIDB4MEU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDB4RTAwMDAgPD0gY2ggJiYgY2ggPD0gMHhFMEZGRjtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldEF2YWlsYWJsZUZlYXR1cmVzKHNjcmlwdCwgbGFuZ3VhZ2UpIHtcbiAgICAgICAgbGV0IGZlYXR1cmVzID0gW107XG4gICAgICAgIGlmICh0aGlzLmVuZ2luZSkgZmVhdHVyZXMucHVzaCguLi50aGlzLmVuZ2luZS5nZXRBdmFpbGFibGVGZWF0dXJlcyhzY3JpcHQsIGxhbmd1YWdlKSk7XG4gICAgICAgIGlmICh0aGlzLmZvbnQua2VybiAmJiBmZWF0dXJlcy5pbmRleE9mKCdrZXJuJykgPT09IC0xKSBmZWF0dXJlcy5wdXNoKCdrZXJuJyk7XG4gICAgICAgIHJldHVybiBmZWF0dXJlcztcbiAgICB9XG4gICAgc3RyaW5nc0ZvckdseXBoKGdpZCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IFNldDtcbiAgICAgICAgbGV0IGNvZGVQb2ludHMgPSB0aGlzLmZvbnQuX2NtYXBQcm9jZXNzb3IuY29kZVBvaW50c0ZvckdseXBoKGdpZCk7XG4gICAgICAgIGZvciAobGV0IGNvZGVQb2ludCBvZiBjb2RlUG9pbnRzKXJlc3VsdC5hZGQoU3RyaW5nLmZyb21Db2RlUG9pbnQoY29kZVBvaW50KSk7XG4gICAgICAgIGlmICh0aGlzLmVuZ2luZSAmJiB0aGlzLmVuZ2luZS5zdHJpbmdzRm9yR2x5cGgpIGZvciAobGV0IHN0cmluZyBvZiB0aGlzLmVuZ2luZS5zdHJpbmdzRm9yR2x5cGgoZ2lkKSlyZXN1bHQuYWRkKHN0cmluZyk7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHJlc3VsdCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZvbnQpe1xuICAgICAgICB0aGlzLmZvbnQgPSBmb250O1xuICAgICAgICB0aGlzLnVuaWNvZGVMYXlvdXRFbmdpbmUgPSBudWxsO1xuICAgICAgICB0aGlzLmtlcm5Qcm9jZXNzb3IgPSBudWxsO1xuICAgICAgICAvLyBDaG9vc2UgYW4gYWR2YW5jZWQgbGF5b3V0IGVuZ2luZS4gV2UgdHJ5IHRoZSBBQVQgbW9yeCB0YWJsZSBmaXJzdCBzaW5jZSBtb3JlXG4gICAgICAgIC8vIHNjcmlwdHMgYXJlIGN1cnJlbnRseSBzdXBwb3J0ZWQgYmVjYXVzZSB0aGUgc2hhcGluZyBsb2dpYyBpcyBidWlsdCBpbnRvIHRoZSBmb250LlxuICAgICAgICBpZiAodGhpcy5mb250Lm1vcngpIHRoaXMuZW5naW5lID0gbmV3ICgwLCAkYmE2ZGQ3NDIwM2JlODcyOCRleHBvcnQkMmUyYmNkODczOWFlMDM5KSh0aGlzLmZvbnQpO1xuICAgICAgICBlbHNlIGlmICh0aGlzLmZvbnQuR1NVQiB8fCB0aGlzLmZvbnQuR1BPUykgdGhpcy5lbmdpbmUgPSBuZXcgKDAsICRhNjI0OTI4MTBkZTI3ZTNkJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKHRoaXMuZm9udCk7XG4gICAgfVxufVxuXG5cblxuXG5cblxuY29uc3QgJGY0M2FlYzk1NGNkZmRmMjEkdmFyJFNWR19DT01NQU5EUyA9IHtcbiAgICBtb3ZlVG86ICdNJyxcbiAgICBsaW5lVG86ICdMJyxcbiAgICBxdWFkcmF0aWNDdXJ2ZVRvOiAnUScsXG4gICAgYmV6aWVyQ3VydmVUbzogJ0MnLFxuICAgIGNsb3NlUGF0aDogJ1onXG59O1xuY2xhc3MgJGY0M2FlYzk1NGNkZmRmMjEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSB7XG4gICAgLyoqXG4gICAqIENvbXBpbGVzIHRoZSBwYXRoIHRvIGEgSmF2YVNjcmlwdCBmdW5jdGlvbiB0aGF0IGNhbiBiZSBhcHBsaWVkIHdpdGhcbiAgICogYSBncmFwaGljcyBjb250ZXh0IGluIG9yZGVyIHRvIHJlbmRlciB0aGUgcGF0aC5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi8gdG9GdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIChjdHgpPT57XG4gICAgICAgICAgICB0aGlzLmNvbW1hbmRzLmZvckVhY2goKGMpPT57XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN0eFtjLmNvbW1hbmRdLmFwcGx5KGN0eCwgYy5hcmdzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICogQ29udmVydHMgdGhlIHBhdGggdG8gYW4gU1ZHIHBhdGggZGF0YSBzdHJpbmdcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi8gdG9TVkcoKSB7XG4gICAgICAgIGxldCBjbWRzID0gdGhpcy5jb21tYW5kcy5tYXAoKGMpPT57XG4gICAgICAgICAgICBsZXQgYXJncyA9IGMuYXJncy5tYXAoKGFyZyk9Pk1hdGgucm91bmQoYXJnICogMTAwKSAvIDEwMCk7XG4gICAgICAgICAgICByZXR1cm4gYCR7JGY0M2FlYzk1NGNkZmRmMjEkdmFyJFNWR19DT01NQU5EU1tjLmNvbW1hbmRdfSR7YXJncy5qb2luKCcgJyl9YDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjbWRzLmpvaW4oJycpO1xuICAgIH1cbiAgICAvKipcbiAgICogR2V0cyB0aGUgXCJjb250cm9sIGJveFwiIG9mIGEgcGF0aC5cbiAgICogVGhpcyBpcyBsaWtlIHRoZSBib3VuZGluZyBib3gsIGJ1dCBpdCBpbmNsdWRlcyBhbGwgcG9pbnRzIGluY2x1ZGluZ1xuICAgKiBjb250cm9sIHBvaW50cyBvZiBiZXppZXIgc2VnbWVudHMgYW5kIGlzIG11Y2ggZmFzdGVyIHRvIGNvbXB1dGUgdGhhblxuICAgKiB0aGUgcmVhbCBib3VuZGluZyBib3guXG4gICAqIEB0eXBlIHtCQm94fVxuICAgKi8gZ2V0IGNib3goKSB7XG4gICAgICAgIGlmICghdGhpcy5fY2JveCkge1xuICAgICAgICAgICAgbGV0IGNib3ggPSBuZXcgKDAsICRmMzQ2MDBhYjlkN2Y3MGQ4JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpO1xuICAgICAgICAgICAgZm9yIChsZXQgY29tbWFuZCBvZiB0aGlzLmNvbW1hbmRzKWZvcihsZXQgaSA9IDA7IGkgPCBjb21tYW5kLmFyZ3MubGVuZ3RoOyBpICs9IDIpY2JveC5hZGRQb2ludChjb21tYW5kLmFyZ3NbaV0sIGNvbW1hbmQuYXJnc1tpICsgMV0pO1xuICAgICAgICAgICAgdGhpcy5fY2JveCA9IE9iamVjdC5mcmVlemUoY2JveCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nib3g7XG4gICAgfVxuICAgIC8qKlxuICAgKiBHZXRzIHRoZSBleGFjdCBib3VuZGluZyBib3ggb2YgdGhlIHBhdGggYnkgZXZhbHVhdGluZyBjdXJ2ZSBzZWdtZW50cy5cbiAgICogU2xvd2VyIHRvIGNvbXB1dGUgdGhhbiB0aGUgY29udHJvbCBib3gsIGJ1dCBtb3JlIGFjY3VyYXRlLlxuICAgKiBAdHlwZSB7QkJveH1cbiAgICovIGdldCBiYm94KCkge1xuICAgICAgICBpZiAodGhpcy5fYmJveCkgcmV0dXJuIHRoaXMuX2Jib3g7XG4gICAgICAgIGxldCBiYm94ID0gbmV3ICgwLCAkZjM0NjAwYWI5ZDdmNzBkOCRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiAgICAgICAgbGV0IGN4ID0gMCwgY3kgPSAwO1xuICAgICAgICBsZXQgZiA9ICh0KT0+TWF0aC5wb3coMSAtIHQsIDMpICogcDBbaV0gKyAzICogTWF0aC5wb3coMSAtIHQsIDIpICogdCAqIHAxW2ldICsgMyAqICgxIC0gdCkgKiBNYXRoLnBvdyh0LCAyKSAqIHAyW2ldICsgTWF0aC5wb3codCwgMykgKiBwM1tpXTtcbiAgICAgICAgZm9yIChsZXQgYyBvZiB0aGlzLmNvbW1hbmRzKXN3aXRjaChjLmNvbW1hbmQpe1xuICAgICAgICAgICAgY2FzZSAnbW92ZVRvJzpcbiAgICAgICAgICAgIGNhc2UgJ2xpbmVUbyc6XG4gICAgICAgICAgICAgICAgbGV0IFt4LCB5XSA9IGMuYXJncztcbiAgICAgICAgICAgICAgICBiYm94LmFkZFBvaW50KHgsIHkpO1xuICAgICAgICAgICAgICAgIGN4ID0geDtcbiAgICAgICAgICAgICAgICBjeSA9IHk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFkcmF0aWNDdXJ2ZVRvJzpcbiAgICAgICAgICAgIGNhc2UgJ2JlemllckN1cnZlVG8nOlxuICAgICAgICAgICAgICAgIGlmIChjLmNvbW1hbmQgPT09ICdxdWFkcmF0aWNDdXJ2ZVRvJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBodHRwOi8vZm9udGZvcmdlLm9yZy9iZXppZXIuaHRtbFxuICAgICAgICAgICAgICAgICAgICB2YXIgW3FwMXgsIHFwMXksIHAzeCwgcDN5XSA9IGMuYXJncztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNwMXggPSBjeCArIDIgLyAzICogKHFwMXggLSBjeCk7IC8vIENQMSA9IFFQMCArIDIvMyAqIChRUDEtUVAwKVxuICAgICAgICAgICAgICAgICAgICB2YXIgY3AxeSA9IGN5ICsgMiAvIDMgKiAocXAxeSAtIGN5KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNwMnggPSBwM3ggKyAyIC8gMyAqIChxcDF4IC0gcDN4KTsgLy8gQ1AyID0gUVAyICsgMi8zICogKFFQMS1RUDIpXG4gICAgICAgICAgICAgICAgICAgIHZhciBjcDJ5ID0gcDN5ICsgMiAvIDMgKiAocXAxeSAtIHAzeSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHZhciBbY3AxeCwgY3AxeSwgY3AyeCwgY3AyeSwgcDN4LCBwM3ldID0gYy5hcmdzO1xuICAgICAgICAgICAgICAgIC8vIGh0dHA6Ly9ibG9nLmhhY2tlcnMtY2FmZS5uZXQvMjAwOS8wNi9ob3ctdG8tY2FsY3VsYXRlLWJlemllci1jdXJ2ZXMtYm91bmRpbmcuaHRtbFxuICAgICAgICAgICAgICAgIGJib3guYWRkUG9pbnQocDN4LCBwM3kpO1xuICAgICAgICAgICAgICAgIHZhciBwMCA9IFtcbiAgICAgICAgICAgICAgICAgICAgY3gsXG4gICAgICAgICAgICAgICAgICAgIGN5XG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB2YXIgcDEgPSBbXG4gICAgICAgICAgICAgICAgICAgIGNwMXgsXG4gICAgICAgICAgICAgICAgICAgIGNwMXlcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIHZhciBwMiA9IFtcbiAgICAgICAgICAgICAgICAgICAgY3AyeCxcbiAgICAgICAgICAgICAgICAgICAgY3AyeVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgdmFyIHAzID0gW1xuICAgICAgICAgICAgICAgICAgICBwM3gsXG4gICAgICAgICAgICAgICAgICAgIHAzeVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8PSAxOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICBsZXQgYiA9IDYgKiBwMFtpXSAtIDEyICogcDFbaV0gKyA2ICogcDJbaV07XG4gICAgICAgICAgICAgICAgICAgIGxldCBhID0gLTMgKiBwMFtpXSArIDkgKiBwMVtpXSAtIDkgKiBwMltpXSArIDMgKiBwM1tpXTtcbiAgICAgICAgICAgICAgICAgICAgYyA9IDMgKiBwMVtpXSAtIDMgKiBwMFtpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGEgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiID09PSAwKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ID0gLWMgLyBiO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDAgPCB0ICYmIHQgPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIGJib3guYWRkUG9pbnQoZih0KSwgYmJveC5tYXhZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpID09PSAxKSBiYm94LmFkZFBvaW50KGJib3gubWF4WCwgZih0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgYjJhYyA9IE1hdGgucG93KGIsIDIpIC0gNCAqIGMgKiBhO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYjJhYyA8IDApIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdDEgPSAoLWIgKyBNYXRoLnNxcnQoYjJhYykpIC8gKDIgKiBhKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPCB0MSAmJiB0MSA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSBiYm94LmFkZFBvaW50KGYodDEpLCBiYm94Lm1heFkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaSA9PT0gMSkgYmJveC5hZGRQb2ludChiYm94Lm1heFgsIGYodDEpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSAoLWIgLSBNYXRoLnNxcnQoYjJhYykpIC8gKDIgKiBhKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPCB0MiAmJiB0MiA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSBiYm94LmFkZFBvaW50KGYodDIpLCBiYm94Lm1heFkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaSA9PT0gMSkgYmJveC5hZGRQb2ludChiYm94Lm1heFgsIGYodDIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjeCA9IHAzeDtcbiAgICAgICAgICAgICAgICBjeSA9IHAzeTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fYmJveCA9IE9iamVjdC5mcmVlemUoYmJveCk7XG4gICAgfVxuICAgIC8qKlxuICAgKiBBcHBsaWVzIGEgbWFwcGluZyBmdW5jdGlvbiB0byBlYWNoIHBvaW50IGluIHRoZSBwYXRoLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmblxuICAgKiBAcmV0dXJuIHtQYXRofVxuICAgKi8gbWFwUG9pbnRzKGZuKSB7XG4gICAgICAgIGxldCBwYXRoID0gbmV3ICRmNDNhZWM5NTRjZGZkZjIxJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzk7XG4gICAgICAgIGZvciAobGV0IGMgb2YgdGhpcy5jb21tYW5kcyl7XG4gICAgICAgICAgICBsZXQgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGMuYXJncy5sZW5ndGg7IGkgKz0gMil7XG4gICAgICAgICAgICAgICAgbGV0IFt4LCB5XSA9IGZuKGMuYXJnc1tpXSwgYy5hcmdzW2kgKyAxXSk7XG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKHgsIHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGF0aFtjLmNvbW1hbmRdKC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICAvKipcbiAgICogVHJhbnNmb3JtcyB0aGUgcGF0aCBieSB0aGUgZ2l2ZW4gbWF0cml4LlxuICAgKi8gdHJhbnNmb3JtKG0wLCBtMSwgbTIsIG0zLCBtNCwgbTUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwUG9pbnRzKCh4LCB5KT0+e1xuICAgICAgICAgICAgY29uc3QgdHggPSBtMCAqIHggKyBtMiAqIHkgKyBtNDtcbiAgICAgICAgICAgIGNvbnN0IHR5ID0gbTEgKiB4ICsgbTMgKiB5ICsgbTU7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIHR4LFxuICAgICAgICAgICAgICAgIHR5XG4gICAgICAgICAgICBdO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAqIFRyYW5zbGF0ZXMgdGhlIHBhdGggYnkgdGhlIGdpdmVuIG9mZnNldC5cbiAgICovIHRyYW5zbGF0ZSh4LCB5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybSgxLCAwLCAwLCAxLCB4LCB5KTtcbiAgICB9XG4gICAgLyoqXG4gICAqIFJvdGF0ZXMgdGhlIHBhdGggYnkgdGhlIGdpdmVuIGFuZ2xlIChpbiByYWRpYW5zKS5cbiAgICovIHJvdGF0ZShhbmdsZSkge1xuICAgICAgICBsZXQgY29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICBsZXQgc2luID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oY29zLCBzaW4sIC1zaW4sIGNvcywgMCwgMCk7XG4gICAgfVxuICAgIC8qKlxuICAgKiBTY2FsZXMgdGhlIHBhdGguXG4gICAqLyBzY2FsZShzY2FsZVgsIHNjYWxlWSA9IHNjYWxlWCkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oc2NhbGVYLCAwLCAwLCBzY2FsZVksIDAsIDApO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLmNvbW1hbmRzID0gW107XG4gICAgICAgIHRoaXMuX2Jib3ggPSBudWxsO1xuICAgICAgICB0aGlzLl9jYm94ID0gbnVsbDtcbiAgICB9XG59XG5mb3IgKGxldCBjb21tYW5kIG9mIFtcbiAgICAnbW92ZVRvJyxcbiAgICAnbGluZVRvJyxcbiAgICAncXVhZHJhdGljQ3VydmVUbycsXG4gICAgJ2JlemllckN1cnZlVG8nLFxuICAgICdjbG9zZVBhdGgnXG5dKSRmNDNhZWM5NTRjZGZkZjIxJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkucHJvdG90eXBlW2NvbW1hbmRdID0gZnVuY3Rpb24oLi4uYXJncykge1xuICAgIHRoaXMuX2Jib3ggPSB0aGlzLl9jYm94ID0gbnVsbDtcbiAgICB0aGlzLmNvbW1hbmRzLnB1c2goe1xuICAgICAgICBjb21tYW5kOiBjb21tYW5kLFxuICAgICAgICBhcmdzOiBhcmdzXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblxudmFyICQ3NzEzYjliN2I0MzhkZmY4JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBbXG4gICAgJy5ub3RkZWYnLFxuICAgICcubnVsbCcsXG4gICAgJ25vbm1hcmtpbmdyZXR1cm4nLFxuICAgICdzcGFjZScsXG4gICAgJ2V4Y2xhbScsXG4gICAgJ3F1b3RlZGJsJyxcbiAgICAnbnVtYmVyc2lnbicsXG4gICAgJ2RvbGxhcicsXG4gICAgJ3BlcmNlbnQnLFxuICAgICdhbXBlcnNhbmQnLFxuICAgICdxdW90ZXNpbmdsZScsXG4gICAgJ3BhcmVubGVmdCcsXG4gICAgJ3BhcmVucmlnaHQnLFxuICAgICdhc3RlcmlzaycsXG4gICAgJ3BsdXMnLFxuICAgICdjb21tYScsXG4gICAgJ2h5cGhlbicsXG4gICAgJ3BlcmlvZCcsXG4gICAgJ3NsYXNoJyxcbiAgICAnemVybycsXG4gICAgJ29uZScsXG4gICAgJ3R3bycsXG4gICAgJ3RocmVlJyxcbiAgICAnZm91cicsXG4gICAgJ2ZpdmUnLFxuICAgICdzaXgnLFxuICAgICdzZXZlbicsXG4gICAgJ2VpZ2h0JyxcbiAgICAnbmluZScsXG4gICAgJ2NvbG9uJyxcbiAgICAnc2VtaWNvbG9uJyxcbiAgICAnbGVzcycsXG4gICAgJ2VxdWFsJyxcbiAgICAnZ3JlYXRlcicsXG4gICAgJ3F1ZXN0aW9uJyxcbiAgICAnYXQnLFxuICAgICdBJyxcbiAgICAnQicsXG4gICAgJ0MnLFxuICAgICdEJyxcbiAgICAnRScsXG4gICAgJ0YnLFxuICAgICdHJyxcbiAgICAnSCcsXG4gICAgJ0knLFxuICAgICdKJyxcbiAgICAnSycsXG4gICAgJ0wnLFxuICAgICdNJyxcbiAgICAnTicsXG4gICAgJ08nLFxuICAgICdQJyxcbiAgICAnUScsXG4gICAgJ1InLFxuICAgICdTJyxcbiAgICAnVCcsXG4gICAgJ1UnLFxuICAgICdWJyxcbiAgICAnVycsXG4gICAgJ1gnLFxuICAgICdZJyxcbiAgICAnWicsXG4gICAgJ2JyYWNrZXRsZWZ0JyxcbiAgICAnYmFja3NsYXNoJyxcbiAgICAnYnJhY2tldHJpZ2h0JyxcbiAgICAnYXNjaWljaXJjdW0nLFxuICAgICd1bmRlcnNjb3JlJyxcbiAgICAnZ3JhdmUnLFxuICAgICdhJyxcbiAgICAnYicsXG4gICAgJ2MnLFxuICAgICdkJyxcbiAgICAnZScsXG4gICAgJ2YnLFxuICAgICdnJyxcbiAgICAnaCcsXG4gICAgJ2knLFxuICAgICdqJyxcbiAgICAnaycsXG4gICAgJ2wnLFxuICAgICdtJyxcbiAgICAnbicsXG4gICAgJ28nLFxuICAgICdwJyxcbiAgICAncScsXG4gICAgJ3InLFxuICAgICdzJyxcbiAgICAndCcsXG4gICAgJ3UnLFxuICAgICd2JyxcbiAgICAndycsXG4gICAgJ3gnLFxuICAgICd5JyxcbiAgICAneicsXG4gICAgJ2JyYWNlbGVmdCcsXG4gICAgJ2JhcicsXG4gICAgJ2JyYWNlcmlnaHQnLFxuICAgICdhc2NpaXRpbGRlJyxcbiAgICAnQWRpZXJlc2lzJyxcbiAgICAnQXJpbmcnLFxuICAgICdDY2VkaWxsYScsXG4gICAgJ0VhY3V0ZScsXG4gICAgJ050aWxkZScsXG4gICAgJ09kaWVyZXNpcycsXG4gICAgJ1VkaWVyZXNpcycsXG4gICAgJ2FhY3V0ZScsXG4gICAgJ2FncmF2ZScsXG4gICAgJ2FjaXJjdW1mbGV4JyxcbiAgICAnYWRpZXJlc2lzJyxcbiAgICAnYXRpbGRlJyxcbiAgICAnYXJpbmcnLFxuICAgICdjY2VkaWxsYScsXG4gICAgJ2VhY3V0ZScsXG4gICAgJ2VncmF2ZScsXG4gICAgJ2VjaXJjdW1mbGV4JyxcbiAgICAnZWRpZXJlc2lzJyxcbiAgICAnaWFjdXRlJyxcbiAgICAnaWdyYXZlJyxcbiAgICAnaWNpcmN1bWZsZXgnLFxuICAgICdpZGllcmVzaXMnLFxuICAgICdudGlsZGUnLFxuICAgICdvYWN1dGUnLFxuICAgICdvZ3JhdmUnLFxuICAgICdvY2lyY3VtZmxleCcsXG4gICAgJ29kaWVyZXNpcycsXG4gICAgJ290aWxkZScsXG4gICAgJ3VhY3V0ZScsXG4gICAgJ3VncmF2ZScsXG4gICAgJ3VjaXJjdW1mbGV4JyxcbiAgICAndWRpZXJlc2lzJyxcbiAgICAnZGFnZ2VyJyxcbiAgICAnZGVncmVlJyxcbiAgICAnY2VudCcsXG4gICAgJ3N0ZXJsaW5nJyxcbiAgICAnc2VjdGlvbicsXG4gICAgJ2J1bGxldCcsXG4gICAgJ3BhcmFncmFwaCcsXG4gICAgJ2dlcm1hbmRibHMnLFxuICAgICdyZWdpc3RlcmVkJyxcbiAgICAnY29weXJpZ2h0JyxcbiAgICAndHJhZGVtYXJrJyxcbiAgICAnYWN1dGUnLFxuICAgICdkaWVyZXNpcycsXG4gICAgJ25vdGVxdWFsJyxcbiAgICAnQUUnLFxuICAgICdPc2xhc2gnLFxuICAgICdpbmZpbml0eScsXG4gICAgJ3BsdXNtaW51cycsXG4gICAgJ2xlc3NlcXVhbCcsXG4gICAgJ2dyZWF0ZXJlcXVhbCcsXG4gICAgJ3llbicsXG4gICAgJ211JyxcbiAgICAncGFydGlhbGRpZmYnLFxuICAgICdzdW1tYXRpb24nLFxuICAgICdwcm9kdWN0JyxcbiAgICAncGknLFxuICAgICdpbnRlZ3JhbCcsXG4gICAgJ29yZGZlbWluaW5lJyxcbiAgICAnb3JkbWFzY3VsaW5lJyxcbiAgICAnT21lZ2EnLFxuICAgICdhZScsXG4gICAgJ29zbGFzaCcsXG4gICAgJ3F1ZXN0aW9uZG93bicsXG4gICAgJ2V4Y2xhbWRvd24nLFxuICAgICdsb2dpY2Fsbm90JyxcbiAgICAncmFkaWNhbCcsXG4gICAgJ2Zsb3JpbicsXG4gICAgJ2FwcHJveGVxdWFsJyxcbiAgICAnRGVsdGEnLFxuICAgICdndWlsbGVtb3RsZWZ0JyxcbiAgICAnZ3VpbGxlbW90cmlnaHQnLFxuICAgICdlbGxpcHNpcycsXG4gICAgJ25vbmJyZWFraW5nc3BhY2UnLFxuICAgICdBZ3JhdmUnLFxuICAgICdBdGlsZGUnLFxuICAgICdPdGlsZGUnLFxuICAgICdPRScsXG4gICAgJ29lJyxcbiAgICAnZW5kYXNoJyxcbiAgICAnZW1kYXNoJyxcbiAgICAncXVvdGVkYmxsZWZ0JyxcbiAgICAncXVvdGVkYmxyaWdodCcsXG4gICAgJ3F1b3RlbGVmdCcsXG4gICAgJ3F1b3RlcmlnaHQnLFxuICAgICdkaXZpZGUnLFxuICAgICdsb3plbmdlJyxcbiAgICAneWRpZXJlc2lzJyxcbiAgICAnWWRpZXJlc2lzJyxcbiAgICAnZnJhY3Rpb24nLFxuICAgICdjdXJyZW5jeScsXG4gICAgJ2d1aWxzaW5nbGxlZnQnLFxuICAgICdndWlsc2luZ2xyaWdodCcsXG4gICAgJ2ZpJyxcbiAgICAnZmwnLFxuICAgICdkYWdnZXJkYmwnLFxuICAgICdwZXJpb2RjZW50ZXJlZCcsXG4gICAgJ3F1b3Rlc2luZ2xiYXNlJyxcbiAgICAncXVvdGVkYmxiYXNlJyxcbiAgICAncGVydGhvdXNhbmQnLFxuICAgICdBY2lyY3VtZmxleCcsXG4gICAgJ0VjaXJjdW1mbGV4JyxcbiAgICAnQWFjdXRlJyxcbiAgICAnRWRpZXJlc2lzJyxcbiAgICAnRWdyYXZlJyxcbiAgICAnSWFjdXRlJyxcbiAgICAnSWNpcmN1bWZsZXgnLFxuICAgICdJZGllcmVzaXMnLFxuICAgICdJZ3JhdmUnLFxuICAgICdPYWN1dGUnLFxuICAgICdPY2lyY3VtZmxleCcsXG4gICAgJ2FwcGxlJyxcbiAgICAnT2dyYXZlJyxcbiAgICAnVWFjdXRlJyxcbiAgICAnVWNpcmN1bWZsZXgnLFxuICAgICdVZ3JhdmUnLFxuICAgICdkb3RsZXNzaScsXG4gICAgJ2NpcmN1bWZsZXgnLFxuICAgICd0aWxkZScsXG4gICAgJ21hY3JvbicsXG4gICAgJ2JyZXZlJyxcbiAgICAnZG90YWNjZW50JyxcbiAgICAncmluZycsXG4gICAgJ2NlZGlsbGEnLFxuICAgICdodW5nYXJ1bWxhdXQnLFxuICAgICdvZ29uZWsnLFxuICAgICdjYXJvbicsXG4gICAgJ0xzbGFzaCcsXG4gICAgJ2xzbGFzaCcsXG4gICAgJ1NjYXJvbicsXG4gICAgJ3NjYXJvbicsXG4gICAgJ1pjYXJvbicsXG4gICAgJ3pjYXJvbicsXG4gICAgJ2Jyb2tlbmJhcicsXG4gICAgJ0V0aCcsXG4gICAgJ2V0aCcsXG4gICAgJ1lhY3V0ZScsXG4gICAgJ3lhY3V0ZScsXG4gICAgJ1Rob3JuJyxcbiAgICAndGhvcm4nLFxuICAgICdtaW51cycsXG4gICAgJ211bHRpcGx5JyxcbiAgICAnb25lc3VwZXJpb3InLFxuICAgICd0d29zdXBlcmlvcicsXG4gICAgJ3RocmVlc3VwZXJpb3InLFxuICAgICdvbmVoYWxmJyxcbiAgICAnb25lcXVhcnRlcicsXG4gICAgJ3RocmVlcXVhcnRlcnMnLFxuICAgICdmcmFuYycsXG4gICAgJ0dicmV2ZScsXG4gICAgJ2dicmV2ZScsXG4gICAgJ0lkb3RhY2NlbnQnLFxuICAgICdTY2VkaWxsYScsXG4gICAgJ3NjZWRpbGxhJyxcbiAgICAnQ2FjdXRlJyxcbiAgICAnY2FjdXRlJyxcbiAgICAnQ2Nhcm9uJyxcbiAgICAnY2Nhcm9uJyxcbiAgICAnZGNyb2F0J1xuXTtcblxuXG5jbGFzcyAkZjkyOTA2YmUyOGU2MTc2OSRleHBvcnQkMmUyYmNkODczOWFlMDM5IHtcbiAgICBfZ2V0UGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyAoMCwgJGY0M2FlYzk1NGNkZmRmMjEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoKTtcbiAgICB9XG4gICAgX2dldENCb3goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhdGguY2JveDtcbiAgICB9XG4gICAgX2dldEJCb3goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhdGguYmJveDtcbiAgICB9XG4gICAgX2dldFRhYmxlTWV0cmljcyh0YWJsZSkge1xuICAgICAgICBpZiAodGhpcy5pZCA8IHRhYmxlLm1ldHJpY3MubGVuZ3RoKSByZXR1cm4gdGFibGUubWV0cmljcy5nZXQodGhpcy5pZCk7XG4gICAgICAgIGxldCBtZXRyaWMgPSB0YWJsZS5tZXRyaWNzLmdldCh0YWJsZS5tZXRyaWNzLmxlbmd0aCAtIDEpO1xuICAgICAgICBsZXQgcmVzID0ge1xuICAgICAgICAgICAgYWR2YW5jZTogbWV0cmljID8gbWV0cmljLmFkdmFuY2UgOiAwLFxuICAgICAgICAgICAgYmVhcmluZzogdGFibGUuYmVhcmluZ3MuZ2V0KHRoaXMuaWQgLSB0YWJsZS5tZXRyaWNzLmxlbmd0aCkgfHwgMFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBfZ2V0TWV0cmljcyhjYm94KSB7XG4gICAgICAgIGlmICh0aGlzLl9tZXRyaWNzKSByZXR1cm4gdGhpcy5fbWV0cmljcztcbiAgICAgICAgbGV0IHsgYWR2YW5jZTogYWR2YW5jZVdpZHRoLCBiZWFyaW5nOiBsZWZ0QmVhcmluZyB9ID0gdGhpcy5fZ2V0VGFibGVNZXRyaWNzKHRoaXMuX2ZvbnQuaG10eCk7XG4gICAgICAgIC8vIEZvciB2ZXJ0aWNhbCBtZXRyaWNzLCB1c2Ugdm10eCBpZiBhdmFpbGFibGUsIG9yIGZhbGwgYmFjayB0byBnbG9iYWwgZGF0YSBmcm9tIE9TLzIgb3IgaGhlYVxuICAgICAgICBpZiAodGhpcy5fZm9udC52bXR4KSB2YXIgeyBhZHZhbmNlOiBhZHZhbmNlSGVpZ2h0LCBiZWFyaW5nOiB0b3BCZWFyaW5nIH0gPSB0aGlzLl9nZXRUYWJsZU1ldHJpY3ModGhpcy5fZm9udC52bXR4KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgb3MyO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYm94ID09PSAndW5kZWZpbmVkJyB8fCBjYm94ID09PSBudWxsKSAoeyBjYm94OiBjYm94IH0gPSB0aGlzKTtcbiAgICAgICAgICAgIGlmICgob3MyID0gdGhpcy5fZm9udFsnT1MvMiddKSAmJiBvczIudmVyc2lvbiA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgYWR2YW5jZUhlaWdodCA9IE1hdGguYWJzKG9zMi50eXBvQXNjZW5kZXIgLSBvczIudHlwb0Rlc2NlbmRlcik7XG4gICAgICAgICAgICAgICAgdmFyIHRvcEJlYXJpbmcgPSBvczIudHlwb0FzY2VuZGVyIC0gY2JveC5tYXhZO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgeyBoaGVhOiBoaGVhIH0gPSB0aGlzLl9mb250O1xuICAgICAgICAgICAgICAgIHZhciBhZHZhbmNlSGVpZ2h0ID0gTWF0aC5hYnMoaGhlYS5hc2NlbnQgLSBoaGVhLmRlc2NlbnQpO1xuICAgICAgICAgICAgICAgIHZhciB0b3BCZWFyaW5nID0gaGhlYS5hc2NlbnQgLSBjYm94Lm1heFk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2ZvbnQuX3ZhcmlhdGlvblByb2Nlc3NvciAmJiB0aGlzLl9mb250LkhWQVIpIGFkdmFuY2VXaWR0aCArPSB0aGlzLl9mb250Ll92YXJpYXRpb25Qcm9jZXNzb3IuZ2V0QWR2YW5jZUFkanVzdG1lbnQodGhpcy5pZCwgdGhpcy5fZm9udC5IVkFSKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldHJpY3MgPSB7XG4gICAgICAgICAgICBhZHZhbmNlV2lkdGg6IGFkdmFuY2VXaWR0aCxcbiAgICAgICAgICAgIGFkdmFuY2VIZWlnaHQ6IGFkdmFuY2VIZWlnaHQsXG4gICAgICAgICAgICBsZWZ0QmVhcmluZzogbGVmdEJlYXJpbmcsXG4gICAgICAgICAgICB0b3BCZWFyaW5nOiB0b3BCZWFyaW5nXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgKiBUaGUgZ2x5cGjigJlzIGNvbnRyb2wgYm94LlxuICAgKiBUaGlzIGlzIG9mdGVuIHRoZSBzYW1lIGFzIHRoZSBib3VuZGluZyBib3gsIGJ1dCBpcyBmYXN0ZXIgdG8gY29tcHV0ZS5cbiAgICogQmVjYXVzZSBvZiB0aGUgd2F5IGJlemllciBjdXJ2ZXMgYXJlIGRlZmluZWQsIHNvbWUgb2YgdGhlIGNvbnRyb2wgcG9pbnRzXG4gICAqIGNhbiBiZSBvdXRzaWRlIG9mIHRoZSBib3VuZGluZyBib3guIFdoZXJlIGBiYm94YCB0YWtlcyB0aGlzIGludG8gYWNjb3VudCxcbiAgICogYGNib3hgIGRvZXMgbm90LiBUaHVzLCBjYm94IGlzIGxlc3MgYWNjdXJhdGUsIGJ1dCBmYXN0ZXIgdG8gY29tcHV0ZS5cbiAgICogU2VlIFtoZXJlXShodHRwOi8vd3d3LmZyZWV0eXBlLm9yZy9mcmVldHlwZTIvZG9jcy9nbHlwaHMvZ2x5cGhzLTYuaHRtbCNzZWN0aW9uLTIpXG4gICAqIGZvciBhIG1vcmUgZGV0YWlsZWQgZGVzY3JpcHRpb24uXG4gICAqXG4gICAqIEB0eXBlIHtCQm94fVxuICAgKi8gZ2V0IGNib3goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRDQm94KCk7XG4gICAgfVxuICAgIC8qKlxuICAgKiBUaGUgZ2x5cGjigJlzIGJvdW5kaW5nIGJveCwgaS5lLiB0aGUgcmVjdGFuZ2xlIHRoYXQgZW5jbG9zZXMgdGhlXG4gICAqIGdseXBoIG91dGxpbmUgYXMgdGlnaHRseSBhcyBwb3NzaWJsZS5cbiAgICogQHR5cGUge0JCb3h9XG4gICAqLyBnZXQgYmJveCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEJCb3goKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIEEgdmVjdG9yIFBhdGggb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgZ2x5cGggb3V0bGluZS5cbiAgICogQHR5cGUge1BhdGh9XG4gICAqLyBnZXQgcGF0aCgpIHtcbiAgICAgICAgLy8gQ2FjaGUgdGhlIHBhdGggc28gd2Ugb25seSBkZWNvZGUgaXQgb25jZVxuICAgICAgICAvLyBEZWNvZGluZyBpcyBhY3R1YWxseSBwZXJmb3JtZWQgYnkgc3ViY2xhc3Nlc1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0UGF0aCgpO1xuICAgIH1cbiAgICAvKipcbiAgICogUmV0dXJucyBhIHBhdGggc2NhbGVkIHRvIHRoZSBnaXZlbiBmb250IHNpemUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplXG4gICAqIEByZXR1cm4ge1BhdGh9XG4gICAqLyBnZXRTY2FsZWRQYXRoKHNpemUpIHtcbiAgICAgICAgbGV0IHNjYWxlID0gMSAvIHRoaXMuX2ZvbnQudW5pdHNQZXJFbSAqIHNpemU7XG4gICAgICAgIHJldHVybiB0aGlzLnBhdGguc2NhbGUoc2NhbGUpO1xuICAgIH1cbiAgICAvKipcbiAgICogVGhlIGdseXBoJ3MgYWR2YW5jZSB3aWR0aC5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovIGdldCBhZHZhbmNlV2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXRyaWNzKCkuYWR2YW5jZVdpZHRoO1xuICAgIH1cbiAgICAvKipcbiAgICogVGhlIGdseXBoJ3MgYWR2YW5jZSBoZWlnaHQuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqLyBnZXQgYWR2YW5jZUhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1ldHJpY3MoKS5hZHZhbmNlSGVpZ2h0O1xuICAgIH1cbiAgICBnZXQgbGlnYXR1cmVDYXJldFBvc2l0aW9ucygpIHt9XG4gICAgX2dldE5hbWUoKSB7XG4gICAgICAgIGxldCB7IHBvc3Q6IHBvc3QgfSA9IHRoaXMuX2ZvbnQ7XG4gICAgICAgIGlmICghcG9zdCkgcmV0dXJuIG51bGw7XG4gICAgICAgIHN3aXRjaChwb3N0LnZlcnNpb24pe1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgJDc3MTNiOWI3YjQzOGRmZjgkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSlbdGhpcy5pZF07XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgbGV0IGlkID0gcG9zdC5nbHlwaE5hbWVJbmRleFt0aGlzLmlkXTtcbiAgICAgICAgICAgICAgICBpZiAoaWQgPCAoMCwgJDc3MTNiOWI3YjQzOGRmZjgkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkubGVuZ3RoKSByZXR1cm4gKDAsICQ3NzEzYjliN2I0MzhkZmY4JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpW2lkXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9zdC5uYW1lc1tpZCAtICgwLCAkNzcxM2I5YjdiNDM4ZGZmOCRleHBvcnQkMmUyYmNkODczOWFlMDM5KS5sZW5ndGhdO1xuICAgICAgICAgICAgY2FzZSAyLjU6XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCAkNzcxM2I5YjdiNDM4ZGZmOCRleHBvcnQkMmUyYmNkODczOWFlMDM5KVt0aGlzLmlkICsgcG9zdC5vZmZzZXRzW3RoaXMuaWRdXTtcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwb3N0Lm1hcFt0aGlzLmlkXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAqIFRoZSBnbHlwaCdzIG5hbWVcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TmFtZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICogUmVuZGVycyB0aGUgZ2x5cGggdG8gdGhlIGdpdmVuIGdyYXBoaWNzIGNvbnRleHQsIGF0IHRoZSBzcGVjaWZpZWQgZm9udCBzaXplLlxuICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyZH0gY3R4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplXG4gICAqLyByZW5kZXIoY3R4LCBzaXplKSB7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGxldCBzY2FsZSA9IDEgLyB0aGlzLl9mb250LmhlYWQudW5pdHNQZXJFbSAqIHNpemU7XG4gICAgICAgIGN0eC5zY2FsZShzY2FsZSwgc2NhbGUpO1xuICAgICAgICBsZXQgZm4gPSB0aGlzLnBhdGgudG9GdW5jdGlvbigpO1xuICAgICAgICBmbihjdHgpO1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihpZCwgY29kZVBvaW50cywgZm9udCl7XG4gICAgICAgIC8qKlxuICAgICAqIFRoZSBnbHlwaCBpZCBpbiB0aGUgZm9udFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgdW5pY29kZSBjb2RlIHBvaW50cyB0aGF0IGFyZSByZXByZXNlbnRlZCBieSB0aGlzIGdseXBoLlxuICAgICAqIFRoZXJlIGNhbiBiZSBtdWx0aXBsZSBjb2RlIHBvaW50cyBpbiB0aGUgY2FzZSBvZiBsaWdhdHVyZXMgYW5kIG90aGVyIGdseXBoc1xuICAgICAqIHRoYXQgcmVwcmVzZW50IG11bHRpcGxlIHZpc3VhbCBjaGFyYWN0ZXJzLlxuICAgICAqIEB0eXBlIHtudW1iZXJbXX1cbiAgICAgKi8gdGhpcy5jb2RlUG9pbnRzID0gY29kZVBvaW50cztcbiAgICAgICAgdGhpcy5fZm9udCA9IGZvbnQ7XG4gICAgICAgIC8vIFRPRE86IGdldCB0aGlzIGluZm8gZnJvbSBHREVGIGlmIGF2YWlsYWJsZVxuICAgICAgICB0aGlzLmlzTWFyayA9IHRoaXMuY29kZVBvaW50cy5sZW5ndGggPiAwICYmIHRoaXMuY29kZVBvaW50cy5ldmVyeSgoMCwgJDUyWklmJGlzTWFyaykpO1xuICAgICAgICB0aGlzLmlzTGlnYXR1cmUgPSB0aGlzLmNvZGVQb2ludHMubGVuZ3RoID4gMTtcbiAgICB9XG59XG4oMCwgJDUyWklmJF8xKShbXG4gICAgKDAsICRlNzE1NjVmMmNlMDljYjZiJGV4cG9ydCQ2OWEzMjA5ZjFhMDZjMDRkKVxuXSwgJGY5MjkwNmJlMjhlNjE3NjkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5wcm90b3R5cGUsIFwiY2JveFwiLCBudWxsKTtcbigwLCAkNTJaSWYkXzEpKFtcbiAgICAoMCwgJGU3MTU2NWYyY2UwOWNiNmIkZXhwb3J0JDY5YTMyMDlmMWEwNmMwNGQpXG5dLCAkZjkyOTA2YmUyOGU2MTc2OSRleHBvcnQkMmUyYmNkODczOWFlMDM5LnByb3RvdHlwZSwgXCJiYm94XCIsIG51bGwpO1xuKDAsICQ1MlpJZiRfMSkoW1xuICAgICgwLCAkZTcxNTY1ZjJjZTA5Y2I2YiRleHBvcnQkNjlhMzIwOWYxYTA2YzA0ZClcbl0sICRmOTI5MDZiZTI4ZTYxNzY5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkucHJvdG90eXBlLCBcInBhdGhcIiwgbnVsbCk7XG4oMCwgJDUyWklmJF8xKShbXG4gICAgKDAsICRlNzE1NjVmMmNlMDljYjZiJGV4cG9ydCQ2OWEzMjA5ZjFhMDZjMDRkKVxuXSwgJGY5MjkwNmJlMjhlNjE3NjkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5wcm90b3R5cGUsIFwiYWR2YW5jZVdpZHRoXCIsIG51bGwpO1xuKDAsICQ1MlpJZiRfMSkoW1xuICAgICgwLCAkZTcxNTY1ZjJjZTA5Y2I2YiRleHBvcnQkNjlhMzIwOWYxYTA2YzA0ZClcbl0sICRmOTI5MDZiZTI4ZTYxNzY5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkucHJvdG90eXBlLCBcImFkdmFuY2VIZWlnaHRcIiwgbnVsbCk7XG4oMCwgJDUyWklmJF8xKShbXG4gICAgKDAsICRlNzE1NjVmMmNlMDljYjZiJGV4cG9ydCQ2OWEzMjA5ZjFhMDZjMDRkKVxuXSwgJGY5MjkwNmJlMjhlNjE3NjkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5wcm90b3R5cGUsIFwibmFtZVwiLCBudWxsKTtcblxuXG5cblxuXG4vLyBUaGUgaGVhZGVyIGZvciBib3RoIHNpbXBsZSBhbmQgY29tcG9zaXRlIGdseXBoc1xubGV0ICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRHbHlmSGVhZGVyID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIG51bWJlck9mQ29udG91cnM6ICQ1MlpJZiRpbnQxNixcbiAgICB4TWluOiAkNTJaSWYkaW50MTYsXG4gICAgeU1pbjogJDUyWklmJGludDE2LFxuICAgIHhNYXg6ICQ1MlpJZiRpbnQxNixcbiAgICB5TWF4OiAkNTJaSWYkaW50MTZcbn0pO1xuLy8gRmxhZ3MgZm9yIHNpbXBsZSBnbHlwaHNcbmNvbnN0ICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRPTl9DVVJWRSA9IDE7XG5jb25zdCAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkWF9TSE9SVF9WRUNUT1IgPSAyO1xuY29uc3QgJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFlfU0hPUlRfVkVDVE9SID0gNDtcbmNvbnN0ICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRSRVBFQVQgPSA4O1xuY29uc3QgJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFNBTUVfWCA9IDE2O1xuY29uc3QgJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFNBTUVfWSA9IDMyO1xuLy8gRmxhZ3MgZm9yIGNvbXBvc2l0ZSBnbHlwaHNcbmNvbnN0ICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRBUkdfMV9BTkRfMl9BUkVfV09SRFMgPSAxO1xuY29uc3QgJDY5YWFjMTYwMjk5Njg2OTIkdmFyJEFSR1NfQVJFX1hZX1ZBTFVFUyA9IDI7XG5jb25zdCAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkUk9VTkRfWFlfVE9fR1JJRCA9IDQ7XG5jb25zdCAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkV0VfSEFWRV9BX1NDQUxFID0gODtcbmNvbnN0ICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRNT1JFX0NPTVBPTkVOVFMgPSAzMjtcbmNvbnN0ICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRXRV9IQVZFX0FOX1hfQU5EX1lfU0NBTEUgPSA2NDtcbmNvbnN0ICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRXRV9IQVZFX0FfVFdPX0JZX1RXTyA9IDEyODtcbmNvbnN0ICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRXRV9IQVZFX0lOU1RSVUNUSU9OUyA9IDI1NjtcbmNvbnN0ICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRVU0VfTVlfTUVUUklDUyA9IDUxMjtcbmNvbnN0ICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRPVkVSTEFQX0NPTVBPVU5EID0gMTAyNDtcbmNvbnN0ICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRTQ0FMRURfQ09NUE9ORU5UX09GRlNFVCA9IDIwNDg7XG5jb25zdCAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkVU5TQ0FMRURfQ09NUE9ORU5UX09GRlNFVCA9IDQwOTY7XG5jbGFzcyAkNjlhYWMxNjAyOTk2ODY5MiRleHBvcnQkYmFmMjYxNDZhNDE0ZjI0YSB7XG4gICAgY29weSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyAkNjlhYWMxNjAyOTk2ODY5MiRleHBvcnQkYmFmMjYxNDZhNDE0ZjI0YSh0aGlzLm9uQ3VydmUsIHRoaXMuZW5kQ29udG91ciwgdGhpcy54LCB0aGlzLnkpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihvbkN1cnZlLCBlbmRDb250b3VyLCB4ID0gMCwgeSA9IDApe1xuICAgICAgICB0aGlzLm9uQ3VydmUgPSBvbkN1cnZlO1xuICAgICAgICB0aGlzLmVuZENvbnRvdXIgPSBlbmRDb250b3VyO1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgIH1cbn1cbi8vIFJlcHJlc2VudHMgYSBjb21wb25lbnQgaW4gYSBjb21wb3NpdGUgZ2x5cGhcbmNsYXNzICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKGdseXBoSUQsIGR4LCBkeSl7XG4gICAgICAgIHRoaXMuZ2x5cGhJRCA9IGdseXBoSUQ7XG4gICAgICAgIHRoaXMuZHggPSBkeDtcbiAgICAgICAgdGhpcy5keSA9IGR5O1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIHRoaXMuc2NhbGVYID0gdGhpcy5zY2FsZVkgPSAxO1xuICAgICAgICB0aGlzLnNjYWxlMDEgPSB0aGlzLnNjYWxlMTAgPSAwO1xuICAgIH1cbn1cbmNsYXNzICQ2OWFhYzE2MDI5OTY4NjkyJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgZXh0ZW5kcyAoMCwgJGY5MjkwNmJlMjhlNjE3NjkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkge1xuICAgIC8vIFBhcnNlcyBqdXN0IHRoZSBnbHlwaCBoZWFkZXIgYW5kIHJldHVybnMgdGhlIGJvdW5kaW5nIGJveFxuICAgIF9nZXRDQm94KGludGVybmFsKSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gZGVjb2RlIHRoZSBnbHlwaCBpZiB2YXJpYXRpb24gcHJvY2Vzc2luZyBpcyByZXF1ZXN0ZWQsXG4gICAgICAgIC8vIHNvIGl0J3MgZWFzaWVyIGp1c3QgdG8gcmVjb21wdXRlIHRoZSBwYXRoJ3MgY2JveCBhZnRlciBkZWNvZGluZy5cbiAgICAgICAgaWYgKHRoaXMuX2ZvbnQuX3ZhcmlhdGlvblByb2Nlc3NvciAmJiAhaW50ZXJuYWwpIHJldHVybiB0aGlzLnBhdGguY2JveDtcbiAgICAgICAgbGV0IHN0cmVhbSA9IHRoaXMuX2ZvbnQuX2dldFRhYmxlU3RyZWFtKCdnbHlmJyk7XG4gICAgICAgIHN0cmVhbS5wb3MgKz0gdGhpcy5fZm9udC5sb2NhLm9mZnNldHNbdGhpcy5pZF07XG4gICAgICAgIGxldCBnbHlwaCA9ICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRHbHlmSGVhZGVyLmRlY29kZShzdHJlYW0pO1xuICAgICAgICBsZXQgY2JveCA9IG5ldyAoMCwgJGYzNDYwMGFiOWQ3ZjcwZDgkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoZ2x5cGgueE1pbiwgZ2x5cGgueU1pbiwgZ2x5cGgueE1heCwgZ2x5cGgueU1heCk7XG4gICAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKGNib3gpO1xuICAgIH1cbiAgICAvLyBQYXJzZXMgYSBzaW5nbGUgZ2x5cGggY29vcmRpbmF0ZVxuICAgIF9wYXJzZUdseXBoQ29vcmQoc3RyZWFtLCBwcmV2LCBzaG9ydCwgc2FtZSkge1xuICAgICAgICBpZiAoc2hvcnQpIHtcbiAgICAgICAgICAgIHZhciB2YWwgPSBzdHJlYW0ucmVhZFVJbnQ4KCk7XG4gICAgICAgICAgICBpZiAoIXNhbWUpIHZhbCA9IC12YWw7XG4gICAgICAgICAgICB2YWwgKz0gcHJldjtcbiAgICAgICAgfSBlbHNlIGlmIChzYW1lKSB2YXIgdmFsID0gcHJldjtcbiAgICAgICAgZWxzZSB2YXIgdmFsID0gcHJldiArIHN0cmVhbS5yZWFkSW50MTZCRSgpO1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgICAvLyBEZWNvZGVzIHRoZSBnbHlwaCBkYXRhIGludG8gcG9pbnRzIGZvciBzaW1wbGUgZ2x5cGhzLFxuICAgIC8vIG9yIGNvbXBvbmVudHMgZm9yIGNvbXBvc2l0ZSBnbHlwaHNcbiAgICBfZGVjb2RlKCkge1xuICAgICAgICBsZXQgZ2x5ZlBvcyA9IHRoaXMuX2ZvbnQubG9jYS5vZmZzZXRzW3RoaXMuaWRdO1xuICAgICAgICBsZXQgbmV4dFBvcyA9IHRoaXMuX2ZvbnQubG9jYS5vZmZzZXRzW3RoaXMuaWQgKyAxXTtcbiAgICAgICAgLy8gTm90aGluZyB0byBkbyBpZiB0aGVyZSBpcyBubyBkYXRhIGZvciB0aGlzIGdseXBoXG4gICAgICAgIGlmIChnbHlmUG9zID09PSBuZXh0UG9zKSByZXR1cm4gbnVsbDtcbiAgICAgICAgbGV0IHN0cmVhbSA9IHRoaXMuX2ZvbnQuX2dldFRhYmxlU3RyZWFtKCdnbHlmJyk7XG4gICAgICAgIHN0cmVhbS5wb3MgKz0gZ2x5ZlBvcztcbiAgICAgICAgbGV0IHN0YXJ0UG9zID0gc3RyZWFtLnBvcztcbiAgICAgICAgbGV0IGdseXBoID0gJDY5YWFjMTYwMjk5Njg2OTIkdmFyJEdseWZIZWFkZXIuZGVjb2RlKHN0cmVhbSk7XG4gICAgICAgIGlmIChnbHlwaC5udW1iZXJPZkNvbnRvdXJzID4gMCkgdGhpcy5fZGVjb2RlU2ltcGxlKGdseXBoLCBzdHJlYW0pO1xuICAgICAgICBlbHNlIGlmIChnbHlwaC5udW1iZXJPZkNvbnRvdXJzIDwgMCkgdGhpcy5fZGVjb2RlQ29tcG9zaXRlKGdseXBoLCBzdHJlYW0sIHN0YXJ0UG9zKTtcbiAgICAgICAgcmV0dXJuIGdseXBoO1xuICAgIH1cbiAgICBfZGVjb2RlU2ltcGxlKGdseXBoLCBzdHJlYW0pIHtcbiAgICAgICAgLy8gdGhpcyBpcyBhIHNpbXBsZSBnbHlwaFxuICAgICAgICBnbHlwaC5wb2ludHMgPSBbXTtcbiAgICAgICAgbGV0IGVuZFB0c09mQ29udG91cnMgPSBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MTYsIGdseXBoLm51bWJlck9mQ29udG91cnMpLmRlY29kZShzdHJlYW0pO1xuICAgICAgICBnbHlwaC5pbnN0cnVjdGlvbnMgPSBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50OCwgJDUyWklmJHVpbnQxNikuZGVjb2RlKHN0cmVhbSk7XG4gICAgICAgIGxldCBmbGFncyA9IFtdO1xuICAgICAgICBsZXQgbnVtQ29vcmRzID0gZW5kUHRzT2ZDb250b3Vyc1tlbmRQdHNPZkNvbnRvdXJzLmxlbmd0aCAtIDFdICsgMTtcbiAgICAgICAgd2hpbGUoZmxhZ3MubGVuZ3RoIDwgbnVtQ29vcmRzKXtcbiAgICAgICAgICAgIHZhciBmbGFnID0gc3RyZWFtLnJlYWRVSW50OCgpO1xuICAgICAgICAgICAgZmxhZ3MucHVzaChmbGFnKTtcbiAgICAgICAgICAgIC8vIGNoZWNrIGZvciByZXBlYXQgZmxhZ1xuICAgICAgICAgICAgaWYgKGZsYWcgJiAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkUkVQRUFUKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNvdW50ID0gc3RyZWFtLnJlYWRVSW50OCgpO1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCBjb3VudDsgaisrKWZsYWdzLnB1c2goZmxhZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGZsYWdzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHZhciBmbGFnID0gZmxhZ3NbaV07XG4gICAgICAgICAgICBsZXQgcG9pbnQgPSBuZXcgJDY5YWFjMTYwMjk5Njg2OTIkZXhwb3J0JGJhZjI2MTQ2YTQxNGYyNGEoISEoZmxhZyAmICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRPTl9DVVJWRSksIGVuZFB0c09mQ29udG91cnMuaW5kZXhPZihpKSA+PSAwLCAwLCAwKTtcbiAgICAgICAgICAgIGdseXBoLnBvaW50cy5wdXNoKHBvaW50KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcHggPSAwO1xuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgZmxhZ3MubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgdmFyIGZsYWcgPSBmbGFnc1tpXTtcbiAgICAgICAgICAgIGdseXBoLnBvaW50c1tpXS54ID0gcHggPSB0aGlzLl9wYXJzZUdseXBoQ29vcmQoc3RyZWFtLCBweCwgZmxhZyAmICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRYX1NIT1JUX1ZFQ1RPUiwgZmxhZyAmICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRTQU1FX1gpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBweSA9IDA7XG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBmbGFncy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICB2YXIgZmxhZyA9IGZsYWdzW2ldO1xuICAgICAgICAgICAgZ2x5cGgucG9pbnRzW2ldLnkgPSBweSA9IHRoaXMuX3BhcnNlR2x5cGhDb29yZChzdHJlYW0sIHB5LCBmbGFnICYgJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFlfU0hPUlRfVkVDVE9SLCBmbGFnICYgJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFNBTUVfWSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2ZvbnQuX3ZhcmlhdGlvblByb2Nlc3Nvcikge1xuICAgICAgICAgICAgbGV0IHBvaW50cyA9IGdseXBoLnBvaW50cy5zbGljZSgpO1xuICAgICAgICAgICAgcG9pbnRzLnB1c2goLi4udGhpcy5fZ2V0UGhhbnRvbVBvaW50cyhnbHlwaCkpO1xuICAgICAgICAgICAgdGhpcy5fZm9udC5fdmFyaWF0aW9uUHJvY2Vzc29yLnRyYW5zZm9ybVBvaW50cyh0aGlzLmlkLCBwb2ludHMpO1xuICAgICAgICAgICAgZ2x5cGgucGhhbnRvbVBvaW50cyA9IHBvaW50cy5zbGljZSgtNCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBfZGVjb2RlQ29tcG9zaXRlKGdseXBoLCBzdHJlYW0sIG9mZnNldCA9IDApIHtcbiAgICAgICAgLy8gdGhpcyBpcyBhIGNvbXBvc2l0ZSBnbHlwaFxuICAgICAgICBnbHlwaC5jb21wb25lbnRzID0gW107XG4gICAgICAgIGxldCBoYXZlSW5zdHJ1Y3Rpb25zID0gZmFsc2U7XG4gICAgICAgIGxldCBmbGFncyA9ICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRNT1JFX0NPTVBPTkVOVFM7XG4gICAgICAgIHdoaWxlKGZsYWdzICYgJDY5YWFjMTYwMjk5Njg2OTIkdmFyJE1PUkVfQ09NUE9ORU5UUyl7XG4gICAgICAgICAgICBmbGFncyA9IHN0cmVhbS5yZWFkVUludDE2QkUoKTtcbiAgICAgICAgICAgIGxldCBnUG9zID0gc3RyZWFtLnBvcyAtIG9mZnNldDtcbiAgICAgICAgICAgIGxldCBnbHlwaElEID0gc3RyZWFtLnJlYWRVSW50MTZCRSgpO1xuICAgICAgICAgICAgaWYgKCFoYXZlSW5zdHJ1Y3Rpb25zKSBoYXZlSW5zdHJ1Y3Rpb25zID0gKGZsYWdzICYgJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFdFX0hBVkVfSU5TVFJVQ1RJT05TKSAhPT0gMDtcbiAgICAgICAgICAgIGlmIChmbGFncyAmICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRBUkdfMV9BTkRfMl9BUkVfV09SRFMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZHggPSBzdHJlYW0ucmVhZEludDE2QkUoKTtcbiAgICAgICAgICAgICAgICB2YXIgZHkgPSBzdHJlYW0ucmVhZEludDE2QkUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGR4ID0gc3RyZWFtLnJlYWRJbnQ4KCk7XG4gICAgICAgICAgICAgICAgdmFyIGR5ID0gc3RyZWFtLnJlYWRJbnQ4KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gbmV3ICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRDb21wb25lbnQoZ2x5cGhJRCwgZHgsIGR5KTtcbiAgICAgICAgICAgIGNvbXBvbmVudC5wb3MgPSBnUG9zO1xuICAgICAgICAgICAgaWYgKGZsYWdzICYgJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFdFX0hBVkVfQV9TQ0FMRSkgLy8gZml4ZWQgbnVtYmVyIHdpdGggMTQgYml0cyBvZiBmcmFjdGlvblxuICAgICAgICAgICAgY29tcG9uZW50LnNjYWxlWCA9IGNvbXBvbmVudC5zY2FsZVkgPSAoc3RyZWFtLnJlYWRVSW50OCgpIDw8IDI0IHwgc3RyZWFtLnJlYWRVSW50OCgpIDw8IDE2KSAvIDEwNzM3NDE4MjQ7XG4gICAgICAgICAgICBlbHNlIGlmIChmbGFncyAmICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRXRV9IQVZFX0FOX1hfQU5EX1lfU0NBTEUpIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQuc2NhbGVYID0gKHN0cmVhbS5yZWFkVUludDgoKSA8PCAyNCB8IHN0cmVhbS5yZWFkVUludDgoKSA8PCAxNikgLyAxMDczNzQxODI0O1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5zY2FsZVkgPSAoc3RyZWFtLnJlYWRVSW50OCgpIDw8IDI0IHwgc3RyZWFtLnJlYWRVSW50OCgpIDw8IDE2KSAvIDEwNzM3NDE4MjQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZsYWdzICYgJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFdFX0hBVkVfQV9UV09fQllfVFdPKSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50LnNjYWxlWCA9IChzdHJlYW0ucmVhZFVJbnQ4KCkgPDwgMjQgfCBzdHJlYW0ucmVhZFVJbnQ4KCkgPDwgMTYpIC8gMTA3Mzc0MTgyNDtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQuc2NhbGUwMSA9IChzdHJlYW0ucmVhZFVJbnQ4KCkgPDwgMjQgfCBzdHJlYW0ucmVhZFVJbnQ4KCkgPDwgMTYpIC8gMTA3Mzc0MTgyNDtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQuc2NhbGUxMCA9IChzdHJlYW0ucmVhZFVJbnQ4KCkgPDwgMjQgfCBzdHJlYW0ucmVhZFVJbnQ4KCkgPDwgMTYpIC8gMTA3Mzc0MTgyNDtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQuc2NhbGVZID0gKHN0cmVhbS5yZWFkVUludDgoKSA8PCAyNCB8IHN0cmVhbS5yZWFkVUludDgoKSA8PCAxNikgLyAxMDczNzQxODI0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2x5cGguY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2ZvbnQuX3ZhcmlhdGlvblByb2Nlc3Nvcikge1xuICAgICAgICAgICAgbGV0IHBvaW50cyA9IFtdO1xuICAgICAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IGdseXBoLmNvbXBvbmVudHMubGVuZ3RoOyBqKyspe1xuICAgICAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBnbHlwaC5jb21wb25lbnRzW2pdO1xuICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKG5ldyAkNjlhYWMxNjAyOTk2ODY5MiRleHBvcnQkYmFmMjYxNDZhNDE0ZjI0YSh0cnVlLCB0cnVlLCBjb21wb25lbnQuZHgsIGNvbXBvbmVudC5keSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9pbnRzLnB1c2goLi4udGhpcy5fZ2V0UGhhbnRvbVBvaW50cyhnbHlwaCkpO1xuICAgICAgICAgICAgdGhpcy5fZm9udC5fdmFyaWF0aW9uUHJvY2Vzc29yLnRyYW5zZm9ybVBvaW50cyh0aGlzLmlkLCBwb2ludHMpO1xuICAgICAgICAgICAgZ2x5cGgucGhhbnRvbVBvaW50cyA9IHBvaW50cy5zcGxpY2UoLTQsIDQpO1xuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgbGV0IHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgICAgICAgICAgIGdseXBoLmNvbXBvbmVudHNbaV0uZHggPSBwb2ludC54O1xuICAgICAgICAgICAgICAgIGdseXBoLmNvbXBvbmVudHNbaV0uZHkgPSBwb2ludC55O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYXZlSW5zdHJ1Y3Rpb25zO1xuICAgIH1cbiAgICBfZ2V0UGhhbnRvbVBvaW50cyhnbHlwaCkge1xuICAgICAgICBsZXQgY2JveCA9IHRoaXMuX2dldENCb3godHJ1ZSk7XG4gICAgICAgIGlmICh0aGlzLl9tZXRyaWNzID09IG51bGwpIHRoaXMuX21ldHJpY3MgPSAoMCwgJGY5MjkwNmJlMjhlNjE3NjkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkucHJvdG90eXBlLl9nZXRNZXRyaWNzLmNhbGwodGhpcywgY2JveCk7XG4gICAgICAgIGxldCB7IGFkdmFuY2VXaWR0aDogYWR2YW5jZVdpZHRoLCBhZHZhbmNlSGVpZ2h0OiBhZHZhbmNlSGVpZ2h0LCBsZWZ0QmVhcmluZzogbGVmdEJlYXJpbmcsIHRvcEJlYXJpbmc6IHRvcEJlYXJpbmcgfSA9IHRoaXMuX21ldHJpY3M7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBuZXcgJDY5YWFjMTYwMjk5Njg2OTIkZXhwb3J0JGJhZjI2MTQ2YTQxNGYyNGEoZmFsc2UsIHRydWUsIGdseXBoLnhNaW4gLSBsZWZ0QmVhcmluZywgMCksXG4gICAgICAgICAgICBuZXcgJDY5YWFjMTYwMjk5Njg2OTIkZXhwb3J0JGJhZjI2MTQ2YTQxNGYyNGEoZmFsc2UsIHRydWUsIGdseXBoLnhNaW4gLSBsZWZ0QmVhcmluZyArIGFkdmFuY2VXaWR0aCwgMCksXG4gICAgICAgICAgICBuZXcgJDY5YWFjMTYwMjk5Njg2OTIkZXhwb3J0JGJhZjI2MTQ2YTQxNGYyNGEoZmFsc2UsIHRydWUsIDAsIGdseXBoLnlNYXggKyB0b3BCZWFyaW5nKSxcbiAgICAgICAgICAgIG5ldyAkNjlhYWMxNjAyOTk2ODY5MiRleHBvcnQkYmFmMjYxNDZhNDE0ZjI0YShmYWxzZSwgdHJ1ZSwgMCwgZ2x5cGgueU1heCArIHRvcEJlYXJpbmcgKyBhZHZhbmNlSGVpZ2h0KVxuICAgICAgICBdO1xuICAgIH1cbiAgICAvLyBEZWNvZGVzIGZvbnQgZGF0YSwgcmVzb2x2ZXMgY29tcG9zaXRlIGdseXBocywgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgY29udG91cnNcbiAgICBfZ2V0Q29udG91cnMoKSB7XG4gICAgICAgIGxldCBnbHlwaCA9IHRoaXMuX2RlY29kZSgpO1xuICAgICAgICBpZiAoIWdseXBoKSByZXR1cm4gW107XG4gICAgICAgIGxldCBwb2ludHMgPSBbXTtcbiAgICAgICAgaWYgKGdseXBoLm51bWJlck9mQ29udG91cnMgPCAwKSAvLyByZXNvbHZlIGNvbXBvc2l0ZSBnbHlwaHNcbiAgICAgICAgZm9yIChsZXQgY29tcG9uZW50IG9mIGdseXBoLmNvbXBvbmVudHMpe1xuICAgICAgICAgICAgbGV0IGNvbnRvdXJzID0gdGhpcy5fZm9udC5nZXRHbHlwaChjb21wb25lbnQuZ2x5cGhJRCkuX2dldENvbnRvdXJzKCk7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgY29udG91cnMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIGxldCBjb250b3VyID0gY29udG91cnNbaV07XG4gICAgICAgICAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IGNvbnRvdXIubGVuZ3RoOyBqKyspe1xuICAgICAgICAgICAgICAgICAgICBsZXQgcG9pbnQgPSBjb250b3VyW2pdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgeCA9IHBvaW50LnggKiBjb21wb25lbnQuc2NhbGVYICsgcG9pbnQueSAqIGNvbXBvbmVudC5zY2FsZTAxICsgY29tcG9uZW50LmR4O1xuICAgICAgICAgICAgICAgICAgICBsZXQgeSA9IHBvaW50LnkgKiBjb21wb25lbnQuc2NhbGVZICsgcG9pbnQueCAqIGNvbXBvbmVudC5zY2FsZTEwICsgY29tcG9uZW50LmR5O1xuICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChuZXcgJDY5YWFjMTYwMjk5Njg2OTIkZXhwb3J0JGJhZjI2MTQ2YTQxNGYyNGEocG9pbnQub25DdXJ2ZSwgcG9pbnQuZW5kQ29udG91ciwgeCwgeSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHBvaW50cyA9IGdseXBoLnBvaW50cyB8fCBbXTtcbiAgICAgICAgLy8gUmVjb21wdXRlIGFuZCBjYWNoZSBtZXRyaWNzIGlmIHdlIHBlcmZvcm1lZCB2YXJpYXRpb24gcHJvY2Vzc2luZywgYW5kIGRvbid0IGhhdmUgYW4gSFZBUiB0YWJsZVxuICAgICAgICBpZiAoZ2x5cGgucGhhbnRvbVBvaW50cyAmJiAhdGhpcy5fZm9udC5kaXJlY3RvcnkudGFibGVzLkhWQVIpIHtcbiAgICAgICAgICAgIHRoaXMuX21ldHJpY3MuYWR2YW5jZVdpZHRoID0gZ2x5cGgucGhhbnRvbVBvaW50c1sxXS54IC0gZ2x5cGgucGhhbnRvbVBvaW50c1swXS54O1xuICAgICAgICAgICAgdGhpcy5fbWV0cmljcy5hZHZhbmNlSGVpZ2h0ID0gZ2x5cGgucGhhbnRvbVBvaW50c1szXS55IC0gZ2x5cGgucGhhbnRvbVBvaW50c1syXS55O1xuICAgICAgICAgICAgdGhpcy5fbWV0cmljcy5sZWZ0QmVhcmluZyA9IGdseXBoLnhNaW4gLSBnbHlwaC5waGFudG9tUG9pbnRzWzBdLng7XG4gICAgICAgICAgICB0aGlzLl9tZXRyaWNzLnRvcEJlYXJpbmcgPSBnbHlwaC5waGFudG9tUG9pbnRzWzJdLnkgLSBnbHlwaC55TWF4O1xuICAgICAgICB9XG4gICAgICAgIGxldCBjb250b3VycyA9IFtdO1xuICAgICAgICBsZXQgY3VyID0gW107XG4gICAgICAgIGZvcihsZXQgayA9IDA7IGsgPCBwb2ludHMubGVuZ3RoOyBrKyspe1xuICAgICAgICAgICAgdmFyIHBvaW50ID0gcG9pbnRzW2tdO1xuICAgICAgICAgICAgY3VyLnB1c2gocG9pbnQpO1xuICAgICAgICAgICAgaWYgKHBvaW50LmVuZENvbnRvdXIpIHtcbiAgICAgICAgICAgICAgICBjb250b3Vycy5wdXNoKGN1cik7XG4gICAgICAgICAgICAgICAgY3VyID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnRvdXJzO1xuICAgIH1cbiAgICBfZ2V0TWV0cmljcygpIHtcbiAgICAgICAgaWYgKHRoaXMuX21ldHJpY3MpIHJldHVybiB0aGlzLl9tZXRyaWNzO1xuICAgICAgICBsZXQgY2JveCA9IHRoaXMuX2dldENCb3godHJ1ZSk7XG4gICAgICAgIHN1cGVyLl9nZXRNZXRyaWNzKGNib3gpO1xuICAgICAgICBpZiAodGhpcy5fZm9udC5fdmFyaWF0aW9uUHJvY2Vzc29yICYmICF0aGlzLl9mb250LkhWQVIpIC8vIE5vIEhWQVIgdGFibGUsIGRlY29kZSB0aGUgZ2x5cGguIFRoaXMgdHJpZ2dlcnMgcmVjb21wdXRhdGlvbiBvZiBtZXRyaWNzLlxuICAgICAgICB0aGlzLnBhdGg7XG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRyaWNzO1xuICAgIH1cbiAgICAvLyBDb252ZXJ0cyBjb250b3VycyB0byBhIFBhdGggb2JqZWN0IHRoYXQgY2FuIGJlIHJlbmRlcmVkXG4gICAgX2dldFBhdGgoKSB7XG4gICAgICAgIGxldCBjb250b3VycyA9IHRoaXMuX2dldENvbnRvdXJzKCk7XG4gICAgICAgIGxldCBwYXRoID0gbmV3ICgwLCAkZjQzYWVjOTU0Y2RmZGYyMSRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGNvbnRvdXJzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCBjb250b3VyID0gY29udG91cnNbaV07XG4gICAgICAgICAgICBsZXQgZmlyc3RQdCA9IGNvbnRvdXJbMF07XG4gICAgICAgICAgICBsZXQgbGFzdFB0ID0gY29udG91cltjb250b3VyLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gMDtcbiAgICAgICAgICAgIGlmIChmaXJzdFB0Lm9uQ3VydmUpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgZmlyc3QgcG9pbnQgd2lsbCBiZSBjb25zdW1lZCBieSB0aGUgbW92ZVRvIGNvbW1hbmQsIHNvIHNraXAgaW4gdGhlIGxvb3BcbiAgICAgICAgICAgICAgICB2YXIgY3VydmVQdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAobGFzdFB0Lm9uQ3VydmUpIC8vIFN0YXJ0IGF0IHRoZSBsYXN0IHBvaW50IGlmIHRoZSBmaXJzdCBwb2ludCBpcyBvZmYgY3VydmUgYW5kIHRoZSBsYXN0IHBvaW50IGlzIG9uIGN1cnZlXG4gICAgICAgICAgICAgICAgZmlyc3RQdCA9IGxhc3RQdDtcbiAgICAgICAgICAgICAgICBlbHNlIC8vIFN0YXJ0IGF0IHRoZSBtaWRkbGUgaWYgYm90aCB0aGUgZmlyc3QgYW5kIGxhc3QgcG9pbnRzIGFyZSBvZmYgY3VydmVcbiAgICAgICAgICAgICAgICBmaXJzdFB0ID0gbmV3ICQ2OWFhYzE2MDI5OTY4NjkyJGV4cG9ydCRiYWYyNjE0NmE0MTRmMjRhKGZhbHNlLCBmYWxzZSwgKGZpcnN0UHQueCArIGxhc3RQdC54KSAvIDIsIChmaXJzdFB0LnkgKyBsYXN0UHQueSkgLyAyKTtcbiAgICAgICAgICAgICAgICB2YXIgY3VydmVQdCA9IGZpcnN0UHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXRoLm1vdmVUbyhmaXJzdFB0LngsIGZpcnN0UHQueSk7XG4gICAgICAgICAgICBmb3IobGV0IGogPSBzdGFydDsgaiA8IGNvbnRvdXIubGVuZ3RoOyBqKyspe1xuICAgICAgICAgICAgICAgIGxldCBwdCA9IGNvbnRvdXJbal07XG4gICAgICAgICAgICAgICAgbGV0IHByZXZQdCA9IGogPT09IDAgPyBmaXJzdFB0IDogY29udG91cltqIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKHByZXZQdC5vbkN1cnZlICYmIHB0Lm9uQ3VydmUpIHBhdGgubGluZVRvKHB0LngsIHB0LnkpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByZXZQdC5vbkN1cnZlICYmICFwdC5vbkN1cnZlKSB2YXIgY3VydmVQdCA9IHB0O1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFwcmV2UHQub25DdXJ2ZSAmJiAhcHQub25DdXJ2ZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWlkWCA9IChwcmV2UHQueCArIHB0LngpIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1pZFkgPSAocHJldlB0LnkgKyBwdC55KSAvIDI7XG4gICAgICAgICAgICAgICAgICAgIHBhdGgucXVhZHJhdGljQ3VydmVUbyhwcmV2UHQueCwgcHJldlB0LnksIG1pZFgsIG1pZFkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VydmVQdCA9IHB0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXByZXZQdC5vbkN1cnZlICYmIHB0Lm9uQ3VydmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aC5xdWFkcmF0aWNDdXJ2ZVRvKGN1cnZlUHQueCwgY3VydmVQdC55LCBwdC54LCBwdC55KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnZlUHQgPSBudWxsO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIFRURiBwYXRoIHN0YXRlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ29ubmVjdCB0aGUgZmlyc3QgYW5kIGxhc3QgcG9pbnRzXG4gICAgICAgICAgICBpZiAoY3VydmVQdCkgcGF0aC5xdWFkcmF0aWNDdXJ2ZVRvKGN1cnZlUHQueCwgY3VydmVQdC55LCBmaXJzdFB0LngsIGZpcnN0UHQueSk7XG4gICAgICAgICAgICBwYXRoLmNsb3NlUGF0aCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvciguLi5hcmdzKXtcbiAgICAgICAgc3VwZXIoLi4uYXJncyk7XG4gICAgICAgICgwLCAkNTJaSWYkXykodGhpcywgXCJ0eXBlXCIsICdUVEYnKTtcbiAgICB9XG59XG5cblxuXG5cblxuY2xhc3MgJDYyY2M1MTA5YzYxMDE4OTMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSBleHRlbmRzICgwLCAkZjkyOTA2YmUyOGU2MTc2OSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSB7XG4gICAgX2dldE5hbWUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9mb250LkNGRjIpIHJldHVybiBzdXBlci5fZ2V0TmFtZSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZm9udFsnQ0ZGICddLmdldEdseXBoTmFtZSh0aGlzLmlkKTtcbiAgICB9XG4gICAgYmlhcyhzKSB7XG4gICAgICAgIGlmIChzLmxlbmd0aCA8IDEyNDApIHJldHVybiAxMDc7XG4gICAgICAgIGVsc2UgaWYgKHMubGVuZ3RoIDwgMzM5MDApIHJldHVybiAxMTMxO1xuICAgICAgICBlbHNlIHJldHVybiAzMjc2ODtcbiAgICB9XG4gICAgX2dldFBhdGgoKSB7XG4gICAgICAgIGxldCBjZmYgPSB0aGlzLl9mb250LkNGRjIgfHwgdGhpcy5fZm9udFsnQ0ZGICddO1xuICAgICAgICBsZXQgeyBzdHJlYW06IHN0cmVhbSB9ID0gY2ZmO1xuICAgICAgICBsZXQgc3RyID0gY2ZmLnRvcERpY3QuQ2hhclN0cmluZ3NbdGhpcy5pZF07XG4gICAgICAgIGxldCBlbmQgPSBzdHIub2Zmc2V0ICsgc3RyLmxlbmd0aDtcbiAgICAgICAgc3RyZWFtLnBvcyA9IHN0ci5vZmZzZXQ7XG4gICAgICAgIGxldCBwYXRoID0gbmV3ICgwLCAkZjQzYWVjOTU0Y2RmZGYyMSRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiAgICAgICAgbGV0IHN0YWNrID0gW107XG4gICAgICAgIGxldCB0cmFucyA9IFtdO1xuICAgICAgICBsZXQgd2lkdGggPSBudWxsO1xuICAgICAgICBsZXQgblN0ZW1zID0gMDtcbiAgICAgICAgbGV0IHggPSAwLCB5ID0gMDtcbiAgICAgICAgbGV0IHVzZWRHc3VicnM7XG4gICAgICAgIGxldCB1c2VkU3VicnM7XG4gICAgICAgIGxldCBvcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3VzZWRHc3VicnMgPSB1c2VkR3N1YnJzID0ge307XG4gICAgICAgIHRoaXMuX3VzZWRTdWJycyA9IHVzZWRTdWJycyA9IHt9O1xuICAgICAgICBsZXQgZ3N1YnJzID0gY2ZmLmdsb2JhbFN1YnJJbmRleCB8fCBbXTtcbiAgICAgICAgbGV0IGdzdWJyc0JpYXMgPSB0aGlzLmJpYXMoZ3N1YnJzKTtcbiAgICAgICAgbGV0IHByaXZhdGVEaWN0ID0gY2ZmLnByaXZhdGVEaWN0Rm9yR2x5cGgodGhpcy5pZCkgfHwge307XG4gICAgICAgIGxldCBzdWJycyA9IHByaXZhdGVEaWN0LlN1YnJzIHx8IFtdO1xuICAgICAgICBsZXQgc3VicnNCaWFzID0gdGhpcy5iaWFzKHN1YnJzKTtcbiAgICAgICAgbGV0IHZzdG9yZSA9IGNmZi50b3BEaWN0LnZzdG9yZSAmJiBjZmYudG9wRGljdC52c3RvcmUuaXRlbVZhcmlhdGlvblN0b3JlO1xuICAgICAgICBsZXQgdnNpbmRleCA9IHByaXZhdGVEaWN0LnZzaW5kZXg7XG4gICAgICAgIGxldCB2YXJpYXRpb25Qcm9jZXNzb3IgPSB0aGlzLl9mb250Ll92YXJpYXRpb25Qcm9jZXNzb3I7XG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrV2lkdGgoKSB7XG4gICAgICAgICAgICBpZiAod2lkdGggPT0gbnVsbCkgd2lkdGggPSBzdGFjay5zaGlmdCgpICsgcHJpdmF0ZURpY3Qubm9taW5hbFdpZHRoWDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBwYXJzZVN0ZW1zKCkge1xuICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCAlIDIgIT09IDApIGNoZWNrV2lkdGgoKTtcbiAgICAgICAgICAgIG5TdGVtcyArPSBzdGFjay5sZW5ndGggPj4gMTtcbiAgICAgICAgICAgIHJldHVybiBzdGFjay5sZW5ndGggPSAwO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1vdmVUbyh4LCB5KSB7XG4gICAgICAgICAgICBpZiAob3BlbikgcGF0aC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIHBhdGgubW92ZVRvKHgsIHkpO1xuICAgICAgICAgICAgb3BlbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHBhcnNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB3aGlsZShzdHJlYW0ucG9zIDwgZW5kKXtcbiAgICAgICAgICAgICAgICBsZXQgb3AgPSBzdHJlYW0ucmVhZFVJbnQ4KCk7XG4gICAgICAgICAgICAgICAgaWYgKG9wIDwgMzIpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4LCBzdWJyLCBwaGFzZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGMxeCwgYzF5LCBjMngsIGMyeSwgYzN4LCBjM3k7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjNHgsIGM0eSwgYzV4LCBjNXksIGM2eCwgYzZ5O1xuICAgICAgICAgICAgICAgICAgICBsZXQgcHRzO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2gob3Ape1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxODpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VTdGVtcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggPiAxKSBjaGVja1dpZHRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeSArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVUbyh4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShzdGFjay5sZW5ndGggPj0gMil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggKz0gc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoLmxpbmVUbyh4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhhc2UgPSBvcCA9PT0gNjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShzdGFjay5sZW5ndGggPj0gMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwaGFzZSkgeCArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHkgKz0gc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5saW5lVG8oeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBoYXNlID0gIXBoYXNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShzdGFjay5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzF4ID0geCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeSA9IHkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMnggPSBjMXggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMnkgPSBjMXkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gYzJ4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGMyeSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGguYmV6aWVyQ3VydmVUbyhjMXgsIGMxeSwgYzJ4LCBjMnksIHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBzdGFjay5wb3AoKSArIHN1YnJzQmlhcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJyID0gc3VicnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdWJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZWRTdWJyc1tpbmRleF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcCA9IHN0cmVhbS5wb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlID0gZW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW0ucG9zID0gc3Vici5vZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IHN1YnIub2Zmc2V0ICsgc3Vici5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbS5wb3MgPSBwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNmZi52ZXJzaW9uID49IDIpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNmZi52ZXJzaW9uID49IDIpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggPiAwKSBjaGVja1dpZHRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNmZi52ZXJzaW9uIDwgMikgdGhyb3cgbmV3IEVycm9yKCd2c2luZGV4IG9wZXJhdG9yIG5vdCBzdXBwb3J0ZWQgaW4gQ0ZGIHYxJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdnNpbmRleCA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjZmYudmVyc2lvbiA8IDIpIHRocm93IG5ldyBFcnJvcignYmxlbmQgb3BlcmF0b3Igbm90IHN1cHBvcnRlZCBpbiBDRkYgdjEnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2YXJpYXRpb25Qcm9jZXNzb3IpIHRocm93IG5ldyBFcnJvcignYmxlbmQgb3BlcmF0b3IgaW4gbm9uLXZhcmlhdGlvbiBmb250Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBibGVuZFZlY3RvciA9IHZhcmlhdGlvblByb2Nlc3Nvci5nZXRCbGVuZFZlY3Rvcih2c3RvcmUsIHZzaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbnVtQmxlbmRzID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBudW1PcGVyYW5kcyA9IG51bUJsZW5kcyAqIGJsZW5kVmVjdG9yLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRlbHRhID0gc3RhY2subGVuZ3RoIC0gbnVtT3BlcmFuZHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBiYXNlID0gZGVsdGEgLSBudW1CbGVuZHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBudW1CbGVuZHM7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3VtID0gc3RhY2tbYmFzZSArIGldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IGJsZW5kVmVjdG9yLmxlbmd0aDsgaisrKXN1bSArPSBibGVuZFZlY3RvcltqXSAqIHN0YWNrW2RlbHRhKytdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tbYmFzZSArIGldID0gc3VtO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKG51bU9wZXJhbmRzLS0pc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTk6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDIwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlU3RlbXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW0ucG9zICs9IG5TdGVtcyArIDcgPj4gMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA+IDIpIGNoZWNrV2lkdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ICs9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeSArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVUbyh4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA+IDEpIGNoZWNrV2lkdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ICs9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVRvKHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShzdGFjay5sZW5ndGggPj0gOCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeCA9IHggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMXkgPSB5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzJ4ID0gYzF4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzJ5ID0gYzF5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IGMyeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBjMnkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoLmJlemllckN1cnZlVG8oYzF4LCBjMXksIGMyeCwgYzJ5LCB4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeCArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgKz0gc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoLmxpbmVUbyh4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoc3RhY2subGVuZ3RoID49IDgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ICs9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgKz0gc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5saW5lVG8oeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeCA9IHggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeSA9IHkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMyeCA9IGMxeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYzJ5ID0gYzF5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gYzJ4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gYzJ5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoLmJlemllckN1cnZlVG8oYzF4LCBjMXksIGMyeCwgYzJ5LCB4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCAlIDIpIHggKz0gc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShzdGFjay5sZW5ndGggPj0gNCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeCA9IHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeSA9IHkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMnggPSBjMXggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMnkgPSBjMXkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gYzJ4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gYzJ5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5iZXppZXJDdXJ2ZVRvKGMxeCwgYzF5LCBjMngsIGMyeSwgeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoICUgMikgeSArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKHN0YWNrLmxlbmd0aCA+PSA0KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzF4ID0geCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeSA9IHk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMyeCA9IGMxeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMyeSA9IGMxeSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPSBjMnggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gYzJ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoLmJlemllckN1cnZlVG8oYzF4LCBjMXksIGMyeCwgYzJ5LCB4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI4OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goc3RyZWFtLnJlYWRJbnQxNkJFKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHN0YWNrLnBvcCgpICsgZ3N1YnJzQmlhcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJyID0gZ3N1YnJzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3Vicikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkR3N1YnJzW2luZGV4XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwID0gc3RyZWFtLnBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGUgPSBlbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbS5wb3MgPSBzdWJyLm9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gc3Vici5vZmZzZXQgKyBzdWJyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtLnBvcyA9IHA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhhc2UgPSBvcCA9PT0gMzE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoc3RhY2subGVuZ3RoID49IDQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGhhc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeCA9IHggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzF5ID0geTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMyeCA9IGMxeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMnkgPSBjMXkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGMyeSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gYzJ4ICsgKHN0YWNrLmxlbmd0aCA9PT0gMSA/IHN0YWNrLnNoaWZ0KCkgOiAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeCA9IHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMXkgPSB5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMyeCA9IGMxeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMnkgPSBjMXkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IGMyeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gYzJ5ICsgKHN0YWNrLmxlbmd0aCA9PT0gMSA/IHN0YWNrLnNoaWZ0KCkgOiAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoLmJlemllckN1cnZlVG8oYzF4LCBjMXksIGMyeCwgYzJ5LCB4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhhc2UgPSAhcGhhc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcCA9IHN0cmVhbS5yZWFkVUludDgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2gob3Ape1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGIgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goYSAmJiBiID8gMSA6IDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goYSB8fCBiID8gMSA6IDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goYSA/IDAgOiAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKE1hdGguYWJzKGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYiA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChhICsgYik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goYSAtIGIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKGEgLyBiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCgtYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goYSA9PT0gYiA/IDEgOiAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE4OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2YWwgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpZHggPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zW2lkeF0gPSB2YWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkeCA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCh0cmFuc1tpZHhdIHx8IDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgczEgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzMiA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYxID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjIgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2godjEgPD0gdjIgPyBzMSA6IHMyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDIzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChNYXRoLnJhbmRvbSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYiA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChhICogYik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyNjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goTWF0aC5zcXJ0KGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChhLCBhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI4OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYiA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChiLCBhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI5OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWR4ID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWR4IDwgMCkgaWR4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlkeCA+IHN0YWNrLmxlbmd0aCAtIDEpIGlkeCA9IHN0YWNrLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHN0YWNrW2lkeF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbiA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGogPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqID49IDApIHdoaWxlKGogPiAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHN0YWNrW24gLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSBuIC0gMjsgaSA+PSAwOyBpLS0pc3RhY2tbaSArIDFdID0gc3RhY2tbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tbMF0gPSB0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGotLTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugd2hpbGUoaiA8IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gc3RhY2tbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8PSBuOyBpKyspc3RhY2tbaV0gPSBzdGFja1tpICsgMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tbbiAtIDFdID0gdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeCA9IHggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzF5ID0geTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMyeCA9IGMxeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMnkgPSBjMXkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzN4ID0gYzJ4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMzeSA9IGMyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM0eCA9IGMzeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjNHkgPSBjM3k7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjNXggPSBjNHggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzV5ID0gYzR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzZ4ID0gYzV4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM2eSA9IGM1eTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPSBjNng7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gYzZ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5iZXppZXJDdXJ2ZVRvKGMxeCwgYzF5LCBjMngsIGMyeSwgYzN4LCBjM3kpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5iZXppZXJDdXJ2ZVRvKGM0eCwgYzR5LCBjNXgsIGM1eSwgYzZ4LCBjNnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPD0gNTsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ICs9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB0cy5wdXNoKHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5iZXppZXJDdXJ2ZVRvKC4uLnB0cy5zbGljZSgwLCA2KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoLmJlemllckN1cnZlVG8oLi4ucHRzLnNsaWNlKDYpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnNoaWZ0KCk7IC8vIGZkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzNjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeCA9IHggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzF5ID0geSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMnggPSBjMXggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzJ5ID0gYzF5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMzeCA9IGMyeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjM3kgPSBjMnk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjNHggPSBjM3ggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzR5ID0gYzN5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzV4ID0gYzR4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM1eSA9IGM0eSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjNnggPSBjNXggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzZ5ID0gYzV5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IGM2eDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBjNnk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoLmJlemllckN1cnZlVG8oYzF4LCBjMXksIGMyeCwgYzJ5LCBjM3gsIGMzeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoLmJlemllckN1cnZlVG8oYzR4LCBjNHksIGM1eCwgYzV5LCBjNngsIGM2eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzNzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdGFydHggPSB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0eSA9IHk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPD0gNDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ICs9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB0cy5wdXNoKHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKHggLSBzdGFydHgpID4gTWF0aC5hYnMoeSAtIHN0YXJ0eSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ICs9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IHN0YXJ0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IHN0YXJ0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ICs9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdHMucHVzaCh4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGguYmV6aWVyQ3VydmVUbyguLi5wdHMuc2xpY2UoMCwgNikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5iZXppZXJDdXJ2ZVRvKC4uLnB0cy5zbGljZSg2KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBvcDogMTIgJHtvcH1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBvcDogJHtvcH1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3AgPCAyNDcpIHN0YWNrLnB1c2gob3AgLSAxMzkpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9wIDwgMjUxKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiMSA9IHN0cmVhbS5yZWFkVUludDgoKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCgob3AgLSAyNDcpICogMjU2ICsgYjEgKyAxMDgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3AgPCAyNTUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGIxID0gc3RyZWFtLnJlYWRVSW50OCgpO1xuICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKC0ob3AgLSAyNTEpICogMjU2IC0gYjEgLSAxMDgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBzdGFjay5wdXNoKHN0cmVhbS5yZWFkSW50MzJCRSgpIC8gNjU1MzYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBwYXJzZSgpO1xuICAgICAgICBpZiAob3BlbikgcGF0aC5jbG9zZVBhdGgoKTtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3Mpe1xuICAgICAgICBzdXBlciguLi5hcmdzKTtcbiAgICAgICAgKDAsICQ1MlpJZiRfKSh0aGlzLCBcInR5cGVcIiwgJ0NGRicpO1xuICAgIH1cbn1cblxuXG5cblxuXG5sZXQgJDI1ZDhmMDQ5YzIyMjA4NGMkdmFyJFNCSVhJbWFnZSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBvcmlnaW5YOiAkNTJaSWYkdWludDE2LFxuICAgIG9yaWdpblk6ICQ1MlpJZiR1aW50MTYsXG4gICAgdHlwZTogbmV3ICQ1MlpJZiRTdHJpbmcoNCksXG4gICAgZGF0YTogbmV3ICQ1MlpJZiRCdWZmZXIoKHQpPT50LnBhcmVudC5idWZsZW4gLSB0Ll9jdXJyZW50T2Zmc2V0KVxufSk7XG5jbGFzcyAkMjVkOGYwNDljMjIyMDg0YyRleHBvcnQkMmUyYmNkODczOWFlMDM5IGV4dGVuZHMgKDAsICQ2OWFhYzE2MDI5OTY4NjkyJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpIHtcbiAgICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3QgcmVwcmVzZW50aW5nIGEgZ2x5cGggaW1hZ2UgYXQgdGhlIGdpdmVuIHBvaW50IHNpemUuXG4gICAqIFRoZSBvYmplY3QgaGFzIGEgZGF0YSBwcm9wZXJ0eSB3aXRoIGEgQnVmZmVyIGNvbnRhaW5pbmcgdGhlIGFjdHVhbCBpbWFnZSBkYXRhLFxuICAgKiBhbG9uZyB3aXRoIHRoZSBpbWFnZSB0eXBlLCBhbmQgb3JpZ2luLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZVxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqLyBnZXRJbWFnZUZvclNpemUoc2l6ZSkge1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5fZm9udC5zYml4LmltYWdlVGFibGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHZhciB0YWJsZSA9IHRoaXMuX2ZvbnQuc2JpeC5pbWFnZVRhYmxlc1tpXTtcbiAgICAgICAgICAgIGlmICh0YWJsZS5wcGVtID49IHNpemUpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvZmZzZXRzID0gdGFibGUuaW1hZ2VPZmZzZXRzO1xuICAgICAgICBsZXQgc3RhcnQgPSBvZmZzZXRzW3RoaXMuaWRdO1xuICAgICAgICBsZXQgZW5kID0gb2Zmc2V0c1t0aGlzLmlkICsgMV07XG4gICAgICAgIGlmIChzdGFydCA9PT0gZW5kKSByZXR1cm4gbnVsbDtcbiAgICAgICAgdGhpcy5fZm9udC5zdHJlYW0ucG9zID0gc3RhcnQ7XG4gICAgICAgIHJldHVybiAkMjVkOGYwNDljMjIyMDg0YyR2YXIkU0JJWEltYWdlLmRlY29kZSh0aGlzLl9mb250LnN0cmVhbSwge1xuICAgICAgICAgICAgYnVmbGVuOiBlbmQgLSBzdGFydFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVuZGVyKGN0eCwgc2l6ZSkge1xuICAgICAgICBsZXQgaW1nID0gdGhpcy5nZXRJbWFnZUZvclNpemUoc2l6ZSk7XG4gICAgICAgIGlmIChpbWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IHNjYWxlID0gc2l6ZSAvIHRoaXMuX2ZvbnQudW5pdHNQZXJFbTtcbiAgICAgICAgICAgIGN0eC5pbWFnZShpbWcuZGF0YSwge1xuICAgICAgICAgICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgICAgICAgICB4OiBpbWcub3JpZ2luWCxcbiAgICAgICAgICAgICAgICB5OiAodGhpcy5iYm94Lm1pblkgLSBpbWcub3JpZ2luWSkgKiBzY2FsZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2ZvbnQuc2JpeC5mbGFncy5yZW5kZXJPdXRsaW5lcykgc3VwZXIucmVuZGVyKGN0eCwgc2l6ZSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3Mpe1xuICAgICAgICBzdXBlciguLi5hcmdzKTtcbiAgICAgICAgKDAsICQ1MlpJZiRfKSh0aGlzLCBcInR5cGVcIiwgJ1NCSVgnKTtcbiAgICB9XG59XG5cblxuXG5cblxuY2xhc3MgJDBkNDExZjAxNjU4NTk2ODEkdmFyJENPTFJMYXllciB7XG4gICAgY29uc3RydWN0b3IoZ2x5cGgsIGNvbG9yKXtcbiAgICAgICAgdGhpcy5nbHlwaCA9IGdseXBoO1xuICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7XG4gICAgfVxufVxuY2xhc3MgJDBkNDExZjAxNjU4NTk2ODEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSBleHRlbmRzICgwLCAkZjkyOTA2YmUyOGU2MTc2OSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSB7XG4gICAgX2dldEJCb3goKSB7XG4gICAgICAgIGxldCBiYm94ID0gbmV3ICgwLCAkZjM0NjAwYWI5ZDdmNzBkOCRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMubGF5ZXJzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCBsYXllciA9IHRoaXMubGF5ZXJzW2ldO1xuICAgICAgICAgICAgbGV0IGIgPSBsYXllci5nbHlwaC5iYm94O1xuICAgICAgICAgICAgYmJveC5hZGRQb2ludChiLm1pblgsIGIubWluWSk7XG4gICAgICAgICAgICBiYm94LmFkZFBvaW50KGIubWF4WCwgYi5tYXhZKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmJveDtcbiAgICB9XG4gICAgLyoqXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2Ygb2JqZWN0cyBjb250YWluaW5nIHRoZSBnbHlwaCBhbmQgY29sb3IgZm9yXG4gICAqIGVhY2ggbGF5ZXIgaW4gdGhlIGNvbXBvc2l0ZSBjb2xvciBnbHlwaC5cbiAgICogQHR5cGUge29iamVjdFtdfVxuICAgKi8gZ2V0IGxheWVycygpIHtcbiAgICAgICAgbGV0IGNwYWwgPSB0aGlzLl9mb250LkNQQUw7XG4gICAgICAgIGxldCBjb2xyID0gdGhpcy5fZm9udC5DT0xSO1xuICAgICAgICBsZXQgbG93ID0gMDtcbiAgICAgICAgbGV0IGhpZ2ggPSBjb2xyLmJhc2VHbHlwaFJlY29yZC5sZW5ndGggLSAxO1xuICAgICAgICB3aGlsZShsb3cgPD0gaGlnaCl7XG4gICAgICAgICAgICBsZXQgbWlkID0gbG93ICsgaGlnaCA+PiAxO1xuICAgICAgICAgICAgdmFyIHJlYyA9IGNvbHIuYmFzZUdseXBoUmVjb3JkW21pZF07XG4gICAgICAgICAgICBpZiAodGhpcy5pZCA8IHJlYy5naWQpIGhpZ2ggPSBtaWQgLSAxO1xuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5pZCA+IHJlYy5naWQpIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgYmFzZUxheWVyID0gcmVjO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGlmIGJhc2UgZ2x5cGggbm90IGZvdW5kIGluIENPTFIgdGFibGUsXG4gICAgICAgIC8vIGRlZmF1bHQgdG8gbm9ybWFsIGdseXBoIGZyb20gZ2x5ZiBvciBDRkZcbiAgICAgICAgaWYgKGJhc2VMYXllciA9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgZyA9IHRoaXMuX2ZvbnQuX2dldEJhc2VHbHlwaCh0aGlzLmlkKTtcbiAgICAgICAgICAgIHZhciBjb2xvciA9IHtcbiAgICAgICAgICAgICAgICByZWQ6IDAsXG4gICAgICAgICAgICAgICAgZ3JlZW46IDAsXG4gICAgICAgICAgICAgICAgYmx1ZTogMCxcbiAgICAgICAgICAgICAgICBhbHBoYTogMjU1XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBuZXcgJDBkNDExZjAxNjU4NTk2ODEkdmFyJENPTFJMYXllcihnLCBjb2xvcilcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gb3RoZXJ3aXNlLCByZXR1cm4gYW4gYXJyYXkgb2YgYWxsIHRoZSBsYXllcnNcbiAgICAgICAgbGV0IGxheWVycyA9IFtdO1xuICAgICAgICBmb3IobGV0IGkgPSBiYXNlTGF5ZXIuZmlyc3RMYXllckluZGV4OyBpIDwgYmFzZUxheWVyLmZpcnN0TGF5ZXJJbmRleCArIGJhc2VMYXllci5udW1MYXllcnM7IGkrKyl7XG4gICAgICAgICAgICB2YXIgcmVjID0gY29sci5sYXllclJlY29yZHNbaV07XG4gICAgICAgICAgICB2YXIgY29sb3IgPSBjcGFsLmNvbG9yUmVjb3Jkc1tyZWMucGFsZXR0ZUluZGV4XTtcbiAgICAgICAgICAgIHZhciBnID0gdGhpcy5fZm9udC5fZ2V0QmFzZUdseXBoKHJlYy5naWQpO1xuICAgICAgICAgICAgbGF5ZXJzLnB1c2gobmV3ICQwZDQxMWYwMTY1ODU5NjgxJHZhciRDT0xSTGF5ZXIoZywgY29sb3IpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGF5ZXJzO1xuICAgIH1cbiAgICByZW5kZXIoY3R4LCBzaXplKSB7XG4gICAgICAgIGZvciAobGV0IHsgZ2x5cGg6IGdseXBoLCBjb2xvcjogY29sb3IgfSBvZiB0aGlzLmxheWVycyl7XG4gICAgICAgICAgICBjdHguZmlsbENvbG9yKFtcbiAgICAgICAgICAgICAgICBjb2xvci5yZWQsXG4gICAgICAgICAgICAgICAgY29sb3IuZ3JlZW4sXG4gICAgICAgICAgICAgICAgY29sb3IuYmx1ZVxuICAgICAgICAgICAgXSwgY29sb3IuYWxwaGEgLyAyNTUgKiAxMDApO1xuICAgICAgICAgICAgZ2x5cGgucmVuZGVyKGN0eCwgc2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvciguLi5hcmdzKXtcbiAgICAgICAgc3VwZXIoLi4uYXJncyk7XG4gICAgICAgICgwLCAkNTJaSWYkXykodGhpcywgXCJ0eXBlXCIsICdDT0xSJyk7XG4gICAgfVxufVxuXG5cbmNvbnN0ICQwYmI4NDBjYWMwNGU5MTFiJHZhciRUVVBMRVNfU0hBUkVfUE9JTlRfTlVNQkVSUyA9IDB4ODAwMDtcbmNvbnN0ICQwYmI4NDBjYWMwNGU5MTFiJHZhciRUVVBMRV9DT1VOVF9NQVNLID0gMHgwZmZmO1xuY29uc3QgJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJEVNQkVEREVEX1RVUExFX0NPT1JEID0gMHg4MDAwO1xuY29uc3QgJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJElOVEVSTUVESUFURV9UVVBMRSA9IDB4NDAwMDtcbmNvbnN0ICQwYmI4NDBjYWMwNGU5MTFiJHZhciRQUklWQVRFX1BPSU5UX05VTUJFUlMgPSAweDIwMDA7XG5jb25zdCAkMGJiODQwY2FjMDRlOTExYiR2YXIkVFVQTEVfSU5ERVhfTUFTSyA9IDB4MGZmZjtcbmNvbnN0ICQwYmI4NDBjYWMwNGU5MTFiJHZhciRQT0lOVFNfQVJFX1dPUkRTID0gMHg4MDtcbmNvbnN0ICQwYmI4NDBjYWMwNGU5MTFiJHZhciRQT0lOVF9SVU5fQ09VTlRfTUFTSyA9IDB4N2Y7XG5jb25zdCAkMGJiODQwY2FjMDRlOTExYiR2YXIkREVMVEFTX0FSRV9aRVJPID0gMHg4MDtcbmNvbnN0ICQwYmI4NDBjYWMwNGU5MTFiJHZhciRERUxUQVNfQVJFX1dPUkRTID0gMHg0MDtcbmNvbnN0ICQwYmI4NDBjYWMwNGU5MTFiJHZhciRERUxUQV9SVU5fQ09VTlRfTUFTSyA9IDB4M2Y7XG5jbGFzcyAkMGJiODQwY2FjMDRlOTExYiRleHBvcnQkMmUyYmNkODczOWFlMDM5IHtcbiAgICBub3JtYWxpemVDb29yZHMoY29vcmRzKSB7XG4gICAgICAgIC8vIHRoZSBkZWZhdWx0IG1hcHBpbmcgaXMgbGluZWFyIGFsb25nIGVhY2ggYXhpcywgaW4gdHdvIHNlZ21lbnRzOlxuICAgICAgICAvLyBmcm9tIHRoZSBtaW5WYWx1ZSB0byBkZWZhdWx0VmFsdWUsIGFuZCBmcm9tIGRlZmF1bHRWYWx1ZSB0byBtYXhWYWx1ZS5cbiAgICAgICAgbGV0IG5vcm1hbGl6ZWQgPSBbXTtcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMuZm9udC5mdmFyLmF4aXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgbGV0IGF4aXMgPSB0aGlzLmZvbnQuZnZhci5heGlzW2ldO1xuICAgICAgICAgICAgaWYgKGNvb3Jkc1tpXSA8IGF4aXMuZGVmYXVsdFZhbHVlKSBub3JtYWxpemVkLnB1c2goKGNvb3Jkc1tpXSAtIGF4aXMuZGVmYXVsdFZhbHVlICsgTnVtYmVyLkVQU0lMT04pIC8gKGF4aXMuZGVmYXVsdFZhbHVlIC0gYXhpcy5taW5WYWx1ZSArIE51bWJlci5FUFNJTE9OKSk7XG4gICAgICAgICAgICBlbHNlIG5vcm1hbGl6ZWQucHVzaCgoY29vcmRzW2ldIC0gYXhpcy5kZWZhdWx0VmFsdWUgKyBOdW1iZXIuRVBTSUxPTikgLyAoYXhpcy5tYXhWYWx1ZSAtIGF4aXMuZGVmYXVsdFZhbHVlICsgTnVtYmVyLkVQU0lMT04pKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbiBhdmFyIHRhYmxlLCB0aGUgbm9ybWFsaXplZCB2YWx1ZSBpcyBjYWxjdWxhdGVkXG4gICAgICAgIC8vIGJ5IGludGVycG9sYXRpbmcgYmV0d2VlbiB0aGUgdHdvIG5lYXJlc3QgbWFwcGVkIHZhbHVlcy5cbiAgICAgICAgaWYgKHRoaXMuZm9udC5hdmFyKSBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5mb250LmF2YXIuc2VnbWVudC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBsZXQgc2VnbWVudCA9IHRoaXMuZm9udC5hdmFyLnNlZ21lbnRbaV07XG4gICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgc2VnbWVudC5jb3JyZXNwb25kZW5jZS5sZW5ndGg7IGorKyl7XG4gICAgICAgICAgICAgICAgbGV0IHBhaXIgPSBzZWdtZW50LmNvcnJlc3BvbmRlbmNlW2pdO1xuICAgICAgICAgICAgICAgIGlmIChqID49IDEgJiYgbm9ybWFsaXplZFtpXSA8IHBhaXIuZnJvbUNvb3JkKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwcmV2ID0gc2VnbWVudC5jb3JyZXNwb25kZW5jZVtqIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRbaV0gPSAoKG5vcm1hbGl6ZWRbaV0gLSBwcmV2LmZyb21Db29yZCkgKiAocGFpci50b0Nvb3JkIC0gcHJldi50b0Nvb3JkKSArIE51bWJlci5FUFNJTE9OKSAvIChwYWlyLmZyb21Db29yZCAtIHByZXYuZnJvbUNvb3JkICsgTnVtYmVyLkVQU0lMT04pICsgcHJldi50b0Nvb3JkO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG4gICAgfVxuICAgIHRyYW5zZm9ybVBvaW50cyhnaWQsIGdseXBoUG9pbnRzKSB7XG4gICAgICAgIGlmICghdGhpcy5mb250LmZ2YXIgfHwgIXRoaXMuZm9udC5ndmFyKSByZXR1cm47XG4gICAgICAgIGxldCB7IGd2YXI6IGd2YXIgfSA9IHRoaXMuZm9udDtcbiAgICAgICAgaWYgKGdpZCA+PSBndmFyLmdseXBoQ291bnQpIHJldHVybjtcbiAgICAgICAgbGV0IG9mZnNldCA9IGd2YXIub2Zmc2V0c1tnaWRdO1xuICAgICAgICBpZiAob2Zmc2V0ID09PSBndmFyLm9mZnNldHNbZ2lkICsgMV0pIHJldHVybjtcbiAgICAgICAgLy8gUmVhZCB0aGUgZ3ZhciBkYXRhIGZvciB0aGlzIGdseXBoXG4gICAgICAgIGxldCB7IHN0cmVhbTogc3RyZWFtIH0gPSB0aGlzLmZvbnQ7XG4gICAgICAgIHN0cmVhbS5wb3MgPSBvZmZzZXQ7XG4gICAgICAgIGlmIChzdHJlYW0ucG9zID49IHN0cmVhbS5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgbGV0IHR1cGxlQ291bnQgPSBzdHJlYW0ucmVhZFVJbnQxNkJFKCk7XG4gICAgICAgIGxldCBvZmZzZXRUb0RhdGEgPSBvZmZzZXQgKyBzdHJlYW0ucmVhZFVJbnQxNkJFKCk7XG4gICAgICAgIGlmICh0dXBsZUNvdW50ICYgJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJFRVUExFU19TSEFSRV9QT0lOVF9OVU1CRVJTKSB7XG4gICAgICAgICAgICB2YXIgaGVyZSA9IHN0cmVhbS5wb3M7XG4gICAgICAgICAgICBzdHJlYW0ucG9zID0gb2Zmc2V0VG9EYXRhO1xuICAgICAgICAgICAgdmFyIHNoYXJlZFBvaW50cyA9IHRoaXMuZGVjb2RlUG9pbnRzKCk7XG4gICAgICAgICAgICBvZmZzZXRUb0RhdGEgPSBzdHJlYW0ucG9zO1xuICAgICAgICAgICAgc3RyZWFtLnBvcyA9IGhlcmU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG9yaWdQb2ludHMgPSBnbHlwaFBvaW50cy5tYXAoKHB0KT0+cHQuY29weSgpKTtcbiAgICAgICAgdHVwbGVDb3VudCAmPSAkMGJiODQwY2FjMDRlOTExYiR2YXIkVFVQTEVfQ09VTlRfTUFTSztcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHR1cGxlQ291bnQ7IGkrKyl7XG4gICAgICAgICAgICBsZXQgdHVwbGVEYXRhU2l6ZSA9IHN0cmVhbS5yZWFkVUludDE2QkUoKTtcbiAgICAgICAgICAgIGxldCB0dXBsZUluZGV4ID0gc3RyZWFtLnJlYWRVSW50MTZCRSgpO1xuICAgICAgICAgICAgaWYgKHR1cGxlSW5kZXggJiAkMGJiODQwY2FjMDRlOTExYiR2YXIkRU1CRURERURfVFVQTEVfQ09PUkQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdHVwbGVDb29yZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGEgPSAwOyBhIDwgZ3Zhci5heGlzQ291bnQ7IGErKyl0dXBsZUNvb3Jkcy5wdXNoKHN0cmVhbS5yZWFkSW50MTZCRSgpIC8gMTYzODQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoKHR1cGxlSW5kZXggJiAkMGJiODQwY2FjMDRlOTExYiR2YXIkVFVQTEVfSU5ERVhfTUFTSykgPj0gZ3Zhci5nbG9iYWxDb29yZENvdW50KSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZ3ZhciB0YWJsZScpO1xuICAgICAgICAgICAgICAgIHZhciB0dXBsZUNvb3JkcyA9IGd2YXIuZ2xvYmFsQ29vcmRzW3R1cGxlSW5kZXggJiAkMGJiODQwY2FjMDRlOTExYiR2YXIkVFVQTEVfSU5ERVhfTUFTS107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHVwbGVJbmRleCAmICQwYmI4NDBjYWMwNGU5MTFiJHZhciRJTlRFUk1FRElBVEVfVFVQTEUpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRDb29yZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGEgPSAwOyBhIDwgZ3Zhci5heGlzQ291bnQ7IGErKylzdGFydENvb3Jkcy5wdXNoKHN0cmVhbS5yZWFkSW50MTZCRSgpIC8gMTYzODQpO1xuICAgICAgICAgICAgICAgIHZhciBlbmRDb29yZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGEgPSAwOyBhIDwgZ3Zhci5heGlzQ291bnQ7IGErKyllbmRDb29yZHMucHVzaChzdHJlYW0ucmVhZEludDE2QkUoKSAvIDE2Mzg0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEdldCB0aGUgZmFjdG9yIGF0IHdoaWNoIHRvIGFwcGx5IHRoaXMgdHVwbGVcbiAgICAgICAgICAgIGxldCBmYWN0b3IgPSB0aGlzLnR1cGxlRmFjdG9yKHR1cGxlSW5kZXgsIHR1cGxlQ29vcmRzLCBzdGFydENvb3JkcywgZW5kQ29vcmRzKTtcbiAgICAgICAgICAgIGlmIChmYWN0b3IgPT09IDApIHtcbiAgICAgICAgICAgICAgICBvZmZzZXRUb0RhdGEgKz0gdHVwbGVEYXRhU2l6ZTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBoZXJlID0gc3RyZWFtLnBvcztcbiAgICAgICAgICAgIHN0cmVhbS5wb3MgPSBvZmZzZXRUb0RhdGE7XG4gICAgICAgICAgICBpZiAodHVwbGVJbmRleCAmICQwYmI4NDBjYWMwNGU5MTFiJHZhciRQUklWQVRFX1BPSU5UX05VTUJFUlMpIHZhciBwb2ludHMgPSB0aGlzLmRlY29kZVBvaW50cygpO1xuICAgICAgICAgICAgZWxzZSB2YXIgcG9pbnRzID0gc2hhcmVkUG9pbnRzO1xuICAgICAgICAgICAgLy8gcG9pbnRzLmxlbmd0aCA9IDAgbWVhbnMgdGhlcmUgYXJlIGRlbHRhcyBmb3IgYWxsIHBvaW50c1xuICAgICAgICAgICAgbGV0IG5Qb2ludHMgPSBwb2ludHMubGVuZ3RoID09PSAwID8gZ2x5cGhQb2ludHMubGVuZ3RoIDogcG9pbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIGxldCB4RGVsdGFzID0gdGhpcy5kZWNvZGVEZWx0YXMoblBvaW50cyk7XG4gICAgICAgICAgICBsZXQgeURlbHRhcyA9IHRoaXMuZGVjb2RlRGVsdGFzKG5Qb2ludHMpO1xuICAgICAgICAgICAgaWYgKHBvaW50cy5sZW5ndGggPT09IDApIGZvcihsZXQgaSA9IDA7IGkgPCBnbHlwaFBvaW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgdmFyIHBvaW50ID0gZ2x5cGhQb2ludHNbaV07XG4gICAgICAgICAgICAgICAgcG9pbnQueCArPSBNYXRoLnJvdW5kKHhEZWx0YXNbaV0gKiBmYWN0b3IpO1xuICAgICAgICAgICAgICAgIHBvaW50LnkgKz0gTWF0aC5yb3VuZCh5RGVsdGFzW2ldICogZmFjdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBvdXRQb2ludHMgPSBvcmlnUG9pbnRzLm1hcCgocHQpPT5wdC5jb3B5KCkpO1xuICAgICAgICAgICAgICAgIGxldCBoYXNEZWx0YSA9IGdseXBoUG9pbnRzLm1hcCgoKT0+ZmFsc2UpO1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICBsZXQgaWR4ID0gcG9pbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaWR4IDwgZ2x5cGhQb2ludHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcG9pbnQgPSBvdXRQb2ludHNbaWR4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0RlbHRhW2lkeF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQueCArPSB4RGVsdGFzW2ldICogZmFjdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQueSArPSB5RGVsdGFzW2ldICogZmFjdG9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJwb2xhdGVNaXNzaW5nRGVsdGFzKG91dFBvaW50cywgb3JpZ1BvaW50cywgaGFzRGVsdGEpO1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBnbHlwaFBvaW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkZWx0YVggPSBvdXRQb2ludHNbaV0ueCAtIG9yaWdQb2ludHNbaV0ueDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRlbHRhWSA9IG91dFBvaW50c1tpXS55IC0gb3JpZ1BvaW50c1tpXS55O1xuICAgICAgICAgICAgICAgICAgICBnbHlwaFBvaW50c1tpXS54ID0gTWF0aC5yb3VuZChnbHlwaFBvaW50c1tpXS54ICsgZGVsdGFYKTtcbiAgICAgICAgICAgICAgICAgICAgZ2x5cGhQb2ludHNbaV0ueSA9IE1hdGgucm91bmQoZ2x5cGhQb2ludHNbaV0ueSArIGRlbHRhWSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2Zmc2V0VG9EYXRhICs9IHR1cGxlRGF0YVNpemU7XG4gICAgICAgICAgICBzdHJlYW0ucG9zID0gaGVyZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZWNvZGVQb2ludHMoKSB7XG4gICAgICAgIGxldCBzdHJlYW0gPSB0aGlzLmZvbnQuc3RyZWFtO1xuICAgICAgICBsZXQgY291bnQgPSBzdHJlYW0ucmVhZFVJbnQ4KCk7XG4gICAgICAgIGlmIChjb3VudCAmICQwYmI4NDBjYWMwNGU5MTFiJHZhciRQT0lOVFNfQVJFX1dPUkRTKSBjb3VudCA9IChjb3VudCAmICQwYmI4NDBjYWMwNGU5MTFiJHZhciRQT0lOVF9SVU5fQ09VTlRfTUFTSykgPDwgOCB8IHN0cmVhbS5yZWFkVUludDgoKTtcbiAgICAgICAgbGV0IHBvaW50cyA9IG5ldyBVaW50MTZBcnJheShjb3VudCk7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgbGV0IHBvaW50ID0gMDtcbiAgICAgICAgd2hpbGUoaSA8IGNvdW50KXtcbiAgICAgICAgICAgIGxldCBydW4gPSBzdHJlYW0ucmVhZFVJbnQ4KCk7XG4gICAgICAgICAgICBsZXQgcnVuQ291bnQgPSAocnVuICYgJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJFBPSU5UX1JVTl9DT1VOVF9NQVNLKSArIDE7XG4gICAgICAgICAgICBsZXQgZm4gPSBydW4gJiAkMGJiODQwY2FjMDRlOTExYiR2YXIkUE9JTlRTX0FSRV9XT1JEUyA/IHN0cmVhbS5yZWFkVUludDE2IDogc3RyZWFtLnJlYWRVSW50ODtcbiAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCBydW5Db3VudCAmJiBpIDwgY291bnQ7IGorKyl7XG4gICAgICAgICAgICAgICAgcG9pbnQgKz0gZm4uY2FsbChzdHJlYW0pO1xuICAgICAgICAgICAgICAgIHBvaW50c1tpKytdID0gcG9pbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBvaW50cztcbiAgICB9XG4gICAgZGVjb2RlRGVsdGFzKGNvdW50KSB7XG4gICAgICAgIGxldCBzdHJlYW0gPSB0aGlzLmZvbnQuc3RyZWFtO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGxldCBkZWx0YXMgPSBuZXcgSW50MTZBcnJheShjb3VudCk7XG4gICAgICAgIHdoaWxlKGkgPCBjb3VudCl7XG4gICAgICAgICAgICBsZXQgcnVuID0gc3RyZWFtLnJlYWRVSW50OCgpO1xuICAgICAgICAgICAgbGV0IHJ1bkNvdW50ID0gKHJ1biAmICQwYmI4NDBjYWMwNGU5MTFiJHZhciRERUxUQV9SVU5fQ09VTlRfTUFTSykgKyAxO1xuICAgICAgICAgICAgaWYgKHJ1biAmICQwYmI4NDBjYWMwNGU5MTFiJHZhciRERUxUQVNfQVJFX1pFUk8pIGkgKz0gcnVuQ291bnQ7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgZm4gPSBydW4gJiAkMGJiODQwY2FjMDRlOTExYiR2YXIkREVMVEFTX0FSRV9XT1JEUyA/IHN0cmVhbS5yZWFkSW50MTZCRSA6IHN0cmVhbS5yZWFkSW50ODtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgcnVuQ291bnQgJiYgaSA8IGNvdW50OyBqKyspZGVsdGFzW2krK10gPSBmbi5jYWxsKHN0cmVhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlbHRhcztcbiAgICB9XG4gICAgdHVwbGVGYWN0b3IodHVwbGVJbmRleCwgdHVwbGVDb29yZHMsIHN0YXJ0Q29vcmRzLCBlbmRDb29yZHMpIHtcbiAgICAgICAgbGV0IG5vcm1hbGl6ZWQgPSB0aGlzLm5vcm1hbGl6ZWRDb29yZHM7XG4gICAgICAgIGxldCB7IGd2YXI6IGd2YXIgfSA9IHRoaXMuZm9udDtcbiAgICAgICAgbGV0IGZhY3RvciA9IDE7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBndmFyLmF4aXNDb3VudDsgaSsrKXtcbiAgICAgICAgICAgIGlmICh0dXBsZUNvb3Jkc1tpXSA9PT0gMCkgY29udGludWU7XG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZFtpXSA9PT0gMCkgcmV0dXJuIDA7XG4gICAgICAgICAgICBpZiAoKHR1cGxlSW5kZXggJiAkMGJiODQwY2FjMDRlOTExYiR2YXIkSU5URVJNRURJQVRFX1RVUExFKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChub3JtYWxpemVkW2ldIDwgTWF0aC5taW4oMCwgdHVwbGVDb29yZHNbaV0pIHx8IG5vcm1hbGl6ZWRbaV0gPiBNYXRoLm1heCgwLCB0dXBsZUNvb3Jkc1tpXSkpIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIGZhY3RvciA9IChmYWN0b3IgKiBub3JtYWxpemVkW2ldICsgTnVtYmVyLkVQU0lMT04pIC8gKHR1cGxlQ29vcmRzW2ldICsgTnVtYmVyLkVQU0lMT04pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZFtpXSA8IHN0YXJ0Q29vcmRzW2ldIHx8IG5vcm1hbGl6ZWRbaV0gPiBlbmRDb29yZHNbaV0pIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5vcm1hbGl6ZWRbaV0gPCB0dXBsZUNvb3Jkc1tpXSkgZmFjdG9yID0gZmFjdG9yICogKG5vcm1hbGl6ZWRbaV0gLSBzdGFydENvb3Jkc1tpXSArIE51bWJlci5FUFNJTE9OKSAvICh0dXBsZUNvb3Jkc1tpXSAtIHN0YXJ0Q29vcmRzW2ldICsgTnVtYmVyLkVQU0lMT04pO1xuICAgICAgICAgICAgICAgIGVsc2UgZmFjdG9yID0gZmFjdG9yICogKGVuZENvb3Jkc1tpXSAtIG5vcm1hbGl6ZWRbaV0gKyBOdW1iZXIuRVBTSUxPTikgLyAoZW5kQ29vcmRzW2ldIC0gdHVwbGVDb29yZHNbaV0gKyBOdW1iZXIuRVBTSUxPTik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhY3RvcjtcbiAgICB9XG4gICAgLy8gSW50ZXJwb2xhdGVzIHBvaW50cyB3aXRob3V0IGRlbHRhIHZhbHVlcy5cbiAgICAvLyBOZWVkZWQgZm9yIHRoZSDDmCBhbmQgUSBnbHlwaHMgaW4gU2tpYS5cbiAgICAvLyBBbGdvcml0aG0gZnJvbSBGcmVldHlwZS5cbiAgICBpbnRlcnBvbGF0ZU1pc3NpbmdEZWx0YXMocG9pbnRzLCBpblBvaW50cywgaGFzRGVsdGEpIHtcbiAgICAgICAgaWYgKHBvaW50cy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgICAgbGV0IHBvaW50ID0gMDtcbiAgICAgICAgd2hpbGUocG9pbnQgPCBwb2ludHMubGVuZ3RoKXtcbiAgICAgICAgICAgIGxldCBmaXJzdFBvaW50ID0gcG9pbnQ7XG4gICAgICAgICAgICAvLyBmaW5kIHRoZSBlbmQgcG9pbnQgb2YgdGhlIGNvbnRvdXJcbiAgICAgICAgICAgIGxldCBlbmRQb2ludCA9IHBvaW50O1xuICAgICAgICAgICAgbGV0IHB0ID0gcG9pbnRzW2VuZFBvaW50XTtcbiAgICAgICAgICAgIHdoaWxlKCFwdC5lbmRDb250b3VyKXB0ID0gcG9pbnRzWysrZW5kUG9pbnRdO1xuICAgICAgICAgICAgLy8gZmluZCB0aGUgZmlyc3QgcG9pbnQgdGhhdCBoYXMgYSBkZWx0YVxuICAgICAgICAgICAgd2hpbGUocG9pbnQgPD0gZW5kUG9pbnQgJiYgIWhhc0RlbHRhW3BvaW50XSlwb2ludCsrO1xuICAgICAgICAgICAgaWYgKHBvaW50ID4gZW5kUG9pbnQpIGNvbnRpbnVlO1xuICAgICAgICAgICAgbGV0IGZpcnN0RGVsdGEgPSBwb2ludDtcbiAgICAgICAgICAgIGxldCBjdXJEZWx0YSA9IHBvaW50O1xuICAgICAgICAgICAgcG9pbnQrKztcbiAgICAgICAgICAgIHdoaWxlKHBvaW50IDw9IGVuZFBvaW50KXtcbiAgICAgICAgICAgICAgICAvLyBmaW5kIHRoZSBuZXh0IHBvaW50IHdpdGggYSBkZWx0YSwgYW5kIGludGVycG9sYXRlIGludGVybWVkaWF0ZSBwb2ludHNcbiAgICAgICAgICAgICAgICBpZiAoaGFzRGVsdGFbcG9pbnRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsdGFJbnRlcnBvbGF0ZShjdXJEZWx0YSArIDEsIHBvaW50IC0gMSwgY3VyRGVsdGEsIHBvaW50LCBpblBvaW50cywgcG9pbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgY3VyRGVsdGEgPSBwb2ludDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcG9pbnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHNoaWZ0IGNvbnRvdXIgaWYgd2Ugb25seSBoYXZlIGEgc2luZ2xlIGRlbHRhXG4gICAgICAgICAgICBpZiAoY3VyRGVsdGEgPT09IGZpcnN0RGVsdGEpIHRoaXMuZGVsdGFTaGlmdChmaXJzdFBvaW50LCBlbmRQb2ludCwgY3VyRGVsdGEsIGluUG9pbnRzLCBwb2ludHMpO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlLCBoYW5kbGUgdGhlIHJlbWFpbmluZyBwb2ludHMgYXQgdGhlIGVuZCBhbmQgYmVnaW5uaW5nIG9mIHRoZSBjb250b3VyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWx0YUludGVycG9sYXRlKGN1ckRlbHRhICsgMSwgZW5kUG9pbnQsIGN1ckRlbHRhLCBmaXJzdERlbHRhLCBpblBvaW50cywgcG9pbnRzKTtcbiAgICAgICAgICAgICAgICBpZiAoZmlyc3REZWx0YSA+IDApIHRoaXMuZGVsdGFJbnRlcnBvbGF0ZShmaXJzdFBvaW50LCBmaXJzdERlbHRhIC0gMSwgY3VyRGVsdGEsIGZpcnN0RGVsdGEsIGluUG9pbnRzLCBwb2ludHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9pbnQgPSBlbmRQb2ludCArIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVsdGFJbnRlcnBvbGF0ZShwMSwgcDIsIHJlZjEsIHJlZjIsIGluUG9pbnRzLCBvdXRQb2ludHMpIHtcbiAgICAgICAgaWYgKHAxID4gcDIpIHJldHVybjtcbiAgICAgICAgbGV0IGl0ZXJhYmxlID0gW1xuICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgJ3knXG4gICAgICAgIF07XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBpdGVyYWJsZS5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBsZXQgayA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgaWYgKGluUG9pbnRzW3JlZjFdW2tdID4gaW5Qb2ludHNbcmVmMl1ba10pIHtcbiAgICAgICAgICAgICAgICB2YXIgcCA9IHJlZjE7XG4gICAgICAgICAgICAgICAgcmVmMSA9IHJlZjI7XG4gICAgICAgICAgICAgICAgcmVmMiA9IHA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgaW4xID0gaW5Qb2ludHNbcmVmMV1ba107XG4gICAgICAgICAgICBsZXQgaW4yID0gaW5Qb2ludHNbcmVmMl1ba107XG4gICAgICAgICAgICBsZXQgb3V0MSA9IG91dFBvaW50c1tyZWYxXVtrXTtcbiAgICAgICAgICAgIGxldCBvdXQyID0gb3V0UG9pbnRzW3JlZjJdW2tdO1xuICAgICAgICAgICAgLy8gSWYgdGhlIHJlZmVyZW5jZSBwb2ludHMgaGF2ZSB0aGUgc2FtZSBjb29yZGluYXRlIGJ1dCBkaWZmZXJlbnRcbiAgICAgICAgICAgIC8vIGRlbHRhLCBpbmZlcnJlZCBkZWx0YSBpcyB6ZXJvLiAgT3RoZXJ3aXNlIGludGVycG9sYXRlLlxuICAgICAgICAgICAgaWYgKGluMSAhPT0gaW4yIHx8IG91dDEgPT09IG91dDIpIHtcbiAgICAgICAgICAgICAgICBsZXQgc2NhbGUgPSBpbjEgPT09IGluMiA/IDAgOiAob3V0MiAtIG91dDEpIC8gKGluMiAtIGluMSk7XG4gICAgICAgICAgICAgICAgZm9yKGxldCBwID0gcDE7IHAgPD0gcDI7IHArKyl7XG4gICAgICAgICAgICAgICAgICAgIGxldCBvdXQgPSBpblBvaW50c1twXVtrXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG91dCA8PSBpbjEpIG91dCArPSBvdXQxIC0gaW4xO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChvdXQgPj0gaW4yKSBvdXQgKz0gb3V0MiAtIGluMjtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBvdXQgPSBvdXQxICsgKG91dCAtIGluMSkgKiBzY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgb3V0UG9pbnRzW3BdW2tdID0gb3V0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBkZWx0YVNoaWZ0KHAxLCBwMiwgcmVmLCBpblBvaW50cywgb3V0UG9pbnRzKSB7XG4gICAgICAgIGxldCBkZWx0YVggPSBvdXRQb2ludHNbcmVmXS54IC0gaW5Qb2ludHNbcmVmXS54O1xuICAgICAgICBsZXQgZGVsdGFZID0gb3V0UG9pbnRzW3JlZl0ueSAtIGluUG9pbnRzW3JlZl0ueTtcbiAgICAgICAgaWYgKGRlbHRhWCA9PT0gMCAmJiBkZWx0YVkgPT09IDApIHJldHVybjtcbiAgICAgICAgZm9yKGxldCBwID0gcDE7IHAgPD0gcDI7IHArKylpZiAocCAhPT0gcmVmKSB7XG4gICAgICAgICAgICBvdXRQb2ludHNbcF0ueCArPSBkZWx0YVg7XG4gICAgICAgICAgICBvdXRQb2ludHNbcF0ueSArPSBkZWx0YVk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0QWR2YW5jZUFkanVzdG1lbnQoZ2lkLCB0YWJsZSkge1xuICAgICAgICBsZXQgb3V0ZXJJbmRleCwgaW5uZXJJbmRleDtcbiAgICAgICAgaWYgKHRhYmxlLmFkdmFuY2VXaWR0aE1hcHBpbmcpIHtcbiAgICAgICAgICAgIGxldCBpZHggPSBnaWQ7XG4gICAgICAgICAgICBpZiAoaWR4ID49IHRhYmxlLmFkdmFuY2VXaWR0aE1hcHBpbmcubWFwQ291bnQpIGlkeCA9IHRhYmxlLmFkdmFuY2VXaWR0aE1hcHBpbmcubWFwQ291bnQgLSAxO1xuICAgICAgICAgICAgbGV0IGVudHJ5Rm9ybWF0ID0gdGFibGUuYWR2YW5jZVdpZHRoTWFwcGluZy5lbnRyeUZvcm1hdDtcbiAgICAgICAgICAgICh7IG91dGVySW5kZXg6IG91dGVySW5kZXgsIGlubmVySW5kZXg6IGlubmVySW5kZXggfSA9IHRhYmxlLmFkdmFuY2VXaWR0aE1hcHBpbmcubWFwRGF0YVtpZHhdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dGVySW5kZXggPSAwO1xuICAgICAgICAgICAgaW5uZXJJbmRleCA9IGdpZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5nZXREZWx0YSh0YWJsZS5pdGVtVmFyaWF0aW9uU3RvcmUsIG91dGVySW5kZXgsIGlubmVySW5kZXgpO1xuICAgIH1cbiAgICAvLyBTZWUgcHNldWRvIGNvZGUgZnJvbSBgRm9udCBWYXJpYXRpb25zIE92ZXJ2aWV3J1xuICAgIC8vIGluIHRoZSBPcGVuVHlwZSBzcGVjaWZpY2F0aW9uLlxuICAgIGdldERlbHRhKGl0ZW1TdG9yZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCkge1xuICAgICAgICBpZiAob3V0ZXJJbmRleCA+PSBpdGVtU3RvcmUuaXRlbVZhcmlhdGlvbkRhdGEubGVuZ3RoKSByZXR1cm4gMDtcbiAgICAgICAgbGV0IHZhckRhdGEgPSBpdGVtU3RvcmUuaXRlbVZhcmlhdGlvbkRhdGFbb3V0ZXJJbmRleF07XG4gICAgICAgIGlmIChpbm5lckluZGV4ID49IHZhckRhdGEuZGVsdGFTZXRzLmxlbmd0aCkgcmV0dXJuIDA7XG4gICAgICAgIGxldCBkZWx0YVNldCA9IHZhckRhdGEuZGVsdGFTZXRzW2lubmVySW5kZXhdO1xuICAgICAgICBsZXQgYmxlbmRWZWN0b3IgPSB0aGlzLmdldEJsZW5kVmVjdG9yKGl0ZW1TdG9yZSwgb3V0ZXJJbmRleCk7XG4gICAgICAgIGxldCBuZXRBZGp1c3RtZW50ID0gMDtcbiAgICAgICAgZm9yKGxldCBtYXN0ZXIgPSAwOyBtYXN0ZXIgPCB2YXJEYXRhLnJlZ2lvbkluZGV4Q291bnQ7IG1hc3RlcisrKW5ldEFkanVzdG1lbnQgKz0gZGVsdGFTZXQuZGVsdGFzW21hc3Rlcl0gKiBibGVuZFZlY3RvclttYXN0ZXJdO1xuICAgICAgICByZXR1cm4gbmV0QWRqdXN0bWVudDtcbiAgICB9XG4gICAgZ2V0QmxlbmRWZWN0b3IoaXRlbVN0b3JlLCBvdXRlckluZGV4KSB7XG4gICAgICAgIGxldCB2YXJEYXRhID0gaXRlbVN0b3JlLml0ZW1WYXJpYXRpb25EYXRhW291dGVySW5kZXhdO1xuICAgICAgICBpZiAodGhpcy5ibGVuZFZlY3RvcnMuaGFzKHZhckRhdGEpKSByZXR1cm4gdGhpcy5ibGVuZFZlY3RvcnMuZ2V0KHZhckRhdGEpO1xuICAgICAgICBsZXQgbm9ybWFsaXplZENvb3JkcyA9IHRoaXMubm9ybWFsaXplZENvb3JkcztcbiAgICAgICAgbGV0IGJsZW5kVmVjdG9yID0gW107XG4gICAgICAgIC8vIG91dGVyIGxvb3Agc3RlcHMgdGhyb3VnaCBtYXN0ZXIgZGVzaWducyB0byBiZSBibGVuZGVkXG4gICAgICAgIGZvcihsZXQgbWFzdGVyID0gMDsgbWFzdGVyIDwgdmFyRGF0YS5yZWdpb25JbmRleENvdW50OyBtYXN0ZXIrKyl7XG4gICAgICAgICAgICBsZXQgc2NhbGFyID0gMTtcbiAgICAgICAgICAgIGxldCByZWdpb25JbmRleCA9IHZhckRhdGEucmVnaW9uSW5kZXhlc1ttYXN0ZXJdO1xuICAgICAgICAgICAgbGV0IGF4ZXMgPSBpdGVtU3RvcmUudmFyaWF0aW9uUmVnaW9uTGlzdC52YXJpYXRpb25SZWdpb25zW3JlZ2lvbkluZGV4XTtcbiAgICAgICAgICAgIC8vIGlubmVyIGxvb3Agc3RlcHMgdGhyb3VnaCBheGVzIGluIHRoaXMgcmVnaW9uXG4gICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgYXhlcy5sZW5ndGg7IGorKyl7XG4gICAgICAgICAgICAgICAgbGV0IGF4aXMgPSBheGVzW2pdO1xuICAgICAgICAgICAgICAgIGxldCBheGlzU2NhbGFyO1xuICAgICAgICAgICAgICAgIC8vIGNvbXB1dGUgdGhlIHNjYWxhciBjb250cmlidXRpb24gb2YgdGhpcyBheGlzXG4gICAgICAgICAgICAgICAgLy8gaWdub3JlIGludmFsaWQgcmFuZ2VzXG4gICAgICAgICAgICAgICAgaWYgKGF4aXMuc3RhcnRDb29yZCA+IGF4aXMucGVha0Nvb3JkIHx8IGF4aXMucGVha0Nvb3JkID4gYXhpcy5lbmRDb29yZCkgYXhpc1NjYWxhciA9IDE7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYXhpcy5zdGFydENvb3JkIDwgMCAmJiBheGlzLmVuZENvb3JkID4gMCAmJiBheGlzLnBlYWtDb29yZCAhPT0gMCkgYXhpc1NjYWxhciA9IDE7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYXhpcy5wZWFrQ29vcmQgPT09IDApIGF4aXNTY2FsYXIgPSAxO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5vcm1hbGl6ZWRDb29yZHNbal0gPCBheGlzLnN0YXJ0Q29vcmQgfHwgbm9ybWFsaXplZENvb3Jkc1tqXSA+IGF4aXMuZW5kQ29vcmQpIGF4aXNTY2FsYXIgPSAwO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZENvb3Jkc1tqXSA9PT0gYXhpcy5wZWFrQ29vcmQpIGF4aXNTY2FsYXIgPSAxO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChub3JtYWxpemVkQ29vcmRzW2pdIDwgYXhpcy5wZWFrQ29vcmQpIGF4aXNTY2FsYXIgPSAobm9ybWFsaXplZENvb3Jkc1tqXSAtIGF4aXMuc3RhcnRDb29yZCArIE51bWJlci5FUFNJTE9OKSAvIChheGlzLnBlYWtDb29yZCAtIGF4aXMuc3RhcnRDb29yZCArIE51bWJlci5FUFNJTE9OKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBheGlzU2NhbGFyID0gKGF4aXMuZW5kQ29vcmQgLSBub3JtYWxpemVkQ29vcmRzW2pdICsgTnVtYmVyLkVQU0lMT04pIC8gKGF4aXMuZW5kQ29vcmQgLSBheGlzLnBlYWtDb29yZCArIE51bWJlci5FUFNJTE9OKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gdGFrZSBwcm9kdWN0IG9mIGFsbCB0aGUgYXhpcyBzY2FsYXJzXG4gICAgICAgICAgICAgICAgc2NhbGFyICo9IGF4aXNTY2FsYXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBibGVuZFZlY3RvclttYXN0ZXJdID0gc2NhbGFyO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmxlbmRWZWN0b3JzLnNldCh2YXJEYXRhLCBibGVuZFZlY3Rvcik7XG4gICAgICAgIHJldHVybiBibGVuZFZlY3RvcjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZm9udCwgY29vcmRzKXtcbiAgICAgICAgdGhpcy5mb250ID0gZm9udDtcbiAgICAgICAgdGhpcy5ub3JtYWxpemVkQ29vcmRzID0gdGhpcy5ub3JtYWxpemVDb29yZHMoY29vcmRzKTtcbiAgICAgICAgdGhpcy5ibGVuZFZlY3RvcnMgPSBuZXcgTWFwO1xuICAgIH1cbn1cblxuXG5cblxuY29uc3QgJDVjYzc0NzZkYTkyZGYzNzUkdmFyJHJlc29sdmVkID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5jbGFzcyAkNWNjNzQ3NmRhOTJkZjM3NSRleHBvcnQkMmUyYmNkODczOWFlMDM5IHtcbiAgICBpbmNsdWRlR2x5cGgoZ2x5cGgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnbHlwaCA9PT0gJ29iamVjdCcpIGdseXBoID0gZ2x5cGguaWQ7XG4gICAgICAgIGlmICh0aGlzLm1hcHBpbmdbZ2x5cGhdID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZ2x5cGhzLnB1c2goZ2x5cGgpO1xuICAgICAgICAgICAgdGhpcy5tYXBwaW5nW2dseXBoXSA9IHRoaXMuZ2x5cGhzLmxlbmd0aCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWFwcGluZ1tnbHlwaF07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZvbnQpe1xuICAgICAgICB0aGlzLmZvbnQgPSBmb250O1xuICAgICAgICB0aGlzLmdseXBocyA9IFtdO1xuICAgICAgICB0aGlzLm1hcHBpbmcgPSB7fTtcbiAgICAgICAgLy8gYWx3YXlzIGluY2x1ZGUgdGhlIG1pc3NpbmcgZ2x5cGhcbiAgICAgICAgdGhpcy5pbmNsdWRlR2x5cGgoMCk7XG4gICAgfVxufVxuXG5cblxuXG5cbi8vIEZsYWdzIGZvciBzaW1wbGUgZ2x5cGhzXG5jb25zdCAkODA3ZTU4NTA2YmU3MDAwNSR2YXIkT05fQ1VSVkUgPSAxO1xuY29uc3QgJDgwN2U1ODUwNmJlNzAwMDUkdmFyJFhfU0hPUlRfVkVDVE9SID0gMjtcbmNvbnN0ICQ4MDdlNTg1MDZiZTcwMDA1JHZhciRZX1NIT1JUX1ZFQ1RPUiA9IDQ7XG5jb25zdCAkODA3ZTU4NTA2YmU3MDAwNSR2YXIkUkVQRUFUID0gODtcbmNvbnN0ICQ4MDdlNTg1MDZiZTcwMDA1JHZhciRTQU1FX1ggPSAxNjtcbmNvbnN0ICQ4MDdlNTg1MDZiZTcwMDA1JHZhciRTQU1FX1kgPSAzMjtcbmNsYXNzICQ4MDdlNTg1MDZiZTcwMDA1JHZhciRQb2ludCB7XG4gICAgc3RhdGljIHNpemUodmFsKSB7XG4gICAgICAgIHJldHVybiB2YWwgPj0gMCAmJiB2YWwgPD0gMjU1ID8gMSA6IDI7XG4gICAgfVxuICAgIHN0YXRpYyBlbmNvZGUoc3RyZWFtLCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPj0gMCAmJiB2YWx1ZSA8PSAyNTUpIHN0cmVhbS53cml0ZVVJbnQ4KHZhbHVlKTtcbiAgICAgICAgZWxzZSBzdHJlYW0ud3JpdGVJbnQxNkJFKHZhbHVlKTtcbiAgICB9XG59XG5sZXQgJDgwN2U1ODUwNmJlNzAwMDUkdmFyJEdseWYgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgbnVtYmVyT2ZDb250b3VyczogJDUyWklmJGludDE2LFxuICAgIHhNaW46ICQ1MlpJZiRpbnQxNixcbiAgICB5TWluOiAkNTJaSWYkaW50MTYsXG4gICAgeE1heDogJDUyWklmJGludDE2LFxuICAgIHlNYXg6ICQ1MlpJZiRpbnQxNixcbiAgICBlbmRQdHNPZkNvbnRvdXJzOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MTYsICdudW1iZXJPZkNvbnRvdXJzJyksXG4gICAgaW5zdHJ1Y3Rpb25zOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50OCwgJDUyWklmJHVpbnQxNiksXG4gICAgZmxhZ3M6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQ4LCAwKSxcbiAgICB4UG9pbnRzOiBuZXcgJDUyWklmJEFycmF5KCQ4MDdlNTg1MDZiZTcwMDA1JHZhciRQb2ludCwgMCksXG4gICAgeVBvaW50czogbmV3ICQ1MlpJZiRBcnJheSgkODA3ZTU4NTA2YmU3MDAwNSR2YXIkUG9pbnQsIDApXG59KTtcbmNsYXNzICQ4MDdlNTg1MDZiZTcwMDA1JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIGVuY29kZVNpbXBsZShwYXRoLCBpbnN0cnVjdGlvbnMgPSBbXSkge1xuICAgICAgICBsZXQgZW5kUHRzT2ZDb250b3VycyA9IFtdO1xuICAgICAgICBsZXQgeFBvaW50cyA9IFtdO1xuICAgICAgICBsZXQgeVBvaW50cyA9IFtdO1xuICAgICAgICBsZXQgZmxhZ3MgPSBbXTtcbiAgICAgICAgbGV0IHNhbWUgPSAwO1xuICAgICAgICBsZXQgbGFzdFggPSAwLCBsYXN0WSA9IDAsIGxhc3RGbGFnID0gMDtcbiAgICAgICAgbGV0IHBvaW50Q291bnQgPSAwO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgcGF0aC5jb21tYW5kcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBsZXQgYyA9IHBhdGguY29tbWFuZHNbaV07XG4gICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgYy5hcmdzLmxlbmd0aDsgaiArPSAyKXtcbiAgICAgICAgICAgICAgICBsZXQgeCA9IGMuYXJnc1tqXTtcbiAgICAgICAgICAgICAgICBsZXQgeSA9IGMuYXJnc1tqICsgMV07XG4gICAgICAgICAgICAgICAgbGV0IGZsYWcgPSAwO1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBlbmRpbmcgcG9pbnQgb2YgYSBxdWFkcmF0aWMgY3VydmUgaXMgdGhlIG1pZHBvaW50XG4gICAgICAgICAgICAgICAgLy8gYmV0d2VlbiB0aGUgY29udHJvbCBwb2ludCBhbmQgdGhlIGNvbnRyb2wgcG9pbnQgb2YgdGhlIG5leHRcbiAgICAgICAgICAgICAgICAvLyBxdWFkcmF0aWMgY3VydmUsIHdlIGNhbiBvbWl0IHRoZSBlbmRpbmcgcG9pbnQuXG4gICAgICAgICAgICAgICAgaWYgKGMuY29tbWFuZCA9PT0gJ3F1YWRyYXRpY0N1cnZlVG8nICYmIGogPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5leHQgPSBwYXRoLmNvbW1hbmRzW2kgKyAxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQgJiYgbmV4dC5jb21tYW5kID09PSAncXVhZHJhdGljQ3VydmVUbycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtaWRYID0gKGxhc3RYICsgbmV4dC5hcmdzWzBdKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWlkWSA9IChsYXN0WSArIG5leHQuYXJnc1sxXSkgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHggPT09IG1pZFggJiYgeSA9PT0gbWlkWSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQWxsIHBvaW50cyBleGNlcHQgY29udHJvbCBwb2ludHMgYXJlIG9uIGN1cnZlLlxuICAgICAgICAgICAgICAgIGlmICghKGMuY29tbWFuZCA9PT0gJ3F1YWRyYXRpY0N1cnZlVG8nICYmIGogPT09IDApKSBmbGFnIHw9ICQ4MDdlNTg1MDZiZTcwMDA1JHZhciRPTl9DVVJWRTtcbiAgICAgICAgICAgICAgICBmbGFnID0gdGhpcy5fZW5jb2RlUG9pbnQoeCwgbGFzdFgsIHhQb2ludHMsIGZsYWcsICQ4MDdlNTg1MDZiZTcwMDA1JHZhciRYX1NIT1JUX1ZFQ1RPUiwgJDgwN2U1ODUwNmJlNzAwMDUkdmFyJFNBTUVfWCk7XG4gICAgICAgICAgICAgICAgZmxhZyA9IHRoaXMuX2VuY29kZVBvaW50KHksIGxhc3RZLCB5UG9pbnRzLCBmbGFnLCAkODA3ZTU4NTA2YmU3MDAwNSR2YXIkWV9TSE9SVF9WRUNUT1IsICQ4MDdlNTg1MDZiZTcwMDA1JHZhciRTQU1FX1kpO1xuICAgICAgICAgICAgICAgIGlmIChmbGFnID09PSBsYXN0RmxhZyAmJiBzYW1lIDwgMjU1KSB7XG4gICAgICAgICAgICAgICAgICAgIGZsYWdzW2ZsYWdzLmxlbmd0aCAtIDFdIHw9ICQ4MDdlNTg1MDZiZTcwMDA1JHZhciRSRVBFQVQ7XG4gICAgICAgICAgICAgICAgICAgIHNhbWUrKztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2FtZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYWdzLnB1c2goc2FtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzYW1lID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmbGFncy5wdXNoKGZsYWcpO1xuICAgICAgICAgICAgICAgICAgICBsYXN0RmxhZyA9IGZsYWc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxhc3RYID0geDtcbiAgICAgICAgICAgICAgICBsYXN0WSA9IHk7XG4gICAgICAgICAgICAgICAgcG9pbnRDb3VudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMuY29tbWFuZCA9PT0gJ2Nsb3NlUGF0aCcpIGVuZFB0c09mQ29udG91cnMucHVzaChwb2ludENvdW50IC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2xvc2UgdGhlIHBhdGggaWYgdGhlIGxhc3QgY29tbWFuZCBkaWRuJ3QgYWxyZWFkeVxuICAgICAgICBpZiAocGF0aC5jb21tYW5kcy5sZW5ndGggPiAxICYmIHBhdGguY29tbWFuZHNbcGF0aC5jb21tYW5kcy5sZW5ndGggLSAxXS5jb21tYW5kICE9PSAnY2xvc2VQYXRoJykgZW5kUHRzT2ZDb250b3Vycy5wdXNoKHBvaW50Q291bnQgLSAxKTtcbiAgICAgICAgbGV0IGJib3ggPSBwYXRoLmJib3g7XG4gICAgICAgIGxldCBnbHlmID0ge1xuICAgICAgICAgICAgbnVtYmVyT2ZDb250b3VyczogZW5kUHRzT2ZDb250b3Vycy5sZW5ndGgsXG4gICAgICAgICAgICB4TWluOiBiYm94Lm1pblgsXG4gICAgICAgICAgICB5TWluOiBiYm94Lm1pblksXG4gICAgICAgICAgICB4TWF4OiBiYm94Lm1heFgsXG4gICAgICAgICAgICB5TWF4OiBiYm94Lm1heFksXG4gICAgICAgICAgICBlbmRQdHNPZkNvbnRvdXJzOiBlbmRQdHNPZkNvbnRvdXJzLFxuICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zOiBpbnN0cnVjdGlvbnMsXG4gICAgICAgICAgICBmbGFnczogZmxhZ3MsXG4gICAgICAgICAgICB4UG9pbnRzOiB4UG9pbnRzLFxuICAgICAgICAgICAgeVBvaW50czogeVBvaW50c1xuICAgICAgICB9O1xuICAgICAgICBsZXQgc2l6ZSA9ICQ4MDdlNTg1MDZiZTcwMDA1JHZhciRHbHlmLnNpemUoZ2x5Zik7XG4gICAgICAgIGxldCB0YWlsID0gNCAtIHNpemUgJSA0O1xuICAgICAgICBsZXQgc3RyZWFtID0gbmV3ICQ1MlpJZiRFbmNvZGVTdHJlYW0oc2l6ZSArIHRhaWwpO1xuICAgICAgICAkODA3ZTU4NTA2YmU3MDAwNSR2YXIkR2x5Zi5lbmNvZGUoc3RyZWFtLCBnbHlmKTtcbiAgICAgICAgLy8gQWxpZ24gdG8gNC1ieXRlIGxlbmd0aFxuICAgICAgICBpZiAodGFpbCAhPT0gMCkgc3RyZWFtLmZpbGwoMCwgdGFpbCk7XG4gICAgICAgIHJldHVybiBzdHJlYW0uYnVmZmVyO1xuICAgIH1cbiAgICBfZW5jb2RlUG9pbnQodmFsdWUsIGxhc3QsIHBvaW50cywgZmxhZywgc2hvcnRGbGFnLCBzYW1lRmxhZykge1xuICAgICAgICBsZXQgZGlmZiA9IHZhbHVlIC0gbGFzdDtcbiAgICAgICAgaWYgKHZhbHVlID09PSBsYXN0KSBmbGFnIHw9IHNhbWVGbGFnO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICgtMjU1IDw9IGRpZmYgJiYgZGlmZiA8PSAyNTUpIHtcbiAgICAgICAgICAgICAgICBmbGFnIHw9IHNob3J0RmxhZztcbiAgICAgICAgICAgICAgICBpZiAoZGlmZiA8IDApIGRpZmYgPSAtZGlmZjtcbiAgICAgICAgICAgICAgICBlbHNlIGZsYWcgfD0gc2FtZUZsYWc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb2ludHMucHVzaChkaWZmKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmxhZztcbiAgICB9XG59XG5cblxuY2xhc3MgJDRhYmJiNmE1ZGJkYzQ0MWEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSBleHRlbmRzICgwLCAkNWNjNzQ3NmRhOTJkZjM3NSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSB7XG4gICAgX2FkZEdseXBoKGdpZCkge1xuICAgICAgICBsZXQgZ2x5cGggPSB0aGlzLmZvbnQuZ2V0R2x5cGgoZ2lkKTtcbiAgICAgICAgbGV0IGdseWYgPSBnbHlwaC5fZGVjb2RlKCk7XG4gICAgICAgIC8vIGdldCB0aGUgb2Zmc2V0IHRvIHRoZSBnbHlwaCBmcm9tIHRoZSBsb2NhIHRhYmxlXG4gICAgICAgIGxldCBjdXJPZmZzZXQgPSB0aGlzLmZvbnQubG9jYS5vZmZzZXRzW2dpZF07XG4gICAgICAgIGxldCBuZXh0T2Zmc2V0ID0gdGhpcy5mb250LmxvY2Eub2Zmc2V0c1tnaWQgKyAxXTtcbiAgICAgICAgbGV0IHN0cmVhbSA9IHRoaXMuZm9udC5fZ2V0VGFibGVTdHJlYW0oJ2dseWYnKTtcbiAgICAgICAgc3RyZWFtLnBvcyArPSBjdXJPZmZzZXQ7XG4gICAgICAgIGxldCBidWZmZXIgPSBzdHJlYW0ucmVhZEJ1ZmZlcihuZXh0T2Zmc2V0IC0gY3VyT2Zmc2V0KTtcbiAgICAgICAgLy8gaWYgaXQgaXMgYSBjb21wb3VuZCBnbHlwaCwgaW5jbHVkZSBpdHMgY29tcG9uZW50c1xuICAgICAgICBpZiAoZ2x5ZiAmJiBnbHlmLm51bWJlck9mQ29udG91cnMgPCAwKSB7XG4gICAgICAgICAgICBidWZmZXIgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgICAgICAgICAgbGV0IHZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyLmJ1ZmZlcik7XG4gICAgICAgICAgICBmb3IgKGxldCBjb21wb25lbnQgb2YgZ2x5Zi5jb21wb25lbnRzKXtcbiAgICAgICAgICAgICAgICBnaWQgPSB0aGlzLmluY2x1ZGVHbHlwaChjb21wb25lbnQuZ2x5cGhJRCk7XG4gICAgICAgICAgICAgICAgdmlldy5zZXRVaW50MTYoY29tcG9uZW50LnBvcywgZ2lkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChnbHlmICYmIHRoaXMuZm9udC5fdmFyaWF0aW9uUHJvY2Vzc29yKSAvLyBJZiB0aGlzIGlzIGEgVHJ1ZVR5cGUgdmFyaWF0aW9uIGdseXBoLCByZS1lbmNvZGUgdGhlIHBhdGhcbiAgICAgICAgYnVmZmVyID0gdGhpcy5nbHlwaEVuY29kZXIuZW5jb2RlU2ltcGxlKGdseXBoLnBhdGgsIGdseWYuaW5zdHJ1Y3Rpb25zKTtcbiAgICAgICAgdGhpcy5nbHlmLnB1c2goYnVmZmVyKTtcbiAgICAgICAgdGhpcy5sb2NhLm9mZnNldHMucHVzaCh0aGlzLm9mZnNldCk7XG4gICAgICAgIHRoaXMuaG10eC5tZXRyaWNzLnB1c2goe1xuICAgICAgICAgICAgYWR2YW5jZTogZ2x5cGguYWR2YW5jZVdpZHRoLFxuICAgICAgICAgICAgYmVhcmluZzogZ2x5cGguX2dldE1ldHJpY3MoKS5sZWZ0QmVhcmluZ1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gYnVmZmVyLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2x5Zi5sZW5ndGggLSAxO1xuICAgIH1cbiAgICBlbmNvZGUoKSB7XG4gICAgICAgIC8vIHRhYmxlcyByZXF1aXJlZCBieSBQREYgc3BlYzpcbiAgICAgICAgLy8gICBoZWFkLCBoaGVhLCBsb2NhLCBtYXhwLCBjdnQgLCBwcmVwLCBnbHlmLCBobXR4LCBmcGdtXG4gICAgICAgIC8vXG4gICAgICAgIC8vIGFkZGl0aW9uYWwgdGFibGVzIHJlcXVpcmVkIGZvciBzdGFuZGFsb25lIGZvbnRzOlxuICAgICAgICAvLyAgIG5hbWUsIGNtYXAsIE9TLzIsIHBvc3RcbiAgICAgICAgdGhpcy5nbHlmID0gW107XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy5sb2NhID0ge1xuICAgICAgICAgICAgb2Zmc2V0czogW10sXG4gICAgICAgICAgICB2ZXJzaW9uOiB0aGlzLmZvbnQubG9jYS52ZXJzaW9uXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaG10eCA9IHtcbiAgICAgICAgICAgIG1ldHJpY3M6IFtdLFxuICAgICAgICAgICAgYmVhcmluZ3M6IFtdXG4gICAgICAgIH07XG4gICAgICAgIC8vIGluY2x1ZGUgYWxsIHRoZSBnbHlwaHNcbiAgICAgICAgLy8gbm90IHVzaW5nIGEgZm9yIGxvb3AgYmVjYXVzZSB3ZSBuZWVkIHRvIHN1cHBvcnQgYWRkaW5nIG1vcmVcbiAgICAgICAgLy8gZ2x5cGhzIHRvIHRoZSBhcnJheSBhcyB3ZSBnbywgYW5kIENvZmZlZVNjcmlwdCBjYWNoZXMgdGhlIGxlbmd0aC5cbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICB3aGlsZShpIDwgdGhpcy5nbHlwaHMubGVuZ3RoKXRoaXMuX2FkZEdseXBoKHRoaXMuZ2x5cGhzW2krK10pO1xuICAgICAgICBsZXQgbWF4cCA9ICgwLCAkNTJaSWYkY2xvbmUpKHRoaXMuZm9udC5tYXhwKTtcbiAgICAgICAgbWF4cC5udW1HbHlwaHMgPSB0aGlzLmdseWYubGVuZ3RoO1xuICAgICAgICB0aGlzLmxvY2Eub2Zmc2V0cy5wdXNoKHRoaXMub2Zmc2V0KTtcbiAgICAgICAgbGV0IGhlYWQgPSAoMCwgJDUyWklmJGNsb25lKSh0aGlzLmZvbnQuaGVhZCk7XG4gICAgICAgIGhlYWQuaW5kZXhUb0xvY0Zvcm1hdCA9IHRoaXMubG9jYS52ZXJzaW9uO1xuICAgICAgICBsZXQgaGhlYSA9ICgwLCAkNTJaSWYkY2xvbmUpKHRoaXMuZm9udC5oaGVhKTtcbiAgICAgICAgaGhlYS5udW1iZXJPZk1ldHJpY3MgPSB0aGlzLmhtdHgubWV0cmljcy5sZW5ndGg7XG4gICAgICAgIC8vIG1hcCA9IFtdXG4gICAgICAgIC8vIGZvciBpbmRleCBpbiBbMC4uLjI1Nl1cbiAgICAgICAgLy8gICAgIGlmIGluZGV4IDwgQG51bUdseXBoc1xuICAgICAgICAvLyAgICAgICAgIG1hcFtpbmRleF0gPSBpbmRleFxuICAgICAgICAvLyAgICAgZWxzZVxuICAgICAgICAvLyAgICAgICAgIG1hcFtpbmRleF0gPSAwXG4gICAgICAgIC8vXG4gICAgICAgIC8vIGNtYXBUYWJsZSA9XG4gICAgICAgIC8vICAgICB2ZXJzaW9uOiAwXG4gICAgICAgIC8vICAgICBsZW5ndGg6IDI2MlxuICAgICAgICAvLyAgICAgbGFuZ3VhZ2U6IDBcbiAgICAgICAgLy8gICAgIGNvZGVNYXA6IG1hcFxuICAgICAgICAvL1xuICAgICAgICAvLyBjbWFwID1cbiAgICAgICAgLy8gICAgIHZlcnNpb246IDBcbiAgICAgICAgLy8gICAgIG51bVN1YnRhYmxlczogMVxuICAgICAgICAvLyAgICAgdGFibGVzOiBbXG4gICAgICAgIC8vICAgICAgICAgcGxhdGZvcm1JRDogMVxuICAgICAgICAvLyAgICAgICAgIGVuY29kaW5nSUQ6IDBcbiAgICAgICAgLy8gICAgICAgICB0YWJsZTogY21hcFRhYmxlXG4gICAgICAgIC8vICAgICBdXG4gICAgICAgIC8vIFRPRE86IHN1YnNldCBwcmVwLCBjdnQsIGZwZ20/XG4gICAgICAgIHJldHVybiAoMCwgJDgxNmMwN2EwNGI2ZGJhODckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkudG9CdWZmZXIoe1xuICAgICAgICAgICAgdGFibGVzOiB7XG4gICAgICAgICAgICAgICAgaGVhZDogaGVhZCxcbiAgICAgICAgICAgICAgICBoaGVhOiBoaGVhLFxuICAgICAgICAgICAgICAgIGxvY2E6IHRoaXMubG9jYSxcbiAgICAgICAgICAgICAgICBtYXhwOiBtYXhwLFxuICAgICAgICAgICAgICAgICdjdnQgJzogdGhpcy5mb250WydjdnQgJ10sXG4gICAgICAgICAgICAgICAgcHJlcDogdGhpcy5mb250LnByZXAsXG4gICAgICAgICAgICAgICAgZ2x5ZjogdGhpcy5nbHlmLFxuICAgICAgICAgICAgICAgIGhtdHg6IHRoaXMuaG10eCxcbiAgICAgICAgICAgICAgICBmcGdtOiB0aGlzLmZvbnQuZnBnbVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZm9udCl7XG4gICAgICAgIHN1cGVyKGZvbnQpO1xuICAgICAgICB0aGlzLmdseXBoRW5jb2RlciA9IG5ldyAoMCwgJDgwN2U1ODUwNmJlNzAwMDUkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4gICAgfVxufVxuXG5cblxuXG5cblxuY2xhc3MgJDAwMWQ3Mzk0MjhhNzFkNWEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSBleHRlbmRzICgwLCAkNWNjNzQ3NmRhOTJkZjM3NSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSB7XG4gICAgc3Vic2V0Q2hhcnN0cmluZ3MoKSB7XG4gICAgICAgIHRoaXMuY2hhcnN0cmluZ3MgPSBbXTtcbiAgICAgICAgbGV0IGdzdWJycyA9IHt9O1xuICAgICAgICBmb3IgKGxldCBnaWQgb2YgdGhpcy5nbHlwaHMpe1xuICAgICAgICAgICAgdGhpcy5jaGFyc3RyaW5ncy5wdXNoKHRoaXMuY2ZmLmdldENoYXJTdHJpbmcoZ2lkKSk7XG4gICAgICAgICAgICBsZXQgZ2x5cGggPSB0aGlzLmZvbnQuZ2V0R2x5cGgoZ2lkKTtcbiAgICAgICAgICAgIGxldCBwYXRoID0gZ2x5cGgucGF0aDsgLy8gdGhpcyBjYXVzZXMgdGhlIGdseXBoIHRvIGJlIHBhcnNlZFxuICAgICAgICAgICAgZm9yKGxldCBzdWJyIGluIGdseXBoLl91c2VkR3N1YnJzKWdzdWJyc1tzdWJyXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nc3VicnMgPSB0aGlzLnN1YnNldFN1YnJzKHRoaXMuY2ZmLmdsb2JhbFN1YnJJbmRleCwgZ3N1YnJzKTtcbiAgICB9XG4gICAgc3Vic2V0U3VicnMoc3VicnMsIHVzZWQpIHtcbiAgICAgICAgbGV0IHJlcyA9IFtdO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgc3VicnMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgbGV0IHN1YnIgPSBzdWJyc1tpXTtcbiAgICAgICAgICAgIGlmICh1c2VkW2ldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jZmYuc3RyZWFtLnBvcyA9IHN1YnIub2Zmc2V0O1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKHRoaXMuY2ZmLnN0cmVhbS5yZWFkQnVmZmVyKHN1YnIubGVuZ3RoKSk7XG4gICAgICAgICAgICB9IGVsc2UgcmVzLnB1c2gobmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgICAgICAgICAgIDExXG4gICAgICAgICAgICBdKSk7IC8vIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIHN1YnNldEZvbnRkaWN0KHRvcERpY3QpIHtcbiAgICAgICAgdG9wRGljdC5GREFycmF5ID0gW107XG4gICAgICAgIHRvcERpY3QuRkRTZWxlY3QgPSB7XG4gICAgICAgICAgICB2ZXJzaW9uOiAwLFxuICAgICAgICAgICAgZmRzOiBbXVxuICAgICAgICB9O1xuICAgICAgICBsZXQgdXNlZF9mZHMgPSB7fTtcbiAgICAgICAgbGV0IHVzZWRfc3VicnMgPSBbXTtcbiAgICAgICAgbGV0IGZkX3NlbGVjdCA9IHt9O1xuICAgICAgICBmb3IgKGxldCBnaWQgb2YgdGhpcy5nbHlwaHMpe1xuICAgICAgICAgICAgbGV0IGZkID0gdGhpcy5jZmYuZmRGb3JHbHlwaChnaWQpO1xuICAgICAgICAgICAgaWYgKGZkID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKCF1c2VkX2Zkc1tmZF0pIHtcbiAgICAgICAgICAgICAgICB0b3BEaWN0LkZEQXJyYXkucHVzaChPYmplY3QuYXNzaWduKHt9LCB0aGlzLmNmZi50b3BEaWN0LkZEQXJyYXlbZmRdKSk7XG4gICAgICAgICAgICAgICAgdXNlZF9zdWJycy5wdXNoKHt9KTtcbiAgICAgICAgICAgICAgICBmZF9zZWxlY3RbZmRdID0gdG9wRGljdC5GREFycmF5Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1c2VkX2Zkc1tmZF0gPSB0cnVlO1xuICAgICAgICAgICAgdG9wRGljdC5GRFNlbGVjdC5mZHMucHVzaChmZF9zZWxlY3RbZmRdKTtcbiAgICAgICAgICAgIGxldCBnbHlwaCA9IHRoaXMuZm9udC5nZXRHbHlwaChnaWQpO1xuICAgICAgICAgICAgbGV0IHBhdGggPSBnbHlwaC5wYXRoOyAvLyB0aGlzIGNhdXNlcyB0aGUgZ2x5cGggdG8gYmUgcGFyc2VkXG4gICAgICAgICAgICBmb3IobGV0IHN1YnIgaW4gZ2x5cGguX3VzZWRTdWJycyl1c2VkX3N1YnJzW2ZkX3NlbGVjdFtmZF1dW3N1YnJdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdG9wRGljdC5GREFycmF5Lmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCBkaWN0ID0gdG9wRGljdC5GREFycmF5W2ldO1xuICAgICAgICAgICAgZGVsZXRlIGRpY3QuRm9udE5hbWU7XG4gICAgICAgICAgICBpZiAoZGljdC5Qcml2YXRlICYmIGRpY3QuUHJpdmF0ZS5TdWJycykge1xuICAgICAgICAgICAgICAgIGRpY3QuUHJpdmF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIGRpY3QuUHJpdmF0ZSk7XG4gICAgICAgICAgICAgICAgZGljdC5Qcml2YXRlLlN1YnJzID0gdGhpcy5zdWJzZXRTdWJycyhkaWN0LlByaXZhdGUuU3VicnMsIHVzZWRfc3VicnNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3JlYXRlQ0lERm9udGRpY3QodG9wRGljdCkge1xuICAgICAgICBsZXQgdXNlZF9zdWJycyA9IHt9O1xuICAgICAgICBmb3IgKGxldCBnaWQgb2YgdGhpcy5nbHlwaHMpe1xuICAgICAgICAgICAgbGV0IGdseXBoID0gdGhpcy5mb250LmdldEdseXBoKGdpZCk7XG4gICAgICAgICAgICBsZXQgcGF0aCA9IGdseXBoLnBhdGg7IC8vIHRoaXMgY2F1c2VzIHRoZSBnbHlwaCB0byBiZSBwYXJzZWRcbiAgICAgICAgICAgIGZvcihsZXQgc3ViciBpbiBnbHlwaC5fdXNlZFN1YnJzKXVzZWRfc3VicnNbc3Vicl0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwcml2YXRlRGljdCA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY2ZmLnRvcERpY3QuUHJpdmF0ZSk7XG4gICAgICAgIGlmICh0aGlzLmNmZi50b3BEaWN0LlByaXZhdGUgJiYgdGhpcy5jZmYudG9wRGljdC5Qcml2YXRlLlN1YnJzKSBwcml2YXRlRGljdC5TdWJycyA9IHRoaXMuc3Vic2V0U3VicnModGhpcy5jZmYudG9wRGljdC5Qcml2YXRlLlN1YnJzLCB1c2VkX3N1YnJzKTtcbiAgICAgICAgdG9wRGljdC5GREFycmF5ID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFByaXZhdGU6IHByaXZhdGVEaWN0XG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiB0b3BEaWN0LkZEU2VsZWN0ID0ge1xuICAgICAgICAgICAgdmVyc2lvbjogMyxcbiAgICAgICAgICAgIG5SYW5nZXM6IDEsXG4gICAgICAgICAgICByYW5nZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0OiAwLFxuICAgICAgICAgICAgICAgICAgICBmZDogMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzZW50aW5lbDogdGhpcy5jaGFyc3RyaW5ncy5sZW5ndGhcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYWRkU3RyaW5nKHN0cmluZykge1xuICAgICAgICBpZiAoIXN0cmluZykgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghdGhpcy5zdHJpbmdzKSB0aGlzLnN0cmluZ3MgPSBbXTtcbiAgICAgICAgdGhpcy5zdHJpbmdzLnB1c2goc3RyaW5nKTtcbiAgICAgICAgcmV0dXJuICgwLCAkMjI5MjI0YWVjNDM3ODNjNSRleHBvcnQkMmUyYmNkODczOWFlMDM5KS5sZW5ndGggKyB0aGlzLnN0cmluZ3MubGVuZ3RoIC0gMTtcbiAgICB9XG4gICAgZW5jb2RlKCkge1xuICAgICAgICB0aGlzLnN1YnNldENoYXJzdHJpbmdzKCk7XG4gICAgICAgIGxldCBjaGFyc2V0ID0ge1xuICAgICAgICAgICAgdmVyc2lvbjogdGhpcy5jaGFyc3RyaW5ncy5sZW5ndGggPiAyNTUgPyAyIDogMSxcbiAgICAgICAgICAgIHJhbmdlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3Q6IDEsXG4gICAgICAgICAgICAgICAgICAgIG5MZWZ0OiB0aGlzLmNoYXJzdHJpbmdzLmxlbmd0aCAtIDJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgICAgIGxldCB0b3BEaWN0ID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jZmYudG9wRGljdCk7XG4gICAgICAgIHRvcERpY3QuUHJpdmF0ZSA9IG51bGw7XG4gICAgICAgIHRvcERpY3QuY2hhcnNldCA9IGNoYXJzZXQ7XG4gICAgICAgIHRvcERpY3QuRW5jb2RpbmcgPSBudWxsO1xuICAgICAgICB0b3BEaWN0LkNoYXJTdHJpbmdzID0gdGhpcy5jaGFyc3RyaW5ncztcbiAgICAgICAgZm9yIChsZXQga2V5IG9mIFtcbiAgICAgICAgICAgICd2ZXJzaW9uJyxcbiAgICAgICAgICAgICdOb3RpY2UnLFxuICAgICAgICAgICAgJ0NvcHlyaWdodCcsXG4gICAgICAgICAgICAnRnVsbE5hbWUnLFxuICAgICAgICAgICAgJ0ZhbWlseU5hbWUnLFxuICAgICAgICAgICAgJ1dlaWdodCcsXG4gICAgICAgICAgICAnUG9zdFNjcmlwdCcsXG4gICAgICAgICAgICAnQmFzZUZvbnROYW1lJyxcbiAgICAgICAgICAgICdGb250TmFtZSdcbiAgICAgICAgXSl0b3BEaWN0W2tleV0gPSB0aGlzLmFkZFN0cmluZyh0aGlzLmNmZi5zdHJpbmcodG9wRGljdFtrZXldKSk7XG4gICAgICAgIHRvcERpY3QuUk9TID0gW1xuICAgICAgICAgICAgdGhpcy5hZGRTdHJpbmcoJ0Fkb2JlJyksXG4gICAgICAgICAgICB0aGlzLmFkZFN0cmluZygnSWRlbnRpdHknKSxcbiAgICAgICAgICAgIDBcbiAgICAgICAgXTtcbiAgICAgICAgdG9wRGljdC5DSURDb3VudCA9IHRoaXMuY2hhcnN0cmluZ3MubGVuZ3RoO1xuICAgICAgICBpZiAodGhpcy5jZmYuaXNDSURGb250KSB0aGlzLnN1YnNldEZvbnRkaWN0KHRvcERpY3QpO1xuICAgICAgICBlbHNlIHRoaXMuY3JlYXRlQ0lERm9udGRpY3QodG9wRGljdCk7XG4gICAgICAgIGxldCB0b3AgPSB7XG4gICAgICAgICAgICB2ZXJzaW9uOiAxLFxuICAgICAgICAgICAgaGRyU2l6ZTogdGhpcy5jZmYuaGRyU2l6ZSxcbiAgICAgICAgICAgIG9mZlNpemU6IDQsXG4gICAgICAgICAgICBoZWFkZXI6IHRoaXMuY2ZmLmhlYWRlcixcbiAgICAgICAgICAgIG5hbWVJbmRleDogW1xuICAgICAgICAgICAgICAgIHRoaXMuY2ZmLnBvc3RzY3JpcHROYW1lXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgdG9wRGljdEluZGV4OiBbXG4gICAgICAgICAgICAgICAgdG9wRGljdFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHN0cmluZ0luZGV4OiB0aGlzLnN0cmluZ3MsXG4gICAgICAgICAgICBnbG9iYWxTdWJySW5kZXg6IHRoaXMuZ3N1YnJzXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiAoMCwgJGI4NGZkM2RkOWQ4ZWRkYjIkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkudG9CdWZmZXIodG9wKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZm9udCl7XG4gICAgICAgIHN1cGVyKGZvbnQpO1xuICAgICAgICB0aGlzLmNmZiA9IHRoaXMuZm9udFsnQ0ZGICddO1xuICAgICAgICBpZiAoIXRoaXMuY2ZmKSB0aHJvdyBuZXcgRXJyb3IoJ05vdCBhIENGRiBGb250Jyk7XG4gICAgfVxufVxuXG5cblxuXG5jbGFzcyAkNGMxNzA5ZGVlNTI4ZWE3NiRleHBvcnQkMmUyYmNkODczOWFlMDM5IHtcbiAgICBzdGF0aWMgcHJvYmUoYnVmZmVyKSB7XG4gICAgICAgIGxldCBmb3JtYXQgPSAoMCwgJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JDNkMjhjMTk5NmNlZDFmMTQpLmRlY29kZShidWZmZXIuc2xpY2UoMCwgNCkpO1xuICAgICAgICByZXR1cm4gZm9ybWF0ID09PSAndHJ1ZScgfHwgZm9ybWF0ID09PSAnT1RUTycgfHwgZm9ybWF0ID09PSBTdHJpbmcuZnJvbUNoYXJDb2RlKDAsIDEsIDAsIDApO1xuICAgIH1cbiAgICBzZXREZWZhdWx0TGFuZ3VhZ2UobGFuZyA9IG51bGwpIHtcbiAgICAgICAgdGhpcy5kZWZhdWx0TGFuZ3VhZ2UgPSBsYW5nO1xuICAgIH1cbiAgICBfZ2V0VGFibGUodGFibGUpIHtcbiAgICAgICAgaWYgKCEodGFibGUudGFnIGluIHRoaXMuX3RhYmxlcykpIHRyeSB7XG4gICAgICAgICAgICB0aGlzLl90YWJsZXNbdGFibGUudGFnXSA9IHRoaXMuX2RlY29kZVRhYmxlKHRhYmxlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKCRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCRiZDVjNWQ4YjhkY2FmZDc4KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZGVjb2RpbmcgdGFibGUgJHt0YWJsZS50YWd9YCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fdGFibGVzW3RhYmxlLnRhZ107XG4gICAgfVxuICAgIF9nZXRUYWJsZVN0cmVhbSh0YWcpIHtcbiAgICAgICAgbGV0IHRhYmxlID0gdGhpcy5kaXJlY3RvcnkudGFibGVzW3RhZ107XG4gICAgICAgIGlmICh0YWJsZSkge1xuICAgICAgICAgICAgdGhpcy5zdHJlYW0ucG9zID0gdGFibGUub2Zmc2V0O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBfZGVjb2RlRGlyZWN0b3J5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3RvcnkgPSAoMCwgJDgxNmMwN2EwNGI2ZGJhODckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkuZGVjb2RlKHRoaXMuc3RyZWFtLCB7XG4gICAgICAgICAgICBfc3RhcnRPZmZzZXQ6IDBcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9kZWNvZGVUYWJsZSh0YWJsZSkge1xuICAgICAgICBsZXQgcG9zID0gdGhpcy5zdHJlYW0ucG9zO1xuICAgICAgICBsZXQgc3RyZWFtID0gdGhpcy5fZ2V0VGFibGVTdHJlYW0odGFibGUudGFnKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9ICgwLCAkYzMzOTU3MjJiZWE3NTFlMiRleHBvcnQkMmUyYmNkODczOWFlMDM5KVt0YWJsZS50YWddLmRlY29kZShzdHJlYW0sIHRoaXMsIHRhYmxlLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuc3RyZWFtLnBvcyA9IHBvcztcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAqIEdldHMgYSBzdHJpbmcgZnJvbSB0aGUgZm9udCdzIGBuYW1lYCB0YWJsZVxuICAgKiBgbGFuZ2AgaXMgYSBCQ1AtNDcgbGFuZ3VhZ2UgY29kZS5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi8gZ2V0TmFtZShrZXksIGxhbmcgPSB0aGlzLmRlZmF1bHRMYW5ndWFnZSB8fCAkZDYzNmJjNzk4ZTcxNzhkYiRleHBvcnQkNDI5NDA4OThkZjgxOTk0MCkge1xuICAgICAgICBsZXQgcmVjb3JkID0gdGhpcy5uYW1lICYmIHRoaXMubmFtZS5yZWNvcmRzW2tleV07XG4gICAgICAgIGlmIChyZWNvcmQpIC8vIEF0dGVtcHQgdG8gcmV0cmlldmUgdGhlIGVudHJ5LCBkZXBlbmRpbmcgb24gd2hpY2ggdHJhbnNsYXRpb24gaXMgYXZhaWxhYmxlOlxuICAgICAgICByZXR1cm4gcmVjb3JkW2xhbmddIHx8IHJlY29yZFt0aGlzLmRlZmF1bHRMYW5ndWFnZV0gfHwgcmVjb3JkWyRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCQ0Mjk0MDg5OGRmODE5OTQwXSB8fCByZWNvcmRbJ2VuJ10gfHwgcmVjb3JkW09iamVjdC5rZXlzKHJlY29yZClbMF1dIC8vIFNlcmlvdXNseSwgQU5ZIGxhbmd1YWdlIHdvdWxkIGJlIGZpbmVcbiAgICAgICAgIHx8IG51bGw7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICogVGhlIHVuaXF1ZSBQb3N0U2NyaXB0IG5hbWUgZm9yIHRoaXMgZm9udCwgZS5nLiBcIkhlbHZldGljYS1Cb2xkXCJcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovIGdldCBwb3N0c2NyaXB0TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TmFtZSgncG9zdHNjcmlwdE5hbWUnKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIFRoZSBmb250J3MgZnVsbCBuYW1lLCBlLmcuIFwiSGVsdmV0aWNhIEJvbGRcIlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi8gZ2V0IGZ1bGxOYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXROYW1lKCdmdWxsTmFtZScpO1xuICAgIH1cbiAgICAvKipcbiAgICogVGhlIGZvbnQncyBmYW1pbHkgbmFtZSwgZS5nLiBcIkhlbHZldGljYVwiXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqLyBnZXQgZmFtaWx5TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TmFtZSgnZm9udEZhbWlseScpO1xuICAgIH1cbiAgICAvKipcbiAgICogVGhlIGZvbnQncyBzdWItZmFtaWx5LCBlLmcuIFwiQm9sZFwiLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi8gZ2V0IHN1YmZhbWlseU5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE5hbWUoJ2ZvbnRTdWJmYW1pbHknKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIFRoZSBmb250J3MgY29weXJpZ2h0IGluZm9ybWF0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqLyBnZXQgY29weXJpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXROYW1lKCdjb3B5cmlnaHQnKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIFRoZSBmb250J3MgdmVyc2lvbiBudW1iZXJcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovIGdldCB2ZXJzaW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXROYW1lKCd2ZXJzaW9uJyk7XG4gICAgfVxuICAgIC8qKlxuICAgKiBUaGUgZm9udOKAmXMgW2FzY2VuZGVyXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Bc2NlbmRlcl8odHlwb2dyYXBoeSkpXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqLyBnZXQgYXNjZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oaGVhLmFzY2VudDtcbiAgICB9XG4gICAgLyoqXG4gICAqIFRoZSBmb2504oCZcyBbZGVzY2VuZGVyXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9EZXNjZW5kZXIpXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqLyBnZXQgZGVzY2VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGhlYS5kZXNjZW50O1xuICAgIH1cbiAgICAvKipcbiAgICogVGhlIGFtb3VudCBvZiBzcGFjZSB0aGF0IHNob3VsZCBiZSBpbmNsdWRlZCBiZXR3ZWVuIGxpbmVzXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqLyBnZXQgbGluZUdhcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGhlYS5saW5lR2FwO1xuICAgIH1cbiAgICAvKipcbiAgICogVGhlIG9mZnNldCBmcm9tIHRoZSBub3JtYWwgdW5kZXJsaW5lIHBvc2l0aW9uIHRoYXQgc2hvdWxkIGJlIHVzZWRcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovIGdldCB1bmRlcmxpbmVQb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zdC51bmRlcmxpbmVQb3NpdGlvbjtcbiAgICB9XG4gICAgLyoqXG4gICAqIFRoZSB3ZWlnaHQgb2YgdGhlIHVuZGVybGluZSB0aGF0IHNob3VsZCBiZSB1c2VkXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqLyBnZXQgdW5kZXJsaW5lVGhpY2tuZXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3N0LnVuZGVybGluZVRoaWNrbmVzcztcbiAgICB9XG4gICAgLyoqXG4gICAqIElmIHRoaXMgaXMgYW4gaXRhbGljIGZvbnQsIHRoZSBhbmdsZSB0aGUgY3Vyc29yIHNob3VsZCBiZSBkcmF3biBhdCB0byBtYXRjaCB0aGUgZm9udCBkZXNpZ25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovIGdldCBpdGFsaWNBbmdsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zdC5pdGFsaWNBbmdsZTtcbiAgICB9XG4gICAgLyoqXG4gICAqIFRoZSBoZWlnaHQgb2YgY2FwaXRhbCBsZXR0ZXJzIGFib3ZlIHRoZSBiYXNlbGluZS5cbiAgICogU2VlIFtoZXJlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DYXBfaGVpZ2h0KSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi8gZ2V0IGNhcEhlaWdodCgpIHtcbiAgICAgICAgbGV0IG9zMiA9IHRoaXNbJ09TLzInXTtcbiAgICAgICAgcmV0dXJuIG9zMiA/IG9zMi5jYXBIZWlnaHQgOiB0aGlzLmFzY2VudDtcbiAgICB9XG4gICAgLyoqXG4gICAqIFRoZSBoZWlnaHQgb2YgbG93ZXIgY2FzZSBsZXR0ZXJzIGluIHRoZSBmb250LlxuICAgKiBTZWUgW2hlcmVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1gtaGVpZ2h0KSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi8gZ2V0IHhIZWlnaHQoKSB7XG4gICAgICAgIGxldCBvczIgPSB0aGlzWydPUy8yJ107XG4gICAgICAgIHJldHVybiBvczIgPyBvczIueEhlaWdodCA6IDA7XG4gICAgfVxuICAgIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIGdseXBocyBpbiB0aGUgZm9udC5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovIGdldCBudW1HbHlwaHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heHAubnVtR2x5cGhzO1xuICAgIH1cbiAgICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGZvbnTigJlzIGludGVybmFsIGNvb3JkaW5hdGUgZ3JpZFxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi8gZ2V0IHVuaXRzUGVyRW0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhlYWQudW5pdHNQZXJFbTtcbiAgICB9XG4gICAgLyoqXG4gICAqIFRoZSBmb2504oCZcyBib3VuZGluZyBib3gsIGkuZS4gdGhlIGJveCB0aGF0IGVuY2xvc2VzIGFsbCBnbHlwaHMgaW4gdGhlIGZvbnQuXG4gICAqIEB0eXBlIHtCQm94fVxuICAgKi8gZ2V0IGJib3goKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKG5ldyAoMCwgJGYzNDYwMGFiOWQ3ZjcwZDgkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkodGhpcy5oZWFkLnhNaW4sIHRoaXMuaGVhZC55TWluLCB0aGlzLmhlYWQueE1heCwgdGhpcy5oZWFkLnlNYXgpKTtcbiAgICB9XG4gICAgZ2V0IF9jbWFwUHJvY2Vzc29yKCkge1xuICAgICAgICByZXR1cm4gbmV3ICgwLCAkZjA4ZGQ0MWVmMTBiNjk0YyRleHBvcnQkMmUyYmNkODczOWFlMDM5KSh0aGlzLmNtYXApO1xuICAgIH1cbiAgICAvKipcbiAgICogQW4gYXJyYXkgb2YgYWxsIG9mIHRoZSB1bmljb2RlIGNvZGUgcG9pbnRzIHN1cHBvcnRlZCBieSB0aGUgZm9udC5cbiAgICogQHR5cGUge251bWJlcltdfVxuICAgKi8gZ2V0IGNoYXJhY3RlclNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NtYXBQcm9jZXNzb3IuZ2V0Q2hhcmFjdGVyU2V0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlcmUgaXMgZ2x5cGggaW4gdGhlIGZvbnQgZm9yIHRoZSBnaXZlbiB1bmljb2RlIGNvZGUgcG9pbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlUG9pbnRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovIGhhc0dseXBoRm9yQ29kZVBvaW50KGNvZGVQb2ludCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9jbWFwUHJvY2Vzc29yLmxvb2t1cChjb2RlUG9pbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICogTWFwcyBhIHNpbmdsZSB1bmljb2RlIGNvZGUgcG9pbnQgdG8gYSBHbHlwaCBvYmplY3QuXG4gICAqIERvZXMgbm90IHBlcmZvcm0gYW55IGFkdmFuY2VkIHN1YnN0aXR1dGlvbnMgKHRoZXJlIGlzIG5vIGNvbnRleHQgdG8gZG8gc28pLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gY29kZVBvaW50XG4gICAqIEByZXR1cm4ge0dseXBofVxuICAgKi8gZ2x5cGhGb3JDb2RlUG9pbnQoY29kZVBvaW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEdseXBoKHRoaXMuX2NtYXBQcm9jZXNzb3IubG9va3VwKGNvZGVQb2ludCksIFtcbiAgICAgICAgICAgIGNvZGVQb2ludFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2YgR2x5cGggb2JqZWN0cyBmb3IgdGhlIGdpdmVuIHN0cmluZy5cbiAgICogVGhpcyBpcyBvbmx5IGEgb25lLXRvLW9uZSBtYXBwaW5nIGZyb20gY2hhcmFjdGVycyB0byBnbHlwaHMuXG4gICAqIEZvciBtb3N0IHVzZXMsIHlvdSBzaG91bGQgdXNlIGZvbnQubGF5b3V0IChkZXNjcmliZWQgYmVsb3cpLCB3aGljaFxuICAgKiBwcm92aWRlcyBhIG11Y2ggbW9yZSBhZHZhbmNlZCBtYXBwaW5nIHN1cHBvcnRpbmcgQUFUIGFuZCBPcGVuVHlwZSBzaGFwaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gICAqIEByZXR1cm4ge0dseXBoW119XG4gICAqLyBnbHlwaHNGb3JTdHJpbmcoc3RyaW5nKSB7XG4gICAgICAgIGxldCBnbHlwaHMgPSBbXTtcbiAgICAgICAgbGV0IGxlbiA9IHN0cmluZy5sZW5ndGg7XG4gICAgICAgIGxldCBpZHggPSAwO1xuICAgICAgICBsZXQgbGFzdCA9IC0xO1xuICAgICAgICBsZXQgc3RhdGUgPSAtMTtcbiAgICAgICAgd2hpbGUoaWR4IDw9IGxlbil7XG4gICAgICAgICAgICBsZXQgY29kZSA9IDA7XG4gICAgICAgICAgICBsZXQgbmV4dFN0YXRlID0gMDtcbiAgICAgICAgICAgIGlmIChpZHggPCBsZW4pIHtcbiAgICAgICAgICAgICAgICAvLyBEZWNvZGUgdGhlIG5leHQgY29kZXBvaW50IGZyb20gVVRGIDE2XG4gICAgICAgICAgICAgICAgY29kZSA9IHN0cmluZy5jaGFyQ29kZUF0KGlkeCsrKTtcbiAgICAgICAgICAgICAgICBpZiAoMHhkODAwIDw9IGNvZGUgJiYgY29kZSA8PSAweGRiZmYgJiYgaWR4IDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gc3RyaW5nLmNoYXJDb2RlQXQoaWR4KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKDB4ZGMwMCA8PSBuZXh0ICYmIG5leHQgPD0gMHhkZmZmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZHgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgPSAoKGNvZGUgJiAweDNmZikgPDwgMTApICsgKG5leHQgJiAweDNmZikgKyAweDEwMDAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIENvbXB1dGUgdGhlIG5leHQgc3RhdGU6IDEgaWYgdGhlIG5leHQgY29kZXBvaW50IGlzIGEgdmFyaWF0aW9uIHNlbGVjdG9yLCAwIG90aGVyd2lzZS5cbiAgICAgICAgICAgICAgICBuZXh0U3RhdGUgPSAweGZlMDAgPD0gY29kZSAmJiBjb2RlIDw9IDB4ZmUwZiB8fCAweGUwMTAwIDw9IGNvZGUgJiYgY29kZSA8PSAweGUwMWVmID8gMSA6IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWR4Kys7XG4gICAgICAgICAgICBpZiAoc3RhdGUgPT09IDAgJiYgbmV4dFN0YXRlID09PSAxKSAvLyBWYXJpYXRpb24gc2VsZWN0b3IgZm9sbG93aW5nIG5vcm1hbCBjb2RlcG9pbnQuXG4gICAgICAgICAgICBnbHlwaHMucHVzaCh0aGlzLmdldEdseXBoKHRoaXMuX2NtYXBQcm9jZXNzb3IubG9va3VwKGxhc3QsIGNvZGUpLCBbXG4gICAgICAgICAgICAgICAgbGFzdCxcbiAgICAgICAgICAgICAgICBjb2RlXG4gICAgICAgICAgICBdKSk7XG4gICAgICAgICAgICBlbHNlIGlmIChzdGF0ZSA9PT0gMCAmJiBuZXh0U3RhdGUgPT09IDApIC8vIE5vcm1hbCBjb2RlcG9pbnQgZm9sbG93aW5nIG5vcm1hbCBjb2RlcG9pbnQuXG4gICAgICAgICAgICBnbHlwaHMucHVzaCh0aGlzLmdseXBoRm9yQ29kZVBvaW50KGxhc3QpKTtcbiAgICAgICAgICAgIGxhc3QgPSBjb2RlO1xuICAgICAgICAgICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdseXBocztcbiAgICB9XG4gICAgZ2V0IF9sYXlvdXRFbmdpbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgKDAsICQ0YzBhN2ZhNWRmN2E5YWIxJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICogUmV0dXJucyBhIEdseXBoUnVuIG9iamVjdCwgd2hpY2ggaW5jbHVkZXMgYW4gYXJyYXkgb2YgR2x5cGhzIGFuZCBHbHlwaFBvc2l0aW9ucyBmb3IgdGhlIGdpdmVuIHN0cmluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbdXNlckZlYXR1cmVzXVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3NjcmlwdF1cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsYW5ndWFnZV1cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtkaXJlY3Rpb25dXG4gICAqIEByZXR1cm4ge0dseXBoUnVufVxuICAgKi8gbGF5b3V0KHN0cmluZywgdXNlckZlYXR1cmVzLCBzY3JpcHQsIGxhbmd1YWdlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xheW91dEVuZ2luZS5sYXlvdXQoc3RyaW5nLCB1c2VyRmVhdHVyZXMsIHNjcmlwdCwgbGFuZ3VhZ2UsIGRpcmVjdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIHN0cmluZ3MgdGhhdCBtYXAgdG8gdGhlIGdpdmVuIGdseXBoIGlkLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZ2lkIC0gZ2x5cGggaWRcbiAgICovIHN0cmluZ3NGb3JHbHlwaChnaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xheW91dEVuZ2luZS5zdHJpbmdzRm9yR2x5cGgoZ2lkKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIEFuIGFycmF5IG9mIGFsbCBbT3BlblR5cGUgZmVhdHVyZSB0YWdzXShodHRwczovL3d3dy5taWNyb3NvZnQuY29tL3R5cG9ncmFwaHkvb3RzcGVjL2ZlYXR1cmV0YWdzLmh0bSlcbiAgICogKG9yIG1hcHBlZCBBQVQgdGFncykgc3VwcG9ydGVkIGJ5IHRoZSBmb250LlxuICAgKiBUaGUgZmVhdHVyZXMgcGFyYW1ldGVyIGlzIGFuIGFycmF5IG9mIE9wZW5UeXBlIGZlYXR1cmUgdGFncyB0byBiZSBhcHBsaWVkIGluIGFkZGl0aW9uIHRvIHRoZSBkZWZhdWx0IHNldC5cbiAgICogSWYgdGhpcyBpcyBhbiBBQVQgZm9udCwgdGhlIE9wZW5UeXBlIGZlYXR1cmUgdGFncyBhcmUgbWFwcGVkIHRvIEFBVCBmZWF0dXJlcy5cbiAgICpcbiAgICogQHR5cGUge3N0cmluZ1tdfVxuICAgKi8gZ2V0IGF2YWlsYWJsZUZlYXR1cmVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGF5b3V0RW5naW5lLmdldEF2YWlsYWJsZUZlYXR1cmVzKCk7XG4gICAgfVxuICAgIGdldEF2YWlsYWJsZUZlYXR1cmVzKHNjcmlwdCwgbGFuZ3VhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xheW91dEVuZ2luZS5nZXRBdmFpbGFibGVGZWF0dXJlcyhzY3JpcHQsIGxhbmd1YWdlKTtcbiAgICB9XG4gICAgX2dldEJhc2VHbHlwaChnbHlwaCwgY2hhcmFjdGVycyA9IFtdKSB7XG4gICAgICAgIGlmICghdGhpcy5fZ2x5cGhzW2dseXBoXSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0b3J5LnRhYmxlcy5nbHlmKSB0aGlzLl9nbHlwaHNbZ2x5cGhdID0gbmV3ICgwLCAkNjlhYWMxNjAyOTk2ODY5MiRleHBvcnQkMmUyYmNkODczOWFlMDM5KShnbHlwaCwgY2hhcmFjdGVycywgdGhpcyk7XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmRpcmVjdG9yeS50YWJsZXNbJ0NGRiAnXSB8fCB0aGlzLmRpcmVjdG9yeS50YWJsZXMuQ0ZGMikgdGhpcy5fZ2x5cGhzW2dseXBoXSA9IG5ldyAoMCwgJDYyY2M1MTA5YzYxMDE4OTMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoZ2x5cGgsIGNoYXJhY3RlcnMsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9nbHlwaHNbZ2x5cGhdIHx8IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgKiBSZXR1cm5zIGEgZ2x5cGggb2JqZWN0IGZvciB0aGUgZ2l2ZW4gZ2x5cGggaWQuXG4gICAqIFlvdSBjYW4gcGFzcyB0aGUgYXJyYXkgb2YgY29kZSBwb2ludHMgdGhpcyBnbHlwaCByZXByZXNlbnRzIGZvclxuICAgKiB5b3VyIHVzZSBsYXRlciwgYW5kIGl0IHdpbGwgYmUgc3RvcmVkIGluIHRoZSBnbHlwaCBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBnbHlwaFxuICAgKiBAcGFyYW0ge251bWJlcltdfSBjaGFyYWN0ZXJzXG4gICAqIEByZXR1cm4ge0dseXBofVxuICAgKi8gZ2V0R2x5cGgoZ2x5cGgsIGNoYXJhY3RlcnMgPSBbXSkge1xuICAgICAgICBpZiAoIXRoaXMuX2dseXBoc1tnbHlwaF0pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdG9yeS50YWJsZXMuc2JpeCkgdGhpcy5fZ2x5cGhzW2dseXBoXSA9IG5ldyAoMCwgJDI1ZDhmMDQ5YzIyMjA4NGMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoZ2x5cGgsIGNoYXJhY3RlcnMsIHRoaXMpO1xuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5kaXJlY3RvcnkudGFibGVzLkNPTFIgJiYgdGhpcy5kaXJlY3RvcnkudGFibGVzLkNQQUwpIHRoaXMuX2dseXBoc1tnbHlwaF0gPSBuZXcgKDAsICQwZDQxMWYwMTY1ODU5NjgxJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKGdseXBoLCBjaGFyYWN0ZXJzLCB0aGlzKTtcbiAgICAgICAgICAgIGVsc2UgdGhpcy5fZ2V0QmFzZUdseXBoKGdseXBoLCBjaGFyYWN0ZXJzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZ2x5cGhzW2dseXBoXSB8fCBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICogUmV0dXJucyBhIFN1YnNldCBmb3IgdGhpcyBmb250LlxuICAgKiBAcmV0dXJuIHtTdWJzZXR9XG4gICAqLyBjcmVhdGVTdWJzZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmRpcmVjdG9yeS50YWJsZXNbJ0NGRiAnXSkgcmV0dXJuIG5ldyAoMCwgJDAwMWQ3Mzk0MjhhNzFkNWEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkodGhpcyk7XG4gICAgICAgIHJldHVybiBuZXcgKDAsICQ0YWJiYjZhNWRiZGM0NDFhJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3QgZGVzY3JpYmluZyB0aGUgYXZhaWxhYmxlIHZhcmlhdGlvbiBheGVzXG4gICAqIHRoYXQgdGhpcyBmb250IHN1cHBvcnRzLiBLZXlzIGFyZSBzZXR0aW5nIHRhZ3MsIGFuZCB2YWx1ZXNcbiAgICogY29udGFpbiB0aGUgYXhpcyBuYW1lLCByYW5nZSwgYW5kIGRlZmF1bHQgdmFsdWUuXG4gICAqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqLyBnZXQgdmFyaWF0aW9uQXhlcygpIHtcbiAgICAgICAgbGV0IHJlcyA9IHt9O1xuICAgICAgICBpZiAoIXRoaXMuZnZhcikgcmV0dXJuIHJlcztcbiAgICAgICAgZm9yIChsZXQgYXhpcyBvZiB0aGlzLmZ2YXIuYXhpcylyZXNbYXhpcy5heGlzVGFnLnRyaW0oKV0gPSB7XG4gICAgICAgICAgICBuYW1lOiBheGlzLm5hbWUuZW4sXG4gICAgICAgICAgICBtaW46IGF4aXMubWluVmFsdWUsXG4gICAgICAgICAgICBkZWZhdWx0OiBheGlzLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgIG1heDogYXhpcy5tYXhWYWx1ZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3QgZGVzY3JpYmluZyB0aGUgbmFtZWQgdmFyaWF0aW9uIGluc3RhbmNlc1xuICAgKiB0aGF0IHRoZSBmb250IGRlc2lnbmVyIGhhcyBzcGVjaWZpZWQuIEtleXMgYXJlIHZhcmlhdGlvbiBuYW1lc1xuICAgKiBhbmQgdmFsdWVzIGFyZSB0aGUgdmFyaWF0aW9uIHNldHRpbmdzIGZvciB0aGlzIGluc3RhbmNlLlxuICAgKlxuICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgKi8gZ2V0IG5hbWVkVmFyaWF0aW9ucygpIHtcbiAgICAgICAgbGV0IHJlcyA9IHt9O1xuICAgICAgICBpZiAoIXRoaXMuZnZhcikgcmV0dXJuIHJlcztcbiAgICAgICAgZm9yIChsZXQgaW5zdGFuY2Ugb2YgdGhpcy5mdmFyLmluc3RhbmNlKXtcbiAgICAgICAgICAgIGxldCBzZXR0aW5ncyA9IHt9O1xuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuZnZhci5heGlzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBsZXQgYXhpcyA9IHRoaXMuZnZhci5heGlzW2ldO1xuICAgICAgICAgICAgICAgIHNldHRpbmdzW2F4aXMuYXhpc1RhZy50cmltKCldID0gaW5zdGFuY2UuY29vcmRbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNbaW5zdGFuY2UubmFtZS5lbl0gPSBzZXR0aW5ncztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBmb250IHdpdGggdGhlIGdpdmVuIHZhcmlhdGlvbiBzZXR0aW5ncyBhcHBsaWVkLlxuICAgKiBTZXR0aW5ncyBjYW4gZWl0aGVyIGJlIGFuIGluc3RhbmNlIG5hbWUsIG9yIGFuIG9iamVjdCBjb250YWluaW5nXG4gICAqIHZhcmlhdGlvbiB0YWdzIGFzIHNwZWNpZmllZCBieSB0aGUgYHZhcmlhdGlvbkF4ZXNgIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3NcbiAgICogQHJldHVybiB7VFRGRm9udH1cbiAgICovIGdldFZhcmlhdGlvbihzZXR0aW5ncykge1xuICAgICAgICBpZiAoISh0aGlzLmRpcmVjdG9yeS50YWJsZXMuZnZhciAmJiAodGhpcy5kaXJlY3RvcnkudGFibGVzLmd2YXIgJiYgdGhpcy5kaXJlY3RvcnkudGFibGVzLmdseWYgfHwgdGhpcy5kaXJlY3RvcnkudGFibGVzLkNGRjIpKSkgdGhyb3cgbmV3IEVycm9yKCdWYXJpYXRpb25zIHJlcXVpcmUgYSBmb250IHdpdGggdGhlIGZ2YXIsIGd2YXIgYW5kIGdseWYsIG9yIENGRjIgdGFibGVzLicpO1xuICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzID09PSAnc3RyaW5nJykgc2V0dGluZ3MgPSB0aGlzLm5hbWVkVmFyaWF0aW9uc1tzZXR0aW5nc107XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0dGluZ3MgIT09ICdvYmplY3QnKSB0aHJvdyBuZXcgRXJyb3IoJ1ZhcmlhdGlvbiBzZXR0aW5ncyBtdXN0IGJlIGVpdGhlciBhIHZhcmlhdGlvbiBuYW1lIG9yIHNldHRpbmdzIG9iamVjdC4nKTtcbiAgICAgICAgLy8gbm9ybWFsaXplIHRoZSBjb29yZGluYXRlc1xuICAgICAgICBsZXQgY29vcmRzID0gdGhpcy5mdmFyLmF4aXMubWFwKChheGlzLCBpKT0+e1xuICAgICAgICAgICAgbGV0IGF4aXNUYWcgPSBheGlzLmF4aXNUYWcudHJpbSgpO1xuICAgICAgICAgICAgaWYgKGF4aXNUYWcgaW4gc2V0dGluZ3MpIHJldHVybiBNYXRoLm1heChheGlzLm1pblZhbHVlLCBNYXRoLm1pbihheGlzLm1heFZhbHVlLCBzZXR0aW5nc1theGlzVGFnXSkpO1xuICAgICAgICAgICAgZWxzZSByZXR1cm4gYXhpcy5kZWZhdWx0VmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgc3RyZWFtID0gbmV3ICQ1MlpJZiREZWNvZGVTdHJlYW0odGhpcy5zdHJlYW0uYnVmZmVyKTtcbiAgICAgICAgc3RyZWFtLnBvcyA9IHRoaXMuX2RpcmVjdG9yeVBvcztcbiAgICAgICAgbGV0IGZvbnQgPSBuZXcgJDRjMTcwOWRlZTUyOGVhNzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOShzdHJlYW0sIGNvb3Jkcyk7XG4gICAgICAgIGZvbnQuX3RhYmxlcyA9IHRoaXMuX3RhYmxlcztcbiAgICAgICAgcmV0dXJuIGZvbnQ7XG4gICAgfVxuICAgIGdldCBfdmFyaWF0aW9uUHJvY2Vzc29yKCkge1xuICAgICAgICBpZiAoIXRoaXMuZnZhcikgcmV0dXJuIG51bGw7XG4gICAgICAgIGxldCB2YXJpYXRpb25Db29yZHMgPSB0aGlzLnZhcmlhdGlvbkNvb3JkcztcbiAgICAgICAgLy8gSWdub3JlIGlmIG5vIHZhcmlhdGlvbiBjb29yZHMgYW5kIG5vdCBDRkYyXG4gICAgICAgIGlmICghdmFyaWF0aW9uQ29vcmRzICYmICF0aGlzLkNGRjIpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoIXZhcmlhdGlvbkNvb3JkcykgdmFyaWF0aW9uQ29vcmRzID0gdGhpcy5mdmFyLmF4aXMubWFwKChheGlzKT0+YXhpcy5kZWZhdWx0VmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3ICgwLCAkMGJiODQwY2FjMDRlOTExYiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSh0aGlzLCB2YXJpYXRpb25Db29yZHMpO1xuICAgIH1cbiAgICAvLyBTdGFuZGFyZGl6ZWQgZm9ybWF0IHBsdWdpbiBBUElcbiAgICBnZXRGb250KG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFyaWF0aW9uKG5hbWUpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihzdHJlYW0sIHZhcmlhdGlvbkNvb3JkcyA9IG51bGwpe1xuICAgICAgICAoMCwgJDUyWklmJF8pKHRoaXMsIFwidHlwZVwiLCAnVFRGJyk7XG4gICAgICAgIHRoaXMuZGVmYXVsdExhbmd1YWdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdHJlYW0gPSBzdHJlYW07XG4gICAgICAgIHRoaXMudmFyaWF0aW9uQ29vcmRzID0gdmFyaWF0aW9uQ29vcmRzO1xuICAgICAgICB0aGlzLl9kaXJlY3RvcnlQb3MgPSB0aGlzLnN0cmVhbS5wb3M7XG4gICAgICAgIHRoaXMuX3RhYmxlcyA9IHt9O1xuICAgICAgICB0aGlzLl9nbHlwaHMgPSB7fTtcbiAgICAgICAgdGhpcy5fZGVjb2RlRGlyZWN0b3J5KCk7XG4gICAgICAgIC8vIGRlZmluZSBwcm9wZXJ0aWVzIGZvciBlYWNoIHRhYmxlIHRvIGxhemlseSBwYXJzZVxuICAgICAgICBmb3IobGV0IHRhZyBpbiB0aGlzLmRpcmVjdG9yeS50YWJsZXMpe1xuICAgICAgICAgICAgbGV0IHRhYmxlID0gdGhpcy5kaXJlY3RvcnkudGFibGVzW3RhZ107XG4gICAgICAgICAgICBpZiAoKDAsICRjMzM5NTcyMmJlYTc1MWUyJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpW3RhZ10gJiYgdGFibGUubGVuZ3RoID4gMCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIHRhZywge1xuICAgICAgICAgICAgICAgIGdldDogdGhpcy5fZ2V0VGFibGUuYmluZCh0aGlzLCB0YWJsZSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuKDAsICQ1MlpJZiRfMSkoW1xuICAgICgwLCAkZTcxNTY1ZjJjZTA5Y2I2YiRleHBvcnQkNjlhMzIwOWYxYTA2YzA0ZClcbl0sICQ0YzE3MDlkZWU1MjhlYTc2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkucHJvdG90eXBlLCBcImJib3hcIiwgbnVsbCk7XG4oMCwgJDUyWklmJF8xKShbXG4gICAgKDAsICRlNzE1NjVmMmNlMDljYjZiJGV4cG9ydCQ2OWEzMjA5ZjFhMDZjMDRkKVxuXSwgJDRjMTcwOWRlZTUyOGVhNzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5wcm90b3R5cGUsIFwiX2NtYXBQcm9jZXNzb3JcIiwgbnVsbCk7XG4oMCwgJDUyWklmJF8xKShbXG4gICAgKDAsICRlNzE1NjVmMmNlMDljYjZiJGV4cG9ydCQ2OWEzMjA5ZjFhMDZjMDRkKVxuXSwgJDRjMTcwOWRlZTUyOGVhNzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5wcm90b3R5cGUsIFwiY2hhcmFjdGVyU2V0XCIsIG51bGwpO1xuKDAsICQ1MlpJZiRfMSkoW1xuICAgICgwLCAkZTcxNTY1ZjJjZTA5Y2I2YiRleHBvcnQkNjlhMzIwOWYxYTA2YzA0ZClcbl0sICQ0YzE3MDlkZWU1MjhlYTc2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkucHJvdG90eXBlLCBcIl9sYXlvdXRFbmdpbmVcIiwgbnVsbCk7XG4oMCwgJDUyWklmJF8xKShbXG4gICAgKDAsICRlNzE1NjVmMmNlMDljYjZiJGV4cG9ydCQ2OWEzMjA5ZjFhMDZjMDRkKVxuXSwgJDRjMTcwOWRlZTUyOGVhNzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5wcm90b3R5cGUsIFwidmFyaWF0aW9uQXhlc1wiLCBudWxsKTtcbigwLCAkNTJaSWYkXzEpKFtcbiAgICAoMCwgJGU3MTU2NWYyY2UwOWNiNmIkZXhwb3J0JDY5YTMyMDlmMWEwNmMwNGQpXG5dLCAkNGMxNzA5ZGVlNTI4ZWE3NiRleHBvcnQkMmUyYmNkODczOWFlMDM5LnByb3RvdHlwZSwgXCJuYW1lZFZhcmlhdGlvbnNcIiwgbnVsbCk7XG4oMCwgJDUyWklmJF8xKShbXG4gICAgKDAsICRlNzE1NjVmMmNlMDljYjZiJGV4cG9ydCQ2OWEzMjA5ZjFhMDZjMDRkKVxuXSwgJDRjMTcwOWRlZTUyOGVhNzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5wcm90b3R5cGUsIFwiX3ZhcmlhdGlvblByb2Nlc3NvclwiLCBudWxsKTtcblxuXG5cblxuXG5cbmxldCAkYzE3MjYzNTVlY2M1Yjg4OSR2YXIkV09GRkRpcmVjdG9yeUVudHJ5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHRhZzogbmV3ICQ1MlpJZiRTdHJpbmcoNCksXG4gICAgb2Zmc2V0OiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgJ3ZvaWQnLCB7XG4gICAgICAgIHR5cGU6ICdnbG9iYWwnXG4gICAgfSksXG4gICAgY29tcExlbmd0aDogJDUyWklmJHVpbnQzMixcbiAgICBsZW5ndGg6ICQ1MlpJZiR1aW50MzIsXG4gICAgb3JpZ0NoZWNrc3VtOiAkNTJaSWYkdWludDMyXG59KTtcbmxldCAkYzE3MjYzNTVlY2M1Yjg4OSR2YXIkV09GRkRpcmVjdG9yeSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB0YWc6IG5ldyAkNTJaSWYkU3RyaW5nKDQpLFxuICAgIGZsYXZvcjogJDUyWklmJHVpbnQzMixcbiAgICBsZW5ndGg6ICQ1MlpJZiR1aW50MzIsXG4gICAgbnVtVGFibGVzOiAkNTJaSWYkdWludDE2LFxuICAgIHJlc2VydmVkOiBuZXcgJDUyWklmJFJlc2VydmVkKCQ1MlpJZiR1aW50MTYpLFxuICAgIHRvdGFsU2ZudFNpemU6ICQ1MlpJZiR1aW50MzIsXG4gICAgbWFqb3JWZXJzaW9uOiAkNTJaSWYkdWludDE2LFxuICAgIG1pbm9yVmVyc2lvbjogJDUyWklmJHVpbnQxNixcbiAgICBtZXRhT2Zmc2V0OiAkNTJaSWYkdWludDMyLFxuICAgIG1ldGFMZW5ndGg6ICQ1MlpJZiR1aW50MzIsXG4gICAgbWV0YU9yaWdMZW5ndGg6ICQ1MlpJZiR1aW50MzIsXG4gICAgcHJpdk9mZnNldDogJDUyWklmJHVpbnQzMixcbiAgICBwcml2TGVuZ3RoOiAkNTJaSWYkdWludDMyLFxuICAgIHRhYmxlczogbmV3ICQ1MlpJZiRBcnJheSgkYzE3MjYzNTVlY2M1Yjg4OSR2YXIkV09GRkRpcmVjdG9yeUVudHJ5LCAnbnVtVGFibGVzJylcbn0pO1xuJGMxNzI2MzU1ZWNjNWI4ODkkdmFyJFdPRkZEaXJlY3RvcnkucHJvY2VzcyA9IGZ1bmN0aW9uKCkge1xuICAgIGxldCB0YWJsZXMgPSB7fTtcbiAgICBmb3IgKGxldCB0YWJsZSBvZiB0aGlzLnRhYmxlcyl0YWJsZXNbdGFibGUudGFnXSA9IHRhYmxlO1xuICAgIHRoaXMudGFibGVzID0gdGFibGVzO1xufTtcbnZhciAkYzE3MjYzNTVlY2M1Yjg4OSRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gJGMxNzI2MzU1ZWNjNWI4ODkkdmFyJFdPRkZEaXJlY3Rvcnk7XG5cblxuXG5cblxuXG5jbGFzcyAkNzYwNzg1MjE0YjlmYzUyYyRleHBvcnQkMmUyYmNkODczOWFlMDM5IGV4dGVuZHMgKDAsICQ0YzE3MDlkZWU1MjhlYTc2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpIHtcbiAgICBzdGF0aWMgcHJvYmUoYnVmZmVyKSB7XG4gICAgICAgIHJldHVybiAoMCwgJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JDNkMjhjMTk5NmNlZDFmMTQpLmRlY29kZShidWZmZXIuc2xpY2UoMCwgNCkpID09PSAnd09GRic7XG4gICAgfVxuICAgIF9kZWNvZGVEaXJlY3RvcnkoKSB7XG4gICAgICAgIHRoaXMuZGlyZWN0b3J5ID0gKDAsICRjMTcyNjM1NWVjYzViODg5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLmRlY29kZSh0aGlzLnN0cmVhbSwge1xuICAgICAgICAgICAgX3N0YXJ0T2Zmc2V0OiAwXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfZ2V0VGFibGVTdHJlYW0odGFnKSB7XG4gICAgICAgIGxldCB0YWJsZSA9IHRoaXMuZGlyZWN0b3J5LnRhYmxlc1t0YWddO1xuICAgICAgICBpZiAodGFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtLnBvcyA9IHRhYmxlLm9mZnNldDtcbiAgICAgICAgICAgIGlmICh0YWJsZS5jb21wTGVuZ3RoIDwgdGFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdHJlYW0ucG9zICs9IDI7IC8vIHNraXAgZGVmbGF0ZSBoZWFkZXJcbiAgICAgICAgICAgICAgICBsZXQgb3V0QnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkodGFibGUubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBsZXQgYnVmID0gKDAsICQ1MlpJZiR0aW55aW5mbGF0ZSkodGhpcy5zdHJlYW0ucmVhZEJ1ZmZlcih0YWJsZS5jb21wTGVuZ3RoIC0gMiksIG91dEJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAkNTJaSWYkRGVjb2RlU3RyZWFtKGJ1Zik7XG4gICAgICAgICAgICB9IGVsc2UgcmV0dXJuIHRoaXMuc3RyZWFtO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvciguLi5hcmdzKXtcbiAgICAgICAgc3VwZXIoLi4uYXJncyk7XG4gICAgICAgICgwLCAkNTJaSWYkXykodGhpcywgXCJ0eXBlXCIsICdXT0ZGJyk7XG4gICAgfVxufVxuXG5cblxuXG5cblxuXG5cblxuY2xhc3MgJDgwNDYxOTBjOWYxYWQxOWUkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSBleHRlbmRzICgwLCAkNjlhYWMxNjAyOTk2ODY5MiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSB7XG4gICAgX2RlY29kZSgpIHtcbiAgICAgICAgLy8gV2UgaGF2ZSB0byBkZWNvZGUgaW4gYWR2YW5jZSAoaW4gV09GRjJGb250KSwgc28ganVzdCByZXR1cm4gdGhlIHByZS1kZWNvZGVkIGRhdGEuXG4gICAgICAgIHJldHVybiB0aGlzLl9mb250Ll90cmFuc2Zvcm1lZEdseXBoc1t0aGlzLmlkXTtcbiAgICB9XG4gICAgX2dldENCb3goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhdGguYmJveDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoLi4uYXJncyl7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3MpO1xuICAgICAgICAoMCwgJDUyWklmJF8pKHRoaXMsIFwidHlwZVwiLCAnV09GRjInKTtcbiAgICB9XG59XG5cblxuXG5jb25zdCAkYzI4ZWM3YmJiM2I4ZGUzYSR2YXIkQmFzZTEyOCA9IHtcbiAgICBkZWNvZGUgKHN0cmVhbSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gMDtcbiAgICAgICAgbGV0IGl0ZXJhYmxlID0gW1xuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDRcbiAgICAgICAgXTtcbiAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IGl0ZXJhYmxlLmxlbmd0aDsgaisrKXtcbiAgICAgICAgICAgIGxldCBpID0gaXRlcmFibGVbal07XG4gICAgICAgICAgICBsZXQgY29kZSA9IHN0cmVhbS5yZWFkVUludDgoKTtcbiAgICAgICAgICAgIC8vIElmIGFueSBvZiB0aGUgdG9wIHNldmVuIGJpdHMgYXJlIHNldCB0aGVuIHdlJ3JlIGFib3V0IHRvIG92ZXJmbG93LlxuICAgICAgICAgICAgaWYgKHJlc3VsdCAmIDB4ZTAwMDAwMDApIHRocm93IG5ldyBFcnJvcignT3ZlcmZsb3cnKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCA8PCA3IHwgY29kZSAmIDB4N2Y7XG4gICAgICAgICAgICBpZiAoKGNvZGUgJiAweDgwKSA9PT0gMCkgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JhZCBiYXNlIDEyOCBudW1iZXInKTtcbiAgICB9XG59O1xubGV0ICRjMjhlYzdiYmIzYjhkZTNhJHZhciRrbm93blRhZ3MgPSBbXG4gICAgJ2NtYXAnLFxuICAgICdoZWFkJyxcbiAgICAnaGhlYScsXG4gICAgJ2htdHgnLFxuICAgICdtYXhwJyxcbiAgICAnbmFtZScsXG4gICAgJ09TLzInLFxuICAgICdwb3N0JyxcbiAgICAnY3Z0ICcsXG4gICAgJ2ZwZ20nLFxuICAgICdnbHlmJyxcbiAgICAnbG9jYScsXG4gICAgJ3ByZXAnLFxuICAgICdDRkYgJyxcbiAgICAnVk9SRycsXG4gICAgJ0VCRFQnLFxuICAgICdFQkxDJyxcbiAgICAnZ2FzcCcsXG4gICAgJ2hkbXgnLFxuICAgICdrZXJuJyxcbiAgICAnTFRTSCcsXG4gICAgJ1BDTFQnLFxuICAgICdWRE1YJyxcbiAgICAndmhlYScsXG4gICAgJ3ZtdHgnLFxuICAgICdCQVNFJyxcbiAgICAnR0RFRicsXG4gICAgJ0dQT1MnLFxuICAgICdHU1VCJyxcbiAgICAnRUJTQycsXG4gICAgJ0pTVEYnLFxuICAgICdNQVRIJyxcbiAgICAnQ0JEVCcsXG4gICAgJ0NCTEMnLFxuICAgICdDT0xSJyxcbiAgICAnQ1BBTCcsXG4gICAgJ1NWRyAnLFxuICAgICdzYml4JyxcbiAgICAnYWNudCcsXG4gICAgJ2F2YXInLFxuICAgICdiZGF0JyxcbiAgICAnYmxvYycsXG4gICAgJ2JzbG4nLFxuICAgICdjdmFyJyxcbiAgICAnZmRzYycsXG4gICAgJ2ZlYXQnLFxuICAgICdmbXR4JyxcbiAgICAnZnZhcicsXG4gICAgJ2d2YXInLFxuICAgICdoc3R5JyxcbiAgICAnanVzdCcsXG4gICAgJ2xjYXInLFxuICAgICdtb3J0JyxcbiAgICAnbW9yeCcsXG4gICAgJ29wYmQnLFxuICAgICdwcm9wJyxcbiAgICAndHJhaycsXG4gICAgJ1phcGYnLFxuICAgICdTaWxmJyxcbiAgICAnR2xhdCcsXG4gICAgJ0dsb2MnLFxuICAgICdGZWF0JyxcbiAgICAnU2lsbCdcbl07XG5sZXQgJGMyOGVjN2JiYjNiOGRlM2EkdmFyJFdPRkYyRGlyZWN0b3J5RW50cnkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZmxhZ3M6ICQ1MlpJZiR1aW50OCxcbiAgICBjdXN0b21UYWc6IG5ldyAkNTJaSWYkT3B0aW9uYWwobmV3ICQ1MlpJZiRTdHJpbmcoNCksICh0KT0+KHQuZmxhZ3MgJiAweDNmKSA9PT0gMHgzZiksXG4gICAgdGFnOiAodCk9PnQuY3VzdG9tVGFnIHx8ICRjMjhlYzdiYmIzYjhkZTNhJHZhciRrbm93blRhZ3NbdC5mbGFncyAmIDB4M2ZdLFxuICAgIGxlbmd0aDogJGMyOGVjN2JiYjNiOGRlM2EkdmFyJEJhc2UxMjgsXG4gICAgdHJhbnNmb3JtVmVyc2lvbjogKHQpPT50LmZsYWdzID4+PiA2ICYgMHgwMyxcbiAgICB0cmFuc2Zvcm1lZDogKHQpPT50LnRhZyA9PT0gJ2dseWYnIHx8IHQudGFnID09PSAnbG9jYScgPyB0LnRyYW5zZm9ybVZlcnNpb24gPT09IDAgOiB0LnRyYW5zZm9ybVZlcnNpb24gIT09IDAsXG4gICAgdHJhbnNmb3JtTGVuZ3RoOiBuZXcgJDUyWklmJE9wdGlvbmFsKCRjMjhlYzdiYmIzYjhkZTNhJHZhciRCYXNlMTI4LCAodCk9PnQudHJhbnNmb3JtZWQpXG59KTtcbmxldCAkYzI4ZWM3YmJiM2I4ZGUzYSR2YXIkV09GRjJEaXJlY3RvcnkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdGFnOiBuZXcgJDUyWklmJFN0cmluZyg0KSxcbiAgICBmbGF2b3I6ICQ1MlpJZiR1aW50MzIsXG4gICAgbGVuZ3RoOiAkNTJaSWYkdWludDMyLFxuICAgIG51bVRhYmxlczogJDUyWklmJHVpbnQxNixcbiAgICByZXNlcnZlZDogbmV3ICQ1MlpJZiRSZXNlcnZlZCgkNTJaSWYkdWludDE2KSxcbiAgICB0b3RhbFNmbnRTaXplOiAkNTJaSWYkdWludDMyLFxuICAgIHRvdGFsQ29tcHJlc3NlZFNpemU6ICQ1MlpJZiR1aW50MzIsXG4gICAgbWFqb3JWZXJzaW9uOiAkNTJaSWYkdWludDE2LFxuICAgIG1pbm9yVmVyc2lvbjogJDUyWklmJHVpbnQxNixcbiAgICBtZXRhT2Zmc2V0OiAkNTJaSWYkdWludDMyLFxuICAgIG1ldGFMZW5ndGg6ICQ1MlpJZiR1aW50MzIsXG4gICAgbWV0YU9yaWdMZW5ndGg6ICQ1MlpJZiR1aW50MzIsXG4gICAgcHJpdk9mZnNldDogJDUyWklmJHVpbnQzMixcbiAgICBwcml2TGVuZ3RoOiAkNTJaSWYkdWludDMyLFxuICAgIHRhYmxlczogbmV3ICQ1MlpJZiRBcnJheSgkYzI4ZWM3YmJiM2I4ZGUzYSR2YXIkV09GRjJEaXJlY3RvcnlFbnRyeSwgJ251bVRhYmxlcycpXG59KTtcbiRjMjhlYzdiYmIzYjhkZTNhJHZhciRXT0ZGMkRpcmVjdG9yeS5wcm9jZXNzID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IHRhYmxlcyA9IHt9O1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLnRhYmxlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGxldCB0YWJsZSA9IHRoaXMudGFibGVzW2ldO1xuICAgICAgICB0YWJsZXNbdGFibGUudGFnXSA9IHRhYmxlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50YWJsZXMgPSB0YWJsZXM7XG59O1xudmFyICRjMjhlYzdiYmIzYjhkZTNhJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSAkYzI4ZWM3YmJiM2I4ZGUzYSR2YXIkV09GRjJEaXJlY3Rvcnk7XG5cblxuXG5jbGFzcyAkMjFlZTIxOGY4NGFjN2YzMiRleHBvcnQkMmUyYmNkODczOWFlMDM5IGV4dGVuZHMgKDAsICQ0YzE3MDlkZWU1MjhlYTc2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpIHtcbiAgICBzdGF0aWMgcHJvYmUoYnVmZmVyKSB7XG4gICAgICAgIHJldHVybiAoMCwgJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JDNkMjhjMTk5NmNlZDFmMTQpLmRlY29kZShidWZmZXIuc2xpY2UoMCwgNCkpID09PSAnd09GMic7XG4gICAgfVxuICAgIF9kZWNvZGVEaXJlY3RvcnkoKSB7XG4gICAgICAgIHRoaXMuZGlyZWN0b3J5ID0gKDAsICRjMjhlYzdiYmIzYjhkZTNhJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLmRlY29kZSh0aGlzLnN0cmVhbSk7XG4gICAgICAgIHRoaXMuX2RhdGFQb3MgPSB0aGlzLnN0cmVhbS5wb3M7XG4gICAgfVxuICAgIF9kZWNvbXByZXNzKCkge1xuICAgICAgICAvLyBkZWNvbXByZXNzIGRhdGEgYW5kIHNldHVwIHRhYmxlIG9mZnNldHMgaWYgd2UgaGF2ZW4ndCBhbHJlYWR5XG4gICAgICAgIGlmICghdGhpcy5fZGVjb21wcmVzc2VkKSB7XG4gICAgICAgICAgICB0aGlzLnN0cmVhbS5wb3MgPSB0aGlzLl9kYXRhUG9zO1xuICAgICAgICAgICAgbGV0IGJ1ZmZlciA9IHRoaXMuc3RyZWFtLnJlYWRCdWZmZXIodGhpcy5kaXJlY3RvcnkudG90YWxDb21wcmVzc2VkU2l6ZSk7XG4gICAgICAgICAgICBsZXQgZGVjb21wcmVzc2VkU2l6ZSA9IDA7XG4gICAgICAgICAgICBmb3IobGV0IHRhZyBpbiB0aGlzLmRpcmVjdG9yeS50YWJsZXMpe1xuICAgICAgICAgICAgICAgIGxldCBlbnRyeSA9IHRoaXMuZGlyZWN0b3J5LnRhYmxlc1t0YWddO1xuICAgICAgICAgICAgICAgIGVudHJ5Lm9mZnNldCA9IGRlY29tcHJlc3NlZFNpemU7XG4gICAgICAgICAgICAgICAgZGVjb21wcmVzc2VkU2l6ZSArPSBlbnRyeS50cmFuc2Zvcm1MZW5ndGggIT0gbnVsbCA/IGVudHJ5LnRyYW5zZm9ybUxlbmd0aCA6IGVudHJ5Lmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBkZWNvbXByZXNzZWQgPSAoMCwgJDUyWklmJGJyb3RsaWRlY29tcHJlc3NqcykoYnVmZmVyLCBkZWNvbXByZXNzZWRTaXplKTtcbiAgICAgICAgICAgIGlmICghZGVjb21wcmVzc2VkKSB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIGRlY29kaW5nIGNvbXByZXNzZWQgZGF0YSBpbiBXT0ZGMicpO1xuICAgICAgICAgICAgdGhpcy5zdHJlYW0gPSBuZXcgJDUyWklmJERlY29kZVN0cmVhbShkZWNvbXByZXNzZWQpO1xuICAgICAgICAgICAgdGhpcy5fZGVjb21wcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfZGVjb2RlVGFibGUodGFibGUpIHtcbiAgICAgICAgdGhpcy5fZGVjb21wcmVzcygpO1xuICAgICAgICByZXR1cm4gc3VwZXIuX2RlY29kZVRhYmxlKHRhYmxlKTtcbiAgICB9XG4gICAgLy8gT3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gZ2V0IGEgZ2x5cGggYW5kIHJldHVybiBvdXJcbiAgICAvLyBjdXN0b20gc3ViY2xhc3MgaWYgdGhlcmUgaXMgYSBnbHlmIHRhYmxlLlxuICAgIF9nZXRCYXNlR2x5cGgoZ2x5cGgsIGNoYXJhY3RlcnMgPSBbXSkge1xuICAgICAgICBpZiAoIXRoaXMuX2dseXBoc1tnbHlwaF0pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdG9yeS50YWJsZXMuZ2x5ZiAmJiB0aGlzLmRpcmVjdG9yeS50YWJsZXMuZ2x5Zi50cmFuc2Zvcm1lZCkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fdHJhbnNmb3JtZWRHbHlwaHMpIHRoaXMuX3RyYW5zZm9ybUdseWZUYWJsZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nbHlwaHNbZ2x5cGhdID0gbmV3ICgwLCAkODA0NjE5MGM5ZjFhZDE5ZSRleHBvcnQkMmUyYmNkODczOWFlMDM5KShnbHlwaCwgY2hhcmFjdGVycywgdGhpcyk7XG4gICAgICAgICAgICB9IGVsc2UgcmV0dXJuIHN1cGVyLl9nZXRCYXNlR2x5cGgoZ2x5cGgsIGNoYXJhY3RlcnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF90cmFuc2Zvcm1HbHlmVGFibGUoKSB7XG4gICAgICAgIHRoaXMuX2RlY29tcHJlc3MoKTtcbiAgICAgICAgdGhpcy5zdHJlYW0ucG9zID0gdGhpcy5kaXJlY3RvcnkudGFibGVzLmdseWYub2Zmc2V0O1xuICAgICAgICBsZXQgdGFibGUgPSAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkR2x5ZlRhYmxlLmRlY29kZSh0aGlzLnN0cmVhbSk7XG4gICAgICAgIGxldCBnbHlwaHMgPSBbXTtcbiAgICAgICAgZm9yKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGFibGUubnVtR2x5cGhzOyBpbmRleCsrKXtcbiAgICAgICAgICAgIGxldCBnbHlwaCA9IHt9O1xuICAgICAgICAgICAgbGV0IG5Db250b3VycyA9IHRhYmxlLm5Db250b3Vycy5yZWFkSW50MTZCRSgpO1xuICAgICAgICAgICAgZ2x5cGgubnVtYmVyT2ZDb250b3VycyA9IG5Db250b3VycztcbiAgICAgICAgICAgIGlmIChuQ29udG91cnMgPiAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5Qb2ludHMgPSBbXTtcbiAgICAgICAgICAgICAgICBsZXQgdG90YWxQb2ludHMgPSAwO1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBuQ29udG91cnM7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIGxldCByID0gJDIxZWUyMThmODRhYzdmMzIkdmFyJHJlYWQyNTVVSW50MTYodGFibGUublBvaW50cyk7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRzICs9IHI7XG4gICAgICAgICAgICAgICAgICAgIG5Qb2ludHMucHVzaCh0b3RhbFBvaW50cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGdseXBoLnBvaW50cyA9ICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRkZWNvZGVUcmlwbGV0KHRhYmxlLmZsYWdzLCB0YWJsZS5nbHlwaHMsIHRvdGFsUG9pbnRzKTtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbkNvbnRvdXJzOyBpKyspZ2x5cGgucG9pbnRzW25Qb2ludHNbaV0gLSAxXS5lbmRDb250b3VyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgaW5zdHJ1Y3Rpb25TaXplID0gJDIxZWUyMThmODRhYzdmMzIkdmFyJHJlYWQyNTVVSW50MTYodGFibGUuZ2x5cGhzKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobkNvbnRvdXJzIDwgMCkge1xuICAgICAgICAgICAgICAgIGxldCBoYXZlSW5zdHJ1Y3Rpb25zID0gKDAsICQ2OWFhYzE2MDI5OTY4NjkyJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLnByb3RvdHlwZS5fZGVjb2RlQ29tcG9zaXRlLmNhbGwoe1xuICAgICAgICAgICAgICAgICAgICBfZm9udDogdGhpc1xuICAgICAgICAgICAgICAgIH0sIGdseXBoLCB0YWJsZS5jb21wb3NpdGVzKTtcbiAgICAgICAgICAgICAgICBpZiAoaGF2ZUluc3RydWN0aW9ucykgdmFyIGluc3RydWN0aW9uU2l6ZSA9ICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRyZWFkMjU1VUludDE2KHRhYmxlLmdseXBocyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnbHlwaHMucHVzaChnbHlwaCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdHJhbnNmb3JtZWRHbHlwaHMgPSBnbHlwaHM7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3Mpe1xuICAgICAgICBzdXBlciguLi5hcmdzKTtcbiAgICAgICAgKDAsICQ1MlpJZiRfKSh0aGlzLCBcInR5cGVcIiwgJ1dPRkYyJyk7XG4gICAgfVxufVxuLy8gU3BlY2lhbCBjbGFzcyB0aGF0IGFjY2VwdHMgYSBsZW5ndGggYW5kIHJldHVybnMgYSBzdWItc3RyZWFtIGZvciB0aGF0IGRhdGFcbmNsYXNzICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRTdWJzdHJlYW0ge1xuICAgIGRlY29kZShzdHJlYW0sIHBhcmVudCkge1xuICAgICAgICByZXR1cm4gbmV3ICQ1MlpJZiREZWNvZGVTdHJlYW0odGhpcy5fYnVmLmRlY29kZShzdHJlYW0sIHBhcmVudCkpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihsZW5ndGgpe1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgdGhpcy5fYnVmID0gbmV3ICQ1MlpJZiRCdWZmZXIobGVuZ3RoKTtcbiAgICB9XG59XG4vLyBUaGlzIHN0cnVjdCByZXByZXNlbnRzIHRoZSBlbnRpcmUgZ2x5ZiB0YWJsZVxubGV0ICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRHbHlmVGFibGUgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJHVpbnQzMixcbiAgICBudW1HbHlwaHM6ICQ1MlpJZiR1aW50MTYsXG4gICAgaW5kZXhGb3JtYXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgbkNvbnRvdXJTdHJlYW1TaXplOiAkNTJaSWYkdWludDMyLFxuICAgIG5Qb2ludHNTdHJlYW1TaXplOiAkNTJaSWYkdWludDMyLFxuICAgIGZsYWdTdHJlYW1TaXplOiAkNTJaSWYkdWludDMyLFxuICAgIGdseXBoU3RyZWFtU2l6ZTogJDUyWklmJHVpbnQzMixcbiAgICBjb21wb3NpdGVTdHJlYW1TaXplOiAkNTJaSWYkdWludDMyLFxuICAgIGJib3hTdHJlYW1TaXplOiAkNTJaSWYkdWludDMyLFxuICAgIGluc3RydWN0aW9uU3RyZWFtU2l6ZTogJDUyWklmJHVpbnQzMixcbiAgICBuQ29udG91cnM6IG5ldyAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkU3Vic3RyZWFtKCduQ29udG91clN0cmVhbVNpemUnKSxcbiAgICBuUG9pbnRzOiBuZXcgJDIxZWUyMThmODRhYzdmMzIkdmFyJFN1YnN0cmVhbSgnblBvaW50c1N0cmVhbVNpemUnKSxcbiAgICBmbGFnczogbmV3ICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRTdWJzdHJlYW0oJ2ZsYWdTdHJlYW1TaXplJyksXG4gICAgZ2x5cGhzOiBuZXcgJDIxZWUyMThmODRhYzdmMzIkdmFyJFN1YnN0cmVhbSgnZ2x5cGhTdHJlYW1TaXplJyksXG4gICAgY29tcG9zaXRlczogbmV3ICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRTdWJzdHJlYW0oJ2NvbXBvc2l0ZVN0cmVhbVNpemUnKSxcbiAgICBiYm94ZXM6IG5ldyAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkU3Vic3RyZWFtKCdiYm94U3RyZWFtU2l6ZScpLFxuICAgIGluc3RydWN0aW9uczogbmV3ICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRTdWJzdHJlYW0oJ2luc3RydWN0aW9uU3RyZWFtU2l6ZScpXG59KTtcbmNvbnN0ICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRXT1JEX0NPREUgPSAyNTM7XG5jb25zdCAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkT05FX01PUkVfQllURV9DT0RFMiA9IDI1NDtcbmNvbnN0ICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRPTkVfTU9SRV9CWVRFX0NPREUxID0gMjU1O1xuY29uc3QgJDIxZWUyMThmODRhYzdmMzIkdmFyJExPV0VTVF9VX0NPREUgPSAyNTM7XG5mdW5jdGlvbiAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkcmVhZDI1NVVJbnQxNihzdHJlYW0pIHtcbiAgICBsZXQgY29kZSA9IHN0cmVhbS5yZWFkVUludDgoKTtcbiAgICBpZiAoY29kZSA9PT0gJDIxZWUyMThmODRhYzdmMzIkdmFyJFdPUkRfQ09ERSkgcmV0dXJuIHN0cmVhbS5yZWFkVUludDE2QkUoKTtcbiAgICBpZiAoY29kZSA9PT0gJDIxZWUyMThmODRhYzdmMzIkdmFyJE9ORV9NT1JFX0JZVEVfQ09ERTEpIHJldHVybiBzdHJlYW0ucmVhZFVJbnQ4KCkgKyAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkTE9XRVNUX1VfQ09ERTtcbiAgICBpZiAoY29kZSA9PT0gJDIxZWUyMThmODRhYzdmMzIkdmFyJE9ORV9NT1JFX0JZVEVfQ09ERTIpIHJldHVybiBzdHJlYW0ucmVhZFVJbnQ4KCkgKyAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkTE9XRVNUX1VfQ09ERSAqIDI7XG4gICAgcmV0dXJuIGNvZGU7XG59XG5mdW5jdGlvbiAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkd2l0aFNpZ24oZmxhZywgYmFzZXZhbCkge1xuICAgIHJldHVybiBmbGFnICYgMSA/IGJhc2V2YWwgOiAtYmFzZXZhbDtcbn1cbmZ1bmN0aW9uICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRkZWNvZGVUcmlwbGV0KGZsYWdzLCBnbHlwaHMsIG5Qb2ludHMpIHtcbiAgICBsZXQgeTtcbiAgICBsZXQgeCA9IHkgPSAwO1xuICAgIGxldCByZXMgPSBbXTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgblBvaW50czsgaSsrKXtcbiAgICAgICAgbGV0IGR4ID0gMCwgZHkgPSAwO1xuICAgICAgICBsZXQgZmxhZyA9IGZsYWdzLnJlYWRVSW50OCgpO1xuICAgICAgICBsZXQgb25DdXJ2ZSA9ICEoZmxhZyA+PiA3KTtcbiAgICAgICAgZmxhZyAmPSAweDdmO1xuICAgICAgICBpZiAoZmxhZyA8IDEwKSB7XG4gICAgICAgICAgICBkeCA9IDA7XG4gICAgICAgICAgICBkeSA9ICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciR3aXRoU2lnbihmbGFnLCAoKGZsYWcgJiAxNCkgPDwgNykgKyBnbHlwaHMucmVhZFVJbnQ4KCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGZsYWcgPCAyMCkge1xuICAgICAgICAgICAgZHggPSAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkd2l0aFNpZ24oZmxhZywgKChmbGFnIC0gMTAgJiAxNCkgPDwgNykgKyBnbHlwaHMucmVhZFVJbnQ4KCkpO1xuICAgICAgICAgICAgZHkgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGZsYWcgPCA4NCkge1xuICAgICAgICAgICAgdmFyIGIwID0gZmxhZyAtIDIwO1xuICAgICAgICAgICAgdmFyIGIxID0gZ2x5cGhzLnJlYWRVSW50OCgpO1xuICAgICAgICAgICAgZHggPSAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkd2l0aFNpZ24oZmxhZywgMSArIChiMCAmIDB4MzApICsgKGIxID4+IDQpKTtcbiAgICAgICAgICAgIGR5ID0gJDIxZWUyMThmODRhYzdmMzIkdmFyJHdpdGhTaWduKGZsYWcgPj4gMSwgMSArICgoYjAgJiAweDBjKSA8PCAyKSArIChiMSAmIDB4MGYpKTtcbiAgICAgICAgfSBlbHNlIGlmIChmbGFnIDwgMTIwKSB7XG4gICAgICAgICAgICB2YXIgYjAgPSBmbGFnIC0gODQ7XG4gICAgICAgICAgICBkeCA9ICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciR3aXRoU2lnbihmbGFnLCAxICsgKGIwIC8gMTIgPDwgOCkgKyBnbHlwaHMucmVhZFVJbnQ4KCkpO1xuICAgICAgICAgICAgZHkgPSAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkd2l0aFNpZ24oZmxhZyA+PiAxLCAxICsgKGIwICUgMTIgPj4gMiA8PCA4KSArIGdseXBocy5yZWFkVUludDgoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZmxhZyA8IDEyNCkge1xuICAgICAgICAgICAgdmFyIGIxID0gZ2x5cGhzLnJlYWRVSW50OCgpO1xuICAgICAgICAgICAgbGV0IGIyID0gZ2x5cGhzLnJlYWRVSW50OCgpO1xuICAgICAgICAgICAgZHggPSAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkd2l0aFNpZ24oZmxhZywgKGIxIDw8IDQpICsgKGIyID4+IDQpKTtcbiAgICAgICAgICAgIGR5ID0gJDIxZWUyMThmODRhYzdmMzIkdmFyJHdpdGhTaWduKGZsYWcgPj4gMSwgKChiMiAmIDB4MGYpIDw8IDgpICsgZ2x5cGhzLnJlYWRVSW50OCgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGR4ID0gJDIxZWUyMThmODRhYzdmMzIkdmFyJHdpdGhTaWduKGZsYWcsIGdseXBocy5yZWFkVUludDE2QkUoKSk7XG4gICAgICAgICAgICBkeSA9ICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciR3aXRoU2lnbihmbGFnID4+IDEsIGdseXBocy5yZWFkVUludDE2QkUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgeCArPSBkeDtcbiAgICAgICAgeSArPSBkeTtcbiAgICAgICAgcmVzLnB1c2gobmV3ICgwLCAkNjlhYWMxNjAyOTk2ODY5MiRleHBvcnQkYmFmMjYxNDZhNDE0ZjI0YSkob25DdXJ2ZSwgZmFsc2UsIHgsIHkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuXG5cblxuXG5cblxuXG5sZXQgJGNkNTg1M2E1NmM2OGZlYzckdmFyJFRUQ0hlYWRlciA9IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KCQ1MlpJZiR1aW50MzIsIHtcbiAgICAweDAwMDEwMDAwOiB7XG4gICAgICAgIG51bUZvbnRzOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBvZmZzZXRzOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MzIsICdudW1Gb250cycpXG4gICAgfSxcbiAgICAweDAwMDIwMDAwOiB7XG4gICAgICAgIG51bUZvbnRzOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBvZmZzZXRzOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MzIsICdudW1Gb250cycpLFxuICAgICAgICBkc2lnVGFnOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBkc2lnTGVuZ3RoOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBkc2lnT2Zmc2V0OiAkNTJaSWYkdWludDMyXG4gICAgfVxufSk7XG5jbGFzcyAkY2Q1ODUzYTU2YzY4ZmVjNyRleHBvcnQkMmUyYmNkODczOWFlMDM5IHtcbiAgICBzdGF0aWMgcHJvYmUoYnVmZmVyKSB7XG4gICAgICAgIHJldHVybiAoMCwgJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JDNkMjhjMTk5NmNlZDFmMTQpLmRlY29kZShidWZmZXIuc2xpY2UoMCwgNCkpID09PSAndHRjZic7XG4gICAgfVxuICAgIGdldEZvbnQobmFtZSkge1xuICAgICAgICBmb3IgKGxldCBvZmZzZXQgb2YgdGhpcy5oZWFkZXIub2Zmc2V0cyl7XG4gICAgICAgICAgICBsZXQgc3RyZWFtID0gbmV3ICQ1MlpJZiREZWNvZGVTdHJlYW0odGhpcy5zdHJlYW0uYnVmZmVyKTtcbiAgICAgICAgICAgIHN0cmVhbS5wb3MgPSBvZmZzZXQ7XG4gICAgICAgICAgICBsZXQgZm9udCA9IG5ldyAoMCwgJDRjMTcwOWRlZTUyOGVhNzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoc3RyZWFtKTtcbiAgICAgICAgICAgIGlmIChmb250LnBvc3RzY3JpcHROYW1lID09PSBuYW1lIHx8IGZvbnQucG9zdHNjcmlwdE5hbWUgaW5zdGFuY2VvZiBVaW50OEFycmF5ICYmIG5hbWUgaW5zdGFuY2VvZiBVaW50OEFycmF5ICYmIGZvbnQucG9zdHNjcmlwdE5hbWUuZXZlcnkoKHYsIGkpPT5uYW1lW2ldID09PSB2KSkgcmV0dXJuIGZvbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGdldCBmb250cygpIHtcbiAgICAgICAgbGV0IGZvbnRzID0gW107XG4gICAgICAgIGZvciAobGV0IG9mZnNldCBvZiB0aGlzLmhlYWRlci5vZmZzZXRzKXtcbiAgICAgICAgICAgIGxldCBzdHJlYW0gPSBuZXcgJDUyWklmJERlY29kZVN0cmVhbSh0aGlzLnN0cmVhbS5idWZmZXIpO1xuICAgICAgICAgICAgc3RyZWFtLnBvcyA9IG9mZnNldDtcbiAgICAgICAgICAgIGZvbnRzLnB1c2gobmV3ICgwLCAkNGMxNzA5ZGVlNTI4ZWE3NiRleHBvcnQkMmUyYmNkODczOWFlMDM5KShzdHJlYW0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9udHM7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHN0cmVhbSl7XG4gICAgICAgICgwLCAkNTJaSWYkXykodGhpcywgXCJ0eXBlXCIsICdUVEMnKTtcbiAgICAgICAgdGhpcy5zdHJlYW0gPSBzdHJlYW07XG4gICAgICAgIGlmIChzdHJlYW0ucmVhZFN0cmluZyg0KSAhPT0gJ3R0Y2YnKSB0aHJvdyBuZXcgRXJyb3IoJ05vdCBhIFRydWVUeXBlIGNvbGxlY3Rpb24nKTtcbiAgICAgICAgdGhpcy5oZWFkZXIgPSAkY2Q1ODUzYTU2YzY4ZmVjNyR2YXIkVFRDSGVhZGVyLmRlY29kZShzdHJlYW0pO1xuICAgIH1cbn1cblxuXG5cblxuXG5sZXQgJDA1ZjQ5ZjkzMDE4NjE0NGUkdmFyJERGb250TmFtZSA9IG5ldyAkNTJaSWYkU3RyaW5nKCQ1MlpJZiR1aW50OCk7XG5sZXQgJDA1ZjQ5ZjkzMDE4NjE0NGUkdmFyJERGb250RGF0YSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBsZW46ICQ1MlpJZiR1aW50MzIsXG4gICAgYnVmOiBuZXcgJDUyWklmJEJ1ZmZlcignbGVuJylcbn0pO1xubGV0ICQwNWY0OWY5MzAxODYxNDRlJHZhciRSZWYgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgaWQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgbmFtZU9mZnNldDogJDUyWklmJGludDE2LFxuICAgIGF0dHI6ICQ1MlpJZiR1aW50OCxcbiAgICBkYXRhT2Zmc2V0OiAkNTJaSWYkdWludDI0LFxuICAgIGhhbmRsZTogJDUyWklmJHVpbnQzMlxufSk7XG5sZXQgJDA1ZjQ5ZjkzMDE4NjE0NGUkdmFyJFR5cGUgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgbmFtZTogbmV3ICQ1MlpJZiRTdHJpbmcoNCksXG4gICAgbWF4VHlwZUluZGV4OiAkNTJaSWYkdWludDE2LFxuICAgIHJlZkxpc3Q6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCBuZXcgJDUyWklmJEFycmF5KCQwNWY0OWY5MzAxODYxNDRlJHZhciRSZWYsICh0KT0+dC5tYXhUeXBlSW5kZXggKyAxKSwge1xuICAgICAgICB0eXBlOiAncGFyZW50J1xuICAgIH0pXG59KTtcbmxldCAkMDVmNDlmOTMwMTg2MTQ0ZSR2YXIkVHlwZUxpc3QgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgbGVuZ3RoOiAkNTJaSWYkdWludDE2LFxuICAgIHR5cGVzOiBuZXcgJDUyWklmJEFycmF5KCQwNWY0OWY5MzAxODYxNDRlJHZhciRUeXBlLCAodCk9PnQubGVuZ3RoICsgMSlcbn0pO1xubGV0ICQwNWY0OWY5MzAxODYxNDRlJHZhciRERm9udE1hcCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICByZXNlcnZlZDogbmV3ICQ1MlpJZiRSZXNlcnZlZCgkNTJaSWYkdWludDgsIDI0KSxcbiAgICB0eXBlTGlzdDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQwNWY0OWY5MzAxODYxNDRlJHZhciRUeXBlTGlzdCksXG4gICAgbmFtZUxpc3RPZmZzZXQ6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAndm9pZCcpXG59KTtcbmxldCAkMDVmNDlmOTMwMTg2MTQ0ZSR2YXIkREZvbnRIZWFkZXIgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZGF0YU9mZnNldDogJDUyWklmJHVpbnQzMixcbiAgICBtYXA6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCAkMDVmNDlmOTMwMTg2MTQ0ZSR2YXIkREZvbnRNYXApLFxuICAgIGRhdGFMZW5ndGg6ICQ1MlpJZiR1aW50MzIsXG4gICAgbWFwTGVuZ3RoOiAkNTJaSWYkdWludDMyXG59KTtcbmNsYXNzICQwNWY0OWY5MzAxODYxNDRlJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIHN0YXRpYyBwcm9iZShidWZmZXIpIHtcbiAgICAgICAgbGV0IHN0cmVhbSA9IG5ldyAkNTJaSWYkRGVjb2RlU3RyZWFtKGJ1ZmZlcik7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgaGVhZGVyID0gJDA1ZjQ5ZjkzMDE4NjE0NGUkdmFyJERGb250SGVhZGVyLmRlY29kZShzdHJlYW0pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgdHlwZSBvZiBoZWFkZXIubWFwLnR5cGVMaXN0LnR5cGVzKXtcbiAgICAgICAgICAgIGlmICh0eXBlLm5hbWUgPT09ICdzZm50JykgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBnZXRGb250KG5hbWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLnNmbnQpIHJldHVybiBudWxsO1xuICAgICAgICBmb3IgKGxldCByZWYgb2YgdGhpcy5zZm50LnJlZkxpc3Qpe1xuICAgICAgICAgICAgbGV0IHBvcyA9IHRoaXMuaGVhZGVyLmRhdGFPZmZzZXQgKyByZWYuZGF0YU9mZnNldCArIDQ7XG4gICAgICAgICAgICBsZXQgc3RyZWFtID0gbmV3ICQ1MlpJZiREZWNvZGVTdHJlYW0odGhpcy5zdHJlYW0uYnVmZmVyLnNsaWNlKHBvcykpO1xuICAgICAgICAgICAgbGV0IGZvbnQgPSBuZXcgKDAsICQ0YzE3MDlkZWU1MjhlYTc2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKHN0cmVhbSk7XG4gICAgICAgICAgICBpZiAoZm9udC5wb3N0c2NyaXB0TmFtZSA9PT0gbmFtZSB8fCBmb250LnBvc3RzY3JpcHROYW1lIGluc3RhbmNlb2YgVWludDhBcnJheSAmJiBuYW1lIGluc3RhbmNlb2YgVWludDhBcnJheSAmJiBmb250LnBvc3RzY3JpcHROYW1lLmV2ZXJ5KCh2LCBpKT0+bmFtZVtpXSA9PT0gdikpIHJldHVybiBmb250O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBnZXQgZm9udHMoKSB7XG4gICAgICAgIGxldCBmb250cyA9IFtdO1xuICAgICAgICBmb3IgKGxldCByZWYgb2YgdGhpcy5zZm50LnJlZkxpc3Qpe1xuICAgICAgICAgICAgbGV0IHBvcyA9IHRoaXMuaGVhZGVyLmRhdGFPZmZzZXQgKyByZWYuZGF0YU9mZnNldCArIDQ7XG4gICAgICAgICAgICBsZXQgc3RyZWFtID0gbmV3ICQ1MlpJZiREZWNvZGVTdHJlYW0odGhpcy5zdHJlYW0uYnVmZmVyLnNsaWNlKHBvcykpO1xuICAgICAgICAgICAgZm9udHMucHVzaChuZXcgKDAsICQ0YzE3MDlkZWU1MjhlYTc2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKHN0cmVhbSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb250cztcbiAgICB9XG4gICAgY29uc3RydWN0b3Ioc3RyZWFtKXtcbiAgICAgICAgKDAsICQ1MlpJZiRfKSh0aGlzLCBcInR5cGVcIiwgJ0RGb250Jyk7XG4gICAgICAgIHRoaXMuc3RyZWFtID0gc3RyZWFtO1xuICAgICAgICB0aGlzLmhlYWRlciA9ICQwNWY0OWY5MzAxODYxNDRlJHZhciRERm9udEhlYWRlci5kZWNvZGUodGhpcy5zdHJlYW0pO1xuICAgICAgICBmb3IgKGxldCB0eXBlIG9mIHRoaXMuaGVhZGVyLm1hcC50eXBlTGlzdC50eXBlcyl7XG4gICAgICAgICAgICBmb3IgKGxldCByZWYgb2YgdHlwZS5yZWZMaXN0KWlmIChyZWYubmFtZU9mZnNldCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdHJlYW0ucG9zID0gcmVmLm5hbWVPZmZzZXQgKyB0aGlzLmhlYWRlci5tYXAubmFtZUxpc3RPZmZzZXQ7XG4gICAgICAgICAgICAgICAgcmVmLm5hbWUgPSAkMDVmNDlmOTMwMTg2MTQ0ZSR2YXIkREZvbnROYW1lLmRlY29kZSh0aGlzLnN0cmVhbSk7XG4gICAgICAgICAgICB9IGVsc2UgcmVmLm5hbWUgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHR5cGUubmFtZSA9PT0gJ3NmbnQnKSB0aGlzLnNmbnQgPSB0eXBlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbi8vIFJlZ2lzdGVyIGZvbnQgZm9ybWF0c1xuKDAsICRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCQzNmIyZjI0ZTk3ZDQzYmUpKCgwLCAkNGMxNzA5ZGVlNTI4ZWE3NiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSk7XG4oMCwgJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0JDM2YjJmMjRlOTdkNDNiZSkoKDAsICQ3NjA3ODUyMTRiOWZjNTJjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKTtcbigwLCAkZDYzNmJjNzk4ZTcxNzhkYiRleHBvcnQkMzZiMmYyNGU5N2Q0M2JlKSgoMCwgJDIxZWUyMThmODRhYzdmMzIkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkpO1xuKDAsICRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCQzNmIyZjI0ZTk3ZDQzYmUpKCgwLCAkY2Q1ODUzYTU2YzY4ZmVjNyRleHBvcnQkMmUyYmNkODczOWFlMDM5KSk7XG4oMCwgJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0JDM2YjJmMjRlOTdkNDNiZSkoKDAsICQwNWY0OWY5MzAxODYxNDRlJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKTtcblxuXG5leHBvcnQgeyRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCRiZDVjNWQ4YjhkY2FmZDc4IGFzIGxvZ0Vycm9ycywgJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0JDM2YjJmMjRlOTdkNDNiZSBhcyByZWdpc3RlckZvcm1hdCwgJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0JDE4NTgwMmZkNjk0ZWUxZjUgYXMgY3JlYXRlLCAkZDYzNmJjNzk4ZTcxNzhkYiRleHBvcnQkNDI5NDA4OThkZjgxOTk0MCBhcyBkZWZhdWx0TGFuZ3VhZ2UsICRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCQ1MTU3ZTc3ODBkNDRjYzM2IGFzIHNldERlZmF1bHRMYW5ndWFnZSwgJGI0MjJiMWUwMTNjZDYwMTAkZXhwb3J0JGZhNTQ5OWVkYjFhYjQxNGEgYXMgb3BlblN5bmMsICRiNDIyYjFlMDEzY2Q2MDEwJGV4cG9ydCQzY2U2OTQ5ZjIwY2VhNzY1IGFzIG9wZW59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fontkit/dist/module.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/fontkit/node_modules/clone/clone.js":
/*!**********************************************************!*\
  !*** ./node_modules/fontkit/node_modules/clone/clone.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("var clone = (function() {\n'use strict';\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nvar nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nvar nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nvar nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      parent.forEach(function(value, key) {\n        var keyChild = _clone(key, depth - 1);\n        var valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      parent.forEach(function(value) {\n        var entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(parent);\n      for (var i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        var symbol = symbols[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      var allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (var i = 0; i < allPropertyNames.length; i++) {\n        var propertyName = allPropertyNames[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif ( true && module.exports) {\n  module.exports = clone;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fontkit/node_modules/clone/clone.js\n");

/***/ })

};
;